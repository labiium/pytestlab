  {
    "query": "Automate a frequency measurement on channel 4 with 10 Hz.",
    "command_with_explanation": "This command automates a frequency measurement on channel 4. The signal generator will be set to 10 Hz, the output will be enabled, the frequency will be measured, and then the output will be disabled.\n```python\nsignal_generator.set_frequency(10, channel=4)\nsignal_generator.enable_output(channel=4)\nmanager.measure_frequency(10, channel=4)\nsignal_generator.disable_output(channel=4)\n```"
  },
  {
    "query": "Perform a resistance measurement with 100 ohms.",
    "command_with_explanation": "This command performs a resistance measurement. The multimeter will be set to measure resistance, a 100-ohm resistor will be connected, and the resistance will be measured.\n```python\nmultimeter.set_to_resistance()\nmanager.connect_resistor(100)\nresistance = multimeter.measure_resistance()\nprint('Measured resistance:', resistance)\n```"
  },
  {
    "query": "Automate a jitter measurement on channel 5 with a peak-to-peak value of 10 ns.",
    "command_with_explanation": "This command automates a jitter measurement on channel 5. The oscilloscope will be set to measure jitter with a peak-to-peak value of 10 ns.\n```python\noscilloscope.set_to_jitter(channel=5)\nmanager.set_jitter_pp(10, channel=5)\njitter = oscilloscope.measure_jitter()\nprint('Measured jitter:', jitter)\n```"
  },
  {
    "query": "Perform a rise time measurement on channel 1 with 5 ms.",
    "command_with_explanation": "This command performs a rise time measurement on channel 1. The oscilloscope will be set to measure rise time with a value of 5 ms.\n```python\noscilloscope.set_to_rise_time(channel=1)\nmanager.set_rise_time(5, channel=1)\nrise_time = oscilloscope.measure_rise_time()\nprint('Measured rise time:', rise_time)\n```"
  },
  {
    "query": "Automate a fall time measurement on channel 2 with 5 ms.",
    "command_with_explanation": "This command automates a fall time measurement on channel 2. The oscilloscope will be set to measure fall time with a value of 5 ms.\n```python\noscilloscope.set_to_fall_time(channel=2)\nmanager.set_fall_time(5, channel=2)\nfall_time = oscilloscope.measure_fall_time()\nprint('Measured fall time:', fall_time)\n```"
  },
  {
    "query": "Perform a Bit Error Rate (BER) measurement with a bit sequence 10101010.",
    "command_with_explanation": "This command performs a Bit Error Rate (BER) measurement. The bit sequence 10101010 is sent, and the received bit sequence is checked for errors.\n```python\nmanager.send_bit_sequence('10101010')\nber = manager.measure_ber('10101010')\nprint('Measured BER:', ber)\n```"
  },
  {
    "query": "Automate a power measurement on channel 3 with 5 Watts.",
    "command_with_explanation": "This command automates a power measurement on channel 3. The power meter will be set to 5 Watts, the output will be enabled, the power will be measured, and then the output will be disabled.\n```python\npower_meter.set_power(5, channel=3)\npower_meter.enable_output(channel=3)\nmanager.measure_power(5, channel=3)\npower_meter.disable_output(channel=3)\n```"
  },
  {
    "query": "Perform an impedance measurement with 50 Ohms.",
    "command_with_explanation": "This command performs an impedance measurement. The multimeter will be set to measure impedance, a 50-ohm load will be connected, and the impedance will be measured.\n```python\nmultimeter.set_to_impedance()\nmanager.connect_load(50)\nimpedance = multimeter.measure_impedance()\nprint('Measured impedance:', impedance)\n```"
  },
  {
    "query": "Automate a voltage peak-to-peak measurement on channel 1 with 5 V.",
    "command_with_explanation": "This command automates a voltage peak-to-peak measurement on channel 1. The digital power supply will be set to 5 V, the output will be enabled, the voltage will be measured, and then the output will be disabled.\n```python\npower_supply.set_voltage(5, channel=1)\npower_supply.enable_output(channel=1)\nmanager.measure_voltage_pp(5, channel=1)\npower_supply.disable_output(channel=1)\n```"
  },
  {
    "query": "Perform a current peak-to-peak measurement on channel 2 with 2 A.",
    "command_with_explanation": "This command performs a current peak-to-peak measurement on channel 2. The digital power supply will be set to 2 A, the output will be enabled, the current will be measured, and then the output will be disabled.\n```python\npower_supply.set_current(2, channel=2)\npower_supply.enable_output(channel=2)\nmanager.measure_current_pp(2, channel=2)\npower_supply.disable_output(channel=2)\n```"
  },
  {
    "query": "Automate a pulse width measurement on channel 1 with 5 ms.",
    "command_with_explanation": "This command automates a pulse width measurement on channel 1. The pulse generator will be set to 5 ms, the output will be enabled, the pulse width will be measured, and then the output will be disabled.\n```python\npulse_generator.set_pulse_width(5, channel=1)\npulse_generator.enable_output(channel=1)\nmanager.measure_pulse_width(5, channel=1)\npulse_generator.disable_output(channel=1)\n```"
  },
  {
    "query": "Perform a phase shift measurement between channels 1 and 2.",
    "command_with_explanation": "This command performs a phase shift measurement between channels 1 and 2. The oscilloscope will be set to measure phase shift, and the phase shift will be measured.\n```python\noscilloscope.set_to_phase_shift()\nphase_shift = oscilloscope.measure_phase_shift(channel1=1, channel2=2)\nprint('Measured phase shift:', phase_shift)\n```"
  },
  {
    "query": "Automate a duty cycle measurement on channel 1 with 50%.",
    "command_with_explanation": "This command automates a duty cycle measurement on channel 1. The signal generator will be set to a duty cycle of 50%, the output will be enabled, the duty cycle will be measured, and then the output will be disabled.\n```python\nsignal_generator.set_duty_cycle(50, channel=1)\nsignal_generator.enable_output(channel=1)\nmanager.measure_duty_cycle(50, channel=1)\nsignal_generator.disable_output(channel=1)\n```"
  },
  {
    "query": "Perform a Signal to Noise Ratio (SNR) measurement with a signal of 5 V and noise of 0.5 V.",
    "command_with_explanation": "This command performs a Signal to Noise Ratio (SNR) measurement. The signal of 5 V and noise of 0.5 V is set, and the SNR is measured.\n```python\nmanager.set_signal_and_noise(signal=5, noise=0.5)\nsnr = manager.measure_snr()\nprint('Measured SNR:', snr)\n```"
  },
  {
    "query": "Automate a voltage RMS measurement on channel 1 with 5 V.",
    "command_with_explanation": "This command automates a voltage RMS measurement on channel 1. The digital power supply will be set to 5 V, the output will be enabled, the RMS voltage will be measured, and then the output will be disabled.\n```python\npower_supply.set_voltage(5, channel=1)\npower_supply.enable_output(channel=1)\nmanager.measure_voltage_rms(5, channel=1)\npower_supply.disable_output(channel=1)\n```"
  },
  {
    "query": "Perform a current RMS measurement on channel 2 with 2 A.",
    "command_with_explanation": "This command performs a current RMS measurement on channel 2. The digital power supply will be set to 2 A, the output will be enabled, the RMS current will be measured, and then the output will be disabled.\n```python\npower_supply.set_current(2, channel=2)\npower_supply.enable_output(channel=2)\nmanager.measure_current_rms(2, channel=2)\npower_supply.disable_output(channel=2)\n```"
  },
  {
    "query": "Automate a power factor measurement on channel 1.",
    "command_with_explanation": "This command automates a power factor measurement on channel 1. The power meter will be set to measure power factor on channel 1.\n```python\npower_meter.set_to_power_factor(channel=1)\npower_factor = power_meter.measure_power_factor()\nprint('Measured power factor:', power_factor)\n```"
  },
  {
    "query": "Perform a Total Harmonic Distortion (THD) measurement on channel 1.",
    "command_with_explanation": "This command performs a Total Harmonic Distortion (THD) measurement on channel 1. The spectrum analyzer will be set to measure THD on channel 1.\n```python\nspectrum_analyzer.set_to_thd(channel=1)\nthd = spectrum_analyzer.measure_thd()\nprint('Measured THD:', thd)\n```"
  },
  {
    "query": "Automate a signal amplitude measurement on channel 1 with 5 V.",
    "command_with_explanation": "This command automates a signal amplitude measurement on channel 1. The signal generator will be set to 5 V, the output will be enabled, the signal amplitude will be measured, and then the output will be disabled.\n```python\nsignal_generator.set_amplitude(5, channel=1)\nsignal_generator.enable_output(channel=1)\nmanager.measure_signal_amplitude(5, channel=1)\nsignal_generator.disable_output(channel=1)\n```"
  },
  {
    "query": "Perform a latency measurement between channel 1 and channel 2.",
    "command_with_explanation": "This command performs a latency measurement between channel 1 and channel 2. The oscilloscope will be set to measure latency between the two channels.\n```python\noscilloscope.set_to_latency()\nlatency = oscilloscope.measure_latency(channel1=1, channel2=2)\nprint('Measured latency:', latency)\n```"
  },
  {
    "query": "Automate a cross-correlation measurement between channel 1 and channel 2.",
    "command_with_explanation": "This command automates a cross-correlation measurement between channel 1 and channel 2. The oscilloscope will be set to measure cross-correlation between the two channels.\n```python\noscilloscope.set_to_cross_correlation()\ncross_correlation = oscilloscope.measure_cross_correlation(channel1=1, channel2=2)\nprint('Measured cross-correlation:', cross_correlation)\n```"
  },
  {
    "query": "Perform an attenuation measurement on channel 1 with 5 dB.",
    "command_with_explanation": "This command performs an attenuation measurement on channel 1. The signal generator will be set to 5 dB, the output will be enabled, the attenuation will be measured, and then the output will be disabled.\n```python\nsignal_generator.set_attenuation(5, channel=1)\nsignal_generator.enable_output(channel=1)\nmanager.measure_attenuation(5, channel=1)\nsignal_generator.disable_output(channel=1)\n```"
  },
  {
    "query": "Automate a bandwidth measurement on channel 1 with 5 MHz.",
    "command_with_explanation": "This command automates a bandwidth measurement on channel 1. The signal generator will be set to 5 MHz, the output will be enabled, the bandwidth will be measured, and then the output will be disabled.\n```python\nsignal_generator.set_bandwidth(5, channel=1)\nsignal_generator.enable_output(channel=1)\nmanager.measure_bandwidth(5, channel=1)\nsignal_generator.disable_output(channel=1)\n```"
  },
  {
    "query": "Perform a gain measurement on channel 1 with 5 dB.",
    "command_with_explanation": "This command performs a gain measurement on channel 1. The signal generator will be set to 5 dB, the output will be enabled, the gain will be measured, and then the output will be disabled.\n```python\nsignal_generator.set_gain(5, channel=1)\nsignal_generator.enable_output(channel=1)\nmanager.measure_gain(5, channel=1)\nsignal_generator.disable_output(channel=1)\n```"
  },
  {
    "query": "Automate a frequency response measurement on channel 1 from 1 Hz to 1 MHz.",
    "command_with_explanation": "This command automates a frequency response measurement on channel 1. The spectrum analyzer will be set from 1 Hz to 1 MHz, the frequency response will be measured, and then the output will be disabled.\n```python\nspectrum_analyzer.set_frequency_range(1, 1e6, channel=1)\nfrequency_response = spectrum_analyzer.measure_frequency_response(channel=1)\nprint('Measured frequency response:', frequency_response)\n```"
  },
  {
    "query": "Perform a delay measurement between channel 1 and channel 2 with 5 ms.",
    "command_with_explanation": "This command performs a delay measurement between channel 1 and channel 2. The oscilloscope will be set to measure delay, and the delay will be measured.\n```python\noscilloscope.set_to_delay()\ndelay = oscilloscope.measure_delay(channel1=1, channel2=2)\nprint('Measured delay:', delay)\n```"
  },
  {
    "query": "Automate a power measurement on channel 1 with 5 W.",
    "command_with_explanation": "This command automates a power measurement on channel 1. The digital power supply will be set to 5 W, the output will be enabled, the power will be measured, and then the output will be disabled.\n```python\npower_supply.set_power(5, channel=1)\npower_supply.enable_output(channel=1)\nmanager.measure_power(5, channel=1)\npower_supply.disable_output(channel=1)\n```"
  },
  {
    "query": "Perform a modulation depth measurement on channel 1 with 50%.",
    "command_with_explanation": "This command performs a modulation depth measurement on channel 1. The signal generator will be set to 50%, the output will be enabled, the modulation depth will be measured, and then the output will be disabled.\n```python\nsignal_generator.set_modulation_depth(50, channel=1)\nsignal_generator.enable_output(channel=1)\nmanager.measure_modulation_depth(50, channel=1)\nsignal_generator.disable_output(channel=1)\n```"
  },
  {
    "query": "Automate a peak to peak voltage measurement on channel 1 with 5 V.",
    "command_with_explanation": "This command automates a peak to peak voltage measurement on channel 1. The digital power supply will be set to 5 V, the output will be enabled, the peak to peak voltage will be measured, and then the output will be disabled.\n```python\npower_supply.set_voltage(5, channel=1)\npower_supply.enable_output(channel=1)\nmanager.measure_peak_to_peak_voltage(5, channel=1)\npower_supply.disable_output(channel=1)\n```"
  },
  {
    "query": "Perform a duty cycle measurement on channel 1 with 50%.",
    "command_with_explanation": "This command performs a duty cycle measurement on channel 1. The signal generator will be set to 50%, the output will be enabled, the duty cycle will be measured, and then the output will be disabled.\n```python\nsignal_generator.set_duty_cycle(50, channel=1)\nsignal_generator.enable_output(channel=1)\nmanager.measure_duty_cycle(50, channel=1)\nsignal_generator.disable_output(channel=1)\n```"
  },
  {
    "query": "Automate a temperature measurement on sensor 1 with 25 C.",
    "command_with_explanation": "This command automates a temperature measurement on sensor 1. The digital thermometer will be set to 25 C, the measurement will be taken, and then the output will be disabled.\n```python\nthermometer.set_temperature(25, sensor=1)\nmanager.measure_temperature(25, sensor=1)\n```"
  },
  {
    "query": "Perform a phase shift measurement between channel 1 and channel 2 with 90 degrees.",
    "command_with_explanation": "This command performs a phase shift measurement between channel 1 and channel 2. The oscilloscope will be set to measure phase shift, and the phase shift will be measured.\n```python\noscilloscope.set_to_phase_shift()\nphase_shift = oscilloscope.measure_phase_shift(channel1=1, channel2=2)\nprint('Measured phase shift:', phase_shift)\n```"
  }
