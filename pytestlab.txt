Import Path: tests.oscilloscope_test
  Class: OscilloscopeTests
    Method: connection
    Docstring: None
    Method: test_upper
    Docstring: None
    Method: test_isupper
    Docstring: None
    Method: test_split
    Docstring: None
  Docstring: None

Import Path: pytestlab.errors
  Class: InstrumentConnectionError
    Method: __init__
    Docstring: None
  Docstring: For SCPI instrument connection errors.

Import Path: pytestlab.errors
  Class: InstrumentCommunicationError
    Method: __init__
    Docstring: None
  Docstring: For SCPI communication errors.

Import Path: pytestlab.errors
  Class: FormulationError
    Method: __init__
    Docstring: None
  Docstring: Error has occuered in a computation

Import Path: pytestlab.errors
  Class: InstrumentConnectionBusy
    Method: __init__
    Docstring: None
  Docstring: The instrument is in use somewhere else

Import Path: pytestlab.errors
  Class: InstrumentParameterError
    Method: __init__
    Docstring: None
  Docstring: Invalid parameters given to instrument.

Import Path: pytestlab.errors
  Class: InstrumentNotFoundError
    Method: __init__
    Docstring: None
  Docstring: For instrument not found errors.

Import Path: pytestlab.errors
  Class: InstrumentConfigurationError
    Method: __init__
    Docstring: None
  Docstring: For instrument configuration errors.

Import Path: pytestlab.errors
  Class: CommunicationError
  Docstring: For SCPI communication warnings.

Import Path: pytestlab.MeasurementDatabase
  Class: Preamble
  Docstring: A class to store the preamble data from the oscilloscope channel.

:param format: The format of the data
:param type: The type of the data
:param points: The number of points
:param xinc: The x increment
:param xorg: The x origin
:param xref: The x reference
:param yinc: The y increment
:param yorg: The y origin
:param yref: The y reference

Import Path: pytestlab.MeasurementDatabase
  Class: MeasurementResult
    Method: __init__
    Docstring: None
    Method: __str__
    Docstring: None
    Method: __repr__
    Docstring: None
    Method: add
    Docstring: Adds a new MeasurementValue to the collection.
    Method: set_values
    Docstring: Sets the MeasurementValues in the collection.
    Method: get
    Docstring: Gets the MeasurementValue at a specified index.
    Method: get_all
    Docstring: Returns all the MeasurementValues in the collection.
    Method: clear
    Docstring: Clears all the MeasurementValues from the collection.
    Method: plot
    Docstring: Generates a plot of the measurement values.

Args:
    title (str, optional): The title of the plot.
    xlabel (str, optional): The label for the x-axis.
    ylabel (str, optional): The label for the y-axis.
    Method: perform_fft
    Docstring: Performs FFT on the measurement values and returns a MeasurementResult object
for the frequency spectrum.

Returns:
    MeasurementResult: An object with frequencies as its measurement values.
    Method: _to_numpy
    Docstring: Converts the measurement and timestamp data to numpy arrays.
    Method: __len__
    Docstring: None
    Method: __getitem__
    Docstring: None
    Method: __iter__
    Docstring: None
    Method: __delitem__
    Docstring: None
  Docstring: A class to represent a collection of measurement values.

Attributes:
    values (list): A list of MeasurementValue objects.
    units (str): The units of the measurements.
    instrument (str): The name of the instrument used for the measurements.
    measurement_type (str): The type of measurement.

Import Path: pytestlab.MeasurementDatabase
  Class: MeasurementDatabase
    Method: __init__
    Docstring: None
    Method: _create_tables
    Docstring: None
    Method: _get_connection
    Docstring: None
    Method: store_reading
    Docstring: Stores a time-domain measurement result in the database.
    Method: store_fft_result
    Docstring: Stores an FFT measurement result in the database.
    Method: _get_or_create_instrument_id
    Docstring: Retrieves the instrument ID for the given name, or creates it if it doesn't exist.
    Method: retrieve_measurements
    Docstring: Retrieves measurements from the database by instrument name and measurement type.
  Docstring: A class for managing a SQLite database that stores measurement results.

Import Path: pytestlab.utilities
  Class: InstrumentCollection
    Method: __init__
    Docstring: None
    Method: add
    Docstring: Adds an instrument to the collection.
    Method: get
    Docstring: Gets an instrument by its name.
  Docstring: A class to manage a collection of instruments.

Attributes:
    instruments (dict): A dictionary to store instrument objects by their names.

Import Path: pytestlab.config.oscilloscope_config
  Class: OscilloscopeConfig
    Method: __init__
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.oscilloscope_config
  Class: TimebaseConfig
    Method: __init__
    Docstring: None
    Method: __repr__
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.oscilloscope_config
  Class: ChannelsConfig
    Method: __init__
    Docstring: None
    Method: __repr__
    Docstring: None
    Method: __getitem__
    Docstring: Validate and return the channel if it is within the range.

Args:
    channel (int): The channel to validate.

Returns:
    ChannelConfig: The validated channel.

Raises:
    InstrumentParameterError: If the channel is not valid.
    Method: __contains__
    Docstring: Check if the channel is valid.

Args:
    channel (int): The channel to validate.

Returns:
    bool: True if the channel is valid, False otherwise.
    Method: to_json
    Docstring: Serialize instance to a JSON-compatible dictionary.

Returns:
    dict: The serialized representation.
  Docstring: None

Import Path: pytestlab.config.oscilloscope_config
  Class: ChannelConfig
    Method: __init__
    Docstring: None
    Method: __repr__
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.oscilloscope_config
  Class: FFTConfig
    Method: __init__
    Docstring: None
    Method: __repr__
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.oscilloscope_config
  Class: TriggerConfig
    Method: __init__
    Docstring: None
    Method: __repr__
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.oscilloscope_config
  Class: FunctionGeneratorConfig
    Method: __init__
    Docstring: None
    Method: __repr__
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.instrument_config
  Class: InstrumentConfig
    Method: __init__
    Docstring: None
    Method: from_json_file
    Docstring: Create an Oscilloscope instance from a JSON file.

Args:
    file_path (str): Path to the JSON file.

Returns:
    Oscilloscope: An instance of Oscilloscope initialized with data from the JSON file.
  Docstring: None

Import Path: pytestlab.config.config
  Class: Config
    Method: to_json
    Docstring: Serialize instance to a JSON-compatible dictionary.

Returns:
    dict: The serialized representation.
    Method: _validate_parameter
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.config
  Class: RangeConfig
    Method: __init__
    Docstring: None
    Method: __repr__
    Docstring: None
    Method: in_range
    Docstring: Validate and return the input value if it is within the range.

Args:
    input_value (float): The input value to validate.

Returns:
    float: The validated input value.

Raises:
    InstrumentParameterError: If the input value is not valid.
    Method: to_json
    Docstring: Serialize instance to a JSON-compatible dictionary.

Returns:
    dict: The serialized representation.
  Docstring: None

Import Path: pytestlab.config.config
  Class: SelectionConfig
    Method: __init__
    Docstring: None
    Method: __repr__
    Docstring: None
    Method: __getitem__
    Docstring: Validate and return the SCPI command if it is valid.

Args:
input_command (str): The SCPI command to validate.

Returns:
str: The validated SCPI command.

Raises:
InstrumentParameterError: If the command is not valid.
    Method: is_valid_command
    Docstring: Check if the input SCPI command is either the full command or a valid abbreviation.

Args:
input_command (str): The SCPI command to validate.
full_command (str): The full SCPI command.

Returns:
bool: True if valid, False otherwise.
    Method: to_json
    Docstring: Serialize instance to a JSON-compatible dictionary.

Returns:
    dict: The serialized representation.
  Docstring: None

Import Path: pytestlab.config.waveform_generator_config
  Class: WaveformGeneratorConfig
    Method: __init__
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.waveform_generator_config
  Class: ChannelsConfig
    Method: __init__
    Docstring: None
    Method: __getitem__
    Docstring: Validate and return the channel if it is within the range.

Args:
    channel (int): The channel to validate.

Returns:
    ChannelConfig: The validated channel.

Raises:
    InstrumentParameterError: If the channel is not valid.
    Method: to_json
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.waveform_generator_config
  Class: WaveformsConfig
    Method: __init__
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.waveform_generator_config
  Class: ArbitraryConfig
    Method: __init__
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.waveform_generator_config
  Class: AccuracyConfig
    Method: __init__
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.multimeter_config
  Class: MultimeterConfig
    Method: __init__
    Docstring: None
    Method: _validate_channels
    Docstring: None
    Method: __repr__
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.multimeter_config
  Class: DMMConf
    Method: __init__
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.power_supply_config
  Class: PowerSupplyConfig
    Method: __init__
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.power_supply_config
  Class: OutputsConfig
    Method: __init__
    Docstring: None
    Method: __getitem__
    Docstring: None
    Method: __repr__
    Docstring: None
    Method: to_json
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.power_supply_config
  Class: OutputConfig
    Method: __init__
    Docstring: None
    Method: __repr__
    Docstring: None
  Docstring: None

Import Path: pytestlab.config.power_supply_config
  Class: AccuracyConfig
    Method: __init__
    Docstring: None
    Method: __repr__
    Docstring: None
  Docstring: None

Import Path: pytestlab.instruments.instrument
  Class: Instrument
    Method: __init__
    Docstring: Initialize the SCPIInstrument class.

Args:
    visa_resource (str): The VISA resource string to use for the connection.
    Method: from_config
    Docstring: None
    Method: _connect
    Docstring: Connect to the instrument using the VISA resource string.
    Method: _read_to_np
    Docstring: None
    Method: _send_command
    Docstring: Send an SCPI command to the instrument.

Args:
    command (str): The SCPI command to send.

Raises:
    SCPICommunicationError: If sending the command fails.
    Method: _query
    Docstring: Query the instrument and return the response.

Args:
    query (str): The SCPI query to send.

Returns:
    str: The instrument's response to the query.

Raises:
    SCPICommunicationError: If the query fails.
    Method: _error_check
    Docstring: Checks for errors on the instrument
    Method: lock_panel
    Docstring: Locks the panel of the instrument

Args:
    lock (bool): True to lock the panel, False to unlock it
    Method: _wait
    Docstring: Blocks until all previous commands have been processed by the instrument.
    Method: _log
    Docstring: Log a message.

Args:
    message (str): The message to log.
    Method: _history
    Docstring: Prints history of executed commands
    Method: _error_check
    Docstring: Checks for errors on the instrument
    Method: id
    Docstring: Query the instrument for its identification.

Returns:
    str: The identification string of the instrument.
    Method: close
    Docstring: Close the connection to the instrument.
    Method: reset
    Docstring: Reset the instrument to its default settings.
    Method: requires
    Docstring: Decorator that can be used to specify requirements for a method.

Args:
    requirement (str): The requirement that must be met for the method to be executed.
    Method: decorator
    Docstring: None
    Method: wrapped_func
    Docstring: None
  Docstring: A class representing an SCPI-compliant instrument.

Attributes:
    visa_resource (str): The VISA resource string that identifies the instrument.

Import Path: pytestlab.instruments.PowerSupply
  Class: PowerSupply
    Method: __init__
    Docstring: Initializes a DigitalPowerSupply instance.

Args:
    visa_resource (str): The VISA address of the device.
    description (dict): A dictionary containing additional information about the device.
    Method: from_config
    Docstring: None
    Method: set_voltage
    Docstring: Sets the voltage for the specified channel.

Args:
    voltage (float): The voltage value to set.
    channel (int, optional): The channel number. Default is 1.

Raises:
    SCPICommunicationError: If there's a failure in sending the SCPI command.
    Method: set_current
    Docstring: Sets the current for the specified channel.

Args:
    current (float): The current value to set.
    channel (int, optional): The channel number. Default is 1.

Raises:
    SCPICommunicationError: If there's a failure in sending the SCPI command.
    Method: output
    Docstring: Enables the output for the specified channel.

Args:
    channel (list | int): The channels to enable.

Raises:
    SCPICommunicationError: If there's a failure in sending the SCPI command.
    OUTPut[:STATe] ON | 1 | OFF | 0[, (@<chanlist>)]
    Method: display
    Docstring: Enables or disables the display.

Args:
    state (bool): The state to set. True for on, False for off.

Raises:
    SCPICommunicationError: If there's a failure in sending the SCPI command.

DISPlay[:WINDow][:STATe] ON | OFF | 1 | 0
  Docstring: A class representing a Digital Power Supply that inherits from the SCPIInstrument class.

Provides methods for setting voltage and current, and for enabling or disabling the output.

Attributes:
    visa_resource (str): The VISA address of the device.
    profile (dict): A dictionary containing additional information about the device.

Import Path: pytestlab.instruments.Oscilloscope
  Class: Oscilloscope
    Method: __init__
    Docstring: Initialize the Oscilloscope class with the given VISA resource and profile information.

Args:
visa_resource (str): The VISA resource string used for identifying the connected oscilloscope. Optional if a profile is provided.
profile (dict): Information about the instrument model.
    Method: from_config
    Docstring: None
    Method: _read_preamble
    Docstring: Reads the preamble from the oscilloscope.

:param inst: The instrument object from pyscpi or pyvisa
:param debug: Print debug messages
:return: A Preamble object
    Method: _check_valid_channel
    Docstring: None
    Method: _read_wave_data
    Docstring: None
    Method: lock_panel
    Docstring: Locks the panel of the instrument

Args:
    lock (bool): True to lock the panel, False to unlock it
    Method: auto_scale
    Docstring: Auto scale the oscilloscope display.

This method sends an SCPI command to the oscilloscope to auto scale the display.

Example:
>>> auto_scale()
    Method: set_time_axis
    Docstring: Sets the time axis of the Oscilloscope. (x-axis)

:param scale: scale The scale of the axis in seconds 
:param position: The position of the time axis from the trigger in seconds
    Method: set_channel_axis
    Docstring: Sets the channel axis of the oscilloscope. (y-axis)

:param channel: The channel to set
:param scale: The scale of the channel axis in volts
:param offset: The offset of the channel in volts
    Method: configure_trigger
    Docstring: Sets the trigger for the oscilloscope.

:param channel: The channel to set the trigger for
:param slope: The slope of the trigger. Default is 'POS'
:param trigger_type: The type of trigger. Default is 'HIGH'
:param level: The trigger level in volts
:param mode: The trigger mode. Default is 'EDGE'
    Method: measure_voltage_peak_to_peak
    Docstring: Measure the peak-to-peak voltage for a specified channel.

This method sends an SCPI query to the oscilloscope to measure the peak-to-peak voltage 
of the given channel, then encapsulates the measurement result into a MeasurementResult object.

Args:
channel (int): The channel identifier, which can be an integer or string depending on the oscilloscope model.

Returns:
MeasurementResult: An object containing the peak-to-peak voltage measurement for the specified channel.

Example:
>>> measure_voltage_peak_to_peak(1)
<MeasurementResult object at 0x7f1ec2a4f510>
    Method: measure_rms_voltage
    Docstring: Measure the root-mean-square (RMS) voltage for a specified channel.

This method sends an SCPI query to the oscilloscope to measure the RMS voltage 
of the given channel, then encapsulates the measurement result into a MeasurementResult object.

Args:
channel (int/str): The channel identifier, which can be an integer or string depending on the oscilloscope model.

Returns:
MeasurementResult: An object containing the RMS voltage measurement for the specified channel.

Example:
>>> measure_rms_voltage("CH1")
<MeasurementResult object at 0x7f1ec2a4f590>
    Method: read_channels
    Docstring: Reads the specified channels from the oscilloscope.

This method sends an SCPI command to the oscilloscope to read the specified channels.

Args:
channels (list|int): A list of channel numbers to read.
points (int): The number of points to read from each channel.
timebase (float): The timebase scale to use for the measurement.

Returns:
dict: A dictionary containing the measurement results for each channel.

Example:
>>> read_channels([1, 2, 3, 4])
    Method: get_sampling_rate
    Docstring: None
    Method: get_probe_attenuation
    Docstring: Gets the probe attenuation for a given channel.
    Method: set_probe_attenuation
    Docstring: Sets the probe scale for a given channel.

Parameters:
    channel (int): The oscilloscope channel to set the scale for.
    scale (float): The probe scale value (e.g., 10.0 for 10:1, 1.0 for 1:1).
    Method: set_timebase_scale
    Docstring: Set the timebase scale of the oscilloscope.

This method sends an SCPI command to adjust the timebase scale on the oscilloscope display.

Args:
scale (float): The timebase scale in seconds per division.

Example:
>>> set_timebase_scale(0.002)
    Method: get_timebase_scale
    Docstring: Retrieve the current timebase scale setting from the oscilloscope.

This method sends an SCPI query to get the current timebase scale and encapsulates 
the result into a MeasurementResult object.

Returns:
MeasurementResult: An object containing the current timebase scale setting.

Example:
>>> get_timebase_scale()
<MeasurementResult object at 0x7f1ec2a4f650>
    Method: set_acquisition_time
    Docstring: Set the total acquisition time for the oscilloscope.

ARGS;
    time (float): The total acquisition time in seconds.
    Method: set_sample_rate
    Docstring: Sets the sample rate for the oscilloscope.

Args:
rate (str): The desired sample rate. Valid values are 'MAX' and 'AUTO'.
    Method: set_bandwidth_limit
    Docstring:         
        
    Method: set_trigger
    Docstring: Sets the trigger level for a given channel.

Parameters:
    Method: set_trigger_source
    Docstring:         
        
    Method: wave_gen
    Docstring: Enable or disable the waveform generator of the oscilloscope.

This method sends an SCPI command to enable or disable the function generator in the oscilloscope.

Args:
state (str): The desired state ('ON' or 'OFF') for the waveform generator.

Raises:
InstrumentParameterError: If the oscilloscope model does not have a waveform generator or if the state is not supported.

Example:
>>> set_wave_gen('ON')
    Method: set_wave_gen_func
    Docstring: Set the waveform function for the oscilloscope's waveform generator.

This method sends an SCPI command to change the function (e.g., 'SINE', 'SQUARE') of the waveform generator.

Args:
state (str): The desired function ('SINE', 'SQUARE', etc.) for the waveform generator.

Raises:
InstrumentParameterError: If the oscilloscope model does not have a waveform generator or if the state is not supported.

Example:
>>> set_wave_gen_func('SINE')
    Method: set_wave_gen_freq
    Docstring: Set the frequency for the waveform generator.

This method sends an SCPI command to set the frequency of the waveform generator.

Args:
freq (float): The desired frequency for the waveform generator in Hz.

Raises:
InstrumentParameterError: If the oscilloscope model does not have a waveform generator or if the frequency is out of range.

Example:
>>> set_wave_gen_freq(1000.0)
    Method: set_wave_gen_amp
    Docstring: Set the amplitude for the waveform generator.

This method sends an SCPI command to set the amplitude of the waveform generator.

Args:
amp (float): The desired amplitude for the waveform generator in volts.

Raises:
InstrumentParameterError: If the oscilloscope model does not have a waveform generator or if the amplitude is out of range.

Example:
>>> set_wave_gen_amp(1.0)
    Method: set_wave_gen_offset
    Docstring: Set the voltage offset for the waveform generator.

This method sends an SCPI command to set the voltage offset of the waveform generator.

Args:
offset (float): The desired voltage offset for the waveform generator in volts.

Raises:
InstrumentParameterError: If the oscilloscope model does not have a waveform generator or if the offset is out of range.

Example:
>>> set_wave_gen_offset(0.1)
    Method: set_wgen_sin
    Docstring: Sets the waveform generator to a sine wave. (Only available on specific models)

:param amp: The amplitude of the sine wave in volts
:param offset: The offset of the sine wave in volts
:param freq: The frequency of the sine wave in Hz. The frequency can be adjusted from 100 mHz to 20 MHz.
    Method: set_wgen_square
    Docstring: Sets the waveform generator to a square wave. (Only available on specific models)

:param v0: The voltage of the low state in volts
:param v1: The voltage of the high state in volts
:param freq: The frequency of the square wave in Hz. The frequency can be adjusted from 100 mHz to 10 MHz.
:param dutyCycle: The duty cycle can be adjusted from 1% to 99% up to 500 kHz. At higher frequencies, the adjustment range narrows so as not to allow pulse widths less than 20 ns.
    Method: clamp
    Docstring: None
    Method: set_wgen_ramp
    Docstring: Sets the waveform generator to a ramp wave. (Only available on specific models)

:param v0: The voltage of the low state in volts
:param v1: The voltage of the high state in volts
:param freq: The frequency of the ramp wave in Hz. The frequency can be adjusted from 100 mHz to 100 kHz.
:param symmetry: Symmetry represents the amount of time per cycle that the ramp waveform is rising and can be adjusted from 0% to 100%.
    Method: clamp
    Docstring: None
    Method: set_wgen_pulse
    Docstring: Sets the waveform generator to a pulse wave. (Only available on specific models)

:param v0: The voltage of the low state in volts
:param v1: The voltage of the high state in volts
:param period: The period of the pulse wave in seconds. The period can be adjusted from 10 ns to 10 s.
:param pulseWidth: The pulse width can be adjusted from 20 ns to the period minus 20 ns.
    Method: clamp
    Docstring: None
    Method: set_wgen_dc
    Docstring: Sets the waveform generator to a DC wave. (Only available on specific models)

:param offset: The offset of the DC wave in volts
    Method: set_wgen_noise
    Docstring: Sets the waveform generator to a noise wave. (Only available on specific models)

:param v0: The voltage of the low state in volts
:param v1: The voltage of the high state in volts
:param offset: The offset of the noise wave in volts
    Method: display_channel
    Docstring: Display the specified channels on the oscilloscope.

This method sends an SCPI command to the oscilloscope to display the specified channels.

Args:
channels (list|int): A list of channel numbers to display.
Raises:
InstrumentParameterError: If the oscilloscope model does not support the specified channel(s).

Example:
>>> display_channel([1, 2])
    Method: fft_display
    Docstring: Switches on the FFT display

:param state: The state of the FFT display
    Method: function_display
    Docstring: Switches on the function display

:param state: The state of the function display
    Method: configure_fft
    Docstring: Configure the oscilloscope to perform an FFT on the specified channel with the given parameters.

:param source_channel: The channel number to perform FFT on.
:param scale: The scale of the FFT display in dB. Defaults to None.
:param offset: The offset of the FFT display. Defaults to None.
:param window_type: The windowing function to apply. Defaults to 'HANNing'.
:param units: The unit of measurement for the FFT (DECibel or VRMS). Defaults to 'DECibel'.
:param display: A boolean to turn the FFT display ON or OFF. Defaults to True.
    Method: _convert_binary_block_to_data
    Docstring: None
    Method: perform_franalysis
    Docstring: Perform a frequency response analysis on the oscilloscope.

:param input_channel: The channel number to use as the input.
:param output_channel: The channel number to use as the output.
:param start_freq: The start frequency of the analysis in Hz.
:param stop_freq: The stop frequency of the analysis in Hz.
:param points: The number of points to use for the analysis.
    Method: read_fft_data
    Docstring: Perform the FFT and read the data from the oscilloscope, returning it as a MeasurementResult.

:return: A MeasurementResult object containing the FFT data.
  Docstring: Provides an interface for controlling and acquiring data from an oscilloscope using SCPI commands.

This class inherits from SCPIInstrument and implements specific methods to interact with 
oscilloscope features such as voltage measurement and timebase scaling.

Attributes:
visa_resource (str): The VISA resource string used for identifying the connected oscilloscope.
profile (dict): Information about the instrument model.

Import Path: pytestlab.instruments.Multimeter
  Class: Multimeter
    Method: __init__
    Docstring: Initializes a DigitalMultimeter instance.

Args:
    visa_resource (str): The VISA address of the device.
    config (MultimeterConfig): A class containing the device configuration.
    Method: from_config
    Docstring: None
    Method: get_configuration
    Docstring:         
        
    Method: configure
    Docstring: Configures the measurement settings of the multimeter.

:param mode: Measurement mode (e.g., "VOLT" for voltage, "CURR" for current).
:param ac_dc: Type of signal - "AC" or "DC".
:param rang: Measurement range. If None, defaults to AUTO.
:param res: Resolution (e.g., "SLOW", "MED", "FAST"). If None, defaults to the instrument's default.
    Method: measure
    Docstring: Measures the DC voltage on the specified channel.

Args:
    measurement_type (str, optional): The type of measurement to perform. Default is "VOLTAGE".
    mode (str, optional): The measurement mode. Default is "DC".
    ran (str, optional): The measurement range. Default is "AUTO".
    int_time (str, optional): The integration time. Default is "SLOW".
Returns:
    float: The measured voltage.

Raises:
    ValueError: If an invalid channel is specified.
  Docstring: A class representing a Digital Multimeter that inherits from the SCPIInstrument class.

Provides methods for measuring voltage, current, resistance, frequency, and testing continuity.

Attributes:
    visa_resource (str): The VISA address of the device.
    config (MultimeterConfig): A class containing the device configuration.

Import Path: pytestlab.instruments.AutoInstrument
  Class: AutoInstrument
    Method: from_type
    Docstring: Initializes an instrument from a type.

Args:
instrument_type (str): The type of the instrument to initialize.
*args: Arguments to pass to the instrument's constructor.
**kwargs: Keyword arguments to pass to the instrument's constructor.
    Method: from_config
    Docstring: Initializes an instrument from a preset.

Args:
identifier (str): The identifier of the preset. This can either be the name of a preset file in the pytestlab/instruments/profiles directory, or a path to a user-provided preset file.
debug_mode (bool, optional): Whether to print debug messages. Defaults to False.
    Method: register_instrument
    Docstring: None
  Docstring: None

Import Path: pytestlab.instruments.InstrumentManager
  Class: InstrumentManager
    Method: __init__
    Docstring: None
    Method: add_instrument
    Docstring: None
    Method: remove_instrument
    Docstring: None
    Method: get_instrument
    Docstring: None
    Method: list_instruments
    Docstring: None
    Method: disconnect_all_instruments
    Docstring: None
    Method: is_all_instruments_connected
    Docstring: None
    Method: is_instrument_connected
    Docstring: None
    Method: measure_voltage
    Docstring: None
    Method: measure_current
    Docstring: None
    Method: measure_power
    Docstring: None
    Method: measure_eye_diagram
    Docstring: None
    Method: perform_s21_measurement
    Docstring: None
    Method: calibrate_power_supply
    Docstring: None
    Method: calibrate_oscilloscope
    Docstring: None
    Method: calibrate_vna
    Docstring: None
    Method: save_measurement_data
    Docstring: None
    Method: load_measurement_data
    Docstring: None
    Method: configure_power_supply
    Docstring: None
    Method: configure_oscilloscope
    Docstring: None
    Method: configure_vna
    Docstring: None
    Method: check_instrument_compatibility
    Docstring: None
    Method: perform_full_system_check
    Docstring: None
    Method: report_system_status
    Docstring: None
  Docstring: None

Import Path: pytestlab.instruments.WaveformGenerator
  Class: WaveformGenerator
    Method: __init__pd
    Docstring: Initialize a WaveformGenerator instance with a device profile.

Args:
    profile (dict): A dictionary containing device profile information.
    Method: from_config
    Docstring: None
    Method: _validate_waveform
    Docstring: Validate if the waveform type is supported by the device.

Args:
    waveform_type (str): The type of waveform to validate.

Raises:
    ValueError: If the waveform type is not supported.
    Method: _validate_frequency
    Docstring: Validate if the frequency is within the device's supported range.

Args:
    frequency (float): The frequency to validate.

Raises:
    ValueError: If the frequency is out of range.
    Method: set_arbitrary_waveform
    Docstring: Sets the arbitrary waveform for the specified channel.

Args:
    channel (int or str): The channel for which to set the waveform.
    waveform (list): The arbitrary waveform to set. Max and min values are 32767 to -32768, respectively.
    scale (bool): Whether to scale the waveform to the max and min values.
    name (str): The name of the arbitrary waveform, default is "pytestlabArb".
    Method: set_waveform
    Docstring: Sets the waveform type for the specified channel after validation.

Args:
    channel (int or str): The channel for which to set the waveform.
    waveform_type (str): The type of waveform to set.
    Method: set_frequency
    Docstring: Sets the frequency for the specified channel after validation.

Args:
    channel (int or str): The channel for which to set the frequency.
    frequency (float): The frequency to set.
    Method: set_amplitude
    Docstring: Sets the amplitude for the specified channel after validation.

Args:
    channel (int or str): The channel for which to set the amplitude.
    amplitude (float): The amplitude to set.
    Method: set_offset
    Docstring: Sets the offset for the specified channel after validation.

Args:
    channel (int or str): The channel for which to set the offset.
    offset (float): The offset to set.
    Method: output
    Docstring: Sets the output state for the specified channel.

Args:
    channel (int or str): The channel for which to set the output state.
    state (str): The state to set.
  Docstring: None

Import Path: packager.extractor
  Class: ClassVisitor
    Method: __init__
    Docstring: None
    Method: visit_ClassDef
    Docstring: None
  Docstring: None

Import Path: packager.extractor
  Class: MethodVisitor
    Method: __init__
    Docstring: None
    Method: visit_FunctionDef
    Docstring: None
  Docstring: None

