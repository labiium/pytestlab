{"config":{"indexing":"full","lang":["en"],"min_search_length":2,"prebuild_index":true,"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])"},"docs":[{"location":"","text":"","title":"Home"},{"location":"404/","text":"title: Page Not Found is_404: true","title":"404"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased Added Initial migration to new documentation structure under docs/en/ . Enhanced theme and navigation for multilingual and modern Material for MkDocs features. Improved simulation backend documentation and CLI reference. New API reference structure with detailed Pydantic model documentation. Bench descriptor and safety limit documentation improvements. Changed Home page and quick start rewritten for clarity and modern async-first focus. Installation instructions updated for clarity and VISA backend support. User guide reorganized for better onboarding and discoverability. Custom styles simplified for new theme. Fixed Navigation bugs and broken links in documentation. Outdated references to old profile and bench formats. 0.1.5 - 2024-06-01 Added Support for YAML-driven simulation backend (SimBackendV2). Bench safety limits and automation hooks. CLI commands for profile and bench management. Initial support for uncertainty propagation using uncertainties package. Changed Async-first instrument API with facade pattern. Improved error handling and custom exception types. Fixed Various bugs in instrument connection and simulation logic. 0.1.0 - 2024-04-15 Added First public release of PyTestLab. Core instrument drivers: Oscilloscope, PowerSupply, Multimeter, WaveformGenerator, DCActiveLoad. Profile-based configuration system. Database and experiment management modules. Basic simulation backend.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#added","text":"Initial migration to new documentation structure under docs/en/ . Enhanced theme and navigation for multilingual and modern Material for MkDocs features. Improved simulation backend documentation and CLI reference. New API reference structure with detailed Pydantic model documentation. Bench descriptor and safety limit documentation improvements.","title":"Added"},{"location":"changelog/#changed","text":"Home page and quick start rewritten for clarity and modern async-first focus. Installation instructions updated for clarity and VISA backend support. User guide reorganized for better onboarding and discoverability. Custom styles simplified for new theme.","title":"Changed"},{"location":"changelog/#fixed","text":"Navigation bugs and broken links in documentation. Outdated references to old profile and bench formats.","title":"Fixed"},{"location":"changelog/#015-2024-06-01","text":"","title":"0.1.5 - 2024-06-01"},{"location":"changelog/#added_1","text":"Support for YAML-driven simulation backend (SimBackendV2). Bench safety limits and automation hooks. CLI commands for profile and bench management. Initial support for uncertainty propagation using uncertainties package.","title":"Added"},{"location":"changelog/#changed_1","text":"Async-first instrument API with facade pattern. Improved error handling and custom exception types.","title":"Changed"},{"location":"changelog/#fixed_1","text":"Various bugs in instrument connection and simulation logic.","title":"Fixed"},{"location":"changelog/#010-2024-04-15","text":"","title":"0.1.0 - 2024-04-15"},{"location":"changelog/#added_2","text":"First public release of PyTestLab. Core instrument drivers: Oscilloscope, PowerSupply, Multimeter, WaveformGenerator, DCActiveLoad. Profile-based configuration system. Database and experiment management modules. Basic simulation backend.","title":"Added"},{"location":"contributing/","text":"Contributing to PyTestLab Thank you for your interest in contributing to PyTestLab! Your help makes this project better for everyone in the scientific and engineering community. This guide explains how to get started, the development workflow, and best practices for contributing code, documentation, and ideas. Code of Conduct All contributors are expected to follow the PyTestLab Code of Conduct . Please help us keep the community welcoming and inclusive. Getting Started Fork the repository on GitHub. Clone your fork locally: git clone https://github.com/YOUR_USERNAME/pytestlab.git cd pytestlab Set up a virtual environment (recommended): python -m venv .venv source .venv/bin/activate # On Windows: .venv\\Scripts\\activate Install dependencies (including development tools): pip install -e .[dev,full] Install pre-commit hooks (for linting and formatting): pre-commit install Development Workflow Create a feature branch for your work: git checkout -b feat/short-description Make your changes (code, docs, or tests). Add or update tests to cover your changes. Run the test suite : pytest Run pre-commit checks (these will also run automatically on commit): pre-commit run --all-files Commit using Conventional Commits (enforced by commitizen): cz c Push your branch to your fork: git push origin feat/short-description Open a Pull Request against the main branch on GitHub. Code Style & Quality Linting & Formatting: PyTestLab uses Ruff for linting and formatting, and Black for code style. These are enforced by pre-commit. Type Checking: Use MyPy for static type checking. Commit Messages: Follow the Conventional Commits specification. Use cz c to help format your commit messages. Documentation Docs live in docs/ and are written in Markdown or Jupyter Notebooks. API docs are generated using mkdocstrings . To preview docs locally: mkdocs serve Update or add docstrings to your code as needed. Tests Unit tests live in the tests/ directory. All new features and bugfixes must include tests. Run the full test suite before submitting a PR. Submitting a Pull Request Ensure your branch is up to date with main . Provide a clear title and description for your PR. Link to any relevant issues. Be responsive to code review feedback. Need Help? Bugs & Feature Requests: Open an issue on GitHub. Questions: Use GitHub Discussions or reach out via the project chat (see the README for links). Security Issues: Please report security vulnerabilities privately to the maintainers. Thank you for helping make PyTestLab better!","title":"Contributing"},{"location":"contributing/#contributing-to-pytestlab","text":"Thank you for your interest in contributing to PyTestLab! Your help makes this project better for everyone in the scientific and engineering community. This guide explains how to get started, the development workflow, and best practices for contributing code, documentation, and ideas.","title":"Contributing to PyTestLab"},{"location":"contributing/#code-of-conduct","text":"All contributors are expected to follow the PyTestLab Code of Conduct . Please help us keep the community welcoming and inclusive.","title":"Code of Conduct"},{"location":"contributing/#getting-started","text":"Fork the repository on GitHub. Clone your fork locally: git clone https://github.com/YOUR_USERNAME/pytestlab.git cd pytestlab Set up a virtual environment (recommended): python -m venv .venv source .venv/bin/activate # On Windows: .venv\\Scripts\\activate Install dependencies (including development tools): pip install -e .[dev,full] Install pre-commit hooks (for linting and formatting): pre-commit install","title":"Getting Started"},{"location":"contributing/#development-workflow","text":"Create a feature branch for your work: git checkout -b feat/short-description Make your changes (code, docs, or tests). Add or update tests to cover your changes. Run the test suite : pytest Run pre-commit checks (these will also run automatically on commit): pre-commit run --all-files Commit using Conventional Commits (enforced by commitizen): cz c Push your branch to your fork: git push origin feat/short-description Open a Pull Request against the main branch on GitHub.","title":"Development Workflow"},{"location":"contributing/#code-style-quality","text":"Linting & Formatting: PyTestLab uses Ruff for linting and formatting, and Black for code style. These are enforced by pre-commit. Type Checking: Use MyPy for static type checking. Commit Messages: Follow the Conventional Commits specification. Use cz c to help format your commit messages.","title":"Code Style &amp; Quality"},{"location":"contributing/#documentation","text":"Docs live in docs/ and are written in Markdown or Jupyter Notebooks. API docs are generated using mkdocstrings . To preview docs locally: mkdocs serve Update or add docstrings to your code as needed.","title":"Documentation"},{"location":"contributing/#tests","text":"Unit tests live in the tests/ directory. All new features and bugfixes must include tests. Run the full test suite before submitting a PR.","title":"Tests"},{"location":"contributing/#submitting-a-pull-request","text":"Ensure your branch is up to date with main . Provide a clear title and description for your PR. Link to any relevant issues. Be responsive to code review feedback.","title":"Submitting a Pull Request"},{"location":"contributing/#need-help","text":"Bugs & Feature Requests: Open an issue on GitHub. Questions: Use GitHub Discussions or reach out via the project chat (see the README for links). Security Issues: Please report security vulnerabilities privately to the maintainers. Thank you for helping make PyTestLab better!","title":"Need Help?"},{"location":"installation/","text":"Installation PyTestLab requires Python 3.9 or higher. Standard Installation We recommend installing PyTestLab in a virtual environment. python -m venv .venv source .venv/bin/activate # On Windows: .venv\\Scripts\\activate You can install PyTestLab from PyPI using pip . Core Package For the core functionality: pip install pytestlab Full Installation To include all optional dependencies for plotting, extended data formats, and development tools: pip install pytestlab[full] VISA Backend Support To communicate with most physical instruments, you will need to install a VISA backend library. PyTestLab uses pyvisa to interface with these libraries. Install a VISA implementation from your hardware vendor: National Instruments NI-VISA Keysight IO Libraries Suite Rohde & Schwarz VISA Install pyvisa : pip install pyvisa PyTestLab will automatically detect and use the installed VISA backend. Upgrading To upgrade PyTestLab to the latest version: pip install --upgrade pytestlab Verifying Your Installation After installation, you can verify that PyTestLab is installed and working: pytestlab --version pytestlab profile list If you see a list of available instrument profiles, your installation is successful. Troubleshooting If you encounter issues with instrument connectivity, ensure your VISA library is installed and accessible in your system's PATH. For simulation-only development, you do not need to install any VISA libraries. Next Steps Getting Started Guide Async vs. Sync Programming Connecting to Instruments","title":"Installation"},{"location":"installation/#installation","text":"PyTestLab requires Python 3.9 or higher.","title":"Installation"},{"location":"installation/#standard-installation","text":"We recommend installing PyTestLab in a virtual environment. python -m venv .venv source .venv/bin/activate # On Windows: .venv\\Scripts\\activate You can install PyTestLab from PyPI using pip .","title":"Standard Installation"},{"location":"installation/#core-package","text":"For the core functionality: pip install pytestlab","title":"Core Package"},{"location":"installation/#full-installation","text":"To include all optional dependencies for plotting, extended data formats, and development tools: pip install pytestlab[full]","title":"Full Installation"},{"location":"installation/#visa-backend-support","text":"To communicate with most physical instruments, you will need to install a VISA backend library. PyTestLab uses pyvisa to interface with these libraries. Install a VISA implementation from your hardware vendor: National Instruments NI-VISA Keysight IO Libraries Suite Rohde & Schwarz VISA Install pyvisa : pip install pyvisa PyTestLab will automatically detect and use the installed VISA backend.","title":"VISA Backend Support"},{"location":"installation/#upgrading","text":"To upgrade PyTestLab to the latest version: pip install --upgrade pytestlab","title":"Upgrading"},{"location":"installation/#verifying-your-installation","text":"After installation, you can verify that PyTestLab is installed and working: pytestlab --version pytestlab profile list If you see a list of available instrument profiles, your installation is successful.","title":"Verifying Your Installation"},{"location":"installation/#troubleshooting","text":"If you encounter issues with instrument connectivity, ensure your VISA library is installed and accessible in your system's PATH. For simulation-only development, you do not need to install any VISA libraries.","title":"Troubleshooting"},{"location":"installation/#next-steps","text":"Getting Started Guide Async vs. Sync Programming Connecting to Instruments","title":"Next Steps"},{"location":"api/backends/","text":"Instrument Backends PyTestLab supports multiple instrument communication backends, each designed for a specific class of hardware or simulation use case. This page documents the main backend classes and their roles. Overview A backend is the low-level driver responsible for communicating with an instrument. Backends abstract the transport mechanism (VISA, Lamb, simulation, etc.) so that high-level instrument drivers can use a unified API. Backends are typically not used directly by end-users. Instead, they are selected automatically based on your instrument profile, connection string, and simulation settings. Available Backends AsyncVisaBackend Asynchronous backend for VISA-compatible instruments (e.g., GPIB, USB, TCPIP, RS232). Uses PyVISA under the hood. pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend(address, timeout_ms=5000) An asynchronous backend for communicating with instruments using pyvisa, by running blocking calls in a separate thread via anyio. This class implements the AsyncInstrumentIO protocol. Source code in pytestlab/instruments/backends/async_visa_backend.py def __init__(self, address: str, timeout_ms: Optional[int] = 5000): self.address = address self.rm = pyvisa.ResourceManager() self.instrument: Optional[MessageBasedResource] = None self._timeout_ms = timeout_ms if timeout_ms is not None else 5000 # Default to 5 seconds self._lock = anyio.Lock() # For thread-safety around instrument access Attributes address = address instance-attribute instrument = None instance-attribute rm = pyvisa.ResourceManager() instance-attribute Functions close() async Closes the connection asynchronously (alias for disconnect). Source code in pytestlab/instruments/backends/async_visa_backend.py async def close(self) -> None: \"\"\"Closes the connection asynchronously (alias for disconnect).\"\"\" await self.disconnect() connect() async Connects to the VISA resource asynchronously. Source code in pytestlab/instruments/backends/async_visa_backend.py async def connect(self) -> None: \"\"\"Connects to the VISA resource asynchronously.\"\"\" async with self._lock: if self.instrument is not None: try: # Ensure existing instrument is closed before reconnecting await anyio.to_thread.run_sync(self.instrument.close) except Exception: # Ignore errors if already closed or in a bad state pass self.instrument = None try: # Run the blocking open_resource call in a thread resource = await anyio.to_thread.run_sync(self.rm.open_resource, self.address) if not isinstance(resource, pyvisa.resources.MessageBasedResource): raise InstrumentConnectionError( f\"Resource at {self.address} is not a MessageBasedResource. Type: {type(resource).__name__}\" ) self.instrument = cast('MessageBasedResource', resource) # Cast for type checker # Set timeout on the instrument object def _set_timeout_on_instrument(instr: MessageBasedResource, timeout: int) -> None: instr.timeout = timeout await anyio.to_thread.run_sync(_set_timeout_on_instrument, self.instrument, self._timeout_ms) except pyvisa.Error as e: raise InstrumentConnectionError(f\"Failed to connect to VISA resource {self.address}: {e}\") from e except Exception as e: raise InstrumentConnectionError(f\"An unexpected error occurred while connecting to VISA resource {self.address}: {e}\") from e disconnect() async Disconnects from the VISA resource asynchronously. Source code in pytestlab/instruments/backends/async_visa_backend.py async def disconnect(self) -> None: \"\"\"Disconnects from the VISA resource asynchronously.\"\"\" async with self._lock: if self.instrument is not None: try: await anyio.to_thread.run_sync(self.instrument.close) except pyvisa.Error as e: raise InstrumentConnectionError(f\"Error disconnecting from VISA resource {self.address}: {e}\") from e except Exception as e: raise InstrumentConnectionError(f\"An unexpected error occurred while disconnecting VISA resource {self.address}: {e}\") from e finally: self.instrument = None get_timeout() async Gets the communication timeout in milliseconds. Source code in pytestlab/instruments/backends/async_visa_backend.py async def get_timeout(self) -> int: \"\"\"Gets the communication timeout in milliseconds.\"\"\" # Return the locally stored timeout. Reading from instrument is not always reliable # and the local value is the intended setting. return self._timeout_ms query(cmd, delay=None) async Sends a query and returns the string response asynchronously. Source code in pytestlab/instruments/backends/async_visa_backend.py async def query(self, cmd: str, delay: Optional[float] = None) -> str: \"\"\"Sends a query and returns the string response asynchronously.\"\"\" if self.instrument is None: raise InstrumentConnectionError(\"Not connected to VISA resource. Call connect() first.\") instr = self.instrument # Local reference def _blocking_query(command: str, q_delay: Optional[float]) -> str: return instr.query(command, delay=q_delay).strip() async with self._lock: if self.instrument is None: raise InstrumentConnectionError(\"Instrument became disconnected before query.\") try: response = await anyio.to_thread.run_sync(_blocking_query, cmd, delay) return response except pyvisa.Error as e: raise InstrumentCommunicationError(f\"Failed to query '{cmd}' from {self.address}: {e}\") from e except Exception as e: raise InstrumentCommunicationError(f\"An unexpected error occurred querying '{cmd}' from {self.address}: {e}\") from e query_raw(cmd, delay=None) async Sends a query and returns the raw bytes response asynchronously. Source code in pytestlab/instruments/backends/async_visa_backend.py async def query_raw(self, cmd: str, delay: Optional[float] = None) -> bytes: \"\"\"Sends a query and returns the raw bytes response asynchronously.\"\"\" if self.instrument is None: raise InstrumentConnectionError(\"Not connected to VISA resource. Call connect() first.\") instr = self.instrument # Local reference def _blocking_query_raw(command: str, q_delay: Optional[float]) -> bytes: instr.write(command) # Write the command if q_delay is not None: time.sleep(q_delay) # Blocking sleep in the thread # Assuming read_bytes is the appropriate method for raw data. # Adjust chunk_size or method (e.g. read_raw()) as needed. return instr.read_bytes(instr.chunk_size) async with self._lock: if self.instrument is None: raise InstrumentConnectionError(\"Instrument became disconnected before query_raw.\") try: data = await anyio.to_thread.run_sync(_blocking_query_raw, cmd, delay) return data except pyvisa.Error as e: raise InstrumentCommunicationError(f\"Failed to query_raw '{cmd}' from {self.address}: {e}\") from e except Exception as e: raise InstrumentCommunicationError(f\"An unexpected error occurred during query_raw '{cmd}' from {self.address}: {e}\") from e set_timeout(timeout_ms) async Sets the communication timeout in milliseconds asynchronously. Source code in pytestlab/instruments/backends/async_visa_backend.py async def set_timeout(self, timeout_ms: int) -> None: \"\"\"Sets the communication timeout in milliseconds asynchronously.\"\"\" if timeout_ms <= 0: raise ValueError(\"Timeout must be positive.\") self._timeout_ms = timeout_ms # Update local store immediately if self.instrument: instr = self.instrument # Local reference def _blocking_set_timeout(timeout_val: int) -> None: instr.timeout = timeout_val async with self._lock: # Ensure instrument object isn't changed during this if self.instrument: # Re-check after lock try: await anyio.to_thread.run_sync(_blocking_set_timeout, timeout_ms) except pyvisa.Error as e: # Log this, but don't necessarily fail the operation. print(f\"Warning: Could not set timeout on async VISA resource {self.address}: {e}\") except Exception as e: print(f\"Warning: An unexpected error occurred setting timeout on async VISA resource {self.address}: {e}\") write(cmd) async Writes a command to the instrument asynchronously. Source code in pytestlab/instruments/backends/async_visa_backend.py async def write(self, cmd: str) -> None: \"\"\"Writes a command to the instrument asynchronously.\"\"\" if self.instrument is None: raise InstrumentConnectionError(\"Not connected to VISA resource. Call connect() first.\") instr = self.instrument # Local reference for thread safety def _blocking_write(command: str) -> None: instr.write(command) async with self._lock: # Ensure exclusive access for the write operation if self.instrument is None: # Re-check after acquiring lock raise InstrumentConnectionError(\"Instrument became disconnected before write.\") try: await anyio.to_thread.run_sync(_blocking_write, cmd) except pyvisa.Error as e: raise InstrumentCommunicationError(f\"Failed to write command '{cmd}' to {self.address}: {e}\") from e except Exception as e: raise InstrumentCommunicationError(f\"An unexpected error occurred writing command '{cmd}' to {self.address}: {e}\") from e AsyncLambBackend Backend for instruments accessible via the Lamb remote instrument server protocol. Supports async TCP communication with Lamb daemons. pytestlab.instruments.backends.lamb.AsyncLambBackend(address=None, url='http://lamb-server:8000', timeout_ms=10000, model_name=None, serial_number=None) An asynchronous backend for communicating with instruments via a Lamb server. Supports both direct visa_string and auto-connect via model/serial_number. PARAMETER DESCRIPTION address The visa_string or unique instrument address. If not provided, model_name and serial_number must be provided. TYPE: Optional [ str ] DEFAULT: None url Lamb server base URL. TYPE: str DEFAULT: 'http://lamb-server:8000' timeout_ms Communication timeout in ms. TYPE: Optional [ int ] DEFAULT: 10000 model_name Model name for auto-connect. TYPE: Optional [ str ] DEFAULT: None serial_number Serial number for auto-connect. TYPE: Optional [ str ] DEFAULT: None Source code in pytestlab/instruments/backends/lamb.py def __init__( self, address: Optional[str] = None, url: str = \"http://lamb-server:8000\", timeout_ms: Optional[int] = 10000, model_name: Optional[str] = None, serial_number: Optional[str] = None, ): \"\"\" Args: address: The visa_string or unique instrument address. If not provided, model_name and serial_number must be provided. url: Lamb server base URL. timeout_ms: Communication timeout in ms. model_name: Model name for auto-connect. serial_number: Serial number for auto-connect. \"\"\" self.base_url: str = url.rstrip('/') self.instrument_address: Optional[str] = address # visa_string self.model_name: Optional[str] = model_name self.serial_number: Optional[str] = serial_number self._timeout_sec: float = (timeout_ms / 1000.0) if timeout_ms and timeout_ms > 0 else 5.0 self._client: Optional[httpx.AsyncClient] = None self._auto_connect_performed: bool = False lamb_logger.info( f\"AsyncLambBackend initialized for address='{address}', model='{model_name}', serial='{serial_number}' at URL '{url}'\" ) Attributes base_url = url.rstrip('/') instance-attribute instrument_address = address instance-attribute model_name = model_name instance-attribute serial_number = serial_number instance-attribute Functions close() async Source code in pytestlab/instruments/backends/lamb.py async def close(self) -> None: await self.disconnect() connect() async Ensures the instrument is registered with Lamb and ready. Source code in pytestlab/instruments/backends/lamb.py async def connect(self) -> None: \"\"\" Ensures the instrument is registered with Lamb and ready. \"\"\" await self._ensure_connected() # Optionally, ping instrument status endpoint here lamb_logger.info(f\"Connected to Lamb instrument '{self.instrument_address}'.\") disconnect() async Source code in pytestlab/instruments/backends/lamb.py async def disconnect(self) -> None: lamb_logger.info(f\"AsyncLambBackend for '{self.instrument_address}' disconnected (simulated, as client is per-request or context-managed).\") pass get_timeout() async Source code in pytestlab/instruments/backends/lamb.py async def get_timeout(self) -> int: return int(self._timeout_sec * 1000) query(cmd, delay=None) async Source code in pytestlab/instruments/backends/lamb.py async def query(self, cmd: str, delay: Optional[float] = None) -> str: await self._ensure_connected() lamb_logger.debug(f\"QUERY to '{self.instrument_address}': {cmd}\") try: async with httpx.AsyncClient(timeout=self._timeout_sec) as client: response = await client.post( f\"{self.base_url}/instrument/query\", json={\"visa_string\": self.instrument_address, \"command\": cmd}, headers={\"Accept\": \"application/json\", 'Accept-Charset': 'utf-8'} ) response.raise_for_status() content: str = response.content.decode('utf-8') return content.strip() except httpx.HTTPStatusError as e: raise InstrumentCommunicationError( f\"Lamb server query failed: {e.response.status_code} - {e.response.text}\" ) from e except httpx.RequestError as e: raise InstrumentCommunicationError( f\"Network error during Lamb query: {e}\" ) from e query_raw(cmd, delay=None) async Source code in pytestlab/instruments/backends/lamb.py async def query_raw(self, cmd: str, delay: Optional[float] = None) -> bytes: await self._ensure_connected() lamb_logger.debug(f\"QUERY_RAW to '{self.instrument_address}': {cmd}\") try: async with httpx.AsyncClient(timeout=self._timeout_sec) as client: response = await client.post( f\"{self.base_url}/instrument/query_raw\", json={\"visa_string\": self.instrument_address, \"command\": cmd}, headers={\"Accept\": \"application/octet-stream\"} ) response.raise_for_status() return response.content except httpx.HTTPStatusError as e: raise InstrumentCommunicationError( f\"Lamb server query_raw failed: {e.response.status_code} - {e.response.text}\" ) from e except httpx.RequestError as e: raise InstrumentCommunicationError( f\"Network error during Lamb query_raw: {e}\" ) from e set_timeout(timeout_ms) async Source code in pytestlab/instruments/backends/lamb.py async def set_timeout(self, timeout_ms: int) -> None: if timeout_ms <= 0: self._timeout_sec = 0.001 else: self._timeout_sec = timeout_ms / 1000.0 lamb_logger.debug(f\"AsyncLambBackend timeout set to {self._timeout_sec} seconds.\") write(cmd) async Source code in pytestlab/instruments/backends/lamb.py async def write(self, cmd: str) -> None: await self._ensure_connected() lamb_logger.debug(f\"WRITE to '{self.instrument_address}': {cmd}\") try: async with httpx.AsyncClient(timeout=self._timeout_sec) as client: response = await client.post( f\"{self.base_url}/instrument/write\", json={\"visa_string\": self.instrument_address, \"command\": cmd}, headers={\"Accept\": \"application/json\", 'Accept-Charset': 'utf-8'} ) response.raise_for_status() except httpx.HTTPStatusError as e: raise InstrumentCommunicationError( f\"Lamb server write failed: {e.response.status_code} - {e.response.text}\" ) from e except httpx.RequestError as e: raise InstrumentCommunicationError( f\"Network error during Lamb write: {e}\" ) from e SimBackendV2 YAML-driven simulation backend. Provides deterministic, profile-based simulation for development, CI, and testing. Reads the simulation section of instrument profiles. pytestlab.instruments.backends.sim_backend_v2.SimBackendV2(profile_path, *, model=None, timeout_ms=None) Drop-in replacement for the existing SimBackend with vastly richer functionality (see module docstring for highlights). Source code in pytestlab/instruments/backends/sim_backend_v2.py def __init__( self, profile_path: str | os.PathLike, *, model: str | None = None, timeout_ms: int | None = None, ) -> None: self.profile_path = Path(profile_path) self.timeout_ms = timeout_ms or self.DEFAULT_TIMEOUT_MS self.model = model or self.profile_path.stem # main data self._profile = self._load_profile() self._state: dotdict = dotdict(self._profile[\"simulation\"].get(\"initial_state\", {})) self._error_queue: List[Tuple[int, str]] = [] # dispatcher self._exact_map: Dict[str, Any] = {} self._pattern_rules: List[_PatternRule] = [] self._build_dispatch_tables() logger.info(\"SimBackendV2 initialised for %s\", self.model) Attributes DEFAULT_TIMEOUT_MS = 5000 class-attribute instance-attribute USER_OVERRIDE_ROOT = Path.home() / '.pytestlab' / 'sim_profiles' class-attribute instance-attribute model = model or self.profile_path.stem instance-attribute profile_path = Path(profile_path) instance-attribute timeout_ms = timeout_ms or self.DEFAULT_TIMEOUT_MS instance-attribute Functions close() async Source code in pytestlab/instruments/backends/sim_backend_v2.py async def close(self) -> None: await self.disconnect() connect() async Establish connection (no-op in simulation). Source code in pytestlab/instruments/backends/sim_backend_v2.py async def connect(self) -> None: # noqa: D401 \"Establish connection (no-op in simulation).\" logger.debug(\"%s: connect()\", self.model) disconnect() async Close connection (no-op). Source code in pytestlab/instruments/backends/sim_backend_v2.py async def disconnect(self) -> None: \"Close connection (no-op).\" logger.debug(\"%s: disconnect()\", self.model) get_timeout() async Source code in pytestlab/instruments/backends/sim_backend_v2.py async def get_timeout(self) -> int: return self.timeout_ms query(cmd, delay=None) async Handle a SCPI query and return a decoded string. Source code in pytestlab/instruments/backends/sim_backend_v2.py async def query(self, cmd: str, delay: float | None = None) -> str: \"Handle a SCPI query and return a **decoded** string.\" if delay: await asyncio.sleep(delay) response = self._handle_command(cmd, expect_response=True) logger.debug(\"%s QUERY \u2039%s\u203a \u2192 %s\", self.model, cmd.strip(), response) return response query_raw(cmd, delay=None) async Source code in pytestlab/instruments/backends/sim_backend_v2.py async def query_raw(self, cmd: str, delay: float | None = None) -> bytes: resp = await self.query(cmd, delay) if isinstance(resp, bytes): return resp return resp.encode() set_timeout(timeout_ms) async Source code in pytestlab/instruments/backends/sim_backend_v2.py async def set_timeout(self, timeout_ms: int) -> None: self.timeout_ms = timeout_ms write(cmd) async Handle a SCPI write. Source code in pytestlab/instruments/backends/sim_backend_v2.py async def write(self, cmd: str) -> None: \"Handle a SCPI write.\" logger.debug(\"%s WRITE \u2039%s\u203a\", self.model, cmd.strip()) self._handle_command(cmd) RecordingBackend A backend that wraps another backend and records all SCPI commands and responses. Used for generating simulation profiles and debugging. pytestlab.instruments.backends.recording_backend.RecordingBackend(backend, output_path=None, base_profile=None) A backend that records interactions to a simulation profile. Source code in pytestlab/instruments/backends/recording_backend.py def __init__(self, backend, output_path=None, base_profile=None): self.backend = backend self.output_path = output_path self.base_profile = base_profile if base_profile is not None else {} self.log = [] self.start_time = time.monotonic() Attributes backend = backend instance-attribute base_profile = base_profile if base_profile is not None else {} instance-attribute log = [] instance-attribute output_path = output_path instance-attribute start_time = time.monotonic() instance-attribute Functions __getattr__(name) Delegate other attributes to the wrapped backend. Source code in pytestlab/instruments/backends/recording_backend.py def __getattr__(self, name): \"\"\"Delegate other attributes to the wrapped backend.\"\"\" return getattr(self.backend, name) close() async Close the backend and write the simulation profile. Source code in pytestlab/instruments/backends/recording_backend.py async def close(self): \"\"\"Close the backend and write the simulation profile.\"\"\" if hasattr(self.backend, 'close') and callable(getattr(self.backend, 'close')): result = self.backend.close() if asyncio.iscoroutine(result): await result print(\"DEBUG: Calling generate_profile from RecordingBackend.close()\") self.generate_profile() generate_profile() Generate the YAML simulation profile from the log. Source code in pytestlab/instruments/backends/recording_backend.py def generate_profile(self): \"\"\"Generate the YAML simulation profile from the log.\"\"\" print(f\"DEBUG: generate_profile called. Output path: {self.output_path}\") scpi_map = {} for entry in self.log: if entry[\"type\"] == \"query\": scpi_map[entry[\"command\"]] = entry[\"response\"] elif entry[\"type\"] == \"query_raw\": command_slug = re.sub(r\"[^a-zA-Z0-9]\", \"_\", entry[\"command\"]) binary_filename = f\"{command_slug}.bin\" binary_filepath = Path(self.output_path).parent / binary_filename with open(binary_filepath, \"wb\") as f: f.write(entry[\"response\"]) scpi_map[entry[\"command\"]] = {\"binary\": binary_filename} elif entry[\"type\"] == \"write\": # For writes, we record the command with an empty response, # which is suitable for commands that don't return a value. scpi_map[entry[\"command\"]] = \"\" profile = self.base_profile if \"simulation\" not in profile: profile[\"simulation\"] = {} profile[\"simulation\"][\"scpi\"] = scpi_map print(f\"DEBUG: Profile data to be written: {profile}\") if self.output_path: try: output_file = Path(self.output_path) print(f\"DEBUG: Creating parent directory for {output_file}\") output_file.parent.mkdir(parents=True, exist_ok=True) print(f\"DEBUG: Writing to file {output_file}\") with open(output_file, \"w\") as f: yaml.dump(profile, f, sort_keys=False) print(\"DEBUG: File write complete.\") LOGGER.info(f\"Simulation profile saved to {self.output_path}\") except Exception as e: print(f\"DEBUG: ERROR in generate_profile: {e}\") else: # In a real scenario, this would go to a user cache directory. # For now, let's just print it if no path is provided. print(\"DEBUG: No output path provided. Printing to stdout.\") print(yaml.dump(profile, sort_keys=False)) query(command, *args, **kwargs) async Async query to the instrument, log it, and return the response. Source code in pytestlab/instruments/backends/recording_backend.py async def query(self, command: str, *args, **kwargs): \"\"\"Async query to the instrument, log it, and return the response.\"\"\" if hasattr(self.backend, 'query') and callable(getattr(self.backend, 'query')): result = self.backend.query(command, *args, **kwargs) if asyncio.iscoroutine(result): response = await result else: response = result self.log.append({ \"type\": \"query\", \"command\": command.strip(), \"response\": getattr(response, 'strip', lambda: response)() }) return response raise NotImplementedError(\"Backend does not support query method.\") query_raw(command, *args, **kwargs) async Async query to the instrument, log it, and return the response. Source code in pytestlab/instruments/backends/recording_backend.py async def query_raw(self, command: str, *args, **kwargs): \"\"\"Async query to the instrument, log it, and return the response.\"\"\" if hasattr(self.backend, 'query_raw') and callable(getattr(self.backend, 'query_raw')): result = self.backend.query_raw(command, *args, **kwargs) if asyncio.iscoroutine(result): response = await result else: response = result self.log.append({ \"type\": \"query_raw\", \"command\": command.strip(), \"response\": response }) return response raise NotImplementedError(\"Backend does not support query_raw method.\") read() Read from the instrument and log it. Source code in pytestlab/instruments/backends/recording_backend.py def read(self) -> str: \"\"\"Read from the instrument and log it.\"\"\" response = self.backend.read() self.log.append({\"type\": \"read\", \"response\": response.strip()}) return response write(command, *args, **kwargs) async Async write a command to the instrument and log it. Source code in pytestlab/instruments/backends/recording_backend.py async def write(self, command: str, *args, **kwargs): \"\"\"Async write a command to the instrument and log it.\"\"\" self.log.append({\"type\": \"write\", \"command\": command.strip()}) if hasattr(self.backend, 'write') and callable(getattr(self.backend, 'write')): result = self.backend.write(command, *args, **kwargs) if asyncio.iscoroutine(result): return await result return result raise NotImplementedError(\"Backend does not support write method.\") Backend Selection Logic PyTestLab chooses the backend automatically based on: The simulate flag (in code or bench.yaml ) The instrument's address (e.g., \"sim\" triggers simulation) The backend or backend_defaults fields in your configuration You can override backend selection by specifying backend_type_hint when creating an instrument. Extending Backends To add support for a new hardware interface, subclass InstrumentBackendBase and implement the required async methods ( open , close , write , query , etc.). See the source code and existing backends for examples. For more details on simulation, see the Simulation Guide .","title":"Backends"},{"location":"api/backends/#instrument-backends","text":"PyTestLab supports multiple instrument communication backends, each designed for a specific class of hardware or simulation use case. This page documents the main backend classes and their roles.","title":"Instrument Backends"},{"location":"api/backends/#overview","text":"A backend is the low-level driver responsible for communicating with an instrument. Backends abstract the transport mechanism (VISA, Lamb, simulation, etc.) so that high-level instrument drivers can use a unified API. Backends are typically not used directly by end-users. Instead, they are selected automatically based on your instrument profile, connection string, and simulation settings.","title":"Overview"},{"location":"api/backends/#available-backends","text":"","title":"Available Backends"},{"location":"api/backends/#asyncvisabackend","text":"Asynchronous backend for VISA-compatible instruments (e.g., GPIB, USB, TCPIP, RS232). Uses PyVISA under the hood.","title":"AsyncVisaBackend"},{"location":"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend","text":"An asynchronous backend for communicating with instruments using pyvisa, by running blocking calls in a separate thread via anyio. This class implements the AsyncInstrumentIO protocol. Source code in pytestlab/instruments/backends/async_visa_backend.py def __init__(self, address: str, timeout_ms: Optional[int] = 5000): self.address = address self.rm = pyvisa.ResourceManager() self.instrument: Optional[MessageBasedResource] = None self._timeout_ms = timeout_ms if timeout_ms is not None else 5000 # Default to 5 seconds self._lock = anyio.Lock() # For thread-safety around instrument access","title":"AsyncVisaBackend"},{"location":"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend-attributes","text":"","title":"Attributes"},{"location":"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.address","text":"","title":"address"},{"location":"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.instrument","text":"","title":"instrument"},{"location":"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.rm","text":"","title":"rm"},{"location":"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend-functions","text":"","title":"Functions"},{"location":"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close","text":"Closes the connection asynchronously (alias for disconnect). Source code in pytestlab/instruments/backends/async_visa_backend.py async def close(self) -> None: \"\"\"Closes the connection asynchronously (alias for disconnect).\"\"\" await self.disconnect()","title":"close"},{"location":"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect","text":"Connects to the VISA resource asynchronously. Source code in pytestlab/instruments/backends/async_visa_backend.py async def connect(self) -> None: \"\"\"Connects to the VISA resource asynchronously.\"\"\" async with self._lock: if self.instrument is not None: try: # Ensure existing instrument is closed before reconnecting await anyio.to_thread.run_sync(self.instrument.close) except Exception: # Ignore errors if already closed or in a bad state pass self.instrument = None try: # Run the blocking open_resource call in a thread resource = await anyio.to_thread.run_sync(self.rm.open_resource, self.address) if not isinstance(resource, pyvisa.resources.MessageBasedResource): raise InstrumentConnectionError( f\"Resource at {self.address} is not a MessageBasedResource. Type: {type(resource).__name__}\" ) self.instrument = cast('MessageBasedResource', resource) # Cast for type checker # Set timeout on the instrument object def _set_timeout_on_instrument(instr: MessageBasedResource, timeout: int) -> None: instr.timeout = timeout await anyio.to_thread.run_sync(_set_timeout_on_instrument, self.instrument, self._timeout_ms) except pyvisa.Error as e: raise InstrumentConnectionError(f\"Failed to connect to VISA resource {self.address}: {e}\") from e except Exception as e: raise InstrumentConnectionError(f\"An unexpected error occurred while connecting to VISA resource {self.address}: {e}\") from e","title":"connect"},{"location":"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect","text":"Disconnects from the VISA resource asynchronously. Source code in pytestlab/instruments/backends/async_visa_backend.py async def disconnect(self) -> None: \"\"\"Disconnects from the VISA resource asynchronously.\"\"\" async with self._lock: if self.instrument is not None: try: await anyio.to_thread.run_sync(self.instrument.close) except pyvisa.Error as e: raise InstrumentConnectionError(f\"Error disconnecting from VISA resource {self.address}: {e}\") from e except Exception as e: raise InstrumentConnectionError(f\"An unexpected error occurred while disconnecting VISA resource {self.address}: {e}\") from e finally: self.instrument = None","title":"disconnect"},{"location":"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout","text":"Gets the communication timeout in milliseconds. Source code in pytestlab/instruments/backends/async_visa_backend.py async def get_timeout(self) -> int: \"\"\"Gets the communication timeout in milliseconds.\"\"\" # Return the locally stored timeout. Reading from instrument is not always reliable # and the local value is the intended setting. return self._timeout_ms","title":"get_timeout"},{"location":"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query","text":"Sends a query and returns the string response asynchronously. Source code in pytestlab/instruments/backends/async_visa_backend.py async def query(self, cmd: str, delay: Optional[float] = None) -> str: \"\"\"Sends a query and returns the string response asynchronously.\"\"\" if self.instrument is None: raise InstrumentConnectionError(\"Not connected to VISA resource. Call connect() first.\") instr = self.instrument # Local reference def _blocking_query(command: str, q_delay: Optional[float]) -> str: return instr.query(command, delay=q_delay).strip() async with self._lock: if self.instrument is None: raise InstrumentConnectionError(\"Instrument became disconnected before query.\") try: response = await anyio.to_thread.run_sync(_blocking_query, cmd, delay) return response except pyvisa.Error as e: raise InstrumentCommunicationError(f\"Failed to query '{cmd}' from {self.address}: {e}\") from e except Exception as e: raise InstrumentCommunicationError(f\"An unexpected error occurred querying '{cmd}' from {self.address}: {e}\") from e","title":"query"},{"location":"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw","text":"Sends a query and returns the raw bytes response asynchronously. Source code in pytestlab/instruments/backends/async_visa_backend.py async def query_raw(self, cmd: str, delay: Optional[float] = None) -> bytes: \"\"\"Sends a query and returns the raw bytes response asynchronously.\"\"\" if self.instrument is None: raise InstrumentConnectionError(\"Not connected to VISA resource. Call connect() first.\") instr = self.instrument # Local reference def _blocking_query_raw(command: str, q_delay: Optional[float]) -> bytes: instr.write(command) # Write the command if q_delay is not None: time.sleep(q_delay) # Blocking sleep in the thread # Assuming read_bytes is the appropriate method for raw data. # Adjust chunk_size or method (e.g. read_raw()) as needed. return instr.read_bytes(instr.chunk_size) async with self._lock: if self.instrument is None: raise InstrumentConnectionError(\"Instrument became disconnected before query_raw.\") try: data = await anyio.to_thread.run_sync(_blocking_query_raw, cmd, delay) return data except pyvisa.Error as e: raise InstrumentCommunicationError(f\"Failed to query_raw '{cmd}' from {self.address}: {e}\") from e except Exception as e: raise InstrumentCommunicationError(f\"An unexpected error occurred during query_raw '{cmd}' from {self.address}: {e}\") from e","title":"query_raw"},{"location":"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout","text":"Sets the communication timeout in milliseconds asynchronously. Source code in pytestlab/instruments/backends/async_visa_backend.py async def set_timeout(self, timeout_ms: int) -> None: \"\"\"Sets the communication timeout in milliseconds asynchronously.\"\"\" if timeout_ms <= 0: raise ValueError(\"Timeout must be positive.\") self._timeout_ms = timeout_ms # Update local store immediately if self.instrument: instr = self.instrument # Local reference def _blocking_set_timeout(timeout_val: int) -> None: instr.timeout = timeout_val async with self._lock: # Ensure instrument object isn't changed during this if self.instrument: # Re-check after lock try: await anyio.to_thread.run_sync(_blocking_set_timeout, timeout_ms) except pyvisa.Error as e: # Log this, but don't necessarily fail the operation. print(f\"Warning: Could not set timeout on async VISA resource {self.address}: {e}\") except Exception as e: print(f\"Warning: An unexpected error occurred setting timeout on async VISA resource {self.address}: {e}\")","title":"set_timeout"},{"location":"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write","text":"Writes a command to the instrument asynchronously. Source code in pytestlab/instruments/backends/async_visa_backend.py async def write(self, cmd: str) -> None: \"\"\"Writes a command to the instrument asynchronously.\"\"\" if self.instrument is None: raise InstrumentConnectionError(\"Not connected to VISA resource. Call connect() first.\") instr = self.instrument # Local reference for thread safety def _blocking_write(command: str) -> None: instr.write(command) async with self._lock: # Ensure exclusive access for the write operation if self.instrument is None: # Re-check after acquiring lock raise InstrumentConnectionError(\"Instrument became disconnected before write.\") try: await anyio.to_thread.run_sync(_blocking_write, cmd) except pyvisa.Error as e: raise InstrumentCommunicationError(f\"Failed to write command '{cmd}' to {self.address}: {e}\") from e except Exception as e: raise InstrumentCommunicationError(f\"An unexpected error occurred writing command '{cmd}' to {self.address}: {e}\") from e","title":"write"},{"location":"api/backends/#asynclambbackend","text":"Backend for instruments accessible via the Lamb remote instrument server protocol. Supports async TCP communication with Lamb daemons.","title":"AsyncLambBackend"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend","text":"An asynchronous backend for communicating with instruments via a Lamb server. Supports both direct visa_string and auto-connect via model/serial_number. PARAMETER DESCRIPTION address The visa_string or unique instrument address. If not provided, model_name and serial_number must be provided. TYPE: Optional [ str ] DEFAULT: None url Lamb server base URL. TYPE: str DEFAULT: 'http://lamb-server:8000' timeout_ms Communication timeout in ms. TYPE: Optional [ int ] DEFAULT: 10000 model_name Model name for auto-connect. TYPE: Optional [ str ] DEFAULT: None serial_number Serial number for auto-connect. TYPE: Optional [ str ] DEFAULT: None Source code in pytestlab/instruments/backends/lamb.py def __init__( self, address: Optional[str] = None, url: str = \"http://lamb-server:8000\", timeout_ms: Optional[int] = 10000, model_name: Optional[str] = None, serial_number: Optional[str] = None, ): \"\"\" Args: address: The visa_string or unique instrument address. If not provided, model_name and serial_number must be provided. url: Lamb server base URL. timeout_ms: Communication timeout in ms. model_name: Model name for auto-connect. serial_number: Serial number for auto-connect. \"\"\" self.base_url: str = url.rstrip('/') self.instrument_address: Optional[str] = address # visa_string self.model_name: Optional[str] = model_name self.serial_number: Optional[str] = serial_number self._timeout_sec: float = (timeout_ms / 1000.0) if timeout_ms and timeout_ms > 0 else 5.0 self._client: Optional[httpx.AsyncClient] = None self._auto_connect_performed: bool = False lamb_logger.info( f\"AsyncLambBackend initialized for address='{address}', model='{model_name}', serial='{serial_number}' at URL '{url}'\" )","title":"AsyncLambBackend"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend-attributes","text":"","title":"Attributes"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.base_url","text":"","title":"base_url"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.instrument_address","text":"","title":"instrument_address"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.model_name","text":"","title":"model_name"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.serial_number","text":"","title":"serial_number"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend-functions","text":"","title":"Functions"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close","text":"Source code in pytestlab/instruments/backends/lamb.py async def close(self) -> None: await self.disconnect()","title":"close"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect","text":"Ensures the instrument is registered with Lamb and ready. Source code in pytestlab/instruments/backends/lamb.py async def connect(self) -> None: \"\"\" Ensures the instrument is registered with Lamb and ready. \"\"\" await self._ensure_connected() # Optionally, ping instrument status endpoint here lamb_logger.info(f\"Connected to Lamb instrument '{self.instrument_address}'.\")","title":"connect"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect","text":"Source code in pytestlab/instruments/backends/lamb.py async def disconnect(self) -> None: lamb_logger.info(f\"AsyncLambBackend for '{self.instrument_address}' disconnected (simulated, as client is per-request or context-managed).\") pass","title":"disconnect"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout","text":"Source code in pytestlab/instruments/backends/lamb.py async def get_timeout(self) -> int: return int(self._timeout_sec * 1000)","title":"get_timeout"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query","text":"Source code in pytestlab/instruments/backends/lamb.py async def query(self, cmd: str, delay: Optional[float] = None) -> str: await self._ensure_connected() lamb_logger.debug(f\"QUERY to '{self.instrument_address}': {cmd}\") try: async with httpx.AsyncClient(timeout=self._timeout_sec) as client: response = await client.post( f\"{self.base_url}/instrument/query\", json={\"visa_string\": self.instrument_address, \"command\": cmd}, headers={\"Accept\": \"application/json\", 'Accept-Charset': 'utf-8'} ) response.raise_for_status() content: str = response.content.decode('utf-8') return content.strip() except httpx.HTTPStatusError as e: raise InstrumentCommunicationError( f\"Lamb server query failed: {e.response.status_code} - {e.response.text}\" ) from e except httpx.RequestError as e: raise InstrumentCommunicationError( f\"Network error during Lamb query: {e}\" ) from e","title":"query"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw","text":"Source code in pytestlab/instruments/backends/lamb.py async def query_raw(self, cmd: str, delay: Optional[float] = None) -> bytes: await self._ensure_connected() lamb_logger.debug(f\"QUERY_RAW to '{self.instrument_address}': {cmd}\") try: async with httpx.AsyncClient(timeout=self._timeout_sec) as client: response = await client.post( f\"{self.base_url}/instrument/query_raw\", json={\"visa_string\": self.instrument_address, \"command\": cmd}, headers={\"Accept\": \"application/octet-stream\"} ) response.raise_for_status() return response.content except httpx.HTTPStatusError as e: raise InstrumentCommunicationError( f\"Lamb server query_raw failed: {e.response.status_code} - {e.response.text}\" ) from e except httpx.RequestError as e: raise InstrumentCommunicationError( f\"Network error during Lamb query_raw: {e}\" ) from e","title":"query_raw"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout","text":"Source code in pytestlab/instruments/backends/lamb.py async def set_timeout(self, timeout_ms: int) -> None: if timeout_ms <= 0: self._timeout_sec = 0.001 else: self._timeout_sec = timeout_ms / 1000.0 lamb_logger.debug(f\"AsyncLambBackend timeout set to {self._timeout_sec} seconds.\")","title":"set_timeout"},{"location":"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write","text":"Source code in pytestlab/instruments/backends/lamb.py async def write(self, cmd: str) -> None: await self._ensure_connected() lamb_logger.debug(f\"WRITE to '{self.instrument_address}': {cmd}\") try: async with httpx.AsyncClient(timeout=self._timeout_sec) as client: response = await client.post( f\"{self.base_url}/instrument/write\", json={\"visa_string\": self.instrument_address, \"command\": cmd}, headers={\"Accept\": \"application/json\", 'Accept-Charset': 'utf-8'} ) response.raise_for_status() except httpx.HTTPStatusError as e: raise InstrumentCommunicationError( f\"Lamb server write failed: {e.response.status_code} - {e.response.text}\" ) from e except httpx.RequestError as e: raise InstrumentCommunicationError( f\"Network error during Lamb write: {e}\" ) from e","title":"write"},{"location":"api/backends/#simbackendv2","text":"YAML-driven simulation backend. Provides deterministic, profile-based simulation for development, CI, and testing. Reads the simulation section of instrument profiles.","title":"SimBackendV2"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2","text":"Drop-in replacement for the existing SimBackend with vastly richer functionality (see module docstring for highlights). Source code in pytestlab/instruments/backends/sim_backend_v2.py def __init__( self, profile_path: str | os.PathLike, *, model: str | None = None, timeout_ms: int | None = None, ) -> None: self.profile_path = Path(profile_path) self.timeout_ms = timeout_ms or self.DEFAULT_TIMEOUT_MS self.model = model or self.profile_path.stem # main data self._profile = self._load_profile() self._state: dotdict = dotdict(self._profile[\"simulation\"].get(\"initial_state\", {})) self._error_queue: List[Tuple[int, str]] = [] # dispatcher self._exact_map: Dict[str, Any] = {} self._pattern_rules: List[_PatternRule] = [] self._build_dispatch_tables() logger.info(\"SimBackendV2 initialised for %s\", self.model)","title":"SimBackendV2"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2-attributes","text":"","title":"Attributes"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.DEFAULT_TIMEOUT_MS","text":"","title":"DEFAULT_TIMEOUT_MS"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.USER_OVERRIDE_ROOT","text":"","title":"USER_OVERRIDE_ROOT"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.model","text":"","title":"model"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.profile_path","text":"","title":"profile_path"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.timeout_ms","text":"","title":"timeout_ms"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2-functions","text":"","title":"Functions"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close","text":"Source code in pytestlab/instruments/backends/sim_backend_v2.py async def close(self) -> None: await self.disconnect()","title":"close"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect","text":"Establish connection (no-op in simulation). Source code in pytestlab/instruments/backends/sim_backend_v2.py async def connect(self) -> None: # noqa: D401 \"Establish connection (no-op in simulation).\" logger.debug(\"%s: connect()\", self.model)","title":"connect"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect","text":"Close connection (no-op). Source code in pytestlab/instruments/backends/sim_backend_v2.py async def disconnect(self) -> None: \"Close connection (no-op).\" logger.debug(\"%s: disconnect()\", self.model)","title":"disconnect"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout","text":"Source code in pytestlab/instruments/backends/sim_backend_v2.py async def get_timeout(self) -> int: return self.timeout_ms","title":"get_timeout"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query","text":"Handle a SCPI query and return a decoded string. Source code in pytestlab/instruments/backends/sim_backend_v2.py async def query(self, cmd: str, delay: float | None = None) -> str: \"Handle a SCPI query and return a **decoded** string.\" if delay: await asyncio.sleep(delay) response = self._handle_command(cmd, expect_response=True) logger.debug(\"%s QUERY \u2039%s\u203a \u2192 %s\", self.model, cmd.strip(), response) return response","title":"query"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw","text":"Source code in pytestlab/instruments/backends/sim_backend_v2.py async def query_raw(self, cmd: str, delay: float | None = None) -> bytes: resp = await self.query(cmd, delay) if isinstance(resp, bytes): return resp return resp.encode()","title":"query_raw"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout","text":"Source code in pytestlab/instruments/backends/sim_backend_v2.py async def set_timeout(self, timeout_ms: int) -> None: self.timeout_ms = timeout_ms","title":"set_timeout"},{"location":"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write","text":"Handle a SCPI write. Source code in pytestlab/instruments/backends/sim_backend_v2.py async def write(self, cmd: str) -> None: \"Handle a SCPI write.\" logger.debug(\"%s WRITE \u2039%s\u203a\", self.model, cmd.strip()) self._handle_command(cmd)","title":"write"},{"location":"api/backends/#recordingbackend","text":"A backend that wraps another backend and records all SCPI commands and responses. Used for generating simulation profiles and debugging.","title":"RecordingBackend"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend","text":"A backend that records interactions to a simulation profile. Source code in pytestlab/instruments/backends/recording_backend.py def __init__(self, backend, output_path=None, base_profile=None): self.backend = backend self.output_path = output_path self.base_profile = base_profile if base_profile is not None else {} self.log = [] self.start_time = time.monotonic()","title":"RecordingBackend"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend-attributes","text":"","title":"Attributes"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.backend","text":"","title":"backend"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.base_profile","text":"","title":"base_profile"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.log","text":"","title":"log"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.output_path","text":"","title":"output_path"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.start_time","text":"","title":"start_time"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend-functions","text":"","title":"Functions"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__","text":"Delegate other attributes to the wrapped backend. Source code in pytestlab/instruments/backends/recording_backend.py def __getattr__(self, name): \"\"\"Delegate other attributes to the wrapped backend.\"\"\" return getattr(self.backend, name)","title":"__getattr__"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close","text":"Close the backend and write the simulation profile. Source code in pytestlab/instruments/backends/recording_backend.py async def close(self): \"\"\"Close the backend and write the simulation profile.\"\"\" if hasattr(self.backend, 'close') and callable(getattr(self.backend, 'close')): result = self.backend.close() if asyncio.iscoroutine(result): await result print(\"DEBUG: Calling generate_profile from RecordingBackend.close()\") self.generate_profile()","title":"close"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile","text":"Generate the YAML simulation profile from the log. Source code in pytestlab/instruments/backends/recording_backend.py def generate_profile(self): \"\"\"Generate the YAML simulation profile from the log.\"\"\" print(f\"DEBUG: generate_profile called. Output path: {self.output_path}\") scpi_map = {} for entry in self.log: if entry[\"type\"] == \"query\": scpi_map[entry[\"command\"]] = entry[\"response\"] elif entry[\"type\"] == \"query_raw\": command_slug = re.sub(r\"[^a-zA-Z0-9]\", \"_\", entry[\"command\"]) binary_filename = f\"{command_slug}.bin\" binary_filepath = Path(self.output_path).parent / binary_filename with open(binary_filepath, \"wb\") as f: f.write(entry[\"response\"]) scpi_map[entry[\"command\"]] = {\"binary\": binary_filename} elif entry[\"type\"] == \"write\": # For writes, we record the command with an empty response, # which is suitable for commands that don't return a value. scpi_map[entry[\"command\"]] = \"\" profile = self.base_profile if \"simulation\" not in profile: profile[\"simulation\"] = {} profile[\"simulation\"][\"scpi\"] = scpi_map print(f\"DEBUG: Profile data to be written: {profile}\") if self.output_path: try: output_file = Path(self.output_path) print(f\"DEBUG: Creating parent directory for {output_file}\") output_file.parent.mkdir(parents=True, exist_ok=True) print(f\"DEBUG: Writing to file {output_file}\") with open(output_file, \"w\") as f: yaml.dump(profile, f, sort_keys=False) print(\"DEBUG: File write complete.\") LOGGER.info(f\"Simulation profile saved to {self.output_path}\") except Exception as e: print(f\"DEBUG: ERROR in generate_profile: {e}\") else: # In a real scenario, this would go to a user cache directory. # For now, let's just print it if no path is provided. print(\"DEBUG: No output path provided. Printing to stdout.\") print(yaml.dump(profile, sort_keys=False))","title":"generate_profile"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query","text":"Async query to the instrument, log it, and return the response. Source code in pytestlab/instruments/backends/recording_backend.py async def query(self, command: str, *args, **kwargs): \"\"\"Async query to the instrument, log it, and return the response.\"\"\" if hasattr(self.backend, 'query') and callable(getattr(self.backend, 'query')): result = self.backend.query(command, *args, **kwargs) if asyncio.iscoroutine(result): response = await result else: response = result self.log.append({ \"type\": \"query\", \"command\": command.strip(), \"response\": getattr(response, 'strip', lambda: response)() }) return response raise NotImplementedError(\"Backend does not support query method.\")","title":"query"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw","text":"Async query to the instrument, log it, and return the response. Source code in pytestlab/instruments/backends/recording_backend.py async def query_raw(self, command: str, *args, **kwargs): \"\"\"Async query to the instrument, log it, and return the response.\"\"\" if hasattr(self.backend, 'query_raw') and callable(getattr(self.backend, 'query_raw')): result = self.backend.query_raw(command, *args, **kwargs) if asyncio.iscoroutine(result): response = await result else: response = result self.log.append({ \"type\": \"query_raw\", \"command\": command.strip(), \"response\": response }) return response raise NotImplementedError(\"Backend does not support query_raw method.\")","title":"query_raw"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read","text":"Read from the instrument and log it. Source code in pytestlab/instruments/backends/recording_backend.py def read(self) -> str: \"\"\"Read from the instrument and log it.\"\"\" response = self.backend.read() self.log.append({\"type\": \"read\", \"response\": response.strip()}) return response","title":"read"},{"location":"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write","text":"Async write a command to the instrument and log it. Source code in pytestlab/instruments/backends/recording_backend.py async def write(self, command: str, *args, **kwargs): \"\"\"Async write a command to the instrument and log it.\"\"\" self.log.append({\"type\": \"write\", \"command\": command.strip()}) if hasattr(self.backend, 'write') and callable(getattr(self.backend, 'write')): result = self.backend.write(command, *args, **kwargs) if asyncio.iscoroutine(result): return await result return result raise NotImplementedError(\"Backend does not support write method.\")","title":"write"},{"location":"api/backends/#backend-selection-logic","text":"PyTestLab chooses the backend automatically based on: The simulate flag (in code or bench.yaml ) The instrument's address (e.g., \"sim\" triggers simulation) The backend or backend_defaults fields in your configuration You can override backend selection by specifying backend_type_hint when creating an instrument.","title":"Backend Selection Logic"},{"location":"api/backends/#extending-backends","text":"To add support for a new hardware interface, subclass InstrumentBackendBase and implement the required async methods ( open , close , write , query , etc.). See the source code and existing backends for examples. For more details on simulation, see the Simulation Guide .","title":"Extending Backends"},{"location":"api/common/","text":"Common Utilities This section documents shared enums, health checks, and other utility modules used throughout PyTestLab. Enums pytestlab.common.enums __all__ = ['SCPIOnOff', 'WaveformType', 'TriggerSlope', 'AcquisitionType', 'OutputLoadImpedance', 'OutputPolarity', 'VoltageUnit', 'TriggerSource', 'SyncMode', 'ModulationSource'] module-attribute AcquisitionType Bases: str , Enum AVERAGE = 'AVER' class-attribute instance-attribute HIGH_RES = 'HRES' class-attribute instance-attribute NORMAL = 'NORM' class-attribute instance-attribute PEAK = 'PEAK' class-attribute instance-attribute ArbAdvanceMode Bases: str , Enum SRATE = 'SRATe' class-attribute instance-attribute TRIGGER = 'TRIGger' class-attribute instance-attribute ArbFilterType Bases: str , Enum NORMAL = 'NORMal' class-attribute instance-attribute OFF = 'OFF' class-attribute instance-attribute STEP = 'STEP' class-attribute instance-attribute BurstMode Bases: str , Enum GATED = 'GATed' class-attribute instance-attribute TRIGGERED = 'TRIGgered' class-attribute instance-attribute ModulationSource Bases: str , Enum CH1 = 'CH1' class-attribute instance-attribute CH2 = 'CH2' class-attribute instance-attribute EXTERNAL = 'EXTernal' class-attribute instance-attribute INTERNAL = 'INTernal' class-attribute instance-attribute OutputLoadImpedance Bases: str , Enum DEFAULT = 'DEFault' class-attribute instance-attribute FIFTY_OHM = '50' class-attribute instance-attribute INFINITY = 'INFinity' class-attribute instance-attribute MAXIMUM = 'MAXimum' class-attribute instance-attribute MINIMUM = 'MINimum' class-attribute instance-attribute OutputPolarity Bases: str , Enum INVERTED = 'INVerted' class-attribute instance-attribute NORMAL = 'NORMal' class-attribute instance-attribute SCPIOnOff Bases: str , Enum OFF = 'OFF' class-attribute instance-attribute ON = 'ON' class-attribute instance-attribute SweepSpacing Bases: str , Enum LINEAR = 'LINear' class-attribute instance-attribute LOGARITHMIC = 'LOGarithmic' class-attribute instance-attribute SyncMode Bases: str , Enum CARRIER = 'CARRier' class-attribute instance-attribute MARKER = 'MARKer' class-attribute instance-attribute NORMAL = 'NORMal' class-attribute instance-attribute TriggerSlope Bases: str , Enum ALTERNATING = 'ALT' class-attribute instance-attribute EITHER = 'EITH' class-attribute instance-attribute NEGATIVE = 'NEG' class-attribute instance-attribute POSITIVE = 'POS' class-attribute instance-attribute TriggerSource Bases: str , Enum BUS = 'BUS' class-attribute instance-attribute EXTERNAL = 'EXTernal' class-attribute instance-attribute IMMEDIATE = 'IMMediate' class-attribute instance-attribute TIMER = 'TIMer' class-attribute instance-attribute VoltageUnit Bases: str , Enum DBM = 'DBM' class-attribute instance-attribute VPP = 'VPP' class-attribute instance-attribute VRMS = 'VRMS' class-attribute instance-attribute WaveformType Bases: str , Enum ARB = 'ARB' class-attribute instance-attribute DC = 'DC' class-attribute instance-attribute NOISE = 'NOIS' class-attribute instance-attribute PULSE = 'PULS' class-attribute instance-attribute RAMP = 'RAMP' class-attribute instance-attribute SINE = 'SIN' class-attribute instance-attribute SQUARE = 'SQU' class-attribute instance-attribute Health Checks pytestlab.common.health HealthReport Bases: BaseModel backend_status = None class-attribute instance-attribute errors = [] class-attribute instance-attribute instrument_idn = None class-attribute instance-attribute model_config = ConfigDict(validate_assignment=True) class-attribute instance-attribute status = HealthStatus.UNKNOWN class-attribute instance-attribute supported_features = {} class-attribute instance-attribute warnings = [] class-attribute instance-attribute HealthStatus Bases: str , Enum ERROR = 'ERROR' class-attribute instance-attribute OK = 'OK' class-attribute instance-attribute UNKNOWN = 'UNKNOWN' class-attribute instance-attribute WARNING = 'WARNING' class-attribute instance-attribute","title":"Common Utilities"},{"location":"api/common/#common-utilities","text":"This section documents shared enums, health checks, and other utility modules used throughout PyTestLab.","title":"Common Utilities"},{"location":"api/common/#enums","text":"","title":"Enums"},{"location":"api/common/#pytestlab.common.enums","text":"","title":"enums"},{"location":"api/common/#pytestlab.common.enums.__all__","text":"","title":"__all__"},{"location":"api/common/#pytestlab.common.enums.AcquisitionType","text":"Bases: str , Enum","title":"AcquisitionType"},{"location":"api/common/#pytestlab.common.enums.AcquisitionType.AVERAGE","text":"","title":"AVERAGE"},{"location":"api/common/#pytestlab.common.enums.AcquisitionType.HIGH_RES","text":"","title":"HIGH_RES"},{"location":"api/common/#pytestlab.common.enums.AcquisitionType.NORMAL","text":"","title":"NORMAL"},{"location":"api/common/#pytestlab.common.enums.AcquisitionType.PEAK","text":"","title":"PEAK"},{"location":"api/common/#pytestlab.common.enums.ArbAdvanceMode","text":"Bases: str , Enum","title":"ArbAdvanceMode"},{"location":"api/common/#pytestlab.common.enums.ArbAdvanceMode.SRATE","text":"","title":"SRATE"},{"location":"api/common/#pytestlab.common.enums.ArbAdvanceMode.TRIGGER","text":"","title":"TRIGGER"},{"location":"api/common/#pytestlab.common.enums.ArbFilterType","text":"Bases: str , Enum","title":"ArbFilterType"},{"location":"api/common/#pytestlab.common.enums.ArbFilterType.NORMAL","text":"","title":"NORMAL"},{"location":"api/common/#pytestlab.common.enums.ArbFilterType.OFF","text":"","title":"OFF"},{"location":"api/common/#pytestlab.common.enums.ArbFilterType.STEP","text":"","title":"STEP"},{"location":"api/common/#pytestlab.common.enums.BurstMode","text":"Bases: str , Enum","title":"BurstMode"},{"location":"api/common/#pytestlab.common.enums.BurstMode.GATED","text":"","title":"GATED"},{"location":"api/common/#pytestlab.common.enums.BurstMode.TRIGGERED","text":"","title":"TRIGGERED"},{"location":"api/common/#pytestlab.common.enums.ModulationSource","text":"Bases: str , Enum","title":"ModulationSource"},{"location":"api/common/#pytestlab.common.enums.ModulationSource.CH1","text":"","title":"CH1"},{"location":"api/common/#pytestlab.common.enums.ModulationSource.CH2","text":"","title":"CH2"},{"location":"api/common/#pytestlab.common.enums.ModulationSource.EXTERNAL","text":"","title":"EXTERNAL"},{"location":"api/common/#pytestlab.common.enums.ModulationSource.INTERNAL","text":"","title":"INTERNAL"},{"location":"api/common/#pytestlab.common.enums.OutputLoadImpedance","text":"Bases: str , Enum","title":"OutputLoadImpedance"},{"location":"api/common/#pytestlab.common.enums.OutputLoadImpedance.DEFAULT","text":"","title":"DEFAULT"},{"location":"api/common/#pytestlab.common.enums.OutputLoadImpedance.FIFTY_OHM","text":"","title":"FIFTY_OHM"},{"location":"api/common/#pytestlab.common.enums.OutputLoadImpedance.INFINITY","text":"","title":"INFINITY"},{"location":"api/common/#pytestlab.common.enums.OutputLoadImpedance.MAXIMUM","text":"","title":"MAXIMUM"},{"location":"api/common/#pytestlab.common.enums.OutputLoadImpedance.MINIMUM","text":"","title":"MINIMUM"},{"location":"api/common/#pytestlab.common.enums.OutputPolarity","text":"Bases: str , Enum","title":"OutputPolarity"},{"location":"api/common/#pytestlab.common.enums.OutputPolarity.INVERTED","text":"","title":"INVERTED"},{"location":"api/common/#pytestlab.common.enums.OutputPolarity.NORMAL","text":"","title":"NORMAL"},{"location":"api/common/#pytestlab.common.enums.SCPIOnOff","text":"Bases: str , Enum","title":"SCPIOnOff"},{"location":"api/common/#pytestlab.common.enums.SCPIOnOff.OFF","text":"","title":"OFF"},{"location":"api/common/#pytestlab.common.enums.SCPIOnOff.ON","text":"","title":"ON"},{"location":"api/common/#pytestlab.common.enums.SweepSpacing","text":"Bases: str , Enum","title":"SweepSpacing"},{"location":"api/common/#pytestlab.common.enums.SweepSpacing.LINEAR","text":"","title":"LINEAR"},{"location":"api/common/#pytestlab.common.enums.SweepSpacing.LOGARITHMIC","text":"","title":"LOGARITHMIC"},{"location":"api/common/#pytestlab.common.enums.SyncMode","text":"Bases: str , Enum","title":"SyncMode"},{"location":"api/common/#pytestlab.common.enums.SyncMode.CARRIER","text":"","title":"CARRIER"},{"location":"api/common/#pytestlab.common.enums.SyncMode.MARKER","text":"","title":"MARKER"},{"location":"api/common/#pytestlab.common.enums.SyncMode.NORMAL","text":"","title":"NORMAL"},{"location":"api/common/#pytestlab.common.enums.TriggerSlope","text":"Bases: str , Enum","title":"TriggerSlope"},{"location":"api/common/#pytestlab.common.enums.TriggerSlope.ALTERNATING","text":"","title":"ALTERNATING"},{"location":"api/common/#pytestlab.common.enums.TriggerSlope.EITHER","text":"","title":"EITHER"},{"location":"api/common/#pytestlab.common.enums.TriggerSlope.NEGATIVE","text":"","title":"NEGATIVE"},{"location":"api/common/#pytestlab.common.enums.TriggerSlope.POSITIVE","text":"","title":"POSITIVE"},{"location":"api/common/#pytestlab.common.enums.TriggerSource","text":"Bases: str , Enum","title":"TriggerSource"},{"location":"api/common/#pytestlab.common.enums.TriggerSource.BUS","text":"","title":"BUS"},{"location":"api/common/#pytestlab.common.enums.TriggerSource.EXTERNAL","text":"","title":"EXTERNAL"},{"location":"api/common/#pytestlab.common.enums.TriggerSource.IMMEDIATE","text":"","title":"IMMEDIATE"},{"location":"api/common/#pytestlab.common.enums.TriggerSource.TIMER","text":"","title":"TIMER"},{"location":"api/common/#pytestlab.common.enums.VoltageUnit","text":"Bases: str , Enum","title":"VoltageUnit"},{"location":"api/common/#pytestlab.common.enums.VoltageUnit.DBM","text":"","title":"DBM"},{"location":"api/common/#pytestlab.common.enums.VoltageUnit.VPP","text":"","title":"VPP"},{"location":"api/common/#pytestlab.common.enums.VoltageUnit.VRMS","text":"","title":"VRMS"},{"location":"api/common/#pytestlab.common.enums.WaveformType","text":"Bases: str , Enum","title":"WaveformType"},{"location":"api/common/#pytestlab.common.enums.WaveformType.ARB","text":"","title":"ARB"},{"location":"api/common/#pytestlab.common.enums.WaveformType.DC","text":"","title":"DC"},{"location":"api/common/#pytestlab.common.enums.WaveformType.NOISE","text":"","title":"NOISE"},{"location":"api/common/#pytestlab.common.enums.WaveformType.PULSE","text":"","title":"PULSE"},{"location":"api/common/#pytestlab.common.enums.WaveformType.RAMP","text":"","title":"RAMP"},{"location":"api/common/#pytestlab.common.enums.WaveformType.SINE","text":"","title":"SINE"},{"location":"api/common/#pytestlab.common.enums.WaveformType.SQUARE","text":"","title":"SQUARE"},{"location":"api/common/#health-checks","text":"","title":"Health Checks"},{"location":"api/common/#pytestlab.common.health","text":"","title":"health"},{"location":"api/common/#pytestlab.common.health.HealthReport","text":"Bases: BaseModel","title":"HealthReport"},{"location":"api/common/#pytestlab.common.health.HealthReport.backend_status","text":"","title":"backend_status"},{"location":"api/common/#pytestlab.common.health.HealthReport.errors","text":"","title":"errors"},{"location":"api/common/#pytestlab.common.health.HealthReport.instrument_idn","text":"","title":"instrument_idn"},{"location":"api/common/#pytestlab.common.health.HealthReport.model_config","text":"","title":"model_config"},{"location":"api/common/#pytestlab.common.health.HealthReport.status","text":"","title":"status"},{"location":"api/common/#pytestlab.common.health.HealthReport.supported_features","text":"","title":"supported_features"},{"location":"api/common/#pytestlab.common.health.HealthReport.warnings","text":"","title":"warnings"},{"location":"api/common/#pytestlab.common.health.HealthStatus","text":"Bases: str , Enum","title":"HealthStatus"},{"location":"api/common/#pytestlab.common.health.HealthStatus.ERROR","text":"","title":"ERROR"},{"location":"api/common/#pytestlab.common.health.HealthStatus.OK","text":"","title":"OK"},{"location":"api/common/#pytestlab.common.health.HealthStatus.UNKNOWN","text":"","title":"UNKNOWN"},{"location":"api/common/#pytestlab.common.health.HealthStatus.WARNING","text":"","title":"WARNING"},{"location":"api/config/","text":"Configuration Models This section details the Pydantic models used for instrument and bench configuration in PyTestLab. These models define the schema for instrument profiles, bench descriptors, and related configuration files. Bench Configuration pytestlab.config.bench_config.BenchConfigExtended Bases: BaseModel Attributes automation = None class-attribute instance-attribute backend_defaults = None class-attribute instance-attribute bench_name instance-attribute changelog = None class-attribute instance-attribute continue_on_automation_error = False class-attribute instance-attribute custom_validations = None class-attribute instance-attribute description = None class-attribute instance-attribute experiment = None class-attribute instance-attribute instruments instance-attribute last_modified = None class-attribute instance-attribute measurement_plan = None class-attribute instance-attribute model_config = ConfigDict(extra='forbid') class-attribute instance-attribute simulate = False class-attribute instance-attribute traceability = None class-attribute instance-attribute version = None class-attribute instance-attribute Functions check_instruments() Source code in pytestlab/config/bench_config.py @model_validator(mode=\"after\") def check_instruments(self) -> \"BenchConfigExtended\": if not self.instruments: raise ValueError(\"At least one instrument must be defined in 'instruments'.\") return self Instrument Configuration Models Each instrument profile YAML must specify a device_type that matches one of the following configuration models. These models define the required and optional fields for each instrument type. Base Instrument Model pytestlab.config.instrument_config.InstrumentConfig Bases: BaseModel Attributes address = Field(None, description='Instrument connection address (e.g., VISA resource string)') class-attribute instance-attribute device_type = Field(..., description=\"Type of the device (e.g., 'PSU', 'Oscilloscope')\") class-attribute instance-attribute manufacturer = Field(..., description='Manufacturer of the instrument') class-attribute instance-attribute measurement_accuracy = Field(default_factory=dict, description='Measurement accuracy specifications') class-attribute instance-attribute model = Field(..., description='Model number of the instrument') class-attribute instance-attribute model_config = ConfigDict(validate_assignment=True, extra='ignore') class-attribute instance-attribute serial_number = Field(None, description='Serial number of the instrument') class-attribute instance-attribute Power Supply pytestlab.config.power_supply_config.PowerSupplyConfig Bases: InstrumentConfig Pydantic model for Power Supply configuration. Attributes channels = Field(..., min_length=1, description='List of power supply channel configurations') class-attribute instance-attribute device_type = Field('PSU', description=\"Device type identifier, must be 'PSU' or 'power_supply'.\") class-attribute instance-attribute line_regulation = Field(None, description='Line regulation specification for the PSU.') class-attribute instance-attribute load_regulation = Field(None, description='Load regulation specification for the PSU.') class-attribute instance-attribute model_config = ConfigDict(validate_assignment=True, extra='forbid') class-attribute instance-attribute over_current_protection = Field(None, description='Global Over Current Protection setting for the PSU, if applicable.') class-attribute instance-attribute over_voltage_protection = Field(None, description='Global Over Voltage Protection setting for the PSU, if applicable.') class-attribute instance-attribute total_power = Field(None, description='Total output power rating for the PSU.') class-attribute instance-attribute Functions check_channel_ids_unique() Source code in pytestlab/config/power_supply_config.py @model_validator(mode='after') def check_channel_ids_unique(self) -> 'PowerSupplyConfig': if self.channels: ids = [ch.channel_id for ch in self.channels] if len(ids) != len(set(ids)): raise ValueError(\"Channel IDs must be unique.\") return self Oscilloscope pytestlab.config.oscilloscope_config.OscilloscopeConfig Bases: InstrumentConfig Attributes bandwidth = Field(..., gt=0, description='Analog bandwidth of the oscilloscope in Hz') class-attribute instance-attribute channels = Field(..., min_length=1, description='List of channel configurations') class-attribute instance-attribute device_type = Field('oscilloscope', description='Type of the device (oscilloscope)') class-attribute instance-attribute fft = Field(None, description='FFT capabilities, if available') class-attribute instance-attribute franalysis = Field(None, description='Frequency Response Analysis capabilities, if available') class-attribute instance-attribute function_generator = Field(None, description='Integrated function generator capabilities, if available') class-attribute instance-attribute memory = Field(..., gt=0, description='Maximum memory depth (e.g., in points or seconds)') class-attribute instance-attribute model_config = ConfigDict(validate_assignment=True, extra='forbid') class-attribute instance-attribute sampling_rate = Field(..., gt=0, description='Maximum sampling rate in Samples/sec') class-attribute instance-attribute timebase_settings = Field(None, description='Global timebase settings, if applicable beyond per-channel') class-attribute instance-attribute trigger = Field(..., description='Trigger system configuration') class-attribute instance-attribute waveform_update_rate = Field(..., gt=0, description='Waveform update rate in waveforms/sec') class-attribute instance-attribute Waveform Generator pytestlab.config.waveform_generator_config.WaveformGeneratorConfig Bases: InstrumentConfig Attributes channels = Field(..., min_length=1, description='List of waveform generator channel configurations') class-attribute instance-attribute device_type = Field('waveform_generator', description=\"Type of the device (e.g., 'AWG', 'waveform_generator')\") class-attribute instance-attribute model_config = ConfigDict(validate_assignment=True, extra='forbid') class-attribute instance-attribute waveforms = Field(..., description='Waveform capabilities configuration') class-attribute instance-attribute Multimeter pytestlab.config.multimeter_config.MultimeterConfig Bases: InstrumentConfig Pydantic model for Multimeter configuration, designed to load from a device spec YAML. Attributes autorange = Field(default=True, description='Enable (True) or disable (False) autoranging for measurements.') class-attribute instance-attribute default_measurement_function = Field(default=DMMFunction.VOLTAGE_DC, description='Primary or default measurement function for the DMM.') class-attribute instance-attribute device_type = Field('multimeter', description='Device type identifier for multimeters.') class-attribute instance-attribute limits instance-attribute math_functions instance-attribute measurement_functions instance-attribute model_config = ConfigDict(validate_assignment=True, extra='ignore') class-attribute instance-attribute sampling_rates_rps instance-attribute trigger_source = Field(default='IMM', description='Default trigger source: IMM (Immediate), EXT (External), BUS (Software/System).') class-attribute instance-attribute DC Active Load pytestlab.config.dc_active_load_config.DCActiveLoadConfig Bases: InstrumentConfig Pydantic model for DC Active Load configuration, parsed from a device spec YAML. Attributes device_type instance-attribute environmental instance-attribute features instance-attribute general_specifications instance-attribute model_config = ConfigDict(validate_assignment=True, extra='forbid') class-attribute instance-attribute operating_modes instance-attribute other_characteristics_typical instance-attribute protection instance-attribute Vector Network Analyzer (VNA) pytestlab.config.vna_config.VNAConfig Bases: InstrumentConfig Attributes device_type = 'vna' class-attribute instance-attribute if_bandwidth = Field(None, description='IF bandwidth in Hz') class-attribute instance-attribute model_config = ConfigDict(validate_assignment=True, extra='forbid') class-attribute instance-attribute num_points = Field(None, description='Number of points in the sweep') class-attribute instance-attribute power_level = Field(None, description='Source power level in dBm') class-attribute instance-attribute s_parameters = Field(default_factory=lambda: ['S11', 'S21'], description=\"List of S-parameters to measure (e.g., ['S11', 'S21'])\") class-attribute instance-attribute start_frequency = Field(None, description='Start frequency for the sweep in Hz') class-attribute instance-attribute stop_frequency = Field(None, description='Stop frequency for the sweep in Hz') class-attribute instance-attribute Spectrum Analyzer pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig Bases: InstrumentConfig Attributes attenuation = Field(None, description='Input attenuation in dB') class-attribute instance-attribute device_type = 'spectrum_analyzer' class-attribute instance-attribute frequency_center = Field(None, description='Center frequency in Hz') class-attribute instance-attribute frequency_span = Field(None, description='Frequency span in Hz') class-attribute instance-attribute model_config = ConfigDict(validate_assignment=True, extra='forbid') class-attribute instance-attribute reference_level = Field(None, description='Reference level in dBm') class-attribute instance-attribute resolution_bandwidth = Field(None, description='Resolution bandwidth in Hz (RBW)') class-attribute instance-attribute Power Meter pytestlab.config.power_meter_config.PowerMeterConfig Bases: InstrumentConfig Attributes averaging_count = Field(None, description='Number of readings to average for a measurement') class-attribute instance-attribute device_type = 'power_meter' class-attribute instance-attribute frequency_compensation_value = Field(None, description='Frequency for sensor compensation in Hz') class-attribute instance-attribute model_config = ConfigDict(validate_assignment=True, extra='forbid') class-attribute instance-attribute power_units = Field('dBm', description='Units for power measurement') class-attribute instance-attribute Virtual Instrument pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig Bases: InstrumentConfig Pydantic model for the Virtual Instrument configuration. Attributes device_type = 'virtual_instrument' class-attribute instance-attribute Accuracy Specification Many instrument models include an accuracy field or section. This is typically defined using the AccuracySpec model. pytestlab.config.accuracy.AccuracySpec Bases: BaseModel Represents a single accuracy specification for a measurement mode. The standard deviation (sigma) is typically calculated as: sqrt((percent_reading * reading)^2 + (offset_value)^2) or other forms depending on how specs are given (e.g., % of range). Attributes model_config = ConfigDict(validate_assignment=True, extra='forbid') class-attribute instance-attribute offset_value = Field(None, ge=0, description='Fixed offset accuracy in units of the measurement (e.g., 0.005 V)') class-attribute instance-attribute percent_reading = Field(None, ge=0, description='Accuracy as a percentage of the reading (e.g., 0.0001 for 0.01%)') class-attribute instance-attribute Functions calculate_std_dev(reading_value, range_value=None) Calculates the standard deviation (sigma) for a given reading. This is a simplified example; real datasheets can be more complex. Assumes reading_value is positive for typical instrument readings. Source code in pytestlab/config/accuracy.py def calculate_std_dev(self, reading_value: float, range_value: Optional[float] = None) -> float: \"\"\" Calculates the standard deviation (sigma) for a given reading. This is a simplified example; real datasheets can be more complex. Assumes reading_value is positive for typical instrument readings. \"\"\" if reading_value < 0: # Or handle as per specific instrument/measurement context # For now, using absolute value for calculation if negative readings are possible and meaningful # reading_value = abs(reading_value) pass # Assuming reading_value is typically positive or magnitude. variance = 0.0 if self.percent_reading is not None: if self.percent_reading < 0: raise ValueError(\"percent_reading must be non-negative.\") variance += (self.percent_reading * reading_value)**2 if self.offset_value is not None: if self.offset_value < 0: raise ValueError(\"offset_value must be non-negative.\") variance += self.offset_value**2 # Example for percent_range if it were added: # percent_range: Optional[float] = Field(None, ge=0, description=\"Accuracy as a percentage of the range\") # if self.percent_range is not None and range_value is not None: # if self.percent_range < 0: # raise ValueError(\"percent_range must be non-negative.\") # if range_value <= 0: # Range should be positive # raise ValueError(\"range_value must be positive for percent_range calculation.\") # variance += (self.percent_range * range_value)**2 if variance < 0.0: # Should not happen with non-negative inputs and squaring raise ValueError(\"Calculated variance is negative, check inputs and logic.\") if variance == 0.0: # No spec provided, or spec results in zero uncertainty return 0.0 # Or raise an error, or return a very small number if appropriate return math.sqrt(variance) Configuration Loader For advanced users, PyTestLab provides a configuration loader utility for validating and loading profiles. pytestlab.config.loader.ConfigLoader Dummy ConfigLoader class for documentation compatibility. This is not used in runtime code, but allows mkdocstrings to resolve 'pytestlab.config.ConfigLoader' for API docs. For more information on creating and validating instrument profiles, see the Creating Profiles Guide .","title":"Configuration"},{"location":"api/config/#configuration-models","text":"This section details the Pydantic models used for instrument and bench configuration in PyTestLab. These models define the schema for instrument profiles, bench descriptors, and related configuration files.","title":"Configuration Models"},{"location":"api/config/#bench-configuration","text":"","title":"Bench Configuration"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended","text":"Bases: BaseModel","title":"BenchConfigExtended"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended-attributes","text":"","title":"Attributes"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.automation","text":"","title":"automation"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.backend_defaults","text":"","title":"backend_defaults"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.bench_name","text":"","title":"bench_name"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.changelog","text":"","title":"changelog"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.continue_on_automation_error","text":"","title":"continue_on_automation_error"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.custom_validations","text":"","title":"custom_validations"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.description","text":"","title":"description"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.experiment","text":"","title":"experiment"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.instruments","text":"","title":"instruments"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.last_modified","text":"","title":"last_modified"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.measurement_plan","text":"","title":"measurement_plan"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.model_config","text":"","title":"model_config"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.simulate","text":"","title":"simulate"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.traceability","text":"","title":"traceability"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.version","text":"","title":"version"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended-functions","text":"","title":"Functions"},{"location":"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments","text":"Source code in pytestlab/config/bench_config.py @model_validator(mode=\"after\") def check_instruments(self) -> \"BenchConfigExtended\": if not self.instruments: raise ValueError(\"At least one instrument must be defined in 'instruments'.\") return self","title":"check_instruments"},{"location":"api/config/#instrument-configuration-models","text":"Each instrument profile YAML must specify a device_type that matches one of the following configuration models. These models define the required and optional fields for each instrument type.","title":"Instrument Configuration Models"},{"location":"api/config/#base-instrument-model","text":"","title":"Base Instrument Model"},{"location":"api/config/#pytestlab.config.instrument_config.InstrumentConfig","text":"Bases: BaseModel","title":"InstrumentConfig"},{"location":"api/config/#pytestlab.config.instrument_config.InstrumentConfig-attributes","text":"","title":"Attributes"},{"location":"api/config/#pytestlab.config.instrument_config.InstrumentConfig.address","text":"","title":"address"},{"location":"api/config/#pytestlab.config.instrument_config.InstrumentConfig.device_type","text":"","title":"device_type"},{"location":"api/config/#pytestlab.config.instrument_config.InstrumentConfig.manufacturer","text":"","title":"manufacturer"},{"location":"api/config/#pytestlab.config.instrument_config.InstrumentConfig.measurement_accuracy","text":"","title":"measurement_accuracy"},{"location":"api/config/#pytestlab.config.instrument_config.InstrumentConfig.model","text":"","title":"model"},{"location":"api/config/#pytestlab.config.instrument_config.InstrumentConfig.model_config","text":"","title":"model_config"},{"location":"api/config/#pytestlab.config.instrument_config.InstrumentConfig.serial_number","text":"","title":"serial_number"},{"location":"api/config/#power-supply","text":"","title":"Power Supply"},{"location":"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig","text":"Bases: InstrumentConfig Pydantic model for Power Supply configuration.","title":"PowerSupplyConfig"},{"location":"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig-attributes","text":"","title":"Attributes"},{"location":"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.channels","text":"","title":"channels"},{"location":"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.device_type","text":"","title":"device_type"},{"location":"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.line_regulation","text":"","title":"line_regulation"},{"location":"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.load_regulation","text":"","title":"load_regulation"},{"location":"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.model_config","text":"","title":"model_config"},{"location":"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.over_current_protection","text":"","title":"over_current_protection"},{"location":"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.over_voltage_protection","text":"","title":"over_voltage_protection"},{"location":"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.total_power","text":"","title":"total_power"},{"location":"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig-functions","text":"","title":"Functions"},{"location":"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique","text":"Source code in pytestlab/config/power_supply_config.py @model_validator(mode='after') def check_channel_ids_unique(self) -> 'PowerSupplyConfig': if self.channels: ids = [ch.channel_id for ch in self.channels] if len(ids) != len(set(ids)): raise ValueError(\"Channel IDs must be unique.\") return self","title":"check_channel_ids_unique"},{"location":"api/config/#oscilloscope","text":"","title":"Oscilloscope"},{"location":"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig","text":"Bases: InstrumentConfig","title":"OscilloscopeConfig"},{"location":"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig-attributes","text":"","title":"Attributes"},{"location":"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.bandwidth","text":"","title":"bandwidth"},{"location":"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.channels","text":"","title":"channels"},{"location":"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.device_type","text":"","title":"device_type"},{"location":"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.fft","text":"","title":"fft"},{"location":"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.franalysis","text":"","title":"franalysis"},{"location":"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.function_generator","text":"","title":"function_generator"},{"location":"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.memory","text":"","title":"memory"},{"location":"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.model_config","text":"","title":"model_config"},{"location":"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.sampling_rate","text":"","title":"sampling_rate"},{"location":"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.timebase_settings","text":"","title":"timebase_settings"},{"location":"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.trigger","text":"","title":"trigger"},{"location":"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.waveform_update_rate","text":"","title":"waveform_update_rate"},{"location":"api/config/#waveform-generator","text":"","title":"Waveform Generator"},{"location":"api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig","text":"Bases: InstrumentConfig","title":"WaveformGeneratorConfig"},{"location":"api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig-attributes","text":"","title":"Attributes"},{"location":"api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.channels","text":"","title":"channels"},{"location":"api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.device_type","text":"","title":"device_type"},{"location":"api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.model_config","text":"","title":"model_config"},{"location":"api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.waveforms","text":"","title":"waveforms"},{"location":"api/config/#multimeter","text":"","title":"Multimeter"},{"location":"api/config/#pytestlab.config.multimeter_config.MultimeterConfig","text":"Bases: InstrumentConfig Pydantic model for Multimeter configuration, designed to load from a device spec YAML.","title":"MultimeterConfig"},{"location":"api/config/#pytestlab.config.multimeter_config.MultimeterConfig-attributes","text":"","title":"Attributes"},{"location":"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.autorange","text":"","title":"autorange"},{"location":"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.default_measurement_function","text":"","title":"default_measurement_function"},{"location":"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.device_type","text":"","title":"device_type"},{"location":"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.limits","text":"","title":"limits"},{"location":"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.math_functions","text":"","title":"math_functions"},{"location":"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.measurement_functions","text":"","title":"measurement_functions"},{"location":"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.model_config","text":"","title":"model_config"},{"location":"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.sampling_rates_rps","text":"","title":"sampling_rates_rps"},{"location":"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.trigger_source","text":"","title":"trigger_source"},{"location":"api/config/#dc-active-load","text":"","title":"DC Active Load"},{"location":"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig","text":"Bases: InstrumentConfig Pydantic model for DC Active Load configuration, parsed from a device spec YAML.","title":"DCActiveLoadConfig"},{"location":"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig-attributes","text":"","title":"Attributes"},{"location":"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.device_type","text":"","title":"device_type"},{"location":"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.environmental","text":"","title":"environmental"},{"location":"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.features","text":"","title":"features"},{"location":"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.general_specifications","text":"","title":"general_specifications"},{"location":"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.model_config","text":"","title":"model_config"},{"location":"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.operating_modes","text":"","title":"operating_modes"},{"location":"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.other_characteristics_typical","text":"","title":"other_characteristics_typical"},{"location":"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.protection","text":"","title":"protection"},{"location":"api/config/#vector-network-analyzer-vna","text":"","title":"Vector Network Analyzer (VNA)"},{"location":"api/config/#pytestlab.config.vna_config.VNAConfig","text":"Bases: InstrumentConfig","title":"VNAConfig"},{"location":"api/config/#pytestlab.config.vna_config.VNAConfig-attributes","text":"","title":"Attributes"},{"location":"api/config/#pytestlab.config.vna_config.VNAConfig.device_type","text":"","title":"device_type"},{"location":"api/config/#pytestlab.config.vna_config.VNAConfig.if_bandwidth","text":"","title":"if_bandwidth"},{"location":"api/config/#pytestlab.config.vna_config.VNAConfig.model_config","text":"","title":"model_config"},{"location":"api/config/#pytestlab.config.vna_config.VNAConfig.num_points","text":"","title":"num_points"},{"location":"api/config/#pytestlab.config.vna_config.VNAConfig.power_level","text":"","title":"power_level"},{"location":"api/config/#pytestlab.config.vna_config.VNAConfig.s_parameters","text":"","title":"s_parameters"},{"location":"api/config/#pytestlab.config.vna_config.VNAConfig.start_frequency","text":"","title":"start_frequency"},{"location":"api/config/#pytestlab.config.vna_config.VNAConfig.stop_frequency","text":"","title":"stop_frequency"},{"location":"api/config/#spectrum-analyzer","text":"","title":"Spectrum Analyzer"},{"location":"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig","text":"Bases: InstrumentConfig","title":"SpectrumAnalyzerConfig"},{"location":"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig-attributes","text":"","title":"Attributes"},{"location":"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.attenuation","text":"","title":"attenuation"},{"location":"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.device_type","text":"","title":"device_type"},{"location":"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.frequency_center","text":"","title":"frequency_center"},{"location":"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.frequency_span","text":"","title":"frequency_span"},{"location":"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.model_config","text":"","title":"model_config"},{"location":"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.reference_level","text":"","title":"reference_level"},{"location":"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.resolution_bandwidth","text":"","title":"resolution_bandwidth"},{"location":"api/config/#power-meter","text":"","title":"Power Meter"},{"location":"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig","text":"Bases: InstrumentConfig","title":"PowerMeterConfig"},{"location":"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig-attributes","text":"","title":"Attributes"},{"location":"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.averaging_count","text":"","title":"averaging_count"},{"location":"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.device_type","text":"","title":"device_type"},{"location":"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.frequency_compensation_value","text":"","title":"frequency_compensation_value"},{"location":"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.model_config","text":"","title":"model_config"},{"location":"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.power_units","text":"","title":"power_units"},{"location":"api/config/#virtual-instrument","text":"","title":"Virtual Instrument"},{"location":"api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig","text":"Bases: InstrumentConfig Pydantic model for the Virtual Instrument configuration.","title":"VirtualInstrumentConfig"},{"location":"api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig-attributes","text":"","title":"Attributes"},{"location":"api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig.device_type","text":"","title":"device_type"},{"location":"api/config/#accuracy-specification","text":"Many instrument models include an accuracy field or section. This is typically defined using the AccuracySpec model.","title":"Accuracy Specification"},{"location":"api/config/#pytestlab.config.accuracy.AccuracySpec","text":"Bases: BaseModel Represents a single accuracy specification for a measurement mode. The standard deviation (sigma) is typically calculated as: sqrt((percent_reading * reading)^2 + (offset_value)^2) or other forms depending on how specs are given (e.g., % of range).","title":"AccuracySpec"},{"location":"api/config/#pytestlab.config.accuracy.AccuracySpec-attributes","text":"","title":"Attributes"},{"location":"api/config/#pytestlab.config.accuracy.AccuracySpec.model_config","text":"","title":"model_config"},{"location":"api/config/#pytestlab.config.accuracy.AccuracySpec.offset_value","text":"","title":"offset_value"},{"location":"api/config/#pytestlab.config.accuracy.AccuracySpec.percent_reading","text":"","title":"percent_reading"},{"location":"api/config/#pytestlab.config.accuracy.AccuracySpec-functions","text":"","title":"Functions"},{"location":"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev","text":"Calculates the standard deviation (sigma) for a given reading. This is a simplified example; real datasheets can be more complex. Assumes reading_value is positive for typical instrument readings. Source code in pytestlab/config/accuracy.py def calculate_std_dev(self, reading_value: float, range_value: Optional[float] = None) -> float: \"\"\" Calculates the standard deviation (sigma) for a given reading. This is a simplified example; real datasheets can be more complex. Assumes reading_value is positive for typical instrument readings. \"\"\" if reading_value < 0: # Or handle as per specific instrument/measurement context # For now, using absolute value for calculation if negative readings are possible and meaningful # reading_value = abs(reading_value) pass # Assuming reading_value is typically positive or magnitude. variance = 0.0 if self.percent_reading is not None: if self.percent_reading < 0: raise ValueError(\"percent_reading must be non-negative.\") variance += (self.percent_reading * reading_value)**2 if self.offset_value is not None: if self.offset_value < 0: raise ValueError(\"offset_value must be non-negative.\") variance += self.offset_value**2 # Example for percent_range if it were added: # percent_range: Optional[float] = Field(None, ge=0, description=\"Accuracy as a percentage of the range\") # if self.percent_range is not None and range_value is not None: # if self.percent_range < 0: # raise ValueError(\"percent_range must be non-negative.\") # if range_value <= 0: # Range should be positive # raise ValueError(\"range_value must be positive for percent_range calculation.\") # variance += (self.percent_range * range_value)**2 if variance < 0.0: # Should not happen with non-negative inputs and squaring raise ValueError(\"Calculated variance is negative, check inputs and logic.\") if variance == 0.0: # No spec provided, or spec results in zero uncertainty return 0.0 # Or raise an error, or return a very small number if appropriate return math.sqrt(variance)","title":"calculate_std_dev"},{"location":"api/config/#configuration-loader","text":"For advanced users, PyTestLab provides a configuration loader utility for validating and loading profiles.","title":"Configuration Loader"},{"location":"api/config/#pytestlab.config.loader.ConfigLoader","text":"Dummy ConfigLoader class for documentation compatibility. This is not used in runtime code, but allows mkdocstrings to resolve 'pytestlab.config.ConfigLoader' for API docs. For more information on creating and validating instrument profiles, see the Creating Profiles Guide .","title":"ConfigLoader"},{"location":"api/errors/","text":"Exceptions This page documents the custom exception types used throughout PyTestLab. Understanding these exceptions is essential for writing robust, reliable, and safe test scripts. Exception Reference pytestlab.errors.InstrumentConnectionError(instrument=None, message='') Bases: Exception Exception raised for SCPI instrument connection errors. Source code in pytestlab/errors.py def __init__(self, instrument=None, message=\"\"): self.instrument = instrument self.message = message if instrument: super().__init__(f\"Failed to connect to instrument '{instrument}'. {message}\") else: super().__init__(f\"Failed to connect to instrument. {message}\") Attributes instrument = instrument instance-attribute message = message instance-attribute Functions pytestlab.errors.InstrumentCommunicationError(instrument=None, command=None, message='') Bases: Exception Exception raised for SCPI communication errors. Source code in pytestlab/errors.py def __init__(self, instrument=None, command=None, message=\"\"): self.instrument = instrument self.command = command self.message = message full_message = f\"Error in SCPI communication with instrument '{instrument}'\" if command: full_message += f\" while sending command '{command}'\" full_message += f\". {message}\" super().__init__(full_message) Attributes command = command instance-attribute instrument = instrument instance-attribute message = message instance-attribute Functions pytestlab.errors.InstrumentParameterError(parameter=None, value=None, valid_range=None, message='') Bases: ValueError Exception raised for invalid parameters given to an instrument. Source code in pytestlab/errors.py def __init__(self, parameter=None, value=None, valid_range=None, message=\"\"): self.parameter = parameter self.value = value self.valid_range = valid_range self.message = message full_message = \"Invalid parameter value for instrument\" if parameter: full_message += f\" for parameter '{parameter}'\" if value is not None: full_message += f\": received '{value}'\" if valid_range: full_message += f\", but expected a value in the range {valid_range}\" full_message += f\". {message}\" super().__init__(full_message) Attributes message = message instance-attribute parameter = parameter instance-attribute valid_range = valid_range instance-attribute value = value instance-attribute Functions pytestlab.errors.InstrumentConfigurationError(instrument=None, message='') Bases: Exception Exception raised for instrument configuration errors. Source code in pytestlab/errors.py def __init__(self, instrument=None, message=\"\"): self.instrument = instrument self.message = message if instrument: super().__init__(f\"Invalid configuration for instrument '{instrument}'. {message}\") else: super().__init__(f\"Invalid instrument configuration. {message}\") Attributes instrument = instrument instance-attribute message = message instance-attribute Functions pytestlab.errors.DatabaseError(operation=None, message='') Bases: Exception Exception raised for database errors. Source code in pytestlab/errors.py def __init__(self, operation=None, message=\"\"): self.operation = operation self.message = message if operation: super().__init__(f\"Error in database operation '{operation}'. {message}\") else: super().__init__(f\"Error in database operation. {message}\") Attributes message = message instance-attribute operation = operation instance-attribute Functions pytestlab.errors.InstrumentNotFoundError(name) Bases: Exception For instrument not found errors. Source code in pytestlab/errors.py def __init__(self, name): super().__init__(f\"Instrument {name} not found in the manager's collection.\") Functions Usage Example from pytestlab.errors import ( InstrumentConnectionError, InstrumentParameterError, DatabaseError, ) try: # ... instrument operations ... await bench.psu.set_voltage(1, 6.0) # May raise InstrumentParameterError or other errors except InstrumentConnectionError as e: print(f\"Failed to connect: {e}\") except InstrumentParameterError as e: print(f\"Invalid parameter: {e}\") except DatabaseError as e: print(f\"Database error: {e}\") For a practical guide to error handling, see the Error Handling Guide .","title":"Errors"},{"location":"api/errors/#exceptions","text":"This page documents the custom exception types used throughout PyTestLab. Understanding these exceptions is essential for writing robust, reliable, and safe test scripts.","title":"Exceptions"},{"location":"api/errors/#exception-reference","text":"","title":"Exception Reference"},{"location":"api/errors/#pytestlab.errors.InstrumentConnectionError","text":"Bases: Exception Exception raised for SCPI instrument connection errors. Source code in pytestlab/errors.py def __init__(self, instrument=None, message=\"\"): self.instrument = instrument self.message = message if instrument: super().__init__(f\"Failed to connect to instrument '{instrument}'. {message}\") else: super().__init__(f\"Failed to connect to instrument. {message}\")","title":"InstrumentConnectionError"},{"location":"api/errors/#pytestlab.errors.InstrumentConnectionError-attributes","text":"","title":"Attributes"},{"location":"api/errors/#pytestlab.errors.InstrumentConnectionError.instrument","text":"","title":"instrument"},{"location":"api/errors/#pytestlab.errors.InstrumentConnectionError.message","text":"","title":"message"},{"location":"api/errors/#pytestlab.errors.InstrumentConnectionError-functions","text":"","title":"Functions"},{"location":"api/errors/#pytestlab.errors.InstrumentCommunicationError","text":"Bases: Exception Exception raised for SCPI communication errors. Source code in pytestlab/errors.py def __init__(self, instrument=None, command=None, message=\"\"): self.instrument = instrument self.command = command self.message = message full_message = f\"Error in SCPI communication with instrument '{instrument}'\" if command: full_message += f\" while sending command '{command}'\" full_message += f\". {message}\" super().__init__(full_message)","title":"InstrumentCommunicationError"},{"location":"api/errors/#pytestlab.errors.InstrumentCommunicationError-attributes","text":"","title":"Attributes"},{"location":"api/errors/#pytestlab.errors.InstrumentCommunicationError.command","text":"","title":"command"},{"location":"api/errors/#pytestlab.errors.InstrumentCommunicationError.instrument","text":"","title":"instrument"},{"location":"api/errors/#pytestlab.errors.InstrumentCommunicationError.message","text":"","title":"message"},{"location":"api/errors/#pytestlab.errors.InstrumentCommunicationError-functions","text":"","title":"Functions"},{"location":"api/errors/#pytestlab.errors.InstrumentParameterError","text":"Bases: ValueError Exception raised for invalid parameters given to an instrument. Source code in pytestlab/errors.py def __init__(self, parameter=None, value=None, valid_range=None, message=\"\"): self.parameter = parameter self.value = value self.valid_range = valid_range self.message = message full_message = \"Invalid parameter value for instrument\" if parameter: full_message += f\" for parameter '{parameter}'\" if value is not None: full_message += f\": received '{value}'\" if valid_range: full_message += f\", but expected a value in the range {valid_range}\" full_message += f\". {message}\" super().__init__(full_message)","title":"InstrumentParameterError"},{"location":"api/errors/#pytestlab.errors.InstrumentParameterError-attributes","text":"","title":"Attributes"},{"location":"api/errors/#pytestlab.errors.InstrumentParameterError.message","text":"","title":"message"},{"location":"api/errors/#pytestlab.errors.InstrumentParameterError.parameter","text":"","title":"parameter"},{"location":"api/errors/#pytestlab.errors.InstrumentParameterError.valid_range","text":"","title":"valid_range"},{"location":"api/errors/#pytestlab.errors.InstrumentParameterError.value","text":"","title":"value"},{"location":"api/errors/#pytestlab.errors.InstrumentParameterError-functions","text":"","title":"Functions"},{"location":"api/errors/#pytestlab.errors.InstrumentConfigurationError","text":"Bases: Exception Exception raised for instrument configuration errors. Source code in pytestlab/errors.py def __init__(self, instrument=None, message=\"\"): self.instrument = instrument self.message = message if instrument: super().__init__(f\"Invalid configuration for instrument '{instrument}'. {message}\") else: super().__init__(f\"Invalid instrument configuration. {message}\")","title":"InstrumentConfigurationError"},{"location":"api/errors/#pytestlab.errors.InstrumentConfigurationError-attributes","text":"","title":"Attributes"},{"location":"api/errors/#pytestlab.errors.InstrumentConfigurationError.instrument","text":"","title":"instrument"},{"location":"api/errors/#pytestlab.errors.InstrumentConfigurationError.message","text":"","title":"message"},{"location":"api/errors/#pytestlab.errors.InstrumentConfigurationError-functions","text":"","title":"Functions"},{"location":"api/errors/#pytestlab.errors.DatabaseError","text":"Bases: Exception Exception raised for database errors. Source code in pytestlab/errors.py def __init__(self, operation=None, message=\"\"): self.operation = operation self.message = message if operation: super().__init__(f\"Error in database operation '{operation}'. {message}\") else: super().__init__(f\"Error in database operation. {message}\")","title":"DatabaseError"},{"location":"api/errors/#pytestlab.errors.DatabaseError-attributes","text":"","title":"Attributes"},{"location":"api/errors/#pytestlab.errors.DatabaseError.message","text":"","title":"message"},{"location":"api/errors/#pytestlab.errors.DatabaseError.operation","text":"","title":"operation"},{"location":"api/errors/#pytestlab.errors.DatabaseError-functions","text":"","title":"Functions"},{"location":"api/errors/#pytestlab.errors.InstrumentNotFoundError","text":"Bases: Exception For instrument not found errors. Source code in pytestlab/errors.py def __init__(self, name): super().__init__(f\"Instrument {name} not found in the manager's collection.\")","title":"InstrumentNotFoundError"},{"location":"api/errors/#pytestlab.errors.InstrumentNotFoundError-functions","text":"","title":"Functions"},{"location":"api/errors/#usage-example","text":"from pytestlab.errors import ( InstrumentConnectionError, InstrumentParameterError, DatabaseError, ) try: # ... instrument operations ... await bench.psu.set_voltage(1, 6.0) # May raise InstrumentParameterError or other errors except InstrumentConnectionError as e: print(f\"Failed to connect: {e}\") except InstrumentParameterError as e: print(f\"Invalid parameter: {e}\") except DatabaseError as e: print(f\"Database error: {e}\") For a practical guide to error handling, see the Error Handling Guide .","title":"Usage Example"},{"location":"api/experiments/","text":"Experiments & Sweeps This section documents the core classes and utilities for managing experiments, sweeps, and measurement results in PyTestLab. Database & Results pytestlab.experiments.database.Database = MeasurementDatabase module-attribute pytestlab.experiments.results.MeasurementResult(values, instrument, units, measurement_type, timestamp=None, envelope=None, sampling_rate=None, **kwargs) A class to represent a collection of measurement values. ATTRIBUTE DESCRIPTION values The measurement data. TYPE: Union [ ndarray , DataFrame , float64 , List [ Any ], UFloat ] units The units of the measurements. TYPE: str instrument The name of the instrument used for the measurements. TYPE: str measurement_type The type of measurement. TYPE: str timestamp Timestamp of when the result was created. TYPE: float Source code in pytestlab/experiments/results.py def __init__(self, values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat], instrument: str, units: str, measurement_type: str, timestamp: Optional[float] = None, # Allow optional timestamp override envelope: Optional[Dict[str, Any]] = None, # Add envelope as an explicit argument sampling_rate: Optional[float] = None, # Add sampling_rate for FFT **kwargs: Any) -> None: # Added **kwargs and type hint self.values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat] = values self.units: str = units self.instrument: str = instrument self.measurement_type: str = measurement_type self.timestamp: float = timestamp if timestamp is not None else time.time() # Envelope logic: always provide an envelope attribute if envelope is not None: self.envelope = envelope else: # Default: minimal valid envelope (empty dict, or customize as needed) self.envelope = {} # Store sampling rate for FFT calculations self.sampling_rate = sampling_rate # Store any additional kwargs as attributes for key, value in kwargs.items(): setattr(self, key, value) Attributes envelope = envelope instance-attribute instrument = instrument instance-attribute measurement_type = measurement_type instance-attribute nominal property sampling_rate = sampling_rate instance-attribute sigma property timestamp = timestamp if timestamp is not None else time.time() instance-attribute units = units instance-attribute values = values instance-attribute Functions __delitem__(index) Allows deleting an item from 'values' if it's a list or ndarray. Source code in pytestlab/experiments/results.py def __delitem__(self, index: int) -> None: \"\"\"Allows deleting an item from 'values' if it's a list or ndarray.\"\"\" if isinstance(self.values, list): del self.values[index] elif isinstance(self.values, np.ndarray): self.values = np.delete(self.values, index, axis=0) else: raise TypeError(f\"Deletion by index not supported for type {type(self.values)}\") __getitem__(index) Allows indexing into the 'values' attribute. Source code in pytestlab/experiments/results.py def __getitem__(self, index: int) -> Any: \"\"\"Allows indexing into the 'values' attribute.\"\"\" if isinstance(self.values, (np.ndarray, list)): return self.values[index] elif isinstance(self.values, pl.DataFrame): return self.values[index] # Returns a row as a new DataFrame elif isinstance(self.values, (np.float64, UFloat)) and index == 0: return self.values raise IndexError(f\"Index {index} not applicable for type {type(self.values)}\") __iter__() Allows iteration over the 'values' attribute. Source code in pytestlab/experiments/results.py def __iter__(self) -> Iterator[Any]: \"\"\"Allows iteration over the 'values' attribute.\"\"\" if isinstance(self.values, (np.ndarray, list)): return iter(self.values) elif isinstance(self.values, pl.DataFrame): return iter(self.values.iter_rows()) elif isinstance(self.values, (np.float64, UFloat)): return iter([self.values]) raise TypeError(f\"Iteration not supported for type {type(self.values)}\") __len__() Source code in pytestlab/experiments/results.py def __len__(self) -> int: if isinstance(self.values, (np.ndarray, list)): return len(self.values) elif isinstance(self.values, (np.float64, UFloat)): return 1 elif isinstance(self.values, pl.DataFrame): return self.values.height # Number of rows return 0 # Default for unknown types __repr__() For backward compatibility with tests: - 1D arrays return a newline-separated list of values with units (like str ) - Other types use a detailed representation Source code in pytestlab/experiments/results.py def __repr__(self) -> str: \"\"\" For backward compatibility with tests: - 1D arrays return a newline-separated list of values with units (like __str__) - Other types use a detailed representation \"\"\" if isinstance(self.values, np.ndarray) and self.values.ndim == 1: return '\\n'.join([f\"{val} {self.units}\" for val in self.values]) return (f\"MeasurementResult(instrument='{self.instrument}', type='{self.measurement_type}', \" f\"units='{self.units}', values_type='{type(self.values).__name__}', timestamp={self.timestamp})\") __str__() String representation of the measurement result. For backward compatibility with tests, returns a newline-separated list for arrays. For other types, uses a more descriptive representation. Source code in pytestlab/experiments/results.py def __str__(self) -> str: \"\"\"String representation of the measurement result. For backward compatibility with tests, returns a newline-separated list for arrays. For other types, uses a more descriptive representation. \"\"\" if isinstance(self.values, UFloat): return f\"{self.values} {self.units}\" elif isinstance(self.values, np.float64): return f\"{self.values} {self.units}\" elif isinstance(self.values, pl.DataFrame): return str(self.values) elif isinstance(self.values, np.ndarray): # For numpy arrays, handle 1D arrays specially for backward compatibility if self.values.ndim == 1: return '\\n'.join([f\"{val} {self.units}\" for val in self.values]) # For multi-dimensional arrays, provide a concise representation return f\"NumPy Array (shape: {self.values.shape}, dtype: {self.values.dtype}) {self.units}\" elif isinstance(self.values, list): # For lists, special handling for backward compatibility if all(isinstance(x, (int, float)) for x in self.values): return '\\n'.join([f\"{val} {self.units}\" for val in self.values]) # For lists with mixed types or nested lists, show first few items if long if len(self.values) > 5: return f\"List (first 5 of {len(self.values)}): {self.values[:5]}... {self.units}\" return f\"List: {self.values} {self.units}\" # Fallback for other types return f\"Values: {str(self.values)[:100]}... Type: {type(self.values)} {self.units}\" add(value) Adds a new value to the collection. Behavior depends on self.values type. Source code in pytestlab/experiments/results.py def add(self, value: Any) -> None: \"\"\"Adds a new value to the collection. Behavior depends on self.values type.\"\"\" if isinstance(self.values, np.ndarray): # This might be inefficient for frequent additions. Consider list then convert. self.values = np.append(self.values, value) elif isinstance(self.values, list): self.values.append(value) elif isinstance(self.values, np.float64): # Convert to list or ndarray if adding to a single float self.values = np.array([self.values, value]) # type: ignore print(\"Warning: Added value to np.float64, converted 'values' to np.ndarray.\") elif isinstance(self.values, UFloat): # If current value is UFloat, adding another value implies creating a list/array of UFloats self.values = [self.values, value] # type: ignore print(\"Warning: Added value to UFloat, converted 'values' to a list. Consider using a list of UFloats initially.\") elif isinstance(self.values, pl.DataFrame): # Appending to Polars DataFrame is complex; typically done by creating a new DF and vstacking. # This simple 'add' might not be suitable. raise NotImplementedError(\"Direct 'add' to Polars DataFrame not supported. Use 'set_values' or manage DataFrame externally.\") else: raise TypeError(f\"Cannot 'add' to type {type(self.values)}\") clear() Clears all the MeasurementValues from the collection, resetting to an empty/default state. Source code in pytestlab/experiments/results.py def clear(self) -> None: \"\"\"Clears all the MeasurementValues from the collection, resetting to an empty/default state.\"\"\" if isinstance(self.values, np.ndarray): self.values = np.array([]) elif isinstance(self.values, (np.float64, UFloat)): # Reset UFloat to a default float or ufloat(0,0) self.values = np.float64(0.0) # Or ufloat(0,0) if preferred default for UFloat elif isinstance(self.values, pl.DataFrame): self.values = pl.DataFrame() elif isinstance(self.values, list): self.values = [] else: # Fallback for unknown types, attempt to set to a default float64 print(f\"Warning: Clearing unknown type {type(self.values)}, setting to np.float64(0.0).\") self.values = np.float64(0.0) get(index) Gets the MeasurementValue at a specified index. Assumes indexable values. Source code in pytestlab/experiments/results.py def get(self, index: int) -> Any: \"\"\"Gets the MeasurementValue at a specified index. Assumes indexable values.\"\"\" if isinstance(self.values, (np.ndarray, list)): return self.values[index] elif isinstance(self.values, pl.DataFrame): # For DataFrame, 'get' by index might mean row. # This returns a new DataFrame with one row. return self.values[index] elif isinstance(self.values, (np.float64, UFloat)) and index == 0: return self.values raise IndexError(f\"Index {index} out of range or type {type(self.values)} not directly indexable by single int.\") get_all() Returns all the MeasurementValues in the collection. Source code in pytestlab/experiments/results.py def get_all(self) -> Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat]: \"\"\"Returns all the MeasurementValues in the collection.\"\"\" return self.values items() Return items for dict-like behavior. Source code in pytestlab/experiments/results.py def items(self): \"\"\"Return items for dict-like behavior.\"\"\" return self.to_dict().items() keys() Return the keys for dict-like behavior. Source code in pytestlab/experiments/results.py def keys(self): \"\"\"Return the keys for dict-like behavior.\"\"\" return self.to_dict().keys() perform_fft() Perform Fast Fourier Transform on the measurement data. Requires: - self.values to be a numpy array of time-domain data - self.sampling_rate to be set (in Hz) RETURNS DESCRIPTION 'MeasurementResult' A new MeasurementResult containing the FFT data, with frequency in Hz 'MeasurementResult' and magnitude in the same units as the original data. Source code in pytestlab/experiments/results.py def perform_fft(self) -> 'MeasurementResult': \"\"\"Perform Fast Fourier Transform on the measurement data. Requires: - self.values to be a numpy array of time-domain data - self.sampling_rate to be set (in Hz) Returns: A new MeasurementResult containing the FFT data, with frequency in Hz and magnitude in the same units as the original data. \"\"\" if self.sampling_rate is None: raise ValueError(\"Sampling rate must be set to perform FFT\") if not isinstance(self.values, np.ndarray): raise TypeError(f\"FFT requires numpy array, got {type(self.values)}\") # Ensure we're working with a 1D array values = self.values.flatten() if self.values.ndim > 1 else self.values # Perform FFT fft_values = np.fft.rfft(values) fft_magnitude = np.abs(fft_values) # Create frequency axis freqs = np.fft.rfftfreq(len(values), 1/self.sampling_rate) # Create result with frequency and magnitude result_df = pl.DataFrame({ \"frequency\": freqs, \"magnitude\": fft_magnitude }) return MeasurementResult( values=result_df, instrument=self.instrument, units=self.units, measurement_type=\"FFT\", timestamp=time.time(), original_type=self.measurement_type, sampling_rate=self.sampling_rate ) save(path) Saves the measurement data to a file. If the data is a numpy array, it will be saved as a .npy file. If the data is a Polars DataFrame, it will be saved as a .parquet file. Other list-like data will be converted to numpy array and saved as .npy. np.float64 will be saved as a 0-D numpy array. UFloat objects will be saved as a two-element numpy array [nominal, std_dev] in a .npy file. Source code in pytestlab/experiments/results.py def save(self, path: str) -> None: \"\"\"Saves the measurement data to a file. If the data is a numpy array, it will be saved as a .npy file. If the data is a Polars DataFrame, it will be saved as a .parquet file. Other list-like data will be converted to numpy array and saved as .npy. np.float64 will be saved as a 0-D numpy array. UFloat objects will be saved as a two-element numpy array [nominal, std_dev] in a .npy file. \"\"\" default_ext = \".npy\" if isinstance(self.values, pl.DataFrame): default_ext = \".parquet\" if not path.endswith(('.npy', '.parquet')): path += default_ext print(f\"Warning: File extension not specified. Saving as {path}\") if isinstance(self.values, np.ndarray): np.save(path, self.values) elif isinstance(self.values, pl.DataFrame): if not path.endswith(\".parquet\"): print(f\"Warning: Saving Polars DataFrame to non-parquet file '{path}'. Consider using .parquet for DataFrames.\") self.values.write_parquet(path) elif isinstance(self.values, UFloat): if not path.endswith(\".npy\"): print(f\"Warning: Saving UFloat to non-npy file '{path}'. Consider using .npy.\") np.save(path, np.array([self.values.nominal_value, self.values.std_dev])) elif isinstance(self.values, (list, np.float64)): # Convert list or float64 to ndarray if not path.endswith(\".npy\"): print(f\"Warning: Saving {type(self.values).__name__} to non-npy file '{path}'. Consider using .npy.\") np.save(path, np.array(self.values)) else: raise TypeError(f\"Unsupported data type for saving: {type(self.values)}. Can save np.ndarray, pl.DataFrame, list, np.float64, or UFloat.\") print(f\"Measurement saved to {path}\") set_values(values) Sets the MeasurementValues in the collection. Source code in pytestlab/experiments/results.py def set_values(self, values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat]) -> None: \"\"\"Sets the MeasurementValues in the collection.\"\"\" self.values = values to_dict() Convert MeasurementResult to a dict for DataFrame conversion. This allows MeasurementResult objects to be directly used in Experiment.add_trial. Source code in pytestlab/experiments/results.py def to_dict(self) -> Dict[str, Any]: \"\"\"Convert MeasurementResult to a dict for DataFrame conversion. This allows MeasurementResult objects to be directly used in Experiment.add_trial. \"\"\" if isinstance(self.values, pl.DataFrame): # If values is already a DataFrame, convert to dict representation result = {} for col in self.values.columns: result[col] = self.values[col].to_list() return result elif isinstance(self.values, (np.ndarray, list)): # Convert array or list to a dict with a 'values' key return {'values': self.values} elif isinstance(self.values, (np.float64, UFloat)): # Convert scalar value to a dict with a 'value' key return {'value': self.values} else: # Default fallback return {'values': self.values} Experiments & Sweeps pytestlab.experiments.experiments.Experiment(name, description='', notes='') Experiment tracker to store measurements and parameters. This class maintains an internal Polars DataFrame (self.data) for trial data, regardless of whether the input is provided as a Polars DataFrame, dict, or list. It provides two export functionalities save_parquet(file_path): Saves the internal data as a Parquet file. Additionally, printing the Experiment instance (via str ) shows a summary and the head (first few rows) of the data. Source code in pytestlab/experiments/experiments.py def __init__(self, name: str, description: str = \"\", notes: str = \"\") -> None: self.name: str = name self.description: str = description self.notes: str = notes self.parameters: Dict[str, ExperimentParameter] = {} self.data: pl.DataFrame = pl.DataFrame() Attributes data = pl.DataFrame() instance-attribute description = description instance-attribute name = name instance-attribute notes = notes instance-attribute parameters = {} instance-attribute Functions __iter__() Iterate over each trial (row) as a dictionary. Source code in pytestlab/experiments/experiments.py def __iter__(self) -> Iterator[Dict[str, Any]]: \"\"\"Iterate over each trial (row) as a dictionary.\"\"\" for row in self.data.to_dicts(): yield row __len__() Return the number of trials. Source code in pytestlab/experiments/experiments.py def __len__(self) -> int: \"\"\"Return the number of trials.\"\"\" return self.data.height __str__() Return a string representation of the experiment. This includes a summary of the experiment details and prints the first 5 rows of the trial data (the head). Source code in pytestlab/experiments/experiments.py def __str__(self) -> str: \"\"\" Return a string representation of the experiment. This includes a summary of the experiment details and prints the first 5 rows of the trial data (the head). \"\"\" param_str = \", \".join(str(param) for param in self.parameters.values()) head_data: Union[pl.DataFrame, str] if not self.data.is_empty(): head_data = self.data.head(5) else: head_data = \"No trial data available.\" return (f\"Experiment: {self.name}\\n\" f\"Description: {self.description}\\n\" f\"Notes: {self.notes or 'No notes'}\\n\" f\"Parameters: {param_str}\\n\" f\"Trial Data (first 5 rows):\\n{head_data}\") add_parameter(name, units, notes='') Add a new parameter to the experiment. PARAMETER DESCRIPTION name Name of the parameter. TYPE: str units Units for the parameter. TYPE: str notes Additional notes. TYPE: str DEFAULT: '' Source code in pytestlab/experiments/experiments.py def add_parameter(self, name: str, units: str, notes: str = \"\") -> None: \"\"\" Add a new parameter to the experiment. Args: name (str): Name of the parameter. units (str): Units for the parameter. notes (str, optional): Additional notes. \"\"\" self.parameters[name] = ExperimentParameter(name, units, notes) add_trial(measurement_result, **parameter_values) Add a new trial to the experiment. Accepts measurement data in various formats (list, dict, Polars DataFrame, or MeasurementResult) and converts it into a Polars DataFrame if needed. Additional parameter values are added as new columns. PARAMETER DESCRIPTION measurement_result The measurement data. TYPE: Union [ DataFrame , Dict [ str , Any ], List [ Any ], MeasurementResult ] **parameter_values Additional parameters to include with this trial. TYPE: Any DEFAULT: {} RAISES DESCRIPTION ValueError If the conversion to a Polars DataFrame fails or if a provided parameter is not defined. Source code in pytestlab/experiments/experiments.py def add_trial(self, measurement_result: Union[pl.DataFrame, Dict[str, Any], List[Any], 'MeasurementResult'], **parameter_values: Any) -> None: \"\"\" Add a new trial to the experiment. Accepts measurement data in various formats (list, dict, Polars DataFrame, or MeasurementResult) and converts it into a Polars DataFrame if needed. Additional parameter values are added as new columns. Args: measurement_result (Union[pl.DataFrame, Dict[str, Any], List[Any], MeasurementResult]): The measurement data. **parameter_values: Additional parameters to include with this trial. Raises: ValueError: If the conversion to a Polars DataFrame fails or if a provided parameter is not defined. \"\"\" trial_df: pl.DataFrame # Special handling for MeasurementResult objects if hasattr(measurement_result, 'values') and hasattr(measurement_result, 'to_dict'): # If it's a MeasurementResult, extract its values if isinstance(measurement_result.values, pl.DataFrame): trial_df = measurement_result.values else: # Convert to dict and then to DataFrame try: trial_df = pl.DataFrame(measurement_result.to_dict(), strict=False) except Exception as e: raise ValueError(f\"Failed to convert MeasurementResult to DataFrame: {e}\") from e elif not isinstance(measurement_result, pl.DataFrame): try: trial_df = pl.DataFrame(measurement_result, strict=False) except Exception as e: raise ValueError(f\"Failed to convert measurement_result to a Polars DataFrame: {e}\") from e else: trial_df = measurement_result for param_name, value in parameter_values.items(): if param_name not in self.parameters: raise ValueError(f\"Parameter '{param_name}' is not defined in the experiment. Add it first using add_parameter().\") trial_df = trial_df.with_columns(pl.lit(value).alias(param_name)) if self.data.is_empty(): self.data = trial_df else: try: self.data = self.data.vstack(trial_df) except Exception as e: raise ValueError(f\"Failed to stack new trial data. Check for schema compatibility. Error: {e}\") from e list_trials() Print the full trials DataFrame. Source code in pytestlab/experiments/experiments.py def list_trials(self) -> None: \"\"\"Print the full trials DataFrame.\"\"\" print(self.data) save_parquet(file_path) Save the internal Polars DataFrame as a Parquet file. PARAMETER DESCRIPTION file_path The file path (including filename) where the Parquet file will be saved. TYPE: str Source code in pytestlab/experiments/experiments.py def save_parquet(self, file_path: str) -> None: \"\"\" Save the internal Polars DataFrame as a Parquet file. Args: file_path (str): The file path (including filename) where the Parquet file will be saved. \"\"\" self.data.write_parquet(file_path) print(f\"Data saved to Parquet file at: {file_path}\") pytestlab.experiments.sweep Attributes R = TypeVar('R') module-attribute T = TypeVar('T') module-attribute grid_sweep_impl = grid_sweep module-attribute gwass_impl = gwass module-attribute monte_carlo_sweep_impl = monte_carlo_sweep module-attribute Classes ParameterSpace(ranges='auto', names=None, constraint=None) Represents a parameter space for sweep operations. This class helps define and manage parameter spaces for various sweep strategies, including parameter ranges, constraints, and integration with MeasurementSession. Initialize a parameter space. PARAMETER DESCRIPTION ranges Parameter ranges in one of these formats: - List of (min, max) tuples: [(min1, max1), (min2, max2), ...] - Dict of {name: (min, max)}: {\"x\": (0, 10), \"y\": (-5, 5), ...} - \"auto\" to extract from MeasurementSession TYPE: Union [ List [ Tuple [ float , float ]], str , Dict [ str , Tuple [ float , float ]]] DEFAULT: 'auto' names Parameter names (required if ranges is a list of tuples) TYPE: Optional [ List [ str ]] DEFAULT: None constraint Optional function that takes a dict of parameter values and returns True if the combination is valid TYPE: Optional [ Callable [[ Dict [ str , float ]], bool ]] DEFAULT: None Source code in pytestlab/experiments/sweep.py def __init__(self, ranges: Union[List[Tuple[float, float]], str, Dict[str, Tuple[float, float]]] = \"auto\", names: Optional[List[str]] = None, constraint: Optional[Callable[[Dict[str, float]], bool]] = None): \"\"\" Initialize a parameter space. Args: ranges: Parameter ranges in one of these formats: - List of (min, max) tuples: [(min1, max1), (min2, max2), ...] - Dict of {name: (min, max)}: {\"x\": (0, 10), \"y\": (-5, 5), ...} - \"auto\" to extract from MeasurementSession names: Parameter names (required if ranges is a list of tuples) constraint: Optional function that takes a dict of parameter values and returns True if the combination is valid \"\"\" self.ranges = ranges self.names = names or [] self.constraint = constraint self._session = None # Validate ranges and names if isinstance(ranges, list) and names and len(ranges) != len(names): raise ValueError(\"Number of ranges must match number of parameter names\") # Convert dict to list format if provided as dict if isinstance(ranges, dict): self.names = list(ranges.keys()) self.ranges = [ranges[name] for name in self.names] Attributes constraint = constraint instance-attribute names = names or [] instance-attribute ranges = ranges instance-attribute Functions from_session(session, constraint=None) classmethod Create a ParameterSpace from a MeasurementSession. PARAMETER DESCRIPTION session A MeasurementSession with defined parameters constraint Optional constraint function DEFAULT: None RETURNS DESCRIPTION ParameterSpace A configured parameter space Source code in pytestlab/experiments/sweep.py @classmethod def from_session(cls, session, constraint=None): \"\"\" Create a ParameterSpace from a MeasurementSession. Args: session: A MeasurementSession with defined parameters constraint: Optional constraint function Returns: ParameterSpace: A configured parameter space \"\"\" space = cls(\"auto\", constraint=constraint) space._session = session # Extract parameter information param_names = [] param_ranges = [] for name, param in session._parameters.items(): param_names.append(name) values = param.values # Calculate range from values min_val = min(values) max_val = max(values) param_ranges.append((min_val, max_val)) space.names = param_names space.ranges = param_ranges return space get_parameters() Get parameter information. RETURNS DESCRIPTION tuple (names, ranges) where: - names is a list of parameter names - ranges is a list of (min, max) tuples Source code in pytestlab/experiments/sweep.py def get_parameters(self): \"\"\" Get parameter information. Returns: tuple: (names, ranges) where: - names is a list of parameter names - ranges is a list of (min, max) tuples \"\"\" # If auto, extract from session if self.ranges == \"auto\": if not self._session: raise ValueError(\"'auto' ranges require a MeasurementSession\") return ParameterSpace.from_session(self._session, self.constraint).get_parameters() return self.names, self.ranges is_valid(param_values) Check if a parameter combination is valid according to the constraint. PARAMETER DESCRIPTION param_values Parameter values as a list or dict TYPE: Union [ List [ float ], Dict [ str , float ]] RETURNS DESCRIPTION bool True if valid, False otherwise TYPE: bool Source code in pytestlab/experiments/sweep.py def is_valid(self, param_values: Union[List[float], Dict[str, float]]) -> bool: \"\"\" Check if a parameter combination is valid according to the constraint. Args: param_values: Parameter values as a list or dict Returns: bool: True if valid, False otherwise \"\"\" if not self.constraint: return True # Convert list to dict if needed if isinstance(param_values, list): param_dict = dict(zip(self.names, param_values)) else: param_dict = param_values return self.constraint(param_dict) wrap_function(func) Wrap a function to handle parameter passing and session integration. PARAMETER DESCRIPTION func The measurement function to wrap TYPE: Callable RETURNS DESCRIPTION Callable A wrapped function that handles parameters appropriately Source code in pytestlab/experiments/sweep.py def wrap_function(self, func: Callable): \"\"\" Wrap a function to handle parameter passing and session integration. Args: func: The measurement function to wrap Returns: Callable: A wrapped function that handles parameters appropriately \"\"\" # Get parameter information names, _ = self.get_parameters() # Define wrapper function for session usage def wrapped_func(*params): # Convert positional params to dict param_dict = dict(zip(names, params)) # Apply constraint if any if self.constraint and not self.constraint(param_dict): # Return a default value for invalid combinations return float('nan') # Call the original function with named parameters return func(**param_dict) return wrapped_func Sweep Dummy Sweep class for documentation compatibility. This is not used in runtime code, but allows mkdocstrings to resolve 'pytestlab.experiments.Sweep' for API docs. Functions f_evaluate(params, f) Source code in pytestlab/experiments/sweep.py def f_evaluate(params: Tuple[Any, ...], f: Callable[..., Any]) -> Any: return f(*params) grid_sweep(param_space=None, points=10) Apply a grid sweep to a measurement function. PARAMETER DESCRIPTION param_space Parameter space definition, one of: - ParameterSpace object - List of (min, max) tuples - Dict of {name: (min, max)} - \"auto\" to extract from MeasurementSession DEFAULT: None points Points per dimension, either: - Single integer (same for all dimensions) - List of integers (one per dimension) DEFAULT: 10 RETURNS DESCRIPTION Callable A decorator that applies a grid sweep Example @grid_sweep({\"voltage\": (0, 10), \"current\": (0, 1)}, 20) def measure(voltage, current): # Measurement code return result Or with auto parameter extraction from session @session.acquire @grid_sweep(points=15) async def measure(voltage, current, instrument): # Measurement code return result With constraint def valid_region(params): return params[\"voltage\"] > 2 * params[\"current\"] @grid_sweep( ParameterSpace({\"voltage\": (0, 10), \"current\": (0, 1)}, constraint=valid_region), points=15 ) def measure(voltage, current): # Measurement code return result Source code in pytestlab/experiments/sweep.py def grid_sweep(param_space=None, points=10): \"\"\" Apply a grid sweep to a measurement function. Args: param_space: Parameter space definition, one of: - ParameterSpace object - List of (min, max) tuples - Dict of {name: (min, max)} - \"auto\" to extract from MeasurementSession points: Points per dimension, either: - Single integer (same for all dimensions) - List of integers (one per dimension) Returns: Callable: A decorator that applies a grid sweep Example: @grid_sweep({\"voltage\": (0, 10), \"current\": (0, 1)}, 20) def measure(voltage, current): # Measurement code return result # Or with auto parameter extraction from session @session.acquire @grid_sweep(points=15) async def measure(voltage, current, instrument): # Measurement code return result # With constraint def valid_region(params): return params[\"voltage\"] > 2 * params[\"current\"] @grid_sweep( ParameterSpace({\"voltage\": (0, 10), \"current\": (0, 1)}, constraint=valid_region), points=15 ) def measure(voltage, current): # Measurement code return result \"\"\" # Handle different param_space types if param_space is None: param_space = \"auto\" if not isinstance(param_space, ParameterSpace): param_space = ParameterSpace(param_space) def decorator(func): @functools.wraps(func) def wrapper(*args, **kwargs): # Handle session as first argument if args and hasattr(args[0], '_parameters') and hasattr(args[0], 'acquire'): session = args[0] local_space = ParameterSpace.from_session(session, param_space.constraint) # Create measurement function that closes over the original func def measure_func(**params): return func(**params, **kwargs) # Get parameters and run grid sweep names, ranges = local_space.get_parameters() wrapped_func = local_space.wrap_function(measure_func) # Run the original grid_sweep function results = grid_sweep_impl(wrapped_func, ranges, points) # Format results if needed return results else: # Standard usage without session if param_space.ranges == \"auto\": raise ValueError(\"'auto' parameter space requires a MeasurementSession\") # Get parameters and run grid sweep names, ranges = param_space.get_parameters() wrapped_func = param_space.wrap_function(func) # Run the original grid_sweep function return grid_sweep_impl(wrapped_func, ranges, points) return wrapper return decorator gwass(param_space=None, budget=100, initial_percentage=0.1) Apply gradient-weighted adaptive stochastic sampling to a measurement function. PARAMETER DESCRIPTION param_space Parameter space definition, one of: - ParameterSpace object - List of (min, max) tuples - Dict of {name: (min, max)} - \"auto\" to extract from MeasurementSession DEFAULT: None budget Total number of function evaluations allowed DEFAULT: 100 initial_percentage Percentage of budget to use for initial grid DEFAULT: 0.1 RETURNS DESCRIPTION Callable A decorator that applies GWASS Example @gwass({\"voltage\": (0, 10), \"current\": (0, 1)}, budget=200) def measure(voltage, current): # Measurement code return result Or with constraint def valid_region(params): # Only accept points where voltage > 2*current return params[\"voltage\"] > 2 * params[\"current\"] @gwass( ParameterSpace({\"voltage\": (0, 10), \"current\": (0, 1)}, constraint=valid_region), budget=150 ) def measure(voltage, current): # Measurement code return result Source code in pytestlab/experiments/sweep.py def gwass(param_space=None, budget=100, initial_percentage=0.1): \"\"\" Apply gradient-weighted adaptive stochastic sampling to a measurement function. Args: param_space: Parameter space definition, one of: - ParameterSpace object - List of (min, max) tuples - Dict of {name: (min, max)} - \"auto\" to extract from MeasurementSession budget: Total number of function evaluations allowed initial_percentage: Percentage of budget to use for initial grid Returns: Callable: A decorator that applies GWASS Example: @gwass({\"voltage\": (0, 10), \"current\": (0, 1)}, budget=200) def measure(voltage, current): # Measurement code return result # Or with constraint def valid_region(params): # Only accept points where voltage > 2*current return params[\"voltage\"] > 2 * params[\"current\"] @gwass( ParameterSpace({\"voltage\": (0, 10), \"current\": (0, 1)}, constraint=valid_region), budget=150 ) def measure(voltage, current): # Measurement code return result \"\"\" # Handle different param_space types if param_space is None: param_space = \"auto\" if not isinstance(param_space, ParameterSpace): param_space = ParameterSpace(param_space) def decorator(func): @functools.wraps(func) def wrapper(*args, **kwargs): # Handle session as first argument if args and hasattr(args[0], '_parameters') and hasattr(args[0], 'acquire'): session = args[0] local_space = ParameterSpace.from_session(session, param_space.constraint) # Create measurement function that closes over the original func def measure_func(**params): return func(**params, **kwargs) # Get parameters and run GWASS names, ranges = local_space.get_parameters() wrapped_func = local_space.wrap_function(measure_func) # Run the original GWASS function return gwass_impl(wrapped_func, ranges, budget, initial_percentage) else: # Standard usage without session if param_space.ranges == \"auto\": raise ValueError(\"'auto' parameter space requires a MeasurementSession\") # Get parameters and run GWASS names, ranges = param_space.get_parameters() wrapped_func = param_space.wrap_function(func) return gwass_impl(wrapped_func, ranges, budget, initial_percentage) return wrapper return decorator monte_carlo_sweep(param_space=None, samples=50) Apply a Monte Carlo sweep to a measurement function. PARAMETER DESCRIPTION param_space Parameter space definition, one of: - ParameterSpace object - List of (min, max) tuples - Dict of {name: (min, max)} - \"auto\" to extract from MeasurementSession DEFAULT: None samples Number of samples, either: - Single integer (total samples) - List of integers (samples per dimension) DEFAULT: 50 RETURNS DESCRIPTION Callable A decorator that applies a Monte Carlo sweep Example @monte_carlo_sweep({\"voltage\": (0, 10), \"current\": (0, 1)}, 100) def measure(voltage, current): # Measurement code return result With constraint function def valid_region(params): return params[\"voltage\"] > 0.5 and params[\"current\"] < 0.8 @monte_carlo_sweep( ParameterSpace({\"voltage\": (0, 10), \"current\": (0, 1)}, constraint=valid_region), samples=200 ) def measure(voltage, current): # Measurement code return result Source code in pytestlab/experiments/sweep.py def monte_carlo_sweep(param_space=None, samples=50): \"\"\" Apply a Monte Carlo sweep to a measurement function. Args: param_space: Parameter space definition, one of: - ParameterSpace object - List of (min, max) tuples - Dict of {name: (min, max)} - \"auto\" to extract from MeasurementSession samples: Number of samples, either: - Single integer (total samples) - List of integers (samples per dimension) Returns: Callable: A decorator that applies a Monte Carlo sweep Example: @monte_carlo_sweep({\"voltage\": (0, 10), \"current\": (0, 1)}, 100) def measure(voltage, current): # Measurement code return result # With constraint function def valid_region(params): return params[\"voltage\"] > 0.5 and params[\"current\"] < 0.8 @monte_carlo_sweep( ParameterSpace({\"voltage\": (0, 10), \"current\": (0, 1)}, constraint=valid_region), samples=200 ) def measure(voltage, current): # Measurement code return result \"\"\" # Handle different param_space types if param_space is None: param_space = \"auto\" if not isinstance(param_space, ParameterSpace): param_space = ParameterSpace(param_space) def decorator(func): @functools.wraps(func) def wrapper(*args, **kwargs): # Handle session as first argument if args and hasattr(args[0], '_parameters') and hasattr(args[0], 'acquire'): session = args[0] local_space = ParameterSpace.from_session(session, param_space.constraint) # Create measurement function that closes over the original func def measure_func(**params): return func(**params, **kwargs) # Get parameters and run Monte Carlo sweep names, ranges = local_space.get_parameters() wrapped_func = local_space.wrap_function(measure_func) # Convert samples to per-dimension if needed samples_list = samples if isinstance(samples, int): # Equal distribution among parameters samples_list = [int(samples**(1/len(ranges)))] * len(ranges) # Run the original Monte Carlo sweep function return monte_carlo_sweep_impl(wrapped_func, ranges, samples_list) else: # Standard usage without session if param_space.ranges == \"auto\": raise ValueError(\"'auto' parameter space requires a MeasurementSession\") # Get parameters and run Monte Carlo sweep names, ranges = param_space.get_parameters() wrapped_func = param_space.wrap_function(func) # Convert samples to per-dimension if needed samples_list = samples if isinstance(samples, int): # Equal distribution among parameters samples_list = [int(samples**(1/len(ranges)))] * len(ranges) return monte_carlo_sweep_impl(wrapped_func, ranges, samples_list) return wrapper return decorator","title":"Experiments & Database"},{"location":"api/experiments/#experiments-sweeps","text":"This section documents the core classes and utilities for managing experiments, sweeps, and measurement results in PyTestLab.","title":"Experiments &amp; Sweeps"},{"location":"api/experiments/#database-results","text":"","title":"Database &amp; Results"},{"location":"api/experiments/#pytestlab.experiments.database.Database","text":"","title":"Database"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult","text":"A class to represent a collection of measurement values. ATTRIBUTE DESCRIPTION values The measurement data. TYPE: Union [ ndarray , DataFrame , float64 , List [ Any ], UFloat ] units The units of the measurements. TYPE: str instrument The name of the instrument used for the measurements. TYPE: str measurement_type The type of measurement. TYPE: str timestamp Timestamp of when the result was created. TYPE: float Source code in pytestlab/experiments/results.py def __init__(self, values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat], instrument: str, units: str, measurement_type: str, timestamp: Optional[float] = None, # Allow optional timestamp override envelope: Optional[Dict[str, Any]] = None, # Add envelope as an explicit argument sampling_rate: Optional[float] = None, # Add sampling_rate for FFT **kwargs: Any) -> None: # Added **kwargs and type hint self.values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat] = values self.units: str = units self.instrument: str = instrument self.measurement_type: str = measurement_type self.timestamp: float = timestamp if timestamp is not None else time.time() # Envelope logic: always provide an envelope attribute if envelope is not None: self.envelope = envelope else: # Default: minimal valid envelope (empty dict, or customize as needed) self.envelope = {} # Store sampling rate for FFT calculations self.sampling_rate = sampling_rate # Store any additional kwargs as attributes for key, value in kwargs.items(): setattr(self, key, value)","title":"MeasurementResult"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult-attributes","text":"","title":"Attributes"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.envelope","text":"","title":"envelope"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.instrument","text":"","title":"instrument"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.measurement_type","text":"","title":"measurement_type"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.nominal","text":"","title":"nominal"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.sampling_rate","text":"","title":"sampling_rate"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.sigma","text":"","title":"sigma"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.timestamp","text":"","title":"timestamp"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.units","text":"","title":"units"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.values","text":"","title":"values"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult-functions","text":"","title":"Functions"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__","text":"Allows deleting an item from 'values' if it's a list or ndarray. Source code in pytestlab/experiments/results.py def __delitem__(self, index: int) -> None: \"\"\"Allows deleting an item from 'values' if it's a list or ndarray.\"\"\" if isinstance(self.values, list): del self.values[index] elif isinstance(self.values, np.ndarray): self.values = np.delete(self.values, index, axis=0) else: raise TypeError(f\"Deletion by index not supported for type {type(self.values)}\")","title":"__delitem__"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__","text":"Allows indexing into the 'values' attribute. Source code in pytestlab/experiments/results.py def __getitem__(self, index: int) -> Any: \"\"\"Allows indexing into the 'values' attribute.\"\"\" if isinstance(self.values, (np.ndarray, list)): return self.values[index] elif isinstance(self.values, pl.DataFrame): return self.values[index] # Returns a row as a new DataFrame elif isinstance(self.values, (np.float64, UFloat)) and index == 0: return self.values raise IndexError(f\"Index {index} not applicable for type {type(self.values)}\")","title":"__getitem__"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__","text":"Allows iteration over the 'values' attribute. Source code in pytestlab/experiments/results.py def __iter__(self) -> Iterator[Any]: \"\"\"Allows iteration over the 'values' attribute.\"\"\" if isinstance(self.values, (np.ndarray, list)): return iter(self.values) elif isinstance(self.values, pl.DataFrame): return iter(self.values.iter_rows()) elif isinstance(self.values, (np.float64, UFloat)): return iter([self.values]) raise TypeError(f\"Iteration not supported for type {type(self.values)}\")","title":"__iter__"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__","text":"Source code in pytestlab/experiments/results.py def __len__(self) -> int: if isinstance(self.values, (np.ndarray, list)): return len(self.values) elif isinstance(self.values, (np.float64, UFloat)): return 1 elif isinstance(self.values, pl.DataFrame): return self.values.height # Number of rows return 0 # Default for unknown types","title":"__len__"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__","text":"For backward compatibility with tests: - 1D arrays return a newline-separated list of values with units (like str ) - Other types use a detailed representation Source code in pytestlab/experiments/results.py def __repr__(self) -> str: \"\"\" For backward compatibility with tests: - 1D arrays return a newline-separated list of values with units (like __str__) - Other types use a detailed representation \"\"\" if isinstance(self.values, np.ndarray) and self.values.ndim == 1: return '\\n'.join([f\"{val} {self.units}\" for val in self.values]) return (f\"MeasurementResult(instrument='{self.instrument}', type='{self.measurement_type}', \" f\"units='{self.units}', values_type='{type(self.values).__name__}', timestamp={self.timestamp})\")","title":"__repr__"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__","text":"String representation of the measurement result. For backward compatibility with tests, returns a newline-separated list for arrays. For other types, uses a more descriptive representation. Source code in pytestlab/experiments/results.py def __str__(self) -> str: \"\"\"String representation of the measurement result. For backward compatibility with tests, returns a newline-separated list for arrays. For other types, uses a more descriptive representation. \"\"\" if isinstance(self.values, UFloat): return f\"{self.values} {self.units}\" elif isinstance(self.values, np.float64): return f\"{self.values} {self.units}\" elif isinstance(self.values, pl.DataFrame): return str(self.values) elif isinstance(self.values, np.ndarray): # For numpy arrays, handle 1D arrays specially for backward compatibility if self.values.ndim == 1: return '\\n'.join([f\"{val} {self.units}\" for val in self.values]) # For multi-dimensional arrays, provide a concise representation return f\"NumPy Array (shape: {self.values.shape}, dtype: {self.values.dtype}) {self.units}\" elif isinstance(self.values, list): # For lists, special handling for backward compatibility if all(isinstance(x, (int, float)) for x in self.values): return '\\n'.join([f\"{val} {self.units}\" for val in self.values]) # For lists with mixed types or nested lists, show first few items if long if len(self.values) > 5: return f\"List (first 5 of {len(self.values)}): {self.values[:5]}... {self.units}\" return f\"List: {self.values} {self.units}\" # Fallback for other types return f\"Values: {str(self.values)[:100]}... Type: {type(self.values)} {self.units}\"","title":"__str__"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.add","text":"Adds a new value to the collection. Behavior depends on self.values type. Source code in pytestlab/experiments/results.py def add(self, value: Any) -> None: \"\"\"Adds a new value to the collection. Behavior depends on self.values type.\"\"\" if isinstance(self.values, np.ndarray): # This might be inefficient for frequent additions. Consider list then convert. self.values = np.append(self.values, value) elif isinstance(self.values, list): self.values.append(value) elif isinstance(self.values, np.float64): # Convert to list or ndarray if adding to a single float self.values = np.array([self.values, value]) # type: ignore print(\"Warning: Added value to np.float64, converted 'values' to np.ndarray.\") elif isinstance(self.values, UFloat): # If current value is UFloat, adding another value implies creating a list/array of UFloats self.values = [self.values, value] # type: ignore print(\"Warning: Added value to UFloat, converted 'values' to a list. Consider using a list of UFloats initially.\") elif isinstance(self.values, pl.DataFrame): # Appending to Polars DataFrame is complex; typically done by creating a new DF and vstacking. # This simple 'add' might not be suitable. raise NotImplementedError(\"Direct 'add' to Polars DataFrame not supported. Use 'set_values' or manage DataFrame externally.\") else: raise TypeError(f\"Cannot 'add' to type {type(self.values)}\")","title":"add"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear","text":"Clears all the MeasurementValues from the collection, resetting to an empty/default state. Source code in pytestlab/experiments/results.py def clear(self) -> None: \"\"\"Clears all the MeasurementValues from the collection, resetting to an empty/default state.\"\"\" if isinstance(self.values, np.ndarray): self.values = np.array([]) elif isinstance(self.values, (np.float64, UFloat)): # Reset UFloat to a default float or ufloat(0,0) self.values = np.float64(0.0) # Or ufloat(0,0) if preferred default for UFloat elif isinstance(self.values, pl.DataFrame): self.values = pl.DataFrame() elif isinstance(self.values, list): self.values = [] else: # Fallback for unknown types, attempt to set to a default float64 print(f\"Warning: Clearing unknown type {type(self.values)}, setting to np.float64(0.0).\") self.values = np.float64(0.0)","title":"clear"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.get","text":"Gets the MeasurementValue at a specified index. Assumes indexable values. Source code in pytestlab/experiments/results.py def get(self, index: int) -> Any: \"\"\"Gets the MeasurementValue at a specified index. Assumes indexable values.\"\"\" if isinstance(self.values, (np.ndarray, list)): return self.values[index] elif isinstance(self.values, pl.DataFrame): # For DataFrame, 'get' by index might mean row. # This returns a new DataFrame with one row. return self.values[index] elif isinstance(self.values, (np.float64, UFloat)) and index == 0: return self.values raise IndexError(f\"Index {index} out of range or type {type(self.values)} not directly indexable by single int.\")","title":"get"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all","text":"Returns all the MeasurementValues in the collection. Source code in pytestlab/experiments/results.py def get_all(self) -> Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat]: \"\"\"Returns all the MeasurementValues in the collection.\"\"\" return self.values","title":"get_all"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.items","text":"Return items for dict-like behavior. Source code in pytestlab/experiments/results.py def items(self): \"\"\"Return items for dict-like behavior.\"\"\" return self.to_dict().items()","title":"items"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys","text":"Return the keys for dict-like behavior. Source code in pytestlab/experiments/results.py def keys(self): \"\"\"Return the keys for dict-like behavior.\"\"\" return self.to_dict().keys()","title":"keys"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft","text":"Perform Fast Fourier Transform on the measurement data. Requires: - self.values to be a numpy array of time-domain data - self.sampling_rate to be set (in Hz) RETURNS DESCRIPTION 'MeasurementResult' A new MeasurementResult containing the FFT data, with frequency in Hz 'MeasurementResult' and magnitude in the same units as the original data. Source code in pytestlab/experiments/results.py def perform_fft(self) -> 'MeasurementResult': \"\"\"Perform Fast Fourier Transform on the measurement data. Requires: - self.values to be a numpy array of time-domain data - self.sampling_rate to be set (in Hz) Returns: A new MeasurementResult containing the FFT data, with frequency in Hz and magnitude in the same units as the original data. \"\"\" if self.sampling_rate is None: raise ValueError(\"Sampling rate must be set to perform FFT\") if not isinstance(self.values, np.ndarray): raise TypeError(f\"FFT requires numpy array, got {type(self.values)}\") # Ensure we're working with a 1D array values = self.values.flatten() if self.values.ndim > 1 else self.values # Perform FFT fft_values = np.fft.rfft(values) fft_magnitude = np.abs(fft_values) # Create frequency axis freqs = np.fft.rfftfreq(len(values), 1/self.sampling_rate) # Create result with frequency and magnitude result_df = pl.DataFrame({ \"frequency\": freqs, \"magnitude\": fft_magnitude }) return MeasurementResult( values=result_df, instrument=self.instrument, units=self.units, measurement_type=\"FFT\", timestamp=time.time(), original_type=self.measurement_type, sampling_rate=self.sampling_rate )","title":"perform_fft"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.save","text":"Saves the measurement data to a file. If the data is a numpy array, it will be saved as a .npy file. If the data is a Polars DataFrame, it will be saved as a .parquet file. Other list-like data will be converted to numpy array and saved as .npy. np.float64 will be saved as a 0-D numpy array. UFloat objects will be saved as a two-element numpy array [nominal, std_dev] in a .npy file. Source code in pytestlab/experiments/results.py def save(self, path: str) -> None: \"\"\"Saves the measurement data to a file. If the data is a numpy array, it will be saved as a .npy file. If the data is a Polars DataFrame, it will be saved as a .parquet file. Other list-like data will be converted to numpy array and saved as .npy. np.float64 will be saved as a 0-D numpy array. UFloat objects will be saved as a two-element numpy array [nominal, std_dev] in a .npy file. \"\"\" default_ext = \".npy\" if isinstance(self.values, pl.DataFrame): default_ext = \".parquet\" if not path.endswith(('.npy', '.parquet')): path += default_ext print(f\"Warning: File extension not specified. Saving as {path}\") if isinstance(self.values, np.ndarray): np.save(path, self.values) elif isinstance(self.values, pl.DataFrame): if not path.endswith(\".parquet\"): print(f\"Warning: Saving Polars DataFrame to non-parquet file '{path}'. Consider using .parquet for DataFrames.\") self.values.write_parquet(path) elif isinstance(self.values, UFloat): if not path.endswith(\".npy\"): print(f\"Warning: Saving UFloat to non-npy file '{path}'. Consider using .npy.\") np.save(path, np.array([self.values.nominal_value, self.values.std_dev])) elif isinstance(self.values, (list, np.float64)): # Convert list or float64 to ndarray if not path.endswith(\".npy\"): print(f\"Warning: Saving {type(self.values).__name__} to non-npy file '{path}'. Consider using .npy.\") np.save(path, np.array(self.values)) else: raise TypeError(f\"Unsupported data type for saving: {type(self.values)}. Can save np.ndarray, pl.DataFrame, list, np.float64, or UFloat.\") print(f\"Measurement saved to {path}\")","title":"save"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values","text":"Sets the MeasurementValues in the collection. Source code in pytestlab/experiments/results.py def set_values(self, values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat]) -> None: \"\"\"Sets the MeasurementValues in the collection.\"\"\" self.values = values","title":"set_values"},{"location":"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict","text":"Convert MeasurementResult to a dict for DataFrame conversion. This allows MeasurementResult objects to be directly used in Experiment.add_trial. Source code in pytestlab/experiments/results.py def to_dict(self) -> Dict[str, Any]: \"\"\"Convert MeasurementResult to a dict for DataFrame conversion. This allows MeasurementResult objects to be directly used in Experiment.add_trial. \"\"\" if isinstance(self.values, pl.DataFrame): # If values is already a DataFrame, convert to dict representation result = {} for col in self.values.columns: result[col] = self.values[col].to_list() return result elif isinstance(self.values, (np.ndarray, list)): # Convert array or list to a dict with a 'values' key return {'values': self.values} elif isinstance(self.values, (np.float64, UFloat)): # Convert scalar value to a dict with a 'value' key return {'value': self.values} else: # Default fallback return {'values': self.values}","title":"to_dict"},{"location":"api/experiments/#experiments-sweeps_1","text":"","title":"Experiments &amp; Sweeps"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment","text":"Experiment tracker to store measurements and parameters. This class maintains an internal Polars DataFrame (self.data) for trial data, regardless of whether the input is provided as a Polars DataFrame, dict, or list. It provides two export functionalities save_parquet(file_path): Saves the internal data as a Parquet file. Additionally, printing the Experiment instance (via str ) shows a summary and the head (first few rows) of the data. Source code in pytestlab/experiments/experiments.py def __init__(self, name: str, description: str = \"\", notes: str = \"\") -> None: self.name: str = name self.description: str = description self.notes: str = notes self.parameters: Dict[str, ExperimentParameter] = {} self.data: pl.DataFrame = pl.DataFrame()","title":"Experiment"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment-attributes","text":"","title":"Attributes"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment.data","text":"","title":"data"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment.description","text":"","title":"description"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment.name","text":"","title":"name"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment.notes","text":"","title":"notes"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment.parameters","text":"","title":"parameters"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment-functions","text":"","title":"Functions"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__","text":"Iterate over each trial (row) as a dictionary. Source code in pytestlab/experiments/experiments.py def __iter__(self) -> Iterator[Dict[str, Any]]: \"\"\"Iterate over each trial (row) as a dictionary.\"\"\" for row in self.data.to_dicts(): yield row","title":"__iter__"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__","text":"Return the number of trials. Source code in pytestlab/experiments/experiments.py def __len__(self) -> int: \"\"\"Return the number of trials.\"\"\" return self.data.height","title":"__len__"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__","text":"Return a string representation of the experiment. This includes a summary of the experiment details and prints the first 5 rows of the trial data (the head). Source code in pytestlab/experiments/experiments.py def __str__(self) -> str: \"\"\" Return a string representation of the experiment. This includes a summary of the experiment details and prints the first 5 rows of the trial data (the head). \"\"\" param_str = \", \".join(str(param) for param in self.parameters.values()) head_data: Union[pl.DataFrame, str] if not self.data.is_empty(): head_data = self.data.head(5) else: head_data = \"No trial data available.\" return (f\"Experiment: {self.name}\\n\" f\"Description: {self.description}\\n\" f\"Notes: {self.notes or 'No notes'}\\n\" f\"Parameters: {param_str}\\n\" f\"Trial Data (first 5 rows):\\n{head_data}\")","title":"__str__"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter","text":"Add a new parameter to the experiment. PARAMETER DESCRIPTION name Name of the parameter. TYPE: str units Units for the parameter. TYPE: str notes Additional notes. TYPE: str DEFAULT: '' Source code in pytestlab/experiments/experiments.py def add_parameter(self, name: str, units: str, notes: str = \"\") -> None: \"\"\" Add a new parameter to the experiment. Args: name (str): Name of the parameter. units (str): Units for the parameter. notes (str, optional): Additional notes. \"\"\" self.parameters[name] = ExperimentParameter(name, units, notes)","title":"add_parameter"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial","text":"Add a new trial to the experiment. Accepts measurement data in various formats (list, dict, Polars DataFrame, or MeasurementResult) and converts it into a Polars DataFrame if needed. Additional parameter values are added as new columns. PARAMETER DESCRIPTION measurement_result The measurement data. TYPE: Union [ DataFrame , Dict [ str , Any ], List [ Any ], MeasurementResult ] **parameter_values Additional parameters to include with this trial. TYPE: Any DEFAULT: {} RAISES DESCRIPTION ValueError If the conversion to a Polars DataFrame fails or if a provided parameter is not defined. Source code in pytestlab/experiments/experiments.py def add_trial(self, measurement_result: Union[pl.DataFrame, Dict[str, Any], List[Any], 'MeasurementResult'], **parameter_values: Any) -> None: \"\"\" Add a new trial to the experiment. Accepts measurement data in various formats (list, dict, Polars DataFrame, or MeasurementResult) and converts it into a Polars DataFrame if needed. Additional parameter values are added as new columns. Args: measurement_result (Union[pl.DataFrame, Dict[str, Any], List[Any], MeasurementResult]): The measurement data. **parameter_values: Additional parameters to include with this trial. Raises: ValueError: If the conversion to a Polars DataFrame fails or if a provided parameter is not defined. \"\"\" trial_df: pl.DataFrame # Special handling for MeasurementResult objects if hasattr(measurement_result, 'values') and hasattr(measurement_result, 'to_dict'): # If it's a MeasurementResult, extract its values if isinstance(measurement_result.values, pl.DataFrame): trial_df = measurement_result.values else: # Convert to dict and then to DataFrame try: trial_df = pl.DataFrame(measurement_result.to_dict(), strict=False) except Exception as e: raise ValueError(f\"Failed to convert MeasurementResult to DataFrame: {e}\") from e elif not isinstance(measurement_result, pl.DataFrame): try: trial_df = pl.DataFrame(measurement_result, strict=False) except Exception as e: raise ValueError(f\"Failed to convert measurement_result to a Polars DataFrame: {e}\") from e else: trial_df = measurement_result for param_name, value in parameter_values.items(): if param_name not in self.parameters: raise ValueError(f\"Parameter '{param_name}' is not defined in the experiment. Add it first using add_parameter().\") trial_df = trial_df.with_columns(pl.lit(value).alias(param_name)) if self.data.is_empty(): self.data = trial_df else: try: self.data = self.data.vstack(trial_df) except Exception as e: raise ValueError(f\"Failed to stack new trial data. Check for schema compatibility. Error: {e}\") from e","title":"add_trial"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials","text":"Print the full trials DataFrame. Source code in pytestlab/experiments/experiments.py def list_trials(self) -> None: \"\"\"Print the full trials DataFrame.\"\"\" print(self.data)","title":"list_trials"},{"location":"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet","text":"Save the internal Polars DataFrame as a Parquet file. PARAMETER DESCRIPTION file_path The file path (including filename) where the Parquet file will be saved. TYPE: str Source code in pytestlab/experiments/experiments.py def save_parquet(self, file_path: str) -> None: \"\"\" Save the internal Polars DataFrame as a Parquet file. Args: file_path (str): The file path (including filename) where the Parquet file will be saved. \"\"\" self.data.write_parquet(file_path) print(f\"Data saved to Parquet file at: {file_path}\")","title":"save_parquet"},{"location":"api/experiments/#pytestlab.experiments.sweep","text":"","title":"sweep"},{"location":"api/experiments/#pytestlab.experiments.sweep-attributes","text":"","title":"Attributes"},{"location":"api/experiments/#pytestlab.experiments.sweep.R","text":"","title":"R"},{"location":"api/experiments/#pytestlab.experiments.sweep.T","text":"","title":"T"},{"location":"api/experiments/#pytestlab.experiments.sweep.grid_sweep_impl","text":"","title":"grid_sweep_impl"},{"location":"api/experiments/#pytestlab.experiments.sweep.gwass_impl","text":"","title":"gwass_impl"},{"location":"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep_impl","text":"","title":"monte_carlo_sweep_impl"},{"location":"api/experiments/#pytestlab.experiments.sweep-classes","text":"","title":"Classes"},{"location":"api/experiments/#pytestlab.experiments.sweep.ParameterSpace","text":"Represents a parameter space for sweep operations. This class helps define and manage parameter spaces for various sweep strategies, including parameter ranges, constraints, and integration with MeasurementSession. Initialize a parameter space. PARAMETER DESCRIPTION ranges Parameter ranges in one of these formats: - List of (min, max) tuples: [(min1, max1), (min2, max2), ...] - Dict of {name: (min, max)}: {\"x\": (0, 10), \"y\": (-5, 5), ...} - \"auto\" to extract from MeasurementSession TYPE: Union [ List [ Tuple [ float , float ]], str , Dict [ str , Tuple [ float , float ]]] DEFAULT: 'auto' names Parameter names (required if ranges is a list of tuples) TYPE: Optional [ List [ str ]] DEFAULT: None constraint Optional function that takes a dict of parameter values and returns True if the combination is valid TYPE: Optional [ Callable [[ Dict [ str , float ]], bool ]] DEFAULT: None Source code in pytestlab/experiments/sweep.py def __init__(self, ranges: Union[List[Tuple[float, float]], str, Dict[str, Tuple[float, float]]] = \"auto\", names: Optional[List[str]] = None, constraint: Optional[Callable[[Dict[str, float]], bool]] = None): \"\"\" Initialize a parameter space. Args: ranges: Parameter ranges in one of these formats: - List of (min, max) tuples: [(min1, max1), (min2, max2), ...] - Dict of {name: (min, max)}: {\"x\": (0, 10), \"y\": (-5, 5), ...} - \"auto\" to extract from MeasurementSession names: Parameter names (required if ranges is a list of tuples) constraint: Optional function that takes a dict of parameter values and returns True if the combination is valid \"\"\" self.ranges = ranges self.names = names or [] self.constraint = constraint self._session = None # Validate ranges and names if isinstance(ranges, list) and names and len(ranges) != len(names): raise ValueError(\"Number of ranges must match number of parameter names\") # Convert dict to list format if provided as dict if isinstance(ranges, dict): self.names = list(ranges.keys()) self.ranges = [ranges[name] for name in self.names]","title":"ParameterSpace"},{"location":"api/experiments/#pytestlab.experiments.sweep.ParameterSpace-attributes","text":"","title":"Attributes"},{"location":"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.constraint","text":"","title":"constraint"},{"location":"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.names","text":"","title":"names"},{"location":"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.ranges","text":"","title":"ranges"},{"location":"api/experiments/#pytestlab.experiments.sweep.ParameterSpace-functions","text":"","title":"Functions"},{"location":"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session","text":"Create a ParameterSpace from a MeasurementSession. PARAMETER DESCRIPTION session A MeasurementSession with defined parameters constraint Optional constraint function DEFAULT: None RETURNS DESCRIPTION ParameterSpace A configured parameter space Source code in pytestlab/experiments/sweep.py @classmethod def from_session(cls, session, constraint=None): \"\"\" Create a ParameterSpace from a MeasurementSession. Args: session: A MeasurementSession with defined parameters constraint: Optional constraint function Returns: ParameterSpace: A configured parameter space \"\"\" space = cls(\"auto\", constraint=constraint) space._session = session # Extract parameter information param_names = [] param_ranges = [] for name, param in session._parameters.items(): param_names.append(name) values = param.values # Calculate range from values min_val = min(values) max_val = max(values) param_ranges.append((min_val, max_val)) space.names = param_names space.ranges = param_ranges return space","title":"from_session"},{"location":"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters","text":"Get parameter information. RETURNS DESCRIPTION tuple (names, ranges) where: - names is a list of parameter names - ranges is a list of (min, max) tuples Source code in pytestlab/experiments/sweep.py def get_parameters(self): \"\"\" Get parameter information. Returns: tuple: (names, ranges) where: - names is a list of parameter names - ranges is a list of (min, max) tuples \"\"\" # If auto, extract from session if self.ranges == \"auto\": if not self._session: raise ValueError(\"'auto' ranges require a MeasurementSession\") return ParameterSpace.from_session(self._session, self.constraint).get_parameters() return self.names, self.ranges","title":"get_parameters"},{"location":"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid","text":"Check if a parameter combination is valid according to the constraint. PARAMETER DESCRIPTION param_values Parameter values as a list or dict TYPE: Union [ List [ float ], Dict [ str , float ]] RETURNS DESCRIPTION bool True if valid, False otherwise TYPE: bool Source code in pytestlab/experiments/sweep.py def is_valid(self, param_values: Union[List[float], Dict[str, float]]) -> bool: \"\"\" Check if a parameter combination is valid according to the constraint. Args: param_values: Parameter values as a list or dict Returns: bool: True if valid, False otherwise \"\"\" if not self.constraint: return True # Convert list to dict if needed if isinstance(param_values, list): param_dict = dict(zip(self.names, param_values)) else: param_dict = param_values return self.constraint(param_dict)","title":"is_valid"},{"location":"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function","text":"Wrap a function to handle parameter passing and session integration. PARAMETER DESCRIPTION func The measurement function to wrap TYPE: Callable RETURNS DESCRIPTION Callable A wrapped function that handles parameters appropriately Source code in pytestlab/experiments/sweep.py def wrap_function(self, func: Callable): \"\"\" Wrap a function to handle parameter passing and session integration. Args: func: The measurement function to wrap Returns: Callable: A wrapped function that handles parameters appropriately \"\"\" # Get parameter information names, _ = self.get_parameters() # Define wrapper function for session usage def wrapped_func(*params): # Convert positional params to dict param_dict = dict(zip(names, params)) # Apply constraint if any if self.constraint and not self.constraint(param_dict): # Return a default value for invalid combinations return float('nan') # Call the original function with named parameters return func(**param_dict) return wrapped_func","title":"wrap_function"},{"location":"api/experiments/#pytestlab.experiments.sweep.Sweep","text":"Dummy Sweep class for documentation compatibility. This is not used in runtime code, but allows mkdocstrings to resolve 'pytestlab.experiments.Sweep' for API docs.","title":"Sweep"},{"location":"api/experiments/#pytestlab.experiments.sweep-functions","text":"","title":"Functions"},{"location":"api/experiments/#pytestlab.experiments.sweep.f_evaluate","text":"Source code in pytestlab/experiments/sweep.py def f_evaluate(params: Tuple[Any, ...], f: Callable[..., Any]) -> Any: return f(*params)","title":"f_evaluate"},{"location":"api/experiments/#pytestlab.experiments.sweep.grid_sweep","text":"Apply a grid sweep to a measurement function. PARAMETER DESCRIPTION param_space Parameter space definition, one of: - ParameterSpace object - List of (min, max) tuples - Dict of {name: (min, max)} - \"auto\" to extract from MeasurementSession DEFAULT: None points Points per dimension, either: - Single integer (same for all dimensions) - List of integers (one per dimension) DEFAULT: 10 RETURNS DESCRIPTION Callable A decorator that applies a grid sweep Example @grid_sweep({\"voltage\": (0, 10), \"current\": (0, 1)}, 20) def measure(voltage, current): # Measurement code return result","title":"grid_sweep"},{"location":"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session","text":"@session.acquire @grid_sweep(points=15) async def measure(voltage, current, instrument): # Measurement code return result","title":"Or with auto parameter extraction from session"},{"location":"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint","text":"def valid_region(params): return params[\"voltage\"] > 2 * params[\"current\"] @grid_sweep( ParameterSpace({\"voltage\": (0, 10), \"current\": (0, 1)}, constraint=valid_region), points=15 ) def measure(voltage, current): # Measurement code return result Source code in pytestlab/experiments/sweep.py def grid_sweep(param_space=None, points=10): \"\"\" Apply a grid sweep to a measurement function. Args: param_space: Parameter space definition, one of: - ParameterSpace object - List of (min, max) tuples - Dict of {name: (min, max)} - \"auto\" to extract from MeasurementSession points: Points per dimension, either: - Single integer (same for all dimensions) - List of integers (one per dimension) Returns: Callable: A decorator that applies a grid sweep Example: @grid_sweep({\"voltage\": (0, 10), \"current\": (0, 1)}, 20) def measure(voltage, current): # Measurement code return result # Or with auto parameter extraction from session @session.acquire @grid_sweep(points=15) async def measure(voltage, current, instrument): # Measurement code return result # With constraint def valid_region(params): return params[\"voltage\"] > 2 * params[\"current\"] @grid_sweep( ParameterSpace({\"voltage\": (0, 10), \"current\": (0, 1)}, constraint=valid_region), points=15 ) def measure(voltage, current): # Measurement code return result \"\"\" # Handle different param_space types if param_space is None: param_space = \"auto\" if not isinstance(param_space, ParameterSpace): param_space = ParameterSpace(param_space) def decorator(func): @functools.wraps(func) def wrapper(*args, **kwargs): # Handle session as first argument if args and hasattr(args[0], '_parameters') and hasattr(args[0], 'acquire'): session = args[0] local_space = ParameterSpace.from_session(session, param_space.constraint) # Create measurement function that closes over the original func def measure_func(**params): return func(**params, **kwargs) # Get parameters and run grid sweep names, ranges = local_space.get_parameters() wrapped_func = local_space.wrap_function(measure_func) # Run the original grid_sweep function results = grid_sweep_impl(wrapped_func, ranges, points) # Format results if needed return results else: # Standard usage without session if param_space.ranges == \"auto\": raise ValueError(\"'auto' parameter space requires a MeasurementSession\") # Get parameters and run grid sweep names, ranges = param_space.get_parameters() wrapped_func = param_space.wrap_function(func) # Run the original grid_sweep function return grid_sweep_impl(wrapped_func, ranges, points) return wrapper return decorator","title":"With constraint"},{"location":"api/experiments/#pytestlab.experiments.sweep.gwass","text":"Apply gradient-weighted adaptive stochastic sampling to a measurement function. PARAMETER DESCRIPTION param_space Parameter space definition, one of: - ParameterSpace object - List of (min, max) tuples - Dict of {name: (min, max)} - \"auto\" to extract from MeasurementSession DEFAULT: None budget Total number of function evaluations allowed DEFAULT: 100 initial_percentage Percentage of budget to use for initial grid DEFAULT: 0.1 RETURNS DESCRIPTION Callable A decorator that applies GWASS Example @gwass({\"voltage\": (0, 10), \"current\": (0, 1)}, budget=200) def measure(voltage, current): # Measurement code return result","title":"gwass"},{"location":"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint","text":"def valid_region(params): # Only accept points where voltage > 2*current return params[\"voltage\"] > 2 * params[\"current\"] @gwass( ParameterSpace({\"voltage\": (0, 10), \"current\": (0, 1)}, constraint=valid_region), budget=150 ) def measure(voltage, current): # Measurement code return result Source code in pytestlab/experiments/sweep.py def gwass(param_space=None, budget=100, initial_percentage=0.1): \"\"\" Apply gradient-weighted adaptive stochastic sampling to a measurement function. Args: param_space: Parameter space definition, one of: - ParameterSpace object - List of (min, max) tuples - Dict of {name: (min, max)} - \"auto\" to extract from MeasurementSession budget: Total number of function evaluations allowed initial_percentage: Percentage of budget to use for initial grid Returns: Callable: A decorator that applies GWASS Example: @gwass({\"voltage\": (0, 10), \"current\": (0, 1)}, budget=200) def measure(voltage, current): # Measurement code return result # Or with constraint def valid_region(params): # Only accept points where voltage > 2*current return params[\"voltage\"] > 2 * params[\"current\"] @gwass( ParameterSpace({\"voltage\": (0, 10), \"current\": (0, 1)}, constraint=valid_region), budget=150 ) def measure(voltage, current): # Measurement code return result \"\"\" # Handle different param_space types if param_space is None: param_space = \"auto\" if not isinstance(param_space, ParameterSpace): param_space = ParameterSpace(param_space) def decorator(func): @functools.wraps(func) def wrapper(*args, **kwargs): # Handle session as first argument if args and hasattr(args[0], '_parameters') and hasattr(args[0], 'acquire'): session = args[0] local_space = ParameterSpace.from_session(session, param_space.constraint) # Create measurement function that closes over the original func def measure_func(**params): return func(**params, **kwargs) # Get parameters and run GWASS names, ranges = local_space.get_parameters() wrapped_func = local_space.wrap_function(measure_func) # Run the original GWASS function return gwass_impl(wrapped_func, ranges, budget, initial_percentage) else: # Standard usage without session if param_space.ranges == \"auto\": raise ValueError(\"'auto' parameter space requires a MeasurementSession\") # Get parameters and run GWASS names, ranges = param_space.get_parameters() wrapped_func = param_space.wrap_function(func) return gwass_impl(wrapped_func, ranges, budget, initial_percentage) return wrapper return decorator","title":"Or with constraint"},{"location":"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep","text":"Apply a Monte Carlo sweep to a measurement function. PARAMETER DESCRIPTION param_space Parameter space definition, one of: - ParameterSpace object - List of (min, max) tuples - Dict of {name: (min, max)} - \"auto\" to extract from MeasurementSession DEFAULT: None samples Number of samples, either: - Single integer (total samples) - List of integers (samples per dimension) DEFAULT: 50 RETURNS DESCRIPTION Callable A decorator that applies a Monte Carlo sweep Example @monte_carlo_sweep({\"voltage\": (0, 10), \"current\": (0, 1)}, 100) def measure(voltage, current): # Measurement code return result","title":"monte_carlo_sweep"},{"location":"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function","text":"def valid_region(params): return params[\"voltage\"] > 0.5 and params[\"current\"] < 0.8 @monte_carlo_sweep( ParameterSpace({\"voltage\": (0, 10), \"current\": (0, 1)}, constraint=valid_region), samples=200 ) def measure(voltage, current): # Measurement code return result Source code in pytestlab/experiments/sweep.py def monte_carlo_sweep(param_space=None, samples=50): \"\"\" Apply a Monte Carlo sweep to a measurement function. Args: param_space: Parameter space definition, one of: - ParameterSpace object - List of (min, max) tuples - Dict of {name: (min, max)} - \"auto\" to extract from MeasurementSession samples: Number of samples, either: - Single integer (total samples) - List of integers (samples per dimension) Returns: Callable: A decorator that applies a Monte Carlo sweep Example: @monte_carlo_sweep({\"voltage\": (0, 10), \"current\": (0, 1)}, 100) def measure(voltage, current): # Measurement code return result # With constraint function def valid_region(params): return params[\"voltage\"] > 0.5 and params[\"current\"] < 0.8 @monte_carlo_sweep( ParameterSpace({\"voltage\": (0, 10), \"current\": (0, 1)}, constraint=valid_region), samples=200 ) def measure(voltage, current): # Measurement code return result \"\"\" # Handle different param_space types if param_space is None: param_space = \"auto\" if not isinstance(param_space, ParameterSpace): param_space = ParameterSpace(param_space) def decorator(func): @functools.wraps(func) def wrapper(*args, **kwargs): # Handle session as first argument if args and hasattr(args[0], '_parameters') and hasattr(args[0], 'acquire'): session = args[0] local_space = ParameterSpace.from_session(session, param_space.constraint) # Create measurement function that closes over the original func def measure_func(**params): return func(**params, **kwargs) # Get parameters and run Monte Carlo sweep names, ranges = local_space.get_parameters() wrapped_func = local_space.wrap_function(measure_func) # Convert samples to per-dimension if needed samples_list = samples if isinstance(samples, int): # Equal distribution among parameters samples_list = [int(samples**(1/len(ranges)))] * len(ranges) # Run the original Monte Carlo sweep function return monte_carlo_sweep_impl(wrapped_func, ranges, samples_list) else: # Standard usage without session if param_space.ranges == \"auto\": raise ValueError(\"'auto' parameter space requires a MeasurementSession\") # Get parameters and run Monte Carlo sweep names, ranges = param_space.get_parameters() wrapped_func = param_space.wrap_function(func) # Convert samples to per-dimension if needed samples_list = samples if isinstance(samples, int): # Equal distribution among parameters samples_list = [int(samples**(1/len(ranges)))] * len(ranges) return monte_carlo_sweep_impl(wrapped_func, ranges, samples_list) return wrapper return decorator","title":"With constraint function"},{"location":"api/instruments/","text":"Instrument Drivers This section documents the main instrument driver classes provided by PyTestLab. All drivers support both real and simulated backends, and expose a modern, async-first API. Core Instrument Classes pytestlab.instruments.AutoInstrument Classes AutoInstrument A factory class for creating and configuring instrument objects. This class provides a high-level interface to instantiate various types of instruments based on configuration files, instrument types, or other identifiers. It handles the complexities of locating configuration data, selecting the appropriate communication backend (e.g., VISA, simulation), and initializing the correct instrument driver. The primary methods are from_config for creating an instrument from a configuration source and from_type for creating one based on a generic instrument category. Functions from_config(config_source, *args, serial_number=None, debug_mode=False, simulate=None, backend_type_hint=None, address_override=None, timeout_override_ms=None) async classmethod Initializes an instrument from a configuration source. This is the primary factory method for creating instrument instances. It orchestrates the entire setup process: 1. Loads configuration from a dictionary, a local file, or a CDN URL. 2. Determines whether to run in simulation or live mode. 3. Selects and instantiates the appropriate communication backend (Sim, VISA, Lamb). 4. Instantiates the final instrument driver with the config and backend. Note: This method creates and configures the instrument object but does not establish the connection. The caller must explicitly call await instrument.connect_backend() on the returned object. PARAMETER DESCRIPTION config_source A dictionary containing the configuration, a string identifier for a CDN/local profile, or a file path. TYPE: Union [ str , Dict [ str , Any ]] serial_number An optional serial number to override the one in the config. TYPE: Optional [ str ] DEFAULT: None debug_mode If True, prints detailed logs during the setup process. TYPE: bool DEFAULT: False simulate Explicitly enable or disable simulation mode, overriding environment variables and config settings. TYPE: Optional [ bool ] DEFAULT: None backend_type_hint Manually specify the backend ('visa' or 'lamb'), bypassing automatic detection. TYPE: Optional [ str ] DEFAULT: None address_override Use a specific communication address, overriding the one in the config. TYPE: Optional [ str ] DEFAULT: None timeout_override_ms Use a specific communication timeout in milliseconds. TYPE: Optional [ int ] DEFAULT: None RETURNS DESCRIPTION Instrument [ Any ] An initialized instrument object ready to be connected. RAISES DESCRIPTION FileNotFoundError If the configuration source is a string and the corresponding file cannot be found. InstrumentConfigurationError If the configuration is invalid or a required setting is missing. TypeError If config_source is not a dictionary or a string. Source code in pytestlab/instruments/AutoInstrument.py @classmethod async def from_config(cls: Type[AutoInstrument], config_source: Union[str, Dict[str, Any]], *args, serial_number: Optional[str] = None, debug_mode: bool = False, # For logging during config load simulate: Optional[bool] = None, backend_type_hint: Optional[str] = None, address_override: Optional[str] = None, timeout_override_ms: Optional[int] = None ) -> Instrument[Any]: # Returns an instance of a subclass of Instrument \"\"\"Initializes an instrument from a configuration source. This is the primary factory method for creating instrument instances. It orchestrates the entire setup process: 1. Loads configuration from a dictionary, a local file, or a CDN URL. 2. Determines whether to run in simulation or live mode. 3. Selects and instantiates the appropriate communication backend (Sim, VISA, Lamb). 4. Instantiates the final instrument driver with the config and backend. Note: This method creates and configures the instrument object but does not establish the connection. The caller must explicitly call `await instrument.connect_backend()` on the returned object. Args: config_source: A dictionary containing the configuration, a string identifier for a CDN/local profile, or a file path. serial_number: An optional serial number to override the one in the config. debug_mode: If True, prints detailed logs during the setup process. simulate: Explicitly enable or disable simulation mode, overriding environment variables and config settings. backend_type_hint: Manually specify the backend ('visa' or 'lamb'), bypassing automatic detection. address_override: Use a specific communication address, overriding the one in the config. timeout_override_ms: Use a specific communication timeout in milliseconds. Returns: An initialized instrument object ready to be connected. Raises: FileNotFoundError: If the configuration source is a string and the corresponding file cannot be found. InstrumentConfigurationError: If the configuration is invalid or a required setting is missing. TypeError: If `config_source` is not a dictionary or a string. \"\"\" # Support serial_number as positional second argument if len(args) > 0 and isinstance(args[0], str): serial_number = args[0] config_data: Dict[str, Any] # Step 1: Load configuration data from the provided source config_model: PydanticInstrumentConfig if isinstance(config_source, PydanticInstrumentConfig): config_model = config_source config_data = config_model.model_dump(mode='python') elif isinstance(config_source, dict): config_data = config_source config_model = load_profile(config_data) elif isinstance(config_source, str): try: # Try fetching from the CDN first config_data = await cls.get_config_from_cdn(config_source) if debug_mode: print(f\"Successfully loaded configuration for '{config_source}' from CDN.\") except FileNotFoundError: try: # Fallback to local file system if not found on CDN config_data = await cls.get_config_from_local(config_source) if debug_mode: print(f\"Successfully loaded configuration for '{config_source}' from local.\") except FileNotFoundError: # If not found in either location, raise an error raise FileNotFoundError(f\"Configuration '{config_source}' not found in CDN or local paths.\") config_model = load_profile(config_data) else: raise TypeError(\"config_source must be a file path (str), a dict, or an InstrumentConfig object.\") # Override the serial number in the config if one is provided as an argument if serial_number is not None and hasattr(config_model, 'serial_number'): config_model.serial_number = serial_number # type: ignore backend_instance: AsyncInstrumentIO # Step 2: Determine the final simulation mode based on a clear priority final_simulation_mode: bool if simulate is not None: # Highest priority: explicit argument to the function final_simulation_mode = simulate if debug_mode: print(f\"Simulation mode explicitly set to {final_simulation_mode} by argument.\") else: # Second priority: environment variable env_simulate = os.getenv(\"PYTESTLAB_SIMULATE\") if env_simulate is not None: final_simulation_mode = env_simulate.lower() in ('true', '1', 'yes') if debug_mode: print(f\"Simulation mode set to {final_simulation_mode} by PYTESTLAB_SIMULATE environment variable.\") else: # Lowest priority: default to False final_simulation_mode = False if debug_mode: print(f\"Simulation mode defaulted to {final_simulation_mode} (no explicit argument or PYTESTLAB_SIMULATE).\") # Step 3: Determine the actual communication address and timeout actual_address: Optional[str] if address_override is not None: # Argument override has the highest priority for address actual_address = address_override if debug_mode: print(f\"Address overridden to '{actual_address}'.\") else: # Otherwise, get the address from the configuration data actual_address = getattr(config_model, 'address', getattr(config_model, 'resource_name', None)) if debug_mode: print(f\"Address from config: '{actual_address}'.\") actual_timeout: int default_communication_timeout_ms = 30000 # Default if not in override or config if timeout_override_ms is not None: actual_timeout = timeout_override_ms if debug_mode: print(f\"Timeout overridden to {actual_timeout}ms.\") else: # Assuming 'communication.timeout_ms' or 'communication_timeout_ms' might exist # Prefer 'communication_timeout_ms' as per previous logic if 'communication' object isn't standard timeout_from_config = getattr(config_model, 'communication_timeout_ms', None) if hasattr(config_model, 'communication') and hasattr(config_model.communication, 'timeout_ms'): # type: ignore timeout_from_config = config_model.communication.timeout_ms # type: ignore if isinstance(timeout_from_config, int) and timeout_from_config > 0: actual_timeout = timeout_from_config if debug_mode: print(f\"Timeout from config: {actual_timeout}ms.\") else: actual_timeout = default_communication_timeout_ms if debug_mode: print(f\"Warning: Invalid or missing timeout in config, using default {actual_timeout}ms.\") if not isinstance(actual_timeout, int) or actual_timeout <= 0: # Final safety check actual_timeout = default_communication_timeout_ms if debug_mode: print(f\"Warning: Corrected invalid timeout to default {actual_timeout}ms.\") # Step 4: Instantiate the appropriate backend based on the mode and configuration if final_simulation_mode: # Helper to resolve sim profile path def resolve_sim_profile_path(profile_key_or_path: str) -> str: # 1. User override in ~/.pytestlab/profiles user_profile = os.path.expanduser(os.path.join(\"~/.pytestlab/profiles\", profile_key_or_path + \".yaml\")) if os.path.exists(user_profile): return user_profile # 2. User sim_profiles (legacy) user_sim_profile = os.path.expanduser(os.path.join(\"~/.pytestlab/sim_profiles\", profile_key_or_path + \".yaml\")) if os.path.exists(user_sim_profile): return user_sim_profile # 3. Package profile import pytestlab as ptl pkg_profile = os.path.join(os.path.dirname(ptl.__file__), \"profiles\", profile_key_or_path + \".yaml\") if os.path.exists(pkg_profile): return pkg_profile # 4. Direct path if os.path.exists(profile_key_or_path): return profile_key_or_path raise FileNotFoundError(f\"Simulation profile not found for '{profile_key_or_path}'\") device_model_str = getattr(config_model, \"model\", \"GenericSimulatedModel\") if isinstance(config_source, str): sim_profile_path = os.path.abspath(resolve_sim_profile_path(config_source)) if debug_mode: print(f\"Resolved sim profile path: {sim_profile_path}\") else: # Write dict config to a temp file with tempfile.NamedTemporaryFile(\"w\", suffix=\".yaml\", delete=False) as tf: yaml.dump(config_data, tf) sim_profile_path = os.path.abspath(tf.name) if debug_mode: print(f\"Wrote temp sim profile: {sim_profile_path}\") backend_instance = SimBackendV2( profile_path=sim_profile_path, model=device_model_str, timeout_ms=actual_timeout, ) if debug_mode: print( f\"Using SimBackendV2 for {device_model_str} with timeout {actual_timeout}ms. Profile: {sim_profile_path}\" ) else: # For live hardware, determine the backend type (VISA or Lamb) if backend_type_hint: # Explicit hint overrides any inference chosen_backend_type = backend_type_hint.lower() if debug_mode: print(f\"Backend type hint provided: '{chosen_backend_type}'.\") elif actual_address and \"LAMB::\" in actual_address.upper(): # Infer 'lamb' backend from the address format chosen_backend_type = 'lamb' if debug_mode: print(f\"Inferred backend type: 'lamb' from address '{actual_address}'.\") elif actual_address: # Infer 'visa' for any other address type chosen_backend_type = 'visa' if debug_mode: print(f\"Inferred backend type: 'visa' from address '{actual_address}'.\") else: # Default to 'lamb' if no address is provided (e.g., for remote discovery) chosen_backend_type = 'lamb' if debug_mode: print(f\"Defaulting backend type to 'lamb' (no address present).\") if chosen_backend_type == 'visa': if actual_address is None: raise InstrumentConfigurationError( config_source, \"Missing address/resource_name for VISA backend.\" ) backend_instance = AsyncVisaBackend(address=actual_address, timeout_ms=actual_timeout) if debug_mode: print(f\"Using AsyncVisaBackend for '{actual_address}' with timeout {actual_timeout}ms.\") elif chosen_backend_type == 'lamb': lamb_server_url = getattr(config_model, 'lamb_url', 'http://lamb-server:8000') if actual_address: backend_instance = AsyncLambBackend(address=actual_address, url=lamb_server_url, timeout_ms=actual_timeout) elif hasattr(config_model, \"model\") and hasattr(config_model, \"serial_number\"): backend_instance = AsyncLambBackend( address=None, url=lamb_server_url, timeout_ms=actual_timeout, model_name=getattr(config_model, \"model\"), serial_number=getattr(config_model, \"serial_number\") ) else: raise InstrumentConfigurationError( config_source, \"Lamb backend requires either an address or both model and serial_number in the config.\", ) if debug_mode: print(f\"Using AsyncLambBackend for model='{getattr(config_model, 'model', None)}', serial='{getattr(config_model, 'serial_number', None)}' via '{lamb_server_url}' with timeout {actual_timeout}ms.\") else: raise InstrumentConfigurationError( config_source, f\"Unsupported backend_type '{chosen_backend_type}'.\" ) # Step 5: Instantiate the final instrument driver class device_type_str: str = config_model.device_type instrument_class_to_init = cls._instrument_mapping.get(device_type_str.lower()) if instrument_class_to_init is None: raise InstrumentConfigurationError( config_source, f\"Unknown device_type: '{device_type_str}'. No registered instrument class.\", ) # The instrument's constructor receives the parsed configuration model and the # instantiated backend. instrument = instrument_class_to_init(config=config_model, backend=backend_instance) if debug_mode: print(f\"Instantiated {instrument_class_to_init.__name__} with {type(backend_instance).__name__}.\") print(\"Note: Backend connection is not established by __init__. Call 'await instrument.connect_backend()' explicitly.\") return instrument from_type(instrument_type, *args, **kwargs) classmethod Initializes a specific instrument driver based on its type string. This factory method uses a mapping to find the appropriate instrument class for a given instrument_type string (e.g., 'oscilloscope') and passes any additional arguments to its constructor. PARAMETER DESCRIPTION instrument_type The type of the instrument to initialize. TYPE: str *args Positional arguments to pass to the instrument's constructor. TYPE: Any DEFAULT: () **kwargs Keyword arguments to pass to the instrument's constructor. TYPE: Any DEFAULT: {} RETURNS DESCRIPTION Instrument An instance of a specific Instrument subclass. RAISES DESCRIPTION InstrumentConfigurationError If the instrument_type is not recognized. Source code in pytestlab/instruments/AutoInstrument.py @classmethod def from_type(cls: Type[AutoInstrument], instrument_type: str, *args: Any, **kwargs: Any) -> Instrument: \"\"\"Initializes a specific instrument driver based on its type string. This factory method uses a mapping to find the appropriate instrument class for a given `instrument_type` string (e.g., 'oscilloscope') and passes any additional arguments to its constructor. Args: instrument_type: The type of the instrument to initialize. *args: Positional arguments to pass to the instrument's constructor. **kwargs: Keyword arguments to pass to the instrument's constructor. Returns: An instance of a specific Instrument subclass. Raises: InstrumentConfigurationError: If the instrument_type is not recognized. \"\"\" instrument_class = cls._instrument_mapping.get(instrument_type.lower()) if instrument_class: return instrument_class(*args, **kwargs) # type: ignore else: raise InstrumentConfigurationError( instrument_type, f\"Unknown instrument type: {instrument_type}\" ) get_config_from_cdn(identifier) async classmethod Fetches an instrument configuration from a CDN with local caching. This method attempts to retrieve a configuration file from a predefined CDN URL. For efficiency, it caches the configuration locally. If a cached version is available, it's used directly. Otherwise, the file is downloaded, cached for future use, and then returned. PARAMETER DESCRIPTION identifier The unique identifier for the configuration, which is used to construct the CDN URL (e.g., 'keysight/dsox1204g'). TYPE: str RETURNS DESCRIPTION Dict [ str , Any ] The loaded configuration data as a dictionary. RAISES DESCRIPTION FileNotFoundError If the configuration is not found on the CDN. InstrumentConfigurationError If the downloaded configuration is invalid. Source code in pytestlab/instruments/AutoInstrument.py @classmethod async def get_config_from_cdn(cls: Type[AutoInstrument], identifier: str) -> Dict[str, Any]: \"\"\"Fetches an instrument configuration from a CDN with local caching. This method attempts to retrieve a configuration file from a predefined CDN URL. For efficiency, it caches the configuration locally. If a cached version is available, it's used directly. Otherwise, the file is downloaded, cached for future use, and then returned. Args: identifier: The unique identifier for the configuration, which is used to construct the CDN URL (e.g., 'keysight/dsox1204g'). Returns: The loaded configuration data as a dictionary. Raises: FileNotFoundError: If the configuration is not found on the CDN. InstrumentConfigurationError: If the downloaded configuration is invalid. \"\"\" import pytestlab as ptl cache_dir = os.path.join(os.path.dirname(ptl.__file__), \"cache\", \"configs\") os.makedirs(cache_dir, exist_ok=True) cache_file = os.path.join(cache_dir, f\"{identifier}.yaml\") # Check for a cached version of the configuration first if os.path.exists(cache_file): try: async with aiofiles.open(cache_file, 'r') as f: content = await f.read() loaded_config = yaml.safe_load(content) # Validate the cached content; if corrupt, proceed to download if not isinstance(loaded_config, dict): os.remove(cache_file) raise InstrumentConfigurationError( identifier, \"Cached config is not a valid dictionary.\" ) return loaded_config except Exception as e: # If reading the cache fails, remove the broken file and fetch from CDN print(f\"Cache read failed for {identifier}: {e}. Fetching from CDN.\") if os.path.exists(cache_file): try: os.remove(cache_file) except OSError: pass # If not cached, fetch from the official CDN url = f\"https://pytestlab.org/config/{identifier}.yaml\" async with httpx.AsyncClient() as client: try: response = await client.get(url, timeout=10) response.raise_for_status() # Raise an exception for bad status codes config_text = response.text loaded_config = yaml.safe_load(config_text) if not isinstance(loaded_config, dict): raise InstrumentConfigurationError( identifier, f\"CDN config for {identifier} is not a valid dictionary.\", ) # Cache the newly downloaded configuration async with aiofiles.open(cache_file, 'w') as f: await f.write(config_text) return loaded_config except httpx.HTTPStatusError as http_err: # Handle HTTP errors, specifically 404 for not found if http_err.response.status_code == 404: raise FileNotFoundError(f\"Configuration file not found at {url} (HTTP 404).\") from http_err else: raise FileNotFoundError(f\"Failed to fetch configuration from CDN ({url}): HTTP {http_err.response.status_code}\") from http_err except httpx.RequestError as e: # Handle network-related errors raise FileNotFoundError(f\"Failed to fetch configuration from CDN ({url}): {str(e)}\") from e except yaml.YAMLError as ye: # Handle errors in parsing the YAML content raise InstrumentConfigurationError( identifier, f\"Error parsing YAML from CDN for {identifier}: {ye}\" ) from ye get_config_from_local(identifier, normalized_identifier=None) async classmethod Loads an instrument configuration from the local filesystem. This method searches for a configuration file in two primary locations: 1. A built-in 'profiles' directory within the PyTestLab package. 2. A direct file path provided by the user. PARAMETER DESCRIPTION identifier The identifier for the profile (e.g., 'keysight/dsox1204g') or a direct path to a .yaml or .json file. TYPE: str normalized_identifier A pre-normalized version of the identifier. TYPE: Optional [ str ] DEFAULT: None RETURNS DESCRIPTION Dict [ str , Any ] The loaded configuration data as a dictionary. RAISES DESCRIPTION FileNotFoundError If no configuration file can be found at any of the searched locations. InstrumentConfigurationError If the file is found but is not a valid YAML/JSON dictionary. Source code in pytestlab/instruments/AutoInstrument.py @classmethod async def get_config_from_local(cls: Type[AutoInstrument], identifier: str, normalized_identifier: Optional[str] = None) -> Dict[str, Any]: \"\"\"Loads an instrument configuration from the local filesystem. This method searches for a configuration file in two primary locations: 1. A built-in 'profiles' directory within the PyTestLab package. 2. A direct file path provided by the user. Args: identifier: The identifier for the profile (e.g., 'keysight/dsox1204g') or a direct path to a .yaml or .json file. normalized_identifier: A pre-normalized version of the identifier. Returns: The loaded configuration data as a dictionary. Raises: FileNotFoundError: If no configuration file can be found at any of the searched locations. InstrumentConfigurationError: If the file is found but is not a valid YAML/JSON dictionary. \"\"\" import pytestlab as ptl norm_id = normalized_identifier if normalized_identifier is not None else os.path.normpath(identifier) current_file_directory = os.path.dirname(ptl.__file__) preset_path = os.path.join(current_file_directory, \"profiles\", norm_id + '.yaml') # Determine the correct file path to load from path_to_try: Optional[str] = None if os.path.exists(preset_path): # First, check for a built-in profile matching the identifier path_to_try = preset_path elif os.path.exists(identifier) and (identifier.endswith('.yaml') or identifier.endswith('.json')): # Next, check if the identifier is a direct path to an existing file path_to_try = identifier if path_to_try: try: async with aiofiles.open(path_to_try, 'r') as file: content = await file.read() loaded_config = yaml.safe_load(content) if not isinstance(loaded_config, dict): raise InstrumentConfigurationError( identifier, f\"Local config file '{path_to_try}' did not load as a dictionary.\", ) return loaded_config except yaml.YAMLError as ye: raise InstrumentConfigurationError( identifier, f\"Error parsing YAML from local file '{path_to_try}': {ye}\", ) from ye except Exception as e: raise FileNotFoundError(f\"Error reading local config file '{path_to_try}': {e}\") from e raise FileNotFoundError(f\"No configuration found for identifier '{identifier}' in local paths.\") register_instrument(instrument_type, instrument_class) classmethod Dynamically registers a new custom instrument class. This allows users to extend PyTestLab with their own instrument drivers. Once registered, the new instrument type can be used with the factory methods like from_config and from_type . PARAMETER DESCRIPTION instrument_type The string identifier for the new instrument type (e.g., 'my_custom_scope'). This is case-insensitive. TYPE: str instrument_class The class object that implements the instrument driver. It must be a subclass of pytestlab.Instrument . TYPE: Type [ Instrument [ Any ]] RAISES DESCRIPTION InstrumentConfigurationError If the instrument type name is already in use or if the provided class is not a valid subclass of Instrument . Source code in pytestlab/instruments/AutoInstrument.py @classmethod def register_instrument(cls: Type[AutoInstrument], instrument_type: str, instrument_class: Type[Instrument[Any]]) -> None: \"\"\"Dynamically registers a new custom instrument class. This allows users to extend PyTestLab with their own instrument drivers. Once registered, the new instrument type can be used with the factory methods like `from_config` and `from_type`. Args: instrument_type: The string identifier for the new instrument type (e.g., 'my_custom_scope'). This is case-insensitive. instrument_class: The class object that implements the instrument driver. It must be a subclass of `pytestlab.Instrument`. Raises: InstrumentConfigurationError: If the instrument type name is already in use or if the provided class is not a valid subclass of `Instrument`. \"\"\" type_key = instrument_type.lower() if type_key in cls._instrument_mapping: raise InstrumentConfigurationError( instrument_type, f\"Instrument type '{instrument_type}' already registered with class {cls._instrument_mapping[type_key].__name__}\", ) if not issubclass(instrument_class, Instrument): raise InstrumentConfigurationError( instrument_type, f\"Cannot register class {instrument_class.__name__}. It must be a subclass of Instrument.\", ) cls._instrument_mapping[type_key] = instrument_class # Consider using a logger if available, instead of print print(f\"Instrument type '{instrument_type}' registered with class {instrument_class.__name__}.\") Functions pytestlab.instruments.Instrument(config, backend, **kwargs) Bases: Generic [ ConfigType ] Base class for all instrument drivers. This class provides the core functionality for interacting with an instrument through a standardized, asynchronous interface. It handles command sending, querying, error checking, and logging. It is designed to be subclassed for specific instrument types (e.g., Oscilloscope, PowerSupply). The Instrument class is generic and typed with ConfigType , which allows each subclass to specify its own Pydantic configuration model. ATTRIBUTE DESCRIPTION config The Pydantic configuration model instance for this instrument. TYPE: ConfigType _backend The communication backend used to interact with the hardware or simulation. TYPE: AsyncInstrumentIO _command_log A log of all commands sent and responses received. TYPE: List [ Dict [ str , Any ]] _logger The logger instance for this instrument. TYPE: Any Initialize the Instrument class. PARAMETER DESCRIPTION config Configuration for the instrument. TYPE: ConfigType backend The communication backend instance. TYPE: AsyncInstrumentIO **kwargs Additional keyword arguments. TYPE: Any DEFAULT: {} Source code in pytestlab/instruments/instrument.py def __init__(self, config: ConfigType, backend: AsyncInstrumentIO, **kwargs: Any) -> None: # Changed to AsyncInstrumentIO \"\"\" Initialize the Instrument class. Args: config (ConfigType): Configuration for the instrument. backend (AsyncInstrumentIO): The communication backend instance. **kwargs: Additional keyword arguments. \"\"\" if not isinstance(config, InstrumentConfig): # Check against the bound base raise InstrumentConfigurationError( self.__class__.__name__, f\"A valid InstrumentConfig-compatible object must be provided, but got {type(config).__name__}.\", ) self.config = config self._backend = backend # This will be an AsyncInstrumentIO instance self._command_log = [] logger_name = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ self._logger = get_logger(logger_name) self._logger.info(f\"Instrument '{logger_name}': Initializing with backend '{type(backend).__name__}'.\") Attributes config = config instance-attribute Functions clear_status() async Clears the instrument's status registers and error queue (*CLS). Source code in pytestlab/instruments/instrument.py async def clear_status(self) -> None: \"\"\" Clears the instrument's status registers and error queue (*CLS). \"\"\" await self._send_command(\"*CLS\", skip_check=True) self._logger.debug(\"Status registers and error queue cleared (*CLS).\") close() async Close the connection to the instrument via the backend. Source code in pytestlab/instruments/instrument.py async def close(self) -> None: \"\"\"Close the connection to the instrument via the backend.\"\"\" try: model_name_for_logger = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ self._logger.info(f\"Instrument '{model_name_for_logger}': Closing connection.\") await self._backend.close() # Changed to use close as per AsyncInstrumentIO self._logger.info(f\"Instrument '{model_name_for_logger}': Connection closed.\") except Exception as e: self._logger.error(f\"Instrument '{model_name_for_logger}': Error during backend close: {e}\") connect_backend() async Establishes the connection to the instrument via the backend. This method must be called after the instrument is instantiated to open the communication channel. It delegates the connection logic to the underlying backend. RAISES DESCRIPTION InstrumentConnectionError If the backend fails to connect. Source code in pytestlab/instruments/instrument.py async def connect_backend(self) -> None: \"\"\"Establishes the connection to the instrument via the backend. This method must be called after the instrument is instantiated to open the communication channel. It delegates the connection logic to the underlying backend. Raises: InstrumentConnectionError: If the backend fails to connect. \"\"\" logger_name = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ try: await self._backend.connect() self._logger.info(f\"Instrument '{logger_name}': Backend connected.\") except Exception as e: self._logger.error(f\"Instrument '{logger_name}': Failed to connect backend: {e}\") if hasattr(self._backend, 'disconnect'): # Check if disconnect is available (it should be for AsyncInstrumentIO) try: await self._backend.disconnect() except Exception as disc_e: self._logger.error(f\"Instrument '{logger_name}': Error disconnecting backend during failed connect: {disc_e}\") raise InstrumentConnectionError( instrument=logger_name, message=f\"Failed to connect backend: {e}\" ) from e from_config(config, debug_mode=False) classmethod Source code in pytestlab/instruments/instrument.py @classmethod def from_config(cls: Type[Instrument], config: InstrumentConfig, debug_mode: bool = False) -> Instrument: # This method will likely need significant changes to support async backends. # For now, it's a placeholder and might not work correctly with async backends. # It should ideally accept an async_mode flag or similar to determine backend type. if not isinstance(config, InstrumentConfig): raise InstrumentConfigurationError( cls.__name__, \"from_config expects an InstrumentConfig object.\" ) # The backend instantiation is missing here and is crucial. # This will be handled by AutoInstrument.from_config later. raise NotImplementedError( \"from_config needs to be updated for async backend instantiation.\" ) get_all_errors() async Reads and clears all errors currently present in the instrument's error queue. Source code in pytestlab/instruments/instrument.py async def get_all_errors(self) -> TypingList[Tuple[int, str]]: \"\"\" Reads and clears all errors currently present in the instrument's error queue. \"\"\" errors: TypingList[Tuple[int, str]] = [] max_errors_to_read = 50 for i in range(max_errors_to_read): try: code, message = await self.get_error() except InstrumentCommunicationError as e: self._logger.debug(f\"Communication error while reading error queue (iteration {i+1}): {e}\") if errors: self._logger.debug(f\"Returning errors read before communication failure: {errors}\") return errors if code == 0: break errors.append((code, message)) if code == -350: self._logger.debug(\"Error queue overflow (-350) detected. Stopping read.\") break else: self._logger.debug(f\"Warning: Read {max_errors_to_read} errors without reaching 'No error'. \" \"Error queue might still contain errors or be in an unexpected state.\") if not errors: self._logger.debug(\"No errors found in instrument queue.\") else: self._logger.debug(f\"Retrieved {len(errors)} error(s) from queue: {errors}\") return errors get_communication_timeout() async Gets the communication timeout from the backend. Source code in pytestlab/instruments/instrument.py async def get_communication_timeout(self) -> int: \"\"\"Gets the communication timeout from the backend.\"\"\" timeout = await self._backend.get_timeout() self._logger.debug(f\"Communication timeout retrieved from backend: {timeout} ms.\") return timeout get_error() async Reads and clears the oldest error from the instrument's error queue. Source code in pytestlab/instruments/instrument.py async def get_error(self) -> Tuple[int, str]: \"\"\" Reads and clears the oldest error from the instrument's error queue. \"\"\" response = (await self._query(\"SYSTem:ERRor?\")).strip() try: code_str, msg_part = response.split(',', 1) code = int(code_str) message = msg_part.strip().strip('\"') except (ValueError, IndexError) as e: self._logger.debug(f\"Warning: Unexpected error response format: '{response}'. Raising error.\") raise InstrumentCommunicationError( instrument=self.config.model, command=\"SYSTem:ERRor?\", message=f\"Could not parse error response: '{response}'\", ) from e if code != 0: self._logger.debug(f\"Instrument Error Query: Code={code}, Message='{message}'\") return code, message get_scpi_version() async Queries the version of the SCPI standard the instrument complies with. Source code in pytestlab/instruments/instrument.py async def get_scpi_version(self) -> str: \"\"\" Queries the version of the SCPI standard the instrument complies with. \"\"\" response = (await self._query(\"SYSTem:VERSion?\")).strip() self._logger.debug(f\"SCPI Version reported: {response}\") return response health_check() abstractmethod async Performs a basic health check of the instrument. Source code in pytestlab/instruments/instrument.py @abstractmethod async def health_check(self) -> HealthReport: # Type hint HealthReport \"\"\"Performs a basic health check of the instrument.\"\"\" # Base implementation could try IDN and error queue check # report = HealthReport() # Initialize HealthReport # try: # report.instrument_idn = await self.id() # Ensure await for async calls # instrument_errors = await self.get_all_errors() # Ensure await for async calls # if instrument_errors: # report.warnings.extend([f\"Stored Error: {code} - {msg}\" for code, msg in instrument_errors]) # # if not report.errors and not report.warnings: # report.status = HealthStatus.OK # elif report.warnings and not report.errors: # report.status = HealthStatus.WARNING # else: # if errors are present # report.status = HealthStatus.ERROR # # except Exception as e: # report.status = HealthStatus.ERROR # report.errors.append(f\"Health check failed during IDN/Error Query: {str(e)}\") # return report pass # Replace with actual base implementation id() async Query the instrument for its identification string (*IDN?). Source code in pytestlab/instruments/instrument.py async def id(self) -> str: \"\"\" Query the instrument for its identification string (*IDN?). \"\"\" name = await self._query(\"*IDN?\") self._logger.debug(f\"Connected to {name}\") return name lock_panel(lock=True) async Locks or unlocks the front panel of the instrument. Source code in pytestlab/instruments/instrument.py async def lock_panel(self, lock: bool = True) -> None: \"\"\" Locks or unlocks the front panel of the instrument. \"\"\" if lock: await self._send_command(\":SYSTem:LOCK\") else: await self._send_command(\":SYSTem:LOCal\") self._logger.debug(f\"Panel {'locked' if lock else 'unlocked (local control enabled)'}.\") requires(requirement) classmethod Decorator to specify method requirements based on instrument configuration. Source code in pytestlab/instruments/instrument.py @classmethod def requires(cls, requirement: str) -> Callable: \"\"\" Decorator to specify method requirements based on instrument configuration. \"\"\" def decorator(func: Callable) -> Callable: def wrapped_func(self: Instrument, *args: Any, **kwargs: Any) -> Any: if not hasattr(self.config, 'requires') or not callable(self.config.requires): raise InstrumentConfigurationError( self.config.model, \"Config object missing 'requires' method for decorator.\", ) if self.config.requires(requirement): return func(self, *args, **kwargs) else: raise InstrumentConfigurationError( self.config.model, f\"Method '{func.__name__}' requires '{requirement}', which is not available for this instrument model/configuration.\", ) return wrapped_func return decorator reset() async Reset the instrument to its default settings (*RST). Source code in pytestlab/instruments/instrument.py async def reset(self) -> None: \"\"\"Reset the instrument to its default settings (*RST).\"\"\" await self._send_command(\"*RST\") self._logger.debug(\"Instrument reset to default settings (*RST).\") run_self_test(full_test=True) async Executes the instrument's internal self-test routine (*TST?) and reports result. Source code in pytestlab/instruments/instrument.py async def run_self_test(self, full_test: bool = True) -> str: \"\"\" Executes the instrument's internal self-test routine (*TST?) and reports result. \"\"\" if not full_test: self._logger.debug(\"Note: `full_test=False` currently ignored, running standard *TST? self-test.\") self._logger.debug(\"Running self-test (*TST?)...\") try: result_str = await self._query(\"*TST?\") code = int(result_str.strip()) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=\"*TST?\", message=f\"Unexpected non-integer response: '{result_str}'\", ) except InstrumentCommunicationError as e: raise InstrumentCommunicationError( instrument=self.config.model, command=\"*TST?\", message=\"Failed to execute query.\", ) from e if code == 0: self._logger.debug(\"Self-test query (*TST?) returned 0 (Passed).\") errors_after_test = await self.get_all_errors() if errors_after_test: details = \"; \".join([f\"{c}: {m}\" for c, m in errors_after_test]) warn_msg = f\"Self-test query passed, but errors found in queue afterwards: {details}\" self._logger.debug(warn_msg) return \"Passed\" else: self._logger.debug(f\"Self-test query (*TST?) returned non-zero code: {code} (Failed). Reading error queue...\") errors = await self.get_all_errors() details = \"; \".join([f\"{c}: {m}\" for c, m in errors]) if errors else 'No specific errors reported in queue' fail_msg = f\"Failed: Code {code}. Errors: {details}\" self._logger.debug(fail_msg) return fail_msg set_communication_timeout(timeout_ms) async Sets the communication timeout on the backend. Source code in pytestlab/instruments/instrument.py async def set_communication_timeout(self, timeout_ms: int) -> None: \"\"\"Sets the communication timeout on the backend.\"\"\" await self._backend.set_timeout(timeout_ms) self._logger.debug(f\"Communication timeout set to {timeout_ms} ms on backend.\") wait_for_operation_complete(query_instrument=True, timeout=10.0) async Waits for the instrument to finish all pending overlapping commands. The 'timeout' parameter's effect depends on the backend's query timeout settings. Source code in pytestlab/instruments/instrument.py async def wait_for_operation_complete(self, query_instrument: bool = True, timeout: float = 10.0) -> Optional[str]: \"\"\" Waits for the instrument to finish all pending overlapping commands. The 'timeout' parameter's effect depends on the backend's query timeout settings. \"\"\" if query_instrument: # The original logic for setting/restoring instrument.timeout has been removed # as the _Backend protocol does not define a timeout attribute. # The 'timeout' argument of this method might influence a timeout if the # _query method or backend implementation uses it, but _query currently # passes 'delay', not 'timeout'. For *OPC?, no delay is typically needed. # The backend's own communication timeout will apply to the query. self._logger.debug(f\"Waiting for operation complete (*OPC?). Effective timeout depends on backend (method timeout hint: {timeout}s).\") try: # The timeout parameter of this method is not directly passed to _query here. # _query's delay parameter is for a different purpose. response = await self._query(\"*OPC?\") # This now uses self._backend.query self._logger.debug(\"Operation complete query (*OPC?) returned.\") if response.strip() != \"1\": self._logger.debug(f\"Warning: *OPC? returned '{response}' instead of expected '1'.\") return response.strip() except InstrumentCommunicationError as e: # The 'timeout' parameter of this method is noted here for context. err_msg = f\"*OPC? query failed. This may be due to backend communication timeout (related to method's timeout param: {timeout}s).\" self._logger.debug(err_msg) raise InstrumentCommunicationError( instrument=self.config.model, command=\"*OPC?\", message=err_msg ) from e # 'finally' block for restoring timeout removed. else: await self._send_command(\"*OPC\") # This now uses self._backend.write self._logger.debug(\"Operation complete command (*OPC) sent (non-blocking). Status polling required.\") return None Supported Instrument Types Oscilloscope pytestlab.instruments.Oscilloscope Classes ChannelReadingResult(values, instrument, units, measurement_type, timestamp=None, envelope=None, sampling_rate=None, **kwargs) Bases: MeasurementResult A result class for oscilloscope channel readings (time, voltage, etc). Source code in pytestlab/experiments/results.py def __init__(self, values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat], instrument: str, units: str, measurement_type: str, timestamp: Optional[float] = None, # Allow optional timestamp override envelope: Optional[Dict[str, Any]] = None, # Add envelope as an explicit argument sampling_rate: Optional[float] = None, # Add sampling_rate for FFT **kwargs: Any) -> None: # Added **kwargs and type hint self.values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat] = values self.units: str = units self.instrument: str = instrument self.measurement_type: str = measurement_type self.timestamp: float = timestamp if timestamp is not None else time.time() # Envelope logic: always provide an envelope attribute if envelope is not None: self.envelope = envelope else: # Default: minimal valid envelope (empty dict, or customize as needed) self.envelope = {} # Store sampling rate for FFT calculations self.sampling_rate = sampling_rate # Store any additional kwargs as attributes for key, value in kwargs.items(): setattr(self, key, value) FFTResult(values, instrument, units, measurement_type, timestamp=None, envelope=None, sampling_rate=None, **kwargs) Bases: MeasurementResult A result class for FFT data from the oscilloscope. Source code in pytestlab/experiments/results.py def __init__(self, values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat], instrument: str, units: str, measurement_type: str, timestamp: Optional[float] = None, # Allow optional timestamp override envelope: Optional[Dict[str, Any]] = None, # Add envelope as an explicit argument sampling_rate: Optional[float] = None, # Add sampling_rate for FFT **kwargs: Any) -> None: # Added **kwargs and type hint self.values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat] = values self.units: str = units self.instrument: str = instrument self.measurement_type: str = measurement_type self.timestamp: float = timestamp if timestamp is not None else time.time() # Envelope logic: always provide an envelope attribute if envelope is not None: self.envelope = envelope else: # Default: minimal valid envelope (empty dict, or customize as needed) self.envelope = {} # Store sampling rate for FFT calculations self.sampling_rate = sampling_rate # Store any additional kwargs as attributes for key, value in kwargs.items(): setattr(self, key, value) FRanalysisResult(values, instrument, units, measurement_type, timestamp=None, envelope=None, sampling_rate=None, **kwargs) Bases: MeasurementResult A result class for frequency response analysis data. Source code in pytestlab/experiments/results.py def __init__(self, values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat], instrument: str, units: str, measurement_type: str, timestamp: Optional[float] = None, # Allow optional timestamp override envelope: Optional[Dict[str, Any]] = None, # Add envelope as an explicit argument sampling_rate: Optional[float] = None, # Add sampling_rate for FFT **kwargs: Any) -> None: # Added **kwargs and type hint self.values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat] = values self.units: str = units self.instrument: str = instrument self.measurement_type: str = measurement_type self.timestamp: float = timestamp if timestamp is not None else time.time() # Envelope logic: always provide an envelope attribute if envelope is not None: self.envelope = envelope else: # Default: minimal valid envelope (empty dict, or customize as needed) self.envelope = {} # Store sampling rate for FFT calculations self.sampling_rate = sampling_rate # Store any additional kwargs as attributes for key, value in kwargs.items(): setattr(self, key, value) Oscilloscope(config, debug_mode=False, simulate=False, **kwargs) Bases: Instrument [ OscilloscopeConfig ] Drives a digital oscilloscope for waveform acquisition and measurement. This class provides a comprehensive, high-level interface for controlling an oscilloscope. It builds upon the base Instrument class and adds extensive functionality specific to oscilloscopes. Key features include: - Facade-based interfaces for channels, trigger, and acquisition for cleaner code. - Methods for reading waveforms, performing automated measurements (e.g., Vpp, Vrms). - Support for advanced features like FFT and Frequency Response Analysis (FRA). - Built-in waveform generator control if the hardware supports it. - Screenshot capability. ATTRIBUTE DESCRIPTION config The Pydantic configuration object ( OscilloscopeConfig ) containing settings specific to this oscilloscope. TYPE: OscilloscopeConfig trigger A ScopeTriggerFacade for configuring trigger settings. acquisition A ScopeAcquisitionFacade for acquisition system settings. Initialize the Oscilloscope class with the given VISA resource and profile information. Args: config (OscilloscopeConfig): Configuration object for the oscilloscope. debug_mode (bool): Enable debug mode. (Handled by base or backend) simulate (bool): Enable simulation mode. (Handled by base or backend) Source code in pytestlab/instruments/Oscilloscope.py def __init__(self, config: OscilloscopeConfig, debug_mode: bool = False, simulate: bool = False, **kwargs: Any) -> None: # config is now non-optional \"\"\" Initialize the Oscilloscope class with the given VISA resource and profile information. Args: config (OscilloscopeConfig): Configuration object for the oscilloscope. debug_mode (bool): Enable debug mode. (Handled by base or backend) simulate (bool): Enable simulation mode. (Handled by base or backend) \"\"\" # The config is already validated by the loader to be OscilloscopeConfig V2 super().__init__(config=config, debug_mode=debug_mode, simulate=simulate, **kwargs) # Pass kwargs # Initialize facades self.trigger = ScopeTriggerFacade(self) self.acquisition = ScopeAcquisitionFacade(self) Attributes acquisition = ScopeAcquisitionFacade(self) instance-attribute config instance-attribute trigger = ScopeTriggerFacade(self) instance-attribute Functions auto_scale() async Auto scale the oscilloscope display. This method sends an SCPI command to the oscilloscope to auto scale the display. Example: auto_scale() Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def auto_scale(self) -> None: \"\"\" Auto scale the oscilloscope display. This method sends an SCPI command to the oscilloscope to auto scale the display. Example: >>> auto_scale() \"\"\" await self._send_command(\":AUToscale\") channel(ch_num) Returns a facade for interacting with a specific channel. This method provides a convenient, chainable interface for controlling a single oscilloscope channel. PARAMETER DESCRIPTION ch_num The channel number (1-based). TYPE: int RETURNS DESCRIPTION ScopeChannelFacade A ScopeChannelFacade object for the specified channel. RAISES DESCRIPTION InstrumentParameterError If the channel number is invalid. Source code in pytestlab/instruments/Oscilloscope.py @validate_call def channel(self, ch_num: int) -> ScopeChannelFacade: \"\"\"Returns a facade for interacting with a specific channel. This method provides a convenient, chainable interface for controlling a single oscilloscope channel. Args: ch_num: The channel number (1-based). Returns: A `ScopeChannelFacade` object for the specified channel. Raises: InstrumentParameterError: If the channel number is invalid. \"\"\" if not self.config.channels or not (1 <= ch_num <= len(self.config.channels)): num_conf_ch = len(self.config.channels) if self.config.channels else 0 raise InstrumentParameterError( parameter=\"ch_num\", value=ch_num, valid_range=(1, num_conf_ch), message=\"Channel number is out of range.\", ) return ScopeChannelFacade(self, ch_num) configure_fft(source_channel, scale=None, offset=None, span=None, window_type='HANNing', units='DECibel', display=True) async Configure the oscilloscope to perform an FFT on the specified channel. :param source_channel: The channel number to perform FFT on. :param scale: The vertical scale of the FFT display. Instrument specific. :param offset: The vertical offset of the FFT display. Instrument specific. :param span: The frequency span for the FFT. Instrument specific. :param window_type: The windowing function. Case-insensitive. From config.fft.window_types. :param units: The unit for FFT magnitude. Case-insensitive. From config.fft.units. :param display: True to turn FFT display ON, False for OFF. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"fft\") async def configure_fft(self, source_channel: int, scale: Optional[float] = None, offset: Optional[float] = None, span: Optional[float] = None, window_type: str = 'HANNing', units: str = 'DECibel', display: bool = True) -> None: \"\"\" Configure the oscilloscope to perform an FFT on the specified channel. :param source_channel: The channel number to perform FFT on. :param scale: The vertical scale of the FFT display. Instrument specific. :param offset: The vertical offset of the FFT display. Instrument specific. :param span: The frequency span for the FFT. Instrument specific. :param window_type: The windowing function. Case-insensitive. From config.fft.window_types. :param units: The unit for FFT magnitude. Case-insensitive. From config.fft.units. :param display: True to turn FFT display ON, False for OFF. \"\"\" if self.config.fft is None: raise InstrumentConfigurationError( self.config.model, \"FFT not configured for this instrument.\" ) if not (1 <= source_channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"source_channel\", value=source_channel, valid_range=(1, len(self.config.channels)), message=\"Source channel number is out of range.\", ) # Validate window_type against config.fft.window_types (List[str]) # Assuming window_type parameter is the SCPI string itself if window_type.upper() not in [wt.upper() for wt in self.config.fft.window_types]: raise InstrumentParameterError( parameter=\"window_type\", value=window_type, valid_range=self.config.fft.window_types, message=\"Unsupported FFT window type.\", ) scpi_window = window_type # Validate units against config.fft.units (List[str]) if units.upper() not in [u.upper() for u in self.config.fft.units]: raise InstrumentParameterError( parameter=\"units\", value=units, valid_range=self.config.fft.units, message=\"Unsupported FFT units.\", ) scpi_units = units await self._send_command(f':FFT:SOURce1 CHANnel{source_channel}') await self._send_command(f':FFT:WINDow {scpi_window}') if span is not None: await self._send_command(f':FFT:SPAn {span}') await self._send_command(f':FFT:VTYPe {scpi_units}') if scale is not None: await self._send_command(f':FFT:SCALe {scale}') if offset is not None: await self._send_command(f':FFT:OFFSet {offset}') scpi_display_state = SCPIOnOff.ON.value if display else SCPIOnOff.OFF.value await self._send_command(f':FFT:DISPlay {scpi_display_state}') self._logger.debug(f\"FFT configured for channel {source_channel}.\") configure_trigger(channel, level, source=None, trigger_type='HIGH', slope=TriggerSlope.POSITIVE, mode='EDGE') async Sets the trigger for the oscilloscope. :param channel: The channel to set the trigger for (used if source is None or a channel itself) :param level: The trigger level in volts :param source: The source of the trigger. Default behaviour is to use the channel. Valid options CHANnel | EXTernal | LINE | WGEN :param trigger_type: The type of trigger. Default is 'HIGH' (Note: this param seems unused in current logic for level setting) :param slope: The slope of the trigger. Default is TriggerSlope.POSITIVE :param mode: The trigger mode. Default is 'EDGE' Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def configure_trigger(self, channel: int, level: float, source: Optional[str] = None, trigger_type: str = \"HIGH\", slope: TriggerSlope = TriggerSlope.POSITIVE, mode: str = \"EDGE\") -> None: \"\"\" Sets the trigger for the oscilloscope. :param channel: The channel to set the trigger for (used if source is None or a channel itself) :param level: The trigger level in volts :param source: The source of the trigger. Default behaviour is to use the channel. Valid options CHANnel<n> | EXTernal | LINE | WGEN :param trigger_type: The type of trigger. Default is 'HIGH' (Note: this param seems unused in current logic for level setting) :param slope: The slope of the trigger. Default is TriggerSlope.POSITIVE :param mode: The trigger mode. Default is 'EDGE' \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Primary channel number is out of range.\", ) actual_source: str if source is None: actual_source = f\"CHANnel{channel}\" else: actual_source = source.upper() # Check if source is a channel (handle CH1, CHAN1, CHANNEL1 formats) if actual_source.startswith(\"CH\"): try: num_str = \"\".join(filter(str.isdigit, actual_source)) if not num_str: raise ValueError(\"No digits found in channel source string\") source_channel_to_validate = int(num_str) if not (1 <= source_channel_to_validate <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"source\", value=source, valid_range=(1, len(self.config.channels)), message=\"Source channel number is out of range.\", ) # Normalize the channel source to CHANNEL format for SCPI command actual_source = f\"CHANnel{source_channel_to_validate}\" except (ValueError, IndexError) as e: raise InstrumentParameterError( parameter=\"source\", value=source, message=\"Invalid channel format in source.\", ) from e elif actual_source not in [\"EXTERNAL\", \"LINE\", \"WGEN\"]: raise InstrumentParameterError( parameter=\"source\", value=source, valid_range=[\"EXTernal\", \"LINE\", \"WGEN\"], message=\"Invalid source.\", ) await self._send_command(f':TRIG:SOUR {actual_source}') await self._send_command(f':TRIGger:LEVel {level}, CHANnel{channel}') if slope.value not in self.config.trigger.slopes: raise InstrumentParameterError( parameter=\"slope\", value=slope.value, valid_range=self.config.trigger.slopes, message=\"Unsupported trigger slope.\", ) scpi_slope = slope.value if mode.upper() not in [m.upper() for m in self.config.trigger.modes]: # Case-insensitive check self._logger.warning(f\"Trigger mode '{mode}' not in configured supported modes: {self.config.trigger.modes}. Passing directly to instrument.\") scpi_mode = mode await self._send_command(f':TRIGger:SLOPe {scpi_slope}') await self._send_command(f':TRIGger:MODE {scpi_mode}') await self._wait() self._logger.debug(f\"\"\"Trigger set with the following parameters: Trigger Source: {actual_source} Trigger Level for CHAN{channel}: {level} Trigger Slope: {scpi_slope} Trigger Mode: {scpi_mode}\"\"\") display_channel(channels, state=True) async Display or hide the specified channel(s) on the oscilloscope. Args: channels (Union[int, List[int]]): A single channel number or a list of channel numbers. state (bool): True to display (ON), False to hide (OFF). Default is True. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def display_channel(self, channels: Union[int, List[int]], state: bool = True) -> None: \"\"\" Display or hide the specified channel(s) on the oscilloscope. Args: channels (Union[int, List[int]]): A single channel number or a list of channel numbers. state (bool): True to display (ON), False to hide (OFF). Default is True. \"\"\" ch_list: List[int] if isinstance(channels, int): ch_list = [channels] elif isinstance(channels, list) and all(isinstance(ch, int) for ch in channels): ch_list = channels else: # validate_call should catch this if type hints are precise enough raise InstrumentParameterError( message=\"channels must be an int or a list of ints\" ) scpi_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value for ch_num in ch_list: if not (1 <= ch_num <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channels\", value=ch_num, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) await self._send_command(f\"CHANnel{ch_num}:DISPlay {scpi_state}\") fft_display(state=True) async Switches on or off the FFT display. :param state: True to enable FFT display, False to disable. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"fft\") async def fft_display(self, state: bool = True) -> None: \"\"\" Switches on or off the FFT display. :param state: True to enable FFT display, False to disable. \"\"\" scpi_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value await self._send_command(f\":FFT:DISPlay {scpi_state}\") self._logger.debug(f\"FFT display {'enabled' if state else 'disabled'}.\") franalysis_sweep(input_channel, output_channel, start_freq, stop_freq, amplitude, points=10, trace='none', load='onemeg', disable_on_complete=True) async Perform a frequency response analysis sweep. RETURNS DESCRIPTION FRanalysisResult Containing the frequency response analysis data. TYPE: FRanalysisResult Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"franalysis\") #@ConfigRequires(\"function_generator\") async def franalysis_sweep(self, input_channel: int, output_channel: int, start_freq: float, stop_freq: float, amplitude: float, points: int = 10, trace: str = \"none\", load: str = \"onemeg\", disable_on_complete: bool = True) -> FRanalysisResult: \"\"\" Perform a frequency response analysis sweep. Returns: FRanalysisResult: Containing the frequency response analysis data. \"\"\" if self.config.function_generator is None or self.config.franalysis is None: raise InstrumentConfigurationError( self.config.model, \"Function generator or FRANalysis not configured.\" ) if not (1 <= input_channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"input_channel\", value=input_channel, valid_range=(1, len(self.config.channels)), message=\"Input channel is out of range.\", ) if not (1 <= output_channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"output_channel\", value=output_channel, valid_range=(1, len(self.config.channels)), message=\"Output channel is out of range.\", ) # Ensure points is at least 2 for a valid sweep if points < 2: raise InstrumentParameterError( parameter=\"points\", value=points, valid_range=(2, \"inf\"), message=\"Points for sweep must be at least 2.\", ) # SCPI commands for frequency response analysis sweep await self._send_command(f\":FUNCtion:FRANalysis\") await self._send_command(f\":FREQuency:START {start_freq}\") await self._send_command(f\":FREQuency:STOP {stop_freq}\") await self._send_command(f\":AMPLitude {amplitude}\") await self._send_command(f\":POINTS {points}\") await self._send_command(f\":TRACe:FEED {trace}\") await self._send_command(f\":LOAD {load}\") if disable_on_complete: await self._send_command(\":DISABLE\") # Optionally wait for completion or check status await self._wait() # Ensure to wait for the command to complete # Assuming the result can be fetched with a common query, adjust as necessary result_data = await self._query(\":FETCH:FRANalysis?\") # Parse the result data into a structured format if needed # For now, let's assume it's a simple comma-separated value string parsed_results = [float(val) for val in result_data.split(',')] # Create a DataFrame or structured result object # Assuming two columns: Frequency and Magnitude freq_values = parsed_results[0::2] # Extracting frequency values mag_values = parsed_results[1::2] # Extracting magnitude values return FRanalysisResult( instrument=self.config.model, units=\"\", measurement_type=\"FrequencyResponse\", values=pl.DataFrame({ \"Frequency (Hz)\": freq_values, \"Magnitude\": mag_values }) ) from_config(config, debug_mode=False, **kwargs) classmethod Source code in pytestlab/instruments/Oscilloscope.py @classmethod def from_config(cls: Type['Oscilloscope'], config: OscilloscopeConfig, debug_mode: bool = False, **kwargs: Any) -> 'Oscilloscope': # This method aligns with the new __init__ signature. return cls(config=config, debug_mode=debug_mode, **kwargs) function_display(state=True) async Switches on or off the function display (e.g. Math or WGEN waveform). :param state: True to enable display, False to disable. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def function_display(self, state: bool = True) -> None: \"\"\" Switches on or off the function display (e.g. Math or WGEN waveform). :param state: True to enable display, False to disable. \"\"\" scpi_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value await self._send_command(f\":FUNCtion:DISPlay {scpi_state}\") self._logger.debug(f\"Function display {'enabled' if state else 'disabled'}.\") get_channel_axis(channel) async Gets the channel axis of the oscilloscope. (y-axis) :param channel: The channel to get the axis for :return: A list containing the channel axis scale and offset Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_channel_axis(self, channel: int) -> List[float]: \"\"\" Gets the channel axis of the oscilloscope. (y-axis) :param channel: The channel to get the axis for :return: A list containing the channel axis scale and offset \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) scale_str: str = await self._query(f\":CHANnel{channel}:SCALe?\") offset_str: str = await self._query(f\":CHANnel{channel}:OFFSet?\") return [np.float64(scale_str), np.float64(offset_str)] get_probe_attenuation(channel) async Gets the probe attenuation for a given channel. PARAMETER DESCRIPTION channel The oscilloscope channel to get the probe attenuation for. TYPE: int RETURNS DESCRIPTION str The probe attenuation value (e.g., '10:1', '1:1'). TYPE: str Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_probe_attenuation(self, channel: int) -> str: # Returns string like \"10:1\" \"\"\" Gets the probe attenuation for a given channel. Parameters: channel (int): The oscilloscope channel to get the probe attenuation for. Returns: str: The probe attenuation value (e.g., '10:1', '1:1'). \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) response_str: str = (await self._query(f\"CHANnel{channel}:PROBe?\")).strip() # Assuming response is the numeric factor (e.g., \"10\", \"1\") try: # Ensure it's a number before formatting num_factor = float(response_str) if num_factor.is_integer(): return f\"{int(num_factor)}:1\" return f\"{num_factor}:1\" except ValueError: self._logger.warning(f\"Could not parse probe attenuation factor '{response_str}' as number. Returning raw.\") return response_str # Or raise error get_sampling_rate() async Get the current sampling rate of the oscilloscope. Returns: float: The sampling rate in Hz. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_sampling_rate(self) -> float: \"\"\" Get the current sampling rate of the oscilloscope. Returns: float: The sampling rate in Hz. \"\"\" response_str: str = await self._query(\":ACQuire:SRATe?\") sampling_rate_float: float = np.float64(response_str) return sampling_rate_float get_time_axis() async Gets the time axis of the oscilloscope. (x-axis) :return: A list containing the time axis scale and position Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_time_axis(self) -> List[float]: \"\"\" Gets the time axis of the oscilloscope. (x-axis) :return: A list containing the time axis scale and position \"\"\" scale_str: str = await self._query(\":TIMebase:SCALe?\") position_str: str = await self._query(\":TIMebase:POSition?\") return [np.float64(scale_str), np.float64(position_str)] health_check() async Performs a basic health check of the oscilloscope instrument. RETURNS DESCRIPTION HealthReport A report containing the instrument's health status, errors, warnings, and supported features. TYPE: HealthReport Source code in pytestlab/instruments/Oscilloscope.py async def health_check(self) -> HealthReport: \"\"\" Performs a basic health check of the oscilloscope instrument. Returns: HealthReport: A report containing the instrument's health status, errors, warnings, and supported features. \"\"\" report = HealthReport() try: # Get instrument identification report.instrument_idn = await self.id() # Check for stored errors instrument_errors = await self.get_all_errors() if instrument_errors: report.warnings.extend([f\"Stored Error: {code} - {msg}\" for code, msg in instrument_errors]) # Set initial status based on errors if not report.errors and not report.warnings: report.status = HealthStatus.OK elif report.warnings and not report.errors: report.status = HealthStatus.WARNING else: report.status = HealthStatus.ERROR except Exception as e: report.status = HealthStatus.ERROR report.errors.append(f\"Health check failed during IDN/Error Query: {str(e)}\") try: # Test basic oscilloscope functionality _ = await self.get_time_axis() # Check supported features based on configuration if hasattr(self.config, 'fft') and self.config.fft: report.supported_features[\"fft\"] = True else: report.supported_features[\"fft\"] = False if hasattr(self.config, 'franalysis') and self.config.franalysis: report.supported_features[\"franalysis\"] = True else: report.supported_features[\"franalysis\"] = False if hasattr(self.config, 'function_generator') and self.config.function_generator: report.supported_features[\"function_generator\"] = True else: report.supported_features[\"function_generator\"] = False except Exception as e: report.errors.append(f\"Oscilloscope-specific check failed: {str(e)}\") # Determine backend status if hasattr(self, '_backend') and hasattr(self._backend, '__class__'): backend_name = self._backend.__class__.__name__ if \"SimBackend\" in backend_name: report.backend_status = \"Simulated\" elif \"VisaBackend\" in backend_name: report.backend_status = \"VISA Connection\" elif \"LambInstrument\" in backend_name or \"LambBackend\" in backend_name: report.backend_status = \"Lamb Connection\" else: report.backend_status = f\"Unknown backend: {backend_name}\" else: report.backend_status = \"Backend information unavailable\" # Final status evaluation if report.errors and report.status != HealthStatus.ERROR: report.status = HealthStatus.ERROR elif report.warnings and report.status == HealthStatus.OK: report.status = HealthStatus.WARNING # If no errors or warnings after all checks, and status is still UNKNOWN, set to OK if report.status == HealthStatus.UNKNOWN and not report.errors and not report.warnings: report.status = HealthStatus.OK return report lock_panel(lock=True) async Locks the panel of the instrument PARAMETER DESCRIPTION lock True to lock the panel, False to unlock it TYPE: bool DEFAULT: True Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def lock_panel(self, lock: bool = True) -> None: \"\"\" Locks the panel of the instrument Args: lock (bool): True to lock the panel, False to unlock it \"\"\" scpi_state = SCPIOnOff.ON.value if lock else SCPIOnOff.OFF.value await self._send_command(f\":SYSTem:LOCK {scpi_state}\") measure_rms_voltage(channel) async Measure the root-mean-square (RMS) voltage for a specified channel. Args: channel (int): The channel identifier. Returns: MeasurementResult: An object containing the RMS voltage measurement. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def measure_rms_voltage(self, channel: int) -> MeasurementResult: \"\"\" Measure the root-mean-square (RMS) voltage for a specified channel. Args: channel (int): The channel identifier. Returns: MeasurementResult: An object containing the RMS voltage measurement. \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) response_str: str = await self._query(f\"MEAS:VRMS? CHAN{channel}\") reading: float = float(response_str) value_to_return: float | UFloat = reading if self.config.measurement_accuracy: mode_key = f\"vrms_ch{channel}\" self._logger.debug(f\"Attempting to find accuracy spec for Vrms on channel {channel} with key: '{mode_key}'\") spec = self.config.measurement_accuracy.get(mode_key) if spec: sigma = spec.calculate_std_dev(reading, range_value=None) if sigma > 0: value_to_return = ufloat(reading, sigma) self._logger.debug(f\"Applied accuracy spec '{mode_key}', value: {value_to_return}\") else: self._logger.debug(f\"Accuracy spec '{mode_key}' resulted in sigma=0. Returning float.\") else: self._logger.debug(f\"No accuracy spec found for Vrms on channel {channel} with key '{mode_key}'. Returning float.\") else: self._logger.debug(f\"No measurement_accuracy configuration in instrument for Vrms on channel {channel}. Returning float.\") self._logger.debug(f\"RMS Voltage (Channel {channel}): {value_to_return}\") measurement_result = MeasurementResult( values=value_to_return, instrument=self.config.model, units=\"V\", measurement_type=\"rms_voltage\" ) return measurement_result measure_voltage_peak_to_peak(channel) async Measure the peak-to-peak voltage for a specified channel. Args: channel (int): The channel identifier. Returns: MeasurementResult: An object containing the peak-to-peak voltage measurement. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def measure_voltage_peak_to_peak(self, channel: int) -> MeasurementResult: \"\"\" Measure the peak-to-peak voltage for a specified channel. Args: channel (int): The channel identifier. Returns: MeasurementResult: An object containing the peak-to-peak voltage measurement. \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) response_str: str = await self._query(f\"MEAS:VPP? CHAN{channel}\") reading: float = float(response_str) value_to_return: float | UFloat = reading if self.config.measurement_accuracy: mode_key = f\"vpp_ch{channel}\" self._logger.debug(f\"Attempting to find accuracy spec for Vpp on channel {channel} with key: '{mode_key}'\") spec = self.config.measurement_accuracy.get(mode_key) if spec: sigma = spec.calculate_std_dev(reading, range_value=None) if sigma > 0: value_to_return = ufloat(reading, sigma) self._logger.debug(f\"Applied accuracy spec '{mode_key}', value: {value_to_return}\") else: self._logger.debug(f\"Accuracy spec '{mode_key}' resulted in sigma=0. Returning float.\") else: self._logger.debug(f\"No accuracy spec found for Vpp on channel {channel} with key '{mode_key}'. Returning float.\") else: self._logger.debug(f\"No measurement_accuracy configuration in instrument for Vpp on channel {channel}. Returning float.\") measurement_result = MeasurementResult( values=value_to_return, units=\"V\", instrument=self.config.model, measurement_type=\"P2PV\" ) self._logger.debug(f\"Peak to Peak Voltage (Channel {channel}): {value_to_return}\") return measurement_result read_channels(*channels, points=None, run_after=True, timebase=None, **kwargs) async Reads and processes waveform data from one or more channels. This is a primary data acquisition method. It triggers an acquisition, reads the raw data for the specified channels, and uses the preamble to convert the data into a ChannelReadingResult containing properly scaled time and voltage values in a Polars DataFrame. PARAMETER DESCRIPTION *channels A variable number of channel numbers (e.g., read_channels(1, 2) ) or a single list/tuple of channels (e.g., read_channels([1, 2]) ). TYPE: Union [ int , List [ int ], Tuple [ int , ...]] DEFAULT: () points Deprecated. The number of points is determined by the timebase and instrument settings. TYPE: Optional [ int ] DEFAULT: None run_after This parameter is currently unused. TYPE: bool DEFAULT: True timebase If provided, sets the time-per-division for this acquisition. TYPE: Optional [ float ] DEFAULT: None RETURNS DESCRIPTION ChannelReadingResult A ChannelReadingResult containing the waveform data. RAISES DESCRIPTION InstrumentParameterError If channel numbers are invalid or not provided. InstrumentDataError If time values cannot be generated. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def read_channels(self, *channels: Union[int, List[int], Tuple[int, ...]], points: Optional[int] = None, run_after: bool = True, timebase: Optional[float] = None, **kwargs) -> ChannelReadingResult: \"\"\"Reads and processes waveform data from one or more channels. This is a primary data acquisition method. It triggers an acquisition, reads the raw data for the specified channels, and uses the preamble to convert the data into a `ChannelReadingResult` containing properly scaled time and voltage values in a Polars DataFrame. Args: *channels: A variable number of channel numbers (e.g., `read_channels(1, 2)`) or a single list/tuple of channels (e.g., `read_channels([1, 2])`). points: Deprecated. The number of points is determined by the timebase and instrument settings. run_after: This parameter is currently unused. timebase: If provided, sets the time-per-division for this acquisition. Returns: A `ChannelReadingResult` containing the waveform data. Raises: InstrumentParameterError: If channel numbers are invalid or not provided. InstrumentDataError: If time values cannot be generated. \"\"\" if 'runAfter' in kwargs: warnings.warn( \"'runAfter' is deprecated, use 'run_after' instead.\", DeprecationWarning, stacklevel=2, ) run_after = kwargs['runAfter'] processed_channels: List[int] if not channels: raise InstrumentParameterError(message=\"No channels specified.\") first_arg = channels[0] if isinstance(first_arg, (list, tuple)) and len(channels) == 1: if not all(isinstance(ch_num, int) for ch_num in first_arg): raise InstrumentParameterError( message=\"All elements in channel list/tuple must be integers.\" ) processed_channels = list(first_arg) elif all(isinstance(ch_num, int) for ch_num in channels): # type: ignore [arg-type] processed_channels = list(channels) # type: ignore [assignment] else: raise InstrumentParameterError( message=\"Invalid channel arguments. Must be integers or a single list/tuple of integers.\" ) if not processed_channels: raise InstrumentParameterError( message=\"No channels specified in the list/tuple.\" ) if timebase is not None: current_time_axis = await self.get_time_axis() await self.set_time_axis(scale=timebase, position=current_time_axis[1]) if points is not None: self._logger.debug(f\"Points argument is deprecated (value: {points}). Use set_time_axis instead.\") self._logger.debug(\"starting channel read\") for ch_num_val in processed_channels: if not (1 <= ch_num_val <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channels\", value=ch_num_val, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) sampling_rate_float: float = float(await self.get_sampling_rate()) channel_commands_str: str = ', '.join(f\"CHANnel{ch}\" for ch in processed_channels) acq_type_enum_or_str = await self.acquisition.get_acquisition_type() is_average_mode = False if isinstance(acq_type_enum_or_str, AcquisitionType): is_average_mode = acq_type_enum_or_str == AcquisitionType.AVERAGE elif isinstance(acq_type_enum_or_str, str): is_average_mode = acq_type_enum_or_str.upper() == \"AVERAGE\" # Handle different acquisition modes. Averaging mode often requires a # special command sequence to ensure the requested number of averages # are acquired before the data is read. if is_average_mode: self._logger.debug(\"AVERAGE acquisition type detected - using special sequence\") avg_count_int: int = await self.acquisition.get_acquisition_average_count() self._logger.debug(f\"Current average count: {avg_count_int}\") await self._send_command(\":ACQuire:COMPlete 100\") # Ensure all averages are processed await self._send_command(\":STOP\") await self._wait() # Force a new acquisition sequence for averaging sweep_orig_str: str = (await self._query(\":TRIGger:SWEep?\")).strip() await self._send_command(\":TRIGger:SWEep AUTO\") await self._send_command(f\"DIGitize {channel_commands_str}\", skip_check=True) await self._send_command(\":TRIGger:FORCe\", skip_check=True) await self._send_command(\"*OPC\") self._logger.debug(\"Waiting for acquisition to complete \u2026\") await self._wait() await self._send_command(\":TRIGger:FORCe\", skip_check=True) self._logger.debug(\"Waiting for acquisition to complete \u2026\") await self._wait() await self._send_command(f\":TRIGger:SWEep {sweep_orig_str}\", skip_check=True) await self.clear_status() else: # For other modes, a simple DIGitize command is sufficient. await self._send_command(f\"DIGitize {channel_commands_str}\") await self._send_command(f':WAVeform:SOURce CHANnel{processed_channels[0]}') await self._send_command(':WAVeform:FORMat BYTE') await self._send_command(':WAVeform:POINts:MODE RAW') pream: Preamble = await self._read_preamble() time_values_np: Optional[np.ndarray] = None measurement_results_dict: Dict[str, np.ndarray] = {} # Loop through each requested channel to read its data for ch_num_loop in processed_channels: raw_wave_data = await self._read_wave_data(f\"CHANnel{ch_num_loop}\") # Convert raw ADC values to volts using the preamble data voltages_np: np.ndarray = (raw_wave_data - pream.yref) * pream.yinc + pream.yorg # Generate the corresponding time axis array, but only once. if time_values_np is None: n_pts_int: int = len(voltages_np) time_values_np = (np.arange(n_pts_int) - pream.xref) * pream.xinc + pream.xorg measurement_results_dict[f\"Channel {ch_num_loop} (V)\"] = voltages_np if time_values_np is None: raise InstrumentDataError( self.config.model, \"Time values were not generated during channel read.\" ) return ChannelReadingResult( instrument=self.config.model, units=\"V\", measurement_type=\"ChannelVoltageTime\", sampling_rate=sampling_rate_float, values=pl.DataFrame({ \"Time (s)\": time_values_np, **measurement_results_dict }) ) read_fft_data(channel, window='hann') async Acquires time-domain data for the specified channel and computes the FFT using the analysis submodule. PARAMETER DESCRIPTION channel The channel number to perform FFT on. TYPE: int window The windowing function to apply before FFT (e.g., 'hann', 'hamming', None). TYPE: Optional [ str ] DEFAULT: 'hann' RETURNS DESCRIPTION FFTResult An object containing the computed FFT data (frequency and linear magnitude). TYPE: FFTResult Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def read_fft_data(self, channel: int, window: Optional[str] = 'hann') -> FFTResult: \"\"\" Acquires time-domain data for the specified channel and computes the FFT using the analysis submodule. Args: channel (int): The channel number to perform FFT on. window (Optional[str]): The windowing function to apply before FFT (e.g., 'hann', 'hamming', None). Returns: FFTResult: An object containing the computed FFT data (frequency and linear magnitude). \"\"\" self._logger.debug(f\"Initiating FFT computation for channel {channel} using analysis module.\") if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) # 1. Acquire raw time-domain waveform data waveform_data: ChannelReadingResult = await self.read_channels(channel) if waveform_data.values is None or waveform_data.values.is_empty(): self._logger.warning(f\"No waveform data acquired for channel {channel}. Cannot compute FFT.\") # Return an empty FFTResult or raise an error return FFTResult( instrument=self.config.model, units=\"Linear\", measurement_type=\"FFT_computed_python\", values=pl.DataFrame({ \"Frequency (Hz)\": np.array([]), \"Magnitude (Linear)\": np.array([]) }) ) time_array = waveform_data.values[\"Time (s)\"].to_numpy() voltage_column_name = f\"Channel {channel} (V)\" if voltage_column_name not in waveform_data.values.columns: raise InstrumentDataError( self.config.model, f\"Could not find voltage data for channel {channel} in waveform results.\", ) voltage_array = waveform_data.values[voltage_column_name].to_numpy() # 2. Call the appropriate function from pytestlab.analysis.fft frequency_array, magnitude_array = analysis_fft.compute_fft( time_array=time_array, voltage_array=voltage_array, window=window ) # 3. Return or further process the results return FFTResult( instrument=self.config.model, units=\"Linear\", # compute_fft returns linear magnitude measurement_type=\"FFT_computed_python\", values=pl.DataFrame({ \"Frequency (Hz)\": frequency_array, \"Magnitude (Linear)\": magnitude_array }) ) screenshot() async Capture a screenshot of the oscilloscope display. :return Image: A PIL Image object containing the screenshot. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def screenshot(self) -> Image.Image: \"\"\" Capture a screenshot of the oscilloscope display. :return Image: A PIL Image object containing the screenshot. \"\"\" binary_data_response: bytes = await self._query_raw(\":DISPlay:DATA? PNG, COLor\") if not binary_data_response.startswith(b'#'): raise InstrumentDataError( self.config.model, \"Invalid screenshot data format: does not start with #\" ) length_of_length_field: int = int(chr(binary_data_response[1])) png_data_length_str: str = binary_data_response[2 : 2 + length_of_length_field].decode('ascii') png_data_length: int = int(png_data_length_str) png_data_start_index: int = 2 + length_of_length_field image_data_bytes: bytes = binary_data_response[png_data_start_index : png_data_start_index + png_data_length] return Image.open(BytesIO(image_data_bytes)) set_acquisition_time(time) async Set the total acquisition time for the oscilloscope. PARAMETER DESCRIPTION time The total acquisition time in seconds. TYPE: float Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_acquisition_time(self, time: float) -> None: \"\"\" Set the total acquisition time for the oscilloscope. Args: time (float): The total acquisition time in seconds. \"\"\" await self._send_command(f\":TIMebase:MAIN:RANGe {time}\") set_bandwidth_limit(channel, bandwidth) async Sets the bandwidth limit for a specified channel. Args: channel (int): The channel number. bandwidth (Union[str, float]): The bandwidth limit (e.g., \"20M\", 20e6, or \"FULL\"). Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_bandwidth_limit(self, channel: int, bandwidth: Union[str, float]) -> None: \"\"\" Sets the bandwidth limit for a specified channel. Args: channel (int): The channel number. bandwidth (Union[str, float]): The bandwidth limit (e.g., \"20M\", 20e6, or \"FULL\"). \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) await self._send_command(f\"CHANnel{channel}:BANDwidth {bandwidth}\") set_channel_axis(channel, scale, offset) async Sets the channel axis of the oscilloscope. (y-axis) :param channel: The channel to set :param scale: The scale of the channel axis in volts :param offset: The offset of the channel in volts Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_channel_axis(self, channel: int, scale: float, offset: float) -> None: \"\"\" Sets the channel axis of the oscilloscope. (y-axis) :param channel: The channel to set :param scale: The scale of the channel axis in volts :param offset: The offset of the channel in volts \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) await self._send_command(f':CHANnel{channel}:SCALe {scale}') await self._send_command(f':CHANnel{channel}:OFFSet {offset}') await self._wait() set_probe_attenuation(channel, scale) async Sets the probe scale for a given channel. PARAMETER DESCRIPTION channel The oscilloscope channel to set the scale for. TYPE: int scale The probe scale value (e.g., 10 for 10:1, 1 for 1:1). TYPE: int Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_probe_attenuation(self, channel: int, scale: int) -> None: \"\"\" Sets the probe scale for a given channel. Parameters: channel (int): The oscilloscope channel to set the scale for. scale (int): The probe scale value (e.g., 10 for 10:1, 1 for 1:1). \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) channel_model_config = self.config.channels[channel - 1] if scale not in channel_model_config.probe_attenuation: # probe_attenuation is List[int] raise InstrumentParameterError( parameter=\"scale\", value=scale, valid_range=channel_model_config.probe_attenuation, message=f\"Scale not in supported probe_attenuation list for channel {channel}.\", ) # SCPI command usually takes the numeric factor directly await self._send_command(f\":CHANnel{channel}:PROBe {scale}\") self._logger.debug(f\"Set probe scale to {scale}:1 for channel {channel}.\") set_sample_rate(rate) async Sets the sample rate for the oscilloscope. Args: rate (str): The desired sample rate. Valid values are 'MAX' and 'AUTO'. Case-insensitive. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_sample_rate(self, rate: str) -> None: \"\"\" Sets the sample rate for the oscilloscope. Args: rate (str): The desired sample rate. Valid values are 'MAX' and 'AUTO'. Case-insensitive. \"\"\" rate_upper: str = rate.upper() valid_values: List[str] = [\"MAX\", \"AUTO\"] # These are common SCPI values if rate_upper not in valid_values: raise InstrumentParameterError( parameter=\"rate\", value=rate, valid_range=valid_values, message=\"Invalid rate.\", ) await self._send_command(f\"ACQuire:SRATe {rate_upper}\") set_time_axis(scale, position) async Sets the time axis of the Oscilloscope. (x-axis) :param scale: scale The scale of the axis in seconds :param position: The position of the time axis from the trigger in seconds Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_time_axis(self, scale: float, position: float) -> None: \"\"\" Sets the time axis of the Oscilloscope. (x-axis) :param scale: scale The scale of the axis in seconds :param position: The position of the time axis from the trigger in seconds \"\"\" await self._send_command(f':TIMebase:SCALe {scale}') await self._send_command(f':TIMebase:POSition {position}') await self._wait() set_wave_gen_amp(amp) async Set the amplitude for the waveform generator. Args: amp (float): The desired amplitude for the waveform generator in volts. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wave_gen_amp(self, amp: float) -> None: \"\"\" Set the amplitude for the waveform generator. Args: amp (float): The desired amplitude for the waveform generator in volts. \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) self.config.function_generator.amplitude.assert_in_range(amp, name=\"Waveform generator amplitude\") await self._send_command(f\"WGEN:VOLT {amp}\") set_wave_gen_freq(freq) async Set the frequency for the waveform generator. Args: freq (float): The desired frequency for the waveform generator in Hz. Source code in pytestlab/instruments/Oscilloscope.py @validate_call ##@ConfigRequires(\"function_generator\") async def set_wave_gen_freq(self, freq: float) -> None: \"\"\" Set the frequency for the waveform generator. Args: freq (float): The desired frequency for the waveform generator in Hz. \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) # Assuming RangeMixin's assert_in_range is preferred for validation self.config.function_generator.frequency.assert_in_range(freq, name=\"Waveform generator frequency\") await self._send_command(f\"WGEN:FREQ {freq}\") set_wave_gen_func(func_type) async Set the waveform function for the oscilloscope's waveform generator. Args: func_type (WaveformType): The desired function enum member. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wave_gen_func(self, func_type: WaveformType) -> None: \"\"\" Set the waveform function for the oscilloscope's waveform generator. Args: func_type (WaveformType): The desired function enum member. \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) # Check if the SCPI value of the enum is in the list of supported waveform types from config if func_type.value not in self.config.function_generator.waveform_types: raise InstrumentParameterError( parameter=\"func_type\", value=func_type.value, valid_range=self.config.function_generator.waveform_types, message=\"Unsupported waveform type.\", ) await self._send_command(f\"WGEN:FUNC {func_type.value}\") set_wave_gen_offset(offset) async Set the voltage offset for the waveform generator. Args: offset (float): The desired voltage offset for the waveform generator in volts. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wave_gen_offset(self, offset: float) -> None: \"\"\" Set the voltage offset for the waveform generator. Args: offset (float): The desired voltage offset for the waveform generator in volts. \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) self.config.function_generator.offset.assert_in_range(offset, name=\"Waveform generator offset\") await self._send_command(f\"WGEN:VOLT:OFFSet {offset}\") set_wgen_dc(offset) async Sets the waveform generator to a DC wave. :param offset: The offset of the DC wave in volts Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wgen_dc(self, offset: float) -> None: \"\"\"Sets the waveform generator to a DC wave. :param offset: The offset of the DC wave in volts \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) await self.set_wave_gen_func(WaveformType.DC) await self.set_wave_gen_offset(offset) set_wgen_noise(v0, v1, offset) async Sets the waveform generator to a noise wave. :param v0: The 'low' amplitude component or similar parameter for noise. :param v1: The 'high' amplitude component or similar parameter for noise. :param offset: The offset of the noise wave in volts. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wgen_noise(self, v0: float, v1: float, offset: float) -> None: \"\"\"Sets the waveform generator to a noise wave. :param v0: The 'low' amplitude component or similar parameter for noise. :param v1: The 'high' amplitude component or similar parameter for noise. :param offset: The offset of the noise wave in volts. \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) await self.set_wave_gen_func(WaveformType.NOISE) await self._send_command(f':WGEN:VOLTage:LOW {v0}') await self._send_command(f':WGEN:VOLTage:HIGH {v1}') await self.set_wave_gen_offset(offset) set_wgen_pulse(v0, v1, period, pulse_width=None, **kwargs) async Sets the waveform generator to a pulse wave. :param v0: The voltage of the low state in volts :param v1: The voltage of the high state in volts :param period: The period of the pulse wave in seconds. :param pulse_width: The pulse width in seconds. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wgen_pulse(self, v0: float, v1: float, period: float, pulse_width: Optional[float] = None, **kwargs) -> None: \"\"\"Sets the waveform generator to a pulse wave. :param v0: The voltage of the low state in volts :param v1: The voltage of the high state in volts :param period: The period of the pulse wave in seconds. :param pulse_width: The pulse width in seconds. \"\"\" if 'pulseWidth' in kwargs: warnings.warn( \"'pulseWidth' is deprecated, use 'pulse_width' instead.\", DeprecationWarning, stacklevel=2, ) pulse_width = kwargs['pulseWidth'] if pulse_width is None: raise InstrumentParameterError(message=\"pulse_width is required.\") if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) await self.set_wave_gen_func(WaveformType.PULSE) await self._send_command(f':WGEN:VOLTage:LOW {v0}') await self._send_command(f':WGEN:VOLTage:HIGH {v1}') await self._send_command(f':WGEN:PERiod {period}') await self._send_command(f':WGEN:FUNCtion:PULSe:WIDTh {pulse_width}') set_wgen_ramp(v0, v1, freq, symmetry) async Sets the waveform generator to a ramp wave. :param v0: The voltage of the low state in volts :param v1: The voltage of the high state in volts :param freq: The frequency of the ramp wave in Hz. :param symmetry: Symmetry (0% to 100%). Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wgen_ramp(self, v0: float, v1: float, freq: float, symmetry: int) -> None: \"\"\"Sets the waveform generator to a ramp wave. :param v0: The voltage of the low state in volts :param v1: The voltage of the high state in volts :param freq: The frequency of the ramp wave in Hz. :param symmetry: Symmetry (0% to 100%). \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) await self.set_wave_gen_func(WaveformType.RAMP) def clamp_symmetry(number: int) -> int: return max(0, min(number, 100)) await self._send_command(f':WGEN:VOLTage:LOW {v0}') await self._send_command(f':WGEN:VOLTage:HIGH {v1}') await self._send_command(f':WGEN:FREQuency {freq}') await self._send_command(f':WGEN:FUNCtion:RAMP:SYMMetry {clamp_symmetry(symmetry)}') set_wgen_sin(amp, offset, freq) async Sets the waveform generator to a sine wave. :param amp: The amplitude of the sine wave in volts :param offset: The offset of the sine wave in volts :param freq: The frequency of the sine wave in Hz. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wgen_sin(self, amp: float, offset: float, freq: float) -> None: \"\"\"Sets the waveform generator to a sine wave. :param amp: The amplitude of the sine wave in volts :param offset: The offset of the sine wave in volts :param freq: The frequency of the sine wave in Hz. \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) await self.set_wave_gen_func(WaveformType.SINE) await self.set_wave_gen_amp(amp) await self.set_wave_gen_offset(offset) await self.set_wave_gen_freq(freq) set_wgen_square(v0, v1, freq, duty_cycle=None, **kwargs) async Sets the waveform generator to a square wave. :param v0: The voltage of the low state in volts :param v1: The voltage of the high state in volts :param freq: The frequency of the square wave in Hz. :param duty_cycle: The duty cycle (1% to 99%). Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wgen_square(self, v0: float, v1: float, freq: float, duty_cycle: Optional[int] = None, **kwargs) -> None: \"\"\"Sets the waveform generator to a square wave. :param v0: The voltage of the low state in volts :param v1: The voltage of the high state in volts :param freq: The frequency of the square wave in Hz. :param duty_cycle: The duty cycle (1% to 99%). \"\"\" if 'dutyCycle' in kwargs: warnings.warn( \"'dutyCycle' is deprecated, use 'duty_cycle' instead.\", DeprecationWarning, stacklevel=2, ) duty_cycle = kwargs['dutyCycle'] if duty_cycle is None: duty_cycle = 50 if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) await self.set_wave_gen_func(WaveformType.SQUARE) def clamp_duty(number: int) -> int: return max(1, min(number, 99)) await self._send_command(f':WGEN:VOLTage:LOW {v0}') await self._send_command(f':WGEN:VOLTage:HIGH {v1}') await self._send_command(f':WGEN:FREQuency {freq}') await self._send_command(f':WGEN:FUNCtion:SQUare:DCYCle {clamp_duty(duty_cycle)}') wave_gen(state) async Enable or disable the waveform generator of the oscilloscope. Args: state (bool): True to enable ('ON'), False to disable ('OFF'). Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def wave_gen(self, state: bool) -> None: \"\"\" Enable or disable the waveform generator of the oscilloscope. Args: state (bool): True to enable ('ON'), False to disable ('OFF'). \"\"\" scpi_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value await self._send_command(f\"WGEN:OUTP {scpi_state}\") Preamble(format, type, points, xinc, xorg, xref, yinc, yorg, yref) dataclass Holds the waveform preamble data from the oscilloscope. The preamble contains all the necessary metadata to convert the raw, digitized ADC values from the oscilloscope into meaningful time and voltage arrays. It describes the scaling and offset factors for both the X (time) and Y (voltage) axes. ATTRIBUTE DESCRIPTION format Data format (e.g., 'BYTE', 'WORD'). TYPE: str type Acquisition type (e.g., 'NORMal', 'AVERage'). TYPE: str points The number of data points in the waveform. TYPE: int xinc The time difference between adjacent data points (sampling interval). TYPE: float xorg The time value of the first data point. TYPE: float xref The reference time point (usually the trigger point). TYPE: float yinc The voltage difference for each ADC level (voltage resolution). TYPE: float yorg The voltage value at the vertical center of the screen. TYPE: float yref The ADC level corresponding to the vertical center. TYPE: float Attributes format instance-attribute points instance-attribute type instance-attribute xinc instance-attribute xorg instance-attribute xref instance-attribute yinc instance-attribute yorg instance-attribute yref instance-attribute Functions ScopeAcquisitionFacade(scope) Provides a simplified interface for the oscilloscope's acquisition system. This facade manages settings related to how the oscilloscope digitizes signals, including acquisition type (e.g., Normal, Averaging), memory mode (Real-time vs. Segmented), and sample rates. ATTRIBUTE DESCRIPTION _scope The parent Oscilloscope instance. Source code in pytestlab/instruments/Oscilloscope.py def __init__(self, scope: 'Oscilloscope'): self._scope = scope Functions analyze_all_segments() async Execute the scope's Analyze Segments soft-key. Requires scope to be stopped and in SEGMENTED mode. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def analyze_all_segments(self) -> None: \"\"\" Execute the scope's *Analyze Segments* soft-key. Requires scope to be stopped and in SEGMENTED mode. \"\"\" if await self.get_acquisition_mode() != \"SEGMENTED\": raise InstrumentParameterError( message=\"Segment analysis requires SEGMENTED mode.\" ) await self._scope._send_command(\":ACQuire:SEGMented:ANALyze\") await self._scope._wait() get_acquire_points() async Hardware points actually acquired for the next waveform transfer. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_acquire_points(self) -> int: \"\"\" Hardware points actually *acquired* for the next waveform transfer. \"\"\" return int(await self._scope._query(\":ACQuire:POINts?\")) get_acquire_setup() async Return a parsed dictionary of the scope's :ACQuire? status string. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_acquire_setup(self) -> Dict[str, str]: \"\"\" Return a parsed dictionary of the scope's :ACQuire? status string. \"\"\" raw_str: str = (await self._scope._query(\":ACQuire?\")).strip() parts: List[str] = [p.strip() for p in raw_str.split(';')] setup_dict: Dict[str, str] = {} for part in parts: kv = part.split(maxsplit=1) if len(kv) == 2: setup_dict[kv[0]] = kv[1] return setup_dict get_acquisition_average_count() async Integer average count (valid only when acquisition type == AVERAGE). Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_acquisition_average_count(self) -> int: \"\"\"Integer average count (valid only when acquisition type == AVERAGE).\"\"\" return int(await self._scope._query(\":ACQuire:COUNt?\")) get_acquisition_mode() async Return \"REAL_TIME\" or \"SEGMENTED\". Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_acquisition_mode(self) -> str: \"\"\"Return \"REAL_TIME\" or \"SEGMENTED\".\"\"\" resp_str_raw: str = (await self._scope._query(\":ACQuire:MODE?\")).strip() for friendly_name, scpi_command_str in _ACQ_MODE_MAP.items(): if resp_str_raw.upper().startswith(scpi_command_str.upper()[:4]): return friendly_name self._scope._logger.warning(f\"Could not map SCPI response '{resp_str_raw}' to a known AcquisitionMode. Returning raw response.\") return resp_str_raw get_acquisition_sample_rate() async Current sample rate of acquisition. Equivalent to get_sampling_rate(). Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_acquisition_sample_rate(self) -> float: \"\"\" Current sample rate of acquisition. Equivalent to get_sampling_rate(). \"\"\" return float(await self._scope._query(\":ACQuire:SRATe?\")) get_acquisition_type() async Returns current acquisition type (e.g., \"NORMAL\", \"AVERAGE\"). Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_acquisition_type(self) -> str: \"\"\" Returns current acquisition type (e.g., \"NORMAL\", \"AVERAGE\"). \"\"\" # Invert _ACQ_TYPE_MAP for lookup: SCPI response -> Enum member name # SCPI responses can be short forms (e.g., \"NORM\" for \"NORMal\") # We need to match based on how the instrument actually responds. # A common way is that instrument responds with the short form. # Let's assume the instrument responds with a value that can be mapped back. resp_str_raw: str = (await self._scope._query(\":ACQuire:TYPE?\")).strip() for enum_member, scpi_command_str in _ACQ_TYPE_MAP.items(): # Check if the response starts with the typical short SCPI command part # e.g. \"NORM\" from \"NORMal\" # This matching logic might need to be more robust based on actual instrument behavior if resp_str_raw.upper().startswith(scpi_command_str.upper()[:4]): # Compare first 4 chars return enum_member.name # Return the string name of the enum member self._scope._logger.warning(f\"Could not map SCPI response '{resp_str_raw}' to a known AcquisitionType. Returning raw response.\") return resp_str_raw # Fallback to raw response if no match get_segment_index() async Index (1-based) of the currently selected memory segment. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_segment_index(self) -> int: \"\"\"Index (1-based) of the currently selected memory segment.\"\"\" return int(await self._scope._query(\":ACQuire:SEGMented:INDex?\")) get_segmented_count() async Number of segments currently configured (SEGMENTED mode only). Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_segmented_count(self) -> int: \"\"\"Number of segments currently configured (SEGMENTED mode only).\"\"\" return int(await self._scope._query(\":ACQuire:SEGMented:COUNt?\")) set_acquisition_average_count(count) async Set the running-average length for AVERAGE mode. 2 <= count <= 65536 (Keysight limit). Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_acquisition_average_count(self, count: int) -> None: \"\"\" Set the running-average length for AVERAGE mode. 2 <= count <= 65536 (Keysight limit). \"\"\" await _validate_range(count, 2, 65_536, \"Average count\") # Sync current_acq_type_str = await self.get_acquisition_type() if current_acq_type_str != AcquisitionType.AVERAGE.name: raise InstrumentParameterError( parameter=\"count\", message=f\"Average count can only be set when acquisition type is AVERAGE, not {current_acq_type_str}.\", ) await self._scope._send_command(f\":ACQuire:COUNt {count}\") await self._scope._wait() self._scope._logger.debug(f\"AVERAGE count set \u2192 {count}\") set_acquisition_mode(mode) async Select real-time or segmented memory acquisition. (Case-insensitive for mode). Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_acquisition_mode(self, mode: str) -> None: \"\"\" Select real-time or segmented memory acquisition. (Case-insensitive for mode). \"\"\" mode_upper: str = mode.upper() scpi_mode_val = _ACQ_MODE_MAP.get(mode_upper) if not scpi_mode_val: raise InstrumentParameterError( parameter=\"mode\", value=mode, valid_range=list(_ACQ_MODE_MAP.keys()), message=\"Unknown acquisition mode.\", ) await self._scope._send_command(f\":ACQuire:MODE {scpi_mode_val}\") await self._scope._wait() self._scope._logger.debug(f\"Acquisition MODE set \u2192 {mode_upper}\") set_acquisition_type(acq_type) async Select the oscilloscope acquisition algorithm. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_acquisition_type(self, acq_type: AcquisitionType) -> None: \"\"\" Select the oscilloscope acquisition algorithm. \"\"\" scpi_val = _ACQ_TYPE_MAP.get(acq_type) if not scpi_val: raise InstrumentParameterError( parameter=\"acq_type\", value=acq_type, message=\"Unsupported acquisition type enum member.\", ) current_mode_query: str = (await self._scope._query(\":ACQuire:MODE?\")).strip().upper() if acq_type == AcquisitionType.AVERAGE and current_mode_query == _ACQ_MODE_MAP[\"SEGMENTED\"].upper()[:4]: raise InstrumentParameterError( parameter=\"acq_type\", value=\"AVERAGE\", message=\"AVERAGE mode is unavailable in SEGMENTED acquisition.\", ) await self._scope._send_command(f\":ACQuire:TYPE {scpi_val}\") await self._scope._wait() self._scope._logger.debug(f\"Acquisition TYPE set \u2192 {acq_type.name}\") set_segment_index(index) async Select which memory segment is active for readback. 1 <= index <= get_segmented_count() Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_segment_index(self, index: int) -> None: \"\"\" Select which memory segment is active for readback. 1 <= index <= get_segmented_count() \"\"\" total_segments: int = await self.get_segmented_count() await _validate_range(index, 1, total_segments, \"Segment index\") # Sync await self._scope._send_command(f\":ACQuire:SEGMented:INDex {index}\") await self._scope._wait() set_segmented_count(count) async Configure number of memory segments for SEGMENTED acquisitions. Default Keysight limit: 2 <= count <= 500 (check instrument specs) Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_segmented_count(self, count: int) -> None: \"\"\" Configure number of memory segments for SEGMENTED acquisitions. Default Keysight limit: 2 <= count <= 500 (check instrument specs) \"\"\" if await self.get_acquisition_mode() != \"SEGMENTED\": raise InstrumentParameterError( parameter=\"count\", message=\"Segmented count can only be set while in SEGMENTED acquisition mode.\", ) await _validate_range(count, 2, 500, \"Segmented count\") # Sync await self._scope._send_command(f\":ACQuire:SEGMented:COUNt {count}\") await self._scope._wait() self._scope._logger.debug(f\"Segmented COUNT set \u2192 {count}\") ScopeChannelFacade(scope, channel_num) Provides a simplified, chainable interface for a single oscilloscope channel. This facade abstracts the underlying SCPI commands for common channel operations, allowing for more readable and fluent test scripts. For example: await scope.channel(1).setup(scale=0.5, offset=0).enable() ATTRIBUTE DESCRIPTION _scope The parent Oscilloscope instance. _channel The channel number this facade controls. Source code in pytestlab/instruments/Oscilloscope.py def __init__(self, scope: 'Oscilloscope', channel_num: int): self._scope = scope self._channel = channel_num Functions disable() async Disables the channel display. Source code in pytestlab/instruments/Oscilloscope.py async def disable(self) -> Self: \"\"\"Disables the channel display.\"\"\" await self._scope.display_channel(self._channel, False) return self enable() async Enables the channel display. Source code in pytestlab/instruments/Oscilloscope.py async def enable(self) -> Self: \"\"\"Enables the channel display.\"\"\" await self._scope.display_channel(self._channel, True) return self measure_peak_to_peak() async Performs a peak-to-peak voltage measurement on this channel. Source code in pytestlab/instruments/Oscilloscope.py async def measure_peak_to_peak(self) -> MeasurementResult: \"\"\"Performs a peak-to-peak voltage measurement on this channel.\"\"\" return await self._scope.measure_voltage_peak_to_peak(self._channel) measure_rms() async Performs an RMS voltage measurement on this channel. Source code in pytestlab/instruments/Oscilloscope.py async def measure_rms(self) -> MeasurementResult: \"\"\"Performs an RMS voltage measurement on this channel.\"\"\" return await self._scope.measure_rms_voltage(self._channel) setup(scale=None, position=None, offset=None, coupling=None, probe_attenuation=None, bandwidth_limit=None) async Configures multiple settings for the channel in a single call. This method allows setting the vertical scale, position/offset, coupling, probe attenuation, and bandwidth limit. Any parameter left as None will not be changed. PARAMETER DESCRIPTION scale The vertical scale in volts per division. TYPE: Optional [ float ] DEFAULT: None position The vertical position in divisions from the center. TYPE: Optional [ float ] DEFAULT: None offset The vertical offset in volts. 'offset' is often preferred over 'position' as it's independent of the scale. TYPE: Optional [ float ] DEFAULT: None coupling The input coupling (\"AC\" or \"DC\"). TYPE: Optional [ str ] DEFAULT: None probe_attenuation The attenuation factor of the probe (e.g., 10 for 10:1). TYPE: Optional [ int ] DEFAULT: None bandwidth_limit The bandwidth limit to apply (e.g., \"20M\" or 20e6). TYPE: Optional [ Union [ str , float ]] DEFAULT: None RETURNS DESCRIPTION Self The ScopeChannelFacade instance for method chaining. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def setup(self, scale: Optional[float] = None, position: Optional[float] = None, offset: Optional[float] = None, coupling: Optional[str] = None, probe_attenuation: Optional[int] = None, bandwidth_limit: Optional[Union[str, float]] = None) -> Self: \"\"\"Configures multiple settings for the channel in a single call. This method allows setting the vertical scale, position/offset, coupling, probe attenuation, and bandwidth limit. Any parameter left as `None` will not be changed. Args: scale: The vertical scale in volts per division. position: The vertical position in divisions from the center. offset: The vertical offset in volts. 'offset' is often preferred over 'position' as it's independent of the scale. coupling: The input coupling (\"AC\" or \"DC\"). probe_attenuation: The attenuation factor of the probe (e.g., 10 for 10:1). bandwidth_limit: The bandwidth limit to apply (e.g., \"20M\" or 20e6). Returns: The `ScopeChannelFacade` instance for method chaining. \"\"\" if scale is not None: current_offset_val = (await self._scope.get_channel_axis(self._channel))[1] if offset is None and position is None else (offset or position or 0.0) await self._scope.set_channel_axis(self._channel, scale, current_offset_val) elif position is not None or offset is not None: # only position/offset is set val_to_set = position if position is not None else offset current_scale_val = (await self._scope.get_channel_axis(self._channel))[0] await self._scope.set_channel_axis(self._channel, current_scale_val, val_to_set) if coupling is not None: await self._scope._send_command(f\":CHANnel{self._channel}:COUPling {coupling.upper()}\") self._scope._logger.debug(f\"Channel {self._channel} coupling set to {coupling.upper()}\") if probe_attenuation is not None: await self._scope.set_probe_attenuation(self._channel, probe_attenuation) if bandwidth_limit is not None: await self._scope.set_bandwidth_limit(self._channel, bandwidth_limit) return self ScopeTriggerFacade(scope) Provides a simplified, chainable interface for the oscilloscope's trigger system. This facade abstracts the underlying SCPI commands for trigger operations, focusing on common use cases like setting up an edge trigger. ATTRIBUTE DESCRIPTION _scope The parent Oscilloscope instance. Source code in pytestlab/instruments/Oscilloscope.py def __init__(self, scope: 'Oscilloscope'): self._scope = scope Functions setup_edge(source, level, slope=TriggerSlope.POSITIVE, coupling=None, mode='EDGE') async Configures a standard edge trigger. PARAMETER DESCRIPTION source The trigger source (e.g., \"CH1\", \"CH2\", \"EXT\", \"LINE\"). TYPE: str level The trigger level in volts. TYPE: float slope The trigger slope ( TriggerSlope.POSITIVE , NEGATIVE , or EITHER ). TYPE: TriggerSlope DEFAULT: POSITIVE coupling The trigger coupling (e.g., \"AC\", \"DC\"). Can be instrument-specific. TYPE: Optional [ str ] DEFAULT: None mode The trigger mode, defaults to \"EDGE\". TYPE: str DEFAULT: 'EDGE' RETURNS DESCRIPTION Self The ScopeTriggerFacade instance for method chaining. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def setup_edge(self, source: str, level: float, slope: TriggerSlope = TriggerSlope.POSITIVE, coupling: Optional[str] = None, mode: str = \"EDGE\") -> Self: \"\"\"Configures a standard edge trigger. Args: source: The trigger source (e.g., \"CH1\", \"CH2\", \"EXT\", \"LINE\"). level: The trigger level in volts. slope: The trigger slope (`TriggerSlope.POSITIVE`, `NEGATIVE`, or `EITHER`). coupling: The trigger coupling (e.g., \"AC\", \"DC\"). Can be instrument-specific. mode: The trigger mode, defaults to \"EDGE\". Returns: The `ScopeTriggerFacade` instance for method chaining. \"\"\" # Determine channel number if source is like 'CH1' for the level command trigger_channel_for_level = 1 # Default or fallback if source.upper().startswith(\"CHAN\"): try: trigger_channel_for_level = int(source[len(\"CHAN\"):]) except ValueError: raise InstrumentParameterError( parameter=\"source\", value=source, message=\"Invalid trigger source format for channel.\", ) elif source.upper().startswith(\"CH\"): try: trigger_channel_for_level = int(source[len(\"CH\"):]) except ValueError: raise InstrumentParameterError( parameter=\"source\", value=source, message=\"Invalid trigger source format for channel.\", ) # The main configure_trigger method handles source validation and mapping. await self._scope.configure_trigger( channel=trigger_channel_for_level, # This is for the :TRIGger:LEVel CHANnel<n> part level=level, source=source, # This is for :TRIGger:SOURce part slope=slope, mode=mode ) # Coupling for trigger is often separate, e.g., :TRIGger:COUPling if coupling is not None: await self._scope._send_command(f\":TRIGger:{mode.upper()}:COUPling {coupling.upper()}\") # Assuming edge trigger coupling self._scope._logger.debug(f\"Trigger coupling set to {coupling.upper()}\") return self Power Supply pytestlab.instruments.PowerSupply Classes PSUChannelConfig(voltage, current, state) A data class to hold the measured configuration of a single PSU channel. This class is used to structure the data returned by get_configuration , providing a snapshot of a channel's state. It is not a Pydantic model for loading configurations from files. ATTRIBUTE DESCRIPTION voltage The measured voltage of the channel. TYPE: float | UFloat current The measured current of the channel. TYPE: float | UFloat state The output state of the channel (\"ON\" or \"OFF\"). TYPE: str Initializes the PSUChannelConfig. PARAMETER DESCRIPTION voltage The voltage value for the channel. TYPE: float | UFloat current The current value for the channel. TYPE: float | UFloat state The state of the channel (e.g., 0, 1, \"ON\", \"OFF\"). TYPE: Union [ int , str ] Source code in pytestlab/instruments/PowerSupply.py def __init__(self, voltage: float | UFloat, current: float | UFloat, state: Union[int, str]) -> None: \"\"\"Initializes the PSUChannelConfig. Args: voltage: The voltage value for the channel. current: The current value for the channel. state: The state of the channel (e.g., 0, 1, \"ON\", \"OFF\"). \"\"\" self.voltage: float | UFloat = voltage self.current: float | UFloat = current self.state: str # Store state as string \"ON\" or \"OFF\" for consistency if isinstance(state, str): # Normalize state from various string inputs like \"1\", \"0\", \"ON\", \"OFF\" state_upper = state.upper().strip() if state_upper == SCPIOnOff.ON.value or state_upper == \"1\": self.state = SCPIOnOff.ON.value elif state_upper == SCPIOnOff.OFF.value or state_upper == \"0\": self.state = SCPIOnOff.OFF.value else: raise ValueError(f\"Invalid string state value: {state}\") elif isinstance(state, (int, float)): # float for query results that might be like 1.0 self.state = SCPIOnOff.ON.value if int(state) == 1 else SCPIOnOff.OFF.value else: raise ValueError(f\"Invalid state value type: {type(state)}, value: {state}\") Attributes current = current instance-attribute state instance-attribute voltage = voltage instance-attribute Functions __repr__() Source code in pytestlab/instruments/PowerSupply.py def __repr__(self) -> str: return f\"PSUChannelConfig(voltage={self.voltage!r}, current={self.current!r}, state='{self.state}')\" PSUChannelFacade(psu, channel_num) Provides a simplified, chainable interface for a single PSU channel. This facade abstracts the underlying SCPI commands for common channel operations, allowing for more readable and fluent test scripts. For example: await psu.channel(1).set(voltage=5.0, current_limit=0.1).on() ATTRIBUTE DESCRIPTION _psu The parent PowerSupply instance. _channel The channel number (1-based) this facade controls. Source code in pytestlab/instruments/PowerSupply.py def __init__(self, psu: 'PowerSupply', channel_num: int): self._psu = psu self._channel = channel_num Functions get_current() async Reads the measured current from this channel. Source code in pytestlab/instruments/PowerSupply.py async def get_current(self) -> float | UFloat: \"\"\"Reads the measured current from this channel.\"\"\" return await self._psu.read_current(self._channel) get_output_state() async Checks if the channel output is enabled (ON). RETURNS DESCRIPTION bool True if the output is on, False otherwise. RAISES DESCRIPTION InstrumentParameterError If the instrument returns an unexpected state. Source code in pytestlab/instruments/PowerSupply.py async def get_output_state(self) -> bool: \"\"\"Checks if the channel output is enabled (ON). Returns: True if the output is on, False otherwise. Raises: InstrumentParameterError: If the instrument returns an unexpected state. \"\"\" command = f\"{self._psu.SCPI_MAP.OUTPUT_STATE_QUERY_BASE} (@{self._channel})\" state_str = (await self._psu._query(command)).strip().upper() if state_str in (\"1\", \"ON\"): return True elif state_str in (\"0\", \"OFF\"): return False raise InstrumentParameterError(f\"Unexpected output state '{state_str}' for channel {self._channel}\") get_voltage() async Reads the measured voltage from this channel. Source code in pytestlab/instruments/PowerSupply.py async def get_voltage(self) -> float | UFloat: \"\"\"Reads the measured voltage from this channel.\"\"\" return await self._psu.read_voltage(self._channel) off() async Disables the output of this channel. Source code in pytestlab/instruments/PowerSupply.py async def off(self) -> Self: \"\"\"Disables the output of this channel.\"\"\" await self._psu.output(self._channel, False) return self on() async Enables the output of this channel. Source code in pytestlab/instruments/PowerSupply.py async def on(self) -> Self: \"\"\"Enables the output of this channel.\"\"\" await self._psu.output(self._channel, True) return self set(voltage=None, current_limit=None) async Sets the voltage and/or current limit for this channel. PARAMETER DESCRIPTION voltage The target voltage in Volts. TYPE: Optional [ float ] DEFAULT: None current_limit The current limit in Amperes. TYPE: Optional [ float ] DEFAULT: None RETURNS DESCRIPTION Self The PSUChannelFacade instance for method chaining. Source code in pytestlab/instruments/PowerSupply.py @validate_call async def set(self, voltage: Optional[float] = None, current_limit: Optional[float] = None) -> Self: \"\"\"Sets the voltage and/or current limit for this channel. Args: voltage: The target voltage in Volts. current_limit: The current limit in Amperes. Returns: The `PSUChannelFacade` instance for method chaining. \"\"\" if voltage is not None: await self._psu.set_voltage(self._channel, voltage) if current_limit is not None: await self._psu.set_current(self._channel, current_limit) return self PowerSupply(config, backend, **kwargs) Bases: Instrument [ PowerSupplyConfig ] Drives a multi-channel Power Supply Unit (PSU). This class provides a high-level interface for controlling a programmable power supply. It builds upon the base Instrument class and adds methods for setting and reading voltage and current on a per-channel basis. It also supports incorporating measurement uncertainty if configured. A key feature is the channel() method, which returns a PSUChannelFacade for a simplified, chainable programming experience. ATTRIBUTE DESCRIPTION config The Pydantic configuration object ( PowerSupplyConfig ) containing settings specific to this PSU. TYPE: PowerSupplyConfig SCPI_MAP An object that maps generic functions to model-specific SCPI commands. Source code in pytestlab/instruments/instrument.py def __init__(self, config: ConfigType, backend: AsyncInstrumentIO, **kwargs: Any) -> None: # Changed to AsyncInstrumentIO \"\"\" Initialize the Instrument class. Args: config (ConfigType): Configuration for the instrument. backend (AsyncInstrumentIO): The communication backend instance. **kwargs: Additional keyword arguments. \"\"\" if not isinstance(config, InstrumentConfig): # Check against the bound base raise InstrumentConfigurationError( self.__class__.__name__, f\"A valid InstrumentConfig-compatible object must be provided, but got {type(config).__name__}.\", ) self.config = config self._backend = backend # This will be an AsyncInstrumentIO instance self._command_log = [] logger_name = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ self._logger = get_logger(logger_name) self._logger.info(f\"Instrument '{logger_name}': Initializing with backend '{type(backend).__name__}'.\") Attributes SCPI_MAP = KeysightEDU36311APSU_SCPI() class-attribute instance-attribute config instance-attribute model_config = {'arbitrary_types_allowed': True} class-attribute instance-attribute Functions channel(ch_num) Returns a facade for interacting with a specific channel. PARAMETER DESCRIPTION ch_num The channel number (1-based). TYPE: int RETURNS DESCRIPTION PSUChannelFacade A facade object for the specified channel. TYPE: PSUChannelFacade RAISES DESCRIPTION InstrumentParameterError If channel number is invalid. Source code in pytestlab/instruments/PowerSupply.py @validate_call def channel(self, ch_num: int) -> PSUChannelFacade: \"\"\" Returns a facade for interacting with a specific channel. Args: ch_num (int): The channel number (1-based). Returns: PSUChannelFacade: A facade object for the specified channel. Raises: InstrumentParameterError: If channel number is invalid. \"\"\" if not self.config.channels or not (1 <= ch_num <= len(self.config.channels)): num_ch = len(self.config.channels) if self.config.channels else 0 raise InstrumentParameterError(f\"Channel number {ch_num} is out of range (1-{num_ch}).\") return PSUChannelFacade(self, ch_num) display(state) async Enables or disables the instrument's front panel display. PARAMETER DESCRIPTION state True to turn the display on, False to turn it off. TYPE: bool Source code in pytestlab/instruments/PowerSupply.py @validate_call async def display(self, state: bool) -> None: \"\"\"Enables or disables the instrument's front panel display. Args: state: True to turn the display on, False to turn it off. \"\"\" scpi_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value await self._send_command(f\"DISP {scpi_state}\") from_config(config, **kwargs) classmethod Source code in pytestlab/instruments/PowerSupply.py @classmethod def from_config(cls: Type['PowerSupply'], config: PowerSupplyConfig, **kwargs: Any) -> 'PowerSupply': return cls(config=config, **kwargs) get_configuration() async Reads the live state of all configured PSU channels. This method iterates through all channels defined in the configuration, queries their current voltage, current, and output state, and returns the collected data. RETURNS DESCRIPTION Dict [ int , PSUChannelConfig ] A dictionary where keys are channel numbers (1-based) and values are Dict [ int , PSUChannelConfig ] PSUChannelConfig objects representing the state of each channel. Source code in pytestlab/instruments/PowerSupply.py @validate_call async def get_configuration(self) -> Dict[int, PSUChannelConfig]: \"\"\"Reads the live state of all configured PSU channels. This method iterates through all channels defined in the configuration, queries their current voltage, current, and output state, and returns the collected data. Returns: A dictionary where keys are channel numbers (1-based) and values are `PSUChannelConfig` objects representing the state of each channel. \"\"\" results: Dict[int, PSUChannelConfig] = {} if not self.config.channels: self._logger.warning(\"No channels defined in the PowerSupplyConfig. Cannot get configuration.\") return results num_channels = len(self.config.channels) for channel_num in range(1, num_channels + 1): # Iterate 1-indexed channel numbers voltage_val: float | UFloat = await self.read_voltage(channel_num) # Already uses @validate_call current_val: float | UFloat = await self.read_current(channel_num) # Already uses @validate_call # Query output state using SCPI_MAP output_state_command = f\"{self.SCPI_MAP.OUTPUT_STATE_QUERY_BASE} (@{channel_num})\" state_str: str = await self._query(output_state_command) results[channel_num] = PSUChannelConfig( voltage=voltage_val, current=current_val, state=state_str.strip() ) return results id() async Queries the instrument identification string. RETURNS DESCRIPTION str The instrument identification string. TYPE: str Source code in pytestlab/instruments/PowerSupply.py async def id(self) -> str: \"\"\" Queries the instrument identification string. Returns: str: The instrument identification string. \"\"\" return await self._query(self.SCPI_MAP.IDN) output(channel, state=True) async Enables or disables the output for one or more channels. PARAMETER DESCRIPTION channel A single channel number (1-based) or a list of channel numbers. TYPE: Union [ int , List [ int ]] state True to enable the output (ON), False to disable (OFF). TYPE: bool DEFAULT: True RAISES DESCRIPTION InstrumentParameterError If any channel number is invalid. ValueError If the channel argument is not an int or a list of ints. Source code in pytestlab/instruments/PowerSupply.py @validate_call async def output(self, channel: Union[int, List[int]], state: bool = True) -> None: \"\"\"Enables or disables the output for one or more channels. Args: channel: A single channel number (1-based) or a list of channel numbers. state: True to enable the output (ON), False to disable (OFF). Raises: InstrumentParameterError: If any channel number is invalid. ValueError: If the `channel` argument is not an int or a list of ints. \"\"\" channels_to_process: List[int] if isinstance(channel, int): channels_to_process = [channel] elif isinstance(channel, list): # Ensure all elements in the list are integers if not all(isinstance(ch, int) for ch in channel): raise ValueError(\"All elements in channel list must be integers.\") channels_to_process = channel else: # This case should ideally be caught by validate_call if type hints are precise enough, # but an explicit check remains good practice. raise ValueError(f\"Invalid channel type: {type(channel)}. Expected int or List[int].\") num_configured_channels = len(self.config.channels) if self.config.channels else 0 for ch_num in channels_to_process: if not (1 <= ch_num <= num_configured_channels): raise InstrumentParameterError(f\"Channel number {ch_num} is out of range (1-{num_configured_channels}).\") argument = \",\".join(map(str, channels_to_process)) scpi_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value command = f\"{self.SCPI_MAP.OUTPUT_STATE_SET_BASE} {scpi_state}, (@{argument})\" await self._send_command(command) read_current(channel) async Reads the measured output current from a specific channel. If measurement accuracy is defined in the configuration, this method will return a UFloat object containing the value and its uncertainty. Otherwise, it returns a standard float. PARAMETER DESCRIPTION channel The channel number to measure (1-based). TYPE: int RETURNS DESCRIPTION float | UFloat The measured current as a float or UFloat . RAISES DESCRIPTION InstrumentParameterError If the channel number is invalid. Source code in pytestlab/instruments/PowerSupply.py @validate_call async def read_current(self, channel: int) -> float | UFloat: \"\"\"Reads the measured output current from a specific channel. If measurement accuracy is defined in the configuration, this method will return a `UFloat` object containing the value and its uncertainty. Otherwise, it returns a standard float. Args: channel: The channel number to measure (1-based). Returns: The measured current as a float or `UFloat`. Raises: InstrumentParameterError: If the channel number is invalid. \"\"\" if not self.config.channels or not (1 <= channel <= len(self.config.channels)): num_ch = len(self.config.channels) if self.config.channels else 0 raise InstrumentParameterError(f\"Channel number {channel} is out of range (1-{num_ch}).\") command = f\"{self.SCPI_MAP.MEAS_CURRENT_QUERY_BASE} (@{channel})\" response_str: str = await self._query(command) reading: float = float(response_str) value_to_return: float | UFloat = reading if self.config.measurement_accuracy: mode_key = f\"read_current_ch{channel}\" self._logger.debug(f\"Attempting to find accuracy spec for read_current on channel {channel} with key: '{mode_key}'\") spec = self.config.measurement_accuracy.get(mode_key) if spec: sigma = spec.calculate_std_dev(reading, range_value=None) if sigma > 0: value_to_return = ufloat(reading, sigma) self._logger.debug(f\"Applied accuracy spec '{mode_key}', value: {value_to_return}\") else: self._logger.debug(f\"Accuracy spec '{mode_key}' resulted in sigma=0. Returning float.\") else: self._logger.debug(f\"No accuracy spec found for read_current on channel {channel} with key '{mode_key}'. Returning float.\") else: self._logger.debug(f\"No measurement_accuracy configuration in instrument for read_current on channel {channel}. Returning float.\") return value_to_return read_voltage(channel) async Reads the measured output voltage from a specific channel. If measurement accuracy is defined in the configuration, this method will return a UFloat object containing the value and its uncertainty. Otherwise, it returns a standard float. PARAMETER DESCRIPTION channel The channel number to measure (1-based). TYPE: int RETURNS DESCRIPTION float | UFloat The measured voltage as a float or UFloat . RAISES DESCRIPTION InstrumentParameterError If the channel number is invalid. Source code in pytestlab/instruments/PowerSupply.py @validate_call async def read_voltage(self, channel: int) -> float | UFloat: \"\"\"Reads the measured output voltage from a specific channel. If measurement accuracy is defined in the configuration, this method will return a `UFloat` object containing the value and its uncertainty. Otherwise, it returns a standard float. Args: channel: The channel number to measure (1-based). Returns: The measured voltage as a float or `UFloat`. Raises: InstrumentParameterError: If the channel number is invalid. \"\"\" if not self.config.channels or not (1 <= channel <= len(self.config.channels)): num_ch = len(self.config.channels) if self.config.channels else 0 raise InstrumentParameterError(f\"Channel number {channel} is out of range (1-{num_ch}).\") command = f\"{self.SCPI_MAP.MEAS_VOLTAGE_QUERY_BASE} (@{channel})\" response_str: str = await self._query(command) reading: float = float(response_str) value_to_return: float | UFloat = reading if self.config.measurement_accuracy: mode_key = f\"read_voltage_ch{channel}\" self._logger.debug(f\"Attempting to find accuracy spec for read_voltage on channel {channel} with key: '{mode_key}'\") spec = self.config.measurement_accuracy.get(mode_key) if spec: sigma = spec.calculate_std_dev(reading, range_value=None) if sigma > 0: value_to_return = ufloat(reading, sigma) self._logger.debug(f\"Applied accuracy spec '{mode_key}', value: {value_to_return}\") else: self._logger.debug(f\"Accuracy spec '{mode_key}' resulted in sigma=0. Returning float.\") else: self._logger.debug(f\"No accuracy spec found for read_voltage on channel {channel} with key '{mode_key}'. Returning float.\") else: self._logger.debug(f\"No measurement_accuracy configuration in instrument for read_voltage on channel {channel}. Returning float.\") return value_to_return reset() async Resets the instrument to its factory default settings. Source code in pytestlab/instruments/PowerSupply.py async def reset(self) -> None: \"\"\" Resets the instrument to its factory default settings. \"\"\" await self._send_command(self.SCPI_MAP.RESET) set_current(channel, current) async Sets the current limit for a specific channel. PARAMETER DESCRIPTION channel The channel number (1-based). TYPE: int current The current limit in Amperes. TYPE: float RAISES DESCRIPTION InstrumentParameterError If the channel number is invalid or the current is outside the configured range for that channel. Source code in pytestlab/instruments/PowerSupply.py @validate_call async def set_current(self, channel: int, current: float) -> None: \"\"\"Sets the current limit for a specific channel. Args: channel: The channel number (1-based). current: The current limit in Amperes. Raises: InstrumentParameterError: If the channel number is invalid or the current is outside the configured range for that channel. \"\"\" if not self.config.channels or not (1 <= channel <= len(self.config.channels)): num_ch = len(self.config.channels) if self.config.channels else 0 raise InstrumentParameterError(f\"Channel number {channel} is out of range (1-{num_ch}).\") channel_config = self.config.channels[channel - 1] # channel is 1-based channel_config.current_limit_range.assert_in_range(current, name=f\"Current for channel {channel}\") # Assuming current_limit_range from example command = f\"{self.SCPI_MAP.CURRENT_SET_BASE} {current}, (@{channel})\" await self._send_command(command) set_voltage(channel, voltage) async Sets the output voltage for a specific channel. PARAMETER DESCRIPTION channel The channel number (1-based). TYPE: int voltage The target voltage in Volts. TYPE: float RAISES DESCRIPTION InstrumentParameterError If the channel number is invalid or the voltage is outside the configured range for that channel. Source code in pytestlab/instruments/PowerSupply.py @validate_call async def set_voltage(self, channel: int, voltage: float) -> None: \"\"\"Sets the output voltage for a specific channel. Args: channel: The channel number (1-based). voltage: The target voltage in Volts. Raises: InstrumentParameterError: If the channel number is invalid or the voltage is outside the configured range for that channel. \"\"\" # Validate that the channel number is within the configured range if not self.config.channels or not (1 <= channel <= len(self.config.channels)): num_ch = len(self.config.channels) if self.config.channels else 0 raise InstrumentParameterError(f\"Channel number {channel} is out of range (1-{num_ch}).\") # Validate the voltage against the limits defined in the configuration channel_config = self.config.channels[channel - 1] channel_config.voltage_range.assert_in_range(voltage, name=f\"Voltage for channel {channel}\") # Construct and send the SCPI command command = f\"{self.SCPI_MAP.VOLTAGE_SET_BASE} {voltage}, (@{channel})\" await self._send_command(command) Waveform Generator pytestlab.instruments.WaveformGenerator Attributes WAVEFORM_PARAM_COMMANDS = {WaveformType.PULSE: {'duty_cycle': lambda ch, v_float: f'SOUR{ch}:FUNC:PULS:DCYCle {v_float}', 'period': lambda ch, v_float: f'SOUR{ch}:FUNC:PULS:PERiod {v_float}', 'width': lambda ch, v_float: f'SOUR{ch}:FUNC:PULS:WIDTh {v_float}', 'transition_both': lambda ch, v_float: f'SOUR{ch}:FUNC:PULS:TRANsition:BOTH {v_float}', 'transition_leading': lambda ch, v_float: f'SOUR{ch}:FUNC:PULS:TRANsition:LEADing {v_float}', 'transition_trailing': lambda ch, v_float: f'SOUR{ch}:FUNC:PULS:TRANsition:TRAiling {v_float}', 'hold_mode': lambda ch, v_str_hold: f'SOUR{ch}:FUNC:PULS:HOLD {v_str_hold.upper()}'}, WaveformType.SQUARE: {'duty_cycle': lambda ch, v_float: f'SOUR{ch}:FUNC:SQUare:DCYCle {v_float}', 'period': lambda ch, v_float: f'SOUR{ch}:FUNC:SQUare:PERiod {v_float}'}, WaveformType.RAMP: {'symmetry': lambda ch, v_float: f'SOUR{ch}:FUNC:RAMP:SYMMetry {v_float}'}, WaveformType.SINE: {}, WaveformType.NOISE: {'bandwidth': lambda ch, v_float: f'SOUR{ch}:FUNC:NOISe:BANDwidth {v_float}'}, WaveformType.ARB: {'sample_rate': lambda ch, v_float: f'SOUR{ch}:FUNC:ARB:SRATe {v_float}', 'filter': lambda ch, arb_filter_enum_val: f'SOUR{ch}:FUNC:ARB:FILTer {arb_filter_enum_val}', 'advance_mode': lambda ch, arb_adv_enum_val: f'SOUR{ch}:FUNC:ARB:ADVance {arb_adv_enum_val}', 'frequency': lambda ch, v_float: f'SOUR{ch}:FUNC:ARB:FREQ {v_float}', 'period': lambda ch, v_float: f'SOUR{ch}:FUNC:ARB:PER {v_float}', 'ptpeak_voltage': lambda ch, v_float: f'SOUR{ch}:FUNC:ARB:PTP {v_float}'}, WaveformType.DC: {}} module-attribute Classes FileSystemInfo(bytes_used, bytes_free, files=list()) dataclass Data class representing the results of a directory listing query ( list_directory ). Contains information about memory usage and the files/folders found in the queried path. ATTRIBUTE DESCRIPTION bytes_used Total bytes used on the specified memory volume (INT or USB). TYPE: int bytes_free Total bytes free on the specified memory volume. TYPE: int files A list of dictionaries, each representing a file or folder. Example entry: {'name': 'f.txt', 'type': 'FILE', 'size': 1024} . Type might be 'FILE', 'FOLDER', 'ARB', 'STAT', etc., depending on the file extension and instrument response. Size is in bytes. TYPE: List [ Dict [ str , Any ]] Attributes bytes_free instance-attribute bytes_used instance-attribute files = field(default_factory=list) class-attribute instance-attribute Functions WGChannelFacade(wg, channel_num) Source code in pytestlab/instruments/WaveformGenerator.py def __init__(self, wg: 'WaveformGenerator', channel_num: int): self._wg = wg self._channel = channel_num Functions disable() async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def disable(self) -> Self: await self._wg.set_output_state(self._channel, SCPIOnOff.OFF) return self enable() async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def enable(self) -> Self: await self._wg.set_output_state(self._channel, SCPIOnOff.ON) return self set_load_impedance(impedance) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_load_impedance(self, impedance: Union[float, OutputLoadImpedance, str]) -> Self: await self._wg.set_output_load_impedance(self._channel, impedance) return self set_voltage_unit(unit) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_voltage_unit(self, unit: VoltageUnit) -> Self: await self._wg.set_voltage_unit(self._channel, unit) return self setup_arbitrary(arb_name, sample_rate, amplitude, offset=0.0, phase=None) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def setup_arbitrary(self, arb_name: str, sample_rate: float, amplitude: float, offset: float = 0.0, phase: Optional[float] = None) -> Self: await self._wg.set_function(self._channel, WaveformType.ARB) await self._wg.select_arbitrary_waveform(self._channel, arb_name) await self._wg.set_arbitrary_waveform_sample_rate(self._channel, sample_rate) await self._wg.set_amplitude(self._channel, amplitude) await self._wg.set_offset(self._channel, offset) if phase is not None: await self._wg.set_phase(self._channel, phase) return self setup_dc(offset) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def setup_dc(self, offset: float) -> Self: await self._wg.set_function(self._channel, WaveformType.DC) await self._wg.set_offset(self._channel, offset) return self setup_pulse(frequency, amplitude, offset=0.0, width=None, duty_cycle=None, transition_both=None, phase=None) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def setup_pulse(self, frequency: float, amplitude: float, offset: float = 0.0, width: Optional[float] = None, duty_cycle: Optional[float] = None, transition_both: Optional[float] = None, phase: Optional[float] = None) -> Self: period = 1.0 / frequency if frequency > 0 else OutputLoadImpedance.MAXIMUM pulse_params = {\"period\": period} if width is not None: pulse_params[\"width\"] = width elif duty_cycle is not None: pulse_params[\"duty_cycle\"] = duty_cycle else: pulse_params[\"duty_cycle\"] = 50.0 if transition_both is not None: pulse_params[\"transition_both\"] = transition_both await self._wg.set_function(self._channel, WaveformType.PULSE, **pulse_params) await self._wg.set_amplitude(self._channel, amplitude) await self._wg.set_offset(self._channel, offset) if phase is not None: await self._wg.set_phase(self._channel, phase) return self setup_ramp(frequency, amplitude, offset=0.0, symmetry=50.0, phase=None) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def setup_ramp(self, frequency: float, amplitude: float, offset: float = 0.0, symmetry: float = 50.0, phase: Optional[float] = None) -> Self: await self._wg.set_function(self._channel, WaveformType.RAMP, symmetry=symmetry) await self._wg.set_frequency(self._channel, frequency) await self._wg.set_amplitude(self._channel, amplitude) await self._wg.set_offset(self._channel, offset) if phase is not None: await self._wg.set_phase(self._channel, phase) return self setup_sine(frequency, amplitude, offset=0.0, phase=None) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def setup_sine(self, frequency: float, amplitude: float, offset: float = 0.0, phase: Optional[float] = None) -> Self: await self._wg.set_function(self._channel, WaveformType.SINE) await self._wg.set_frequency(self._channel, frequency) await self._wg.set_amplitude(self._channel, amplitude) await self._wg.set_offset(self._channel, offset) if phase is not None: await self._wg.set_phase(self._channel, phase) return self setup_square(frequency, amplitude, offset=0.0, duty_cycle=50.0, phase=None) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def setup_square(self, frequency: float, amplitude: float, offset: float = 0.0, duty_cycle: float = 50.0, phase: Optional[float] = None) -> Self: await self._wg.set_function(self._channel, WaveformType.SQUARE, duty_cycle=duty_cycle) await self._wg.set_frequency(self._channel, frequency) await self._wg.set_amplitude(self._channel, amplitude) await self._wg.set_offset(self._channel, offset) if phase is not None: await self._wg.set_phase(self._channel, phase) return self WaveformConfigResult(channel, function, frequency, amplitude, offset, phase=None, symmetry=None, duty_cycle=None, output_state=None, load_impedance=None, voltage_unit=None) dataclass Data class storing the retrieved waveform configuration of a channel. Provides a structured way to access key parameters of the channel's current state, obtained by querying multiple SCPI commands. ATTRIBUTE DESCRIPTION channel The channel number (1 or 2). TYPE: int function The short SCPI name of the active waveform function (e.g., \"SIN\", \"RAMP\"). TYPE: str frequency The current frequency in Hz (or sample rate in Sa/s for ARB). TYPE: float amplitude The current amplitude in the configured voltage units. TYPE: float offset The current DC offset voltage in Volts. TYPE: float phase The current phase offset in the configured angle units (None if not applicable). TYPE: Optional [ float ] symmetry The current symmetry percentage for RAMP/TRIANGLE (None otherwise). TYPE: Optional [ float ] duty_cycle The current duty cycle percentage for SQUARE/PULSE (None otherwise). TYPE: Optional [ float ] output_state The current state of the main output (True=ON, False=OFF). TYPE: Optional [ bool ] load_impedance The configured load impedance (Ohms or \"INFinity\"). TYPE: Optional [ Union [ float , str ]] voltage_unit The currently configured voltage unit (\"VPP\", \"VRMS\", \"DBM\"). TYPE: Optional [ str ] Attributes amplitude instance-attribute channel instance-attribute duty_cycle = None class-attribute instance-attribute frequency instance-attribute function instance-attribute load_impedance = None class-attribute instance-attribute offset instance-attribute output_state = None class-attribute instance-attribute phase = None class-attribute instance-attribute symmetry = None class-attribute instance-attribute voltage_unit = None class-attribute instance-attribute Functions WaveformGenerator(config, debug_mode=False, **kwargs) Bases: Instrument [ WaveformGeneratorConfig ] Provides a high-level Python interface for controlling Keysight EDU33210 Series Trueform Arbitrary Waveform Generators via SCPI commands. Initializes the WaveformGenerator instance. Source code in pytestlab/instruments/WaveformGenerator.py def __init__(self, config: WaveformGeneratorConfig, debug_mode: bool = False, **kwargs: Any) -> None: \"\"\" Initializes the WaveformGenerator instance. \"\"\" super().__init__(config=config, debug_mode=debug_mode, **kwargs) # Pass kwargs to base # self.config is already set by base Instrument's __init__ due to Generic type # Determine channel count from the length of the channels list in the config if hasattr(self.config, 'channels') and isinstance(self.config.channels, list): self._channel_count = len(self.config.channels) else: # This case should ideally be caught by Pydantic validation of WaveformGeneratorConfig self._logger.warning(\"config.channels is not a list. Defaulting channel count to 0.\") self._channel_count = 0 if self._channel_count <= 0: self._logger.warning(f\"Channel count determined as {self._channel_count}. Check instrument configuration.\") # Consider if raising an error is more appropriate if channel_count is essential and expected to be > 0 # For now, logging a warning to allow flexibility if some AWGs might be configured with 0 channels initially. self._logger.debug(f\"Detected {self._channel_count} channels from configuration.\") Attributes channel_count property Returns the number of output channels supported by this instrument, based on configuration. config instance-attribute model_config = {'arbitrary_types_allowed': True} class-attribute instance-attribute Functions apply_waveform_settings(channel, function_type, frequency=OutputLoadImpedance.DEFAULT, amplitude=OutputLoadImpedance.DEFAULT, offset=OutputLoadImpedance.DEFAULT) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def apply_waveform_settings(self, channel: Union[int, str], function_type: Union[WaveformType, str], frequency: Union[float, OutputLoadImpedance, str] = OutputLoadImpedance.DEFAULT, amplitude: Union[float, OutputLoadImpedance, str] = OutputLoadImpedance.DEFAULT, offset: Union[float, OutputLoadImpedance, str] = OutputLoadImpedance.DEFAULT) -> None: ch = self._validate_channel(channel) scpi_short_name = self._get_scpi_function_name(function_type) apply_suffix_map: Dict[str, str] = { WaveformType.SINE.value: \"SINusoid\", WaveformType.SQUARE.value: \"SQUare\", WaveformType.RAMP.value: \"RAMP\", WaveformType.PULSE.value: \"PULSe\", WaveformType.NOISE.value: \"NOISe\", WaveformType.ARB.value: \"ARBitrary\", WaveformType.DC.value: \"DC\",} if scpi_short_name == \"TRI\" and \"TRI\" not in apply_suffix_map: apply_suffix_map[\"TRI\"] = \"TRIangle\" apply_suffix = apply_suffix_map.get(scpi_short_name) if not apply_suffix: if scpi_short_name in apply_suffix_map: apply_suffix = apply_suffix_map[scpi_short_name] else: raise InstrumentParameterError( parameter=\"function_type\", value=function_type, message=f\"Waveform function (SCPI: {scpi_short_name}) not supported by APPLy.\", ) params: List[str] = [self._format_value_min_max_def(frequency), self._format_value_min_max_def(amplitude), self._format_value_min_max_def(offset)] param_str = \",\".join(params) cmd = f\"SOUR{ch}:APPLy:{apply_suffix} {param_str}\" await self._send_command(cmd) self._logger.debug(f\"Channel {ch}: Applied {apply_suffix} with params: Freq/SR={frequency}, Ampl={amplitude}, Offs={offset}\") await self._error_check() channel(ch_num) Returns a facade for interacting with a specific channel. PARAMETER DESCRIPTION ch_num The channel number (1-based) or string identifier (e.g. \"CH1\"). TYPE: Union [ int , str ] RETURNS DESCRIPTION WGChannelFacade A facade object for the specified channel. TYPE: WGChannelFacade RAISES DESCRIPTION InstrumentParameterError If channel number is invalid. Source code in pytestlab/instruments/WaveformGenerator.py @validate_call def channel(self, ch_num: Union[int,str]) -> WGChannelFacade: \"\"\" Returns a facade for interacting with a specific channel. Args: ch_num (Union[int,str]): The channel number (1-based) or string identifier (e.g. \"CH1\"). Returns: WGChannelFacade: A facade object for the specified channel. Raises: InstrumentParameterError: If channel number is invalid. \"\"\" validated_ch_num = self._validate_channel(ch_num) # _validate_channel returns int return WGChannelFacade(self, validated_ch_num) clear_volatile_arbitrary_waveforms(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def clear_volatile_arbitrary_waveforms(self, channel: Union[int, str]) -> None: ch = self._validate_channel(channel) await self._send_command(f\"SOUR{ch}:DATA:VOLatile:CLEar\") self._logger.debug(f\"Channel {ch}: Cleared volatile arbitrary waveform memory.\") await self._error_check() delete_file_or_folder(path) async Source code in pytestlab/instruments/WaveformGenerator.py async def delete_file_or_folder(self, path: str) -> None: if not path: raise InstrumentParameterError( parameter=\"path\", message=\"Path cannot be empty for deletion.\" ) path_scpi = f'\"{path}\"' cmd = f\"MMEMory:DELete {path_scpi}\" try: await self._send_command(cmd) self._logger.log(f\"Attempted to delete file/folder: '{path}' using MMEM:DELete\") await self._error_check() except InstrumentCommunicationError as e: code, msg = await self.get_error() if code != 0: if \"Directory not empty\" in msg or \"folder\" in msg.lower(): raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to delete '{path}'. Non-empty folder? Inst Err {code}: {msg}\", ) from e else: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to delete '{path}'. Inst Err {code}: {msg}\", ) from e else: raise e download_arbitrary_waveform_data(channel, arb_name, data_points, data_type='DAC', use_binary=True, is_dual_channel_data=False, dual_data_format=None) async Source code in pytestlab/instruments/WaveformGenerator.py async def download_arbitrary_waveform_data(self, channel: Union[int, str], arb_name: str, data_points: Union[List[int], List[float], np.ndarray], data_type: str = \"DAC\", use_binary: bool = True, is_dual_channel_data: bool = False, dual_data_format: Optional[str] = None) -> None: if use_binary: await self.download_arbitrary_waveform_data_binary(channel, arb_name, data_points, data_type, is_dual_channel_data=is_dual_channel_data, dual_data_format=dual_data_format) else: await self.download_arbitrary_waveform_data_csv(channel, arb_name, data_points, data_type) download_arbitrary_waveform_data_binary(channel, arb_name, data_points, data_type='DAC', is_dual_channel_data=False, dual_data_format=None) async Source code in pytestlab/instruments/WaveformGenerator.py async def download_arbitrary_waveform_data_binary(self, channel: Union[int, str], arb_name: str, data_points: Union[List[int], List[float], np.ndarray], data_type: str = \"DAC\", is_dual_channel_data: bool = False, dual_data_format: Optional[str] = None) -> None: ch = self._validate_channel(channel) if not re.match(r\"^[a-zA-Z0-9_]{1,12}$\", arb_name): raise InstrumentParameterError( parameter=\"arb_name\", value=arb_name, message=\"Arbitrary waveform name is invalid.\", ) data_type_upper = data_type.upper().strip() if data_type_upper not in [\"DAC\", \"NORM\"]: raise InstrumentParameterError( parameter=\"data_type\", value=data_type, valid_range=[\"DAC\", \"NORM\"], message=\"Invalid data_type.\", ) np_data = np.asarray(data_points) if np_data.ndim != 1 or np_data.size == 0: raise InstrumentParameterError( parameter=\"data_points\", message=\"data_points must be a non-empty 1D sequence.\" ) num_points_total = np_data.size num_points_per_channel = num_points_total arb_cmd_node = \"ARBitrary\" if is_dual_channel_data: if self.channel_count < 2: raise InstrumentConfigurationError( self.config.model, \"Dual channel download requires 2-channel instrument.\", ) arb_cmd_node = \"ARBitrary2\" if num_points_total % 2 != 0: raise InstrumentParameterError( parameter=\"data_points\", message=\"Total data_points must be even for dual channel.\", ) num_points_per_channel = num_points_total // 2 if dual_data_format: fmt_upper = dual_data_format.upper().strip() if fmt_upper not in [\"AABB\", \"ABAB\"]: raise InstrumentParameterError( parameter=\"dual_data_format\", value=dual_data_format, valid_range=[\"AABB\", \"ABAB\"], message=\"Invalid dual_data_format.\", ) await self._send_command(f\"SOUR{ch}:DATA:{arb_cmd_node}:FORMat {fmt_upper}\") await self._error_check() self._logger.debug(f\"Channel {ch}: Dual arb data format set to {fmt_upper}\") binary_data: bytes scpi_suffix: str transfer_type_log_msg: str = \"Binary Block\" if data_type_upper == \"DAC\": scpi_suffix = \":DAC\" if not np.issubdtype(np_data.dtype, np.integer): self._logger.warning(\"Warning: DAC data not integer, converting to int16.\") try: np_data = np_data.astype(np.int16) except ValueError as e: raise InstrumentParameterError( parameter=\"data_points\", message=\"Cannot convert DAC data to int16.\", ) from e dac_min, dac_max = getattr(self.config.waveforms, 'arbitrary_dac_range', (-32768, 32767)) if np.any(np_data < dac_min) or np.any(np_data > dac_max): raise InstrumentParameterError( parameter=\"data_points\", message=f\"DAC data out of range [{dac_min}, {dac_max}].\", ) binary_data = np_data.astype('<h').tobytes() else: # NORM scpi_suffix = \"\" if not np.issubdtype(np_data.dtype, np.floating): self._logger.warning(\"Warning: Normalized data not float, converting to float32.\") try: np_data = np_data.astype(np.float32) except ValueError as e: raise InstrumentParameterError( parameter=\"data_points\", message=\"Cannot convert Normalized data to float32.\", ) from e norm_min, norm_max = -1.0, 1.0 tolerance = 1e-6 if np.any(np_data < norm_min - tolerance) or np.any( np_data > norm_max + tolerance ): raise InstrumentParameterError( parameter=\"data_points\", message=f\"Normalized data out of range [{norm_min}, {norm_max}].\", ) np_data = np.clip(np_data, norm_min, norm_max) binary_data = np_data.astype('<f').tobytes() cmd_prefix = f\"SOUR{ch}:DATA:{arb_cmd_node}{scpi_suffix} {arb_name},\" try: await self._write_binary(cmd_prefix, binary_data) # Assumed async transfer_type_log_msg = \"IEEE 488.2 Binary Block via _write_binary\" self._logger.debug(f\"Channel {ch}: Downloaded arb '{arb_name}' via {transfer_type_log_msg} ({num_points_per_channel} pts/ch, {len(binary_data)} bytes, type: {data_type_upper})\") await self._error_check() except InstrumentCommunicationError as e: self._logger.error(f\"Error during {transfer_type_log_msg} arb download for '{arb_name}'.\") code, msg = await self.get_error() if code == 786: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd_prefix, message=f\"Arb Name Conflict (786) for '{arb_name}'.\", ) from e elif code == 781: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd_prefix, message=f\"Out of Memory (781) for '{arb_name}'.\", ) from e elif code == -113: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd_prefix, message=f\"SCPI Syntax Error (-113) for '{arb_name}'.\", ) from e elif code != 0: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd_prefix, message=f\"Arb download for '{arb_name}' failed. Inst Err {code}: {msg}\", ) from e else: raise e except Exception as e: self._logger.error(f\"Unexpected error during binary arb download for '{arb_name}': {e}\") raise InstrumentCommunicationError( instrument=self.config.model, command=cmd_prefix, message=f\"Unexpected failure downloading arb '{arb_name}'\", ) from e download_arbitrary_waveform_data_csv(channel, arb_name, data_points, data_type='DAC') async Source code in pytestlab/instruments/WaveformGenerator.py async def download_arbitrary_waveform_data_csv(self, channel: Union[int, str], arb_name: str, data_points: Union[List[int], List[float], np.ndarray], data_type: str = \"DAC\") -> None: ch = self._validate_channel(channel) if not re.match(r\"^[a-zA-Z0-9_]{1,12}$\", arb_name): raise InstrumentParameterError( parameter=\"arb_name\", value=arb_name, message=\"Arbitrary waveform name is invalid.\", ) data_type_upper = data_type.upper().strip() if data_type_upper not in [\"DAC\", \"NORM\"]: raise InstrumentParameterError( parameter=\"data_type\", value=data_type, valid_range=[\"DAC\", \"NORM\"], message=\"Invalid data_type.\", ) np_data = np.asarray(data_points) if np_data.ndim != 1 or np_data.size == 0: raise InstrumentParameterError( parameter=\"data_points\", message=\"data_points must be a non-empty 1D sequence.\" ) if 0 <= (ch - 1) < len(self.config.channels): channel_conf = self.config.channels[ch-1] if hasattr(channel_conf, 'arbitrary') and hasattr(channel_conf.arbitrary, 'max_points') and np_data.size > channel_conf.arbitrary.max_points: self._logger.warning(f\"Number of data points ({np_data.size}) exceeds configured max_points ({channel_conf.arbitrary.max_points}) for CH{ch}.\") formatted_data: str scpi_suffix: str if data_type_upper == \"DAC\": if not np.issubdtype(np_data.dtype, np.integer): self._logger.warning(\"DAC data not integer, converting to int16.\") try: np_data = np_data.astype(np.int16) except ValueError as e: raise InstrumentParameterError( parameter=\"data_points\", message=\"Cannot convert DAC data to int16.\", ) from e dac_min, dac_max = getattr(self.config.waveforms, 'arbitrary_dac_range', (-32768, 32767)) if np.any(np_data < dac_min) or np.any(np_data > dac_max): raise InstrumentParameterError( parameter=\"data_points\", message=f\"DAC data out of range [{dac_min}, {dac_max}].\", ) formatted_data = ','.join(map(str, np_data)) scpi_suffix = \":DAC\" else: # NORM if not np.issubdtype(np_data.dtype, np.floating): self._logger.warning(\"Normalized data not float, converting to float32.\") try: np_data = np_data.astype(np.float32) except ValueError as e: raise InstrumentParameterError( parameter=\"data_points\", message=\"Cannot convert Normalized data to floats.\", ) from e norm_min, norm_max = -1.0, 1.0 tolerance = 1e-9 if np.any(np_data < norm_min - tolerance) or np.any( np_data > norm_max + tolerance ): raise InstrumentParameterError( parameter=\"data_points\", message=f\"Normalized data out of range [{norm_min}, {norm_max}].\", ) np_data = np.clip(np_data, norm_min, norm_max) formatted_data = ','.join(map(lambda x: f\"{x:.8G}\", np_data)) scpi_suffix = \"\" cmd = f\"SOUR{ch}:DATA:ARBitrary{scpi_suffix} {arb_name},{formatted_data}\" max_cmd_len = getattr(self.config, 'max_scpi_command_length', 10000) if len(cmd) > max_cmd_len: self._logger.warning(f\"SCPI command length ({len(cmd)}) large. Consider binary transfer.\") try: await self._send_command(cmd) self._logger.debug(f\"Channel {ch}: Downloaded arb '{arb_name}' via CSV ({np_data.size} points, type: {data_type_upper})\") await self._error_check() except InstrumentCommunicationError as e: self._logger.error(f\"Error during CSV arb download for '{arb_name}'.\") code, msg = await self.get_error() if code == -113: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"SCPI Syntax Error (-113) for '{arb_name}'.\", ) from e elif code == 786: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Arb Name Conflict (786) for '{arb_name}'.\", ) from e elif code == 781: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Out of Memory (781) for '{arb_name}'.\", ) from e elif code == -102: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"SCPI Syntax Error (-102) for '{arb_name}'.\", ) from e elif code != 0: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Arb download for '{arb_name}' failed. Inst Err {code}: {msg}\", ) from e else: raise e enable_burst(channel, state) async Source code in pytestlab/instruments/WaveformGenerator.py async def enable_burst(self, channel: Union[int, str], state: bool) -> None: ch = self._validate_channel(channel) cmd_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value await self._send_command(f\"SOUR{ch}:BURSt:STATe {cmd_state}\") self._logger.log(f\"Channel {ch}: Burst state set to {cmd_state}\") await self._error_check() enable_modulation(channel, mod_type, state) async Source code in pytestlab/instruments/WaveformGenerator.py async def enable_modulation(self, channel: Union[int, str], mod_type: str, state: bool) -> None: ch = self._validate_channel(channel) mod_upper = mod_type.upper().strip() valid_mods = {\"AM\", \"FM\", \"PM\", \"PWM\", \"FSK\", \"BPSK\", \"SUM\"} if mod_upper not in valid_mods: raise InstrumentParameterError( parameter=\"mod_type\", value=mod_type, valid_range=valid_mods, message=\"Invalid modulation type.\", ) cmd_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value await self._send_command(f\"SOUR{ch}:{mod_upper}:STATe {cmd_state}\") self._logger.log(f\"Channel {ch}: {mod_upper} modulation state set to {cmd_state}\") await self._error_check() enable_sweep(channel, state) async Source code in pytestlab/instruments/WaveformGenerator.py async def enable_sweep(self, channel: Union[int, str], state: bool) -> None: ch = self._validate_channel(channel) cmd_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value await self._send_command(f\"SOUR{ch}:SWEep:STATe {cmd_state}\") self._logger.log(f\"Channel {ch}: Sweep state set to {cmd_state}\") await self._error_check() from_config(config, debug_mode=False, **kwargs) classmethod Source code in pytestlab/instruments/WaveformGenerator.py @classmethod @validate_call def from_config(cls: Type['WaveformGenerator'], config: WaveformGeneratorConfig, debug_mode: bool = False, **kwargs: Any) -> 'WaveformGenerator': return cls(config=config, debug_mode=debug_mode, **kwargs) get_amplitude(channel, query_type=None) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_amplitude(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> float: ch = self._validate_channel(channel) cmd = f\"SOUR{ch}:VOLTage?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} limit)\" response = (await self._query(cmd)).strip() try: amp = float(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse amplitude float from response: '{response}'\", ) unit = await self.get_voltage_unit(ch) self._logger.debug(f\"Channel {ch}: Amplitude{type_str} is {amp} {unit.value}\") return amp get_angle_unit() async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_angle_unit(self) -> str: response = (await self._query(\"UNIT:ANGLe?\")).strip().upper() if response not in [\"DEG\", \"RAD\", \"SEC\"]: self._logger.warning(f\"Warning: Unexpected angle unit response '{response}'.\") self._logger.debug(f\"Current global angle unit is {response}\") return response get_arbitrary_waveform_points(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_arbitrary_waveform_points(self, channel: Union[int, str]) -> int: ch = self._validate_channel(channel) try: response = (await self._query(f\"SOUR{ch}:FUNC:ARB:POINts?\")).strip() points = int(response) self._logger.debug(f\"Channel {ch}: Currently selected arbitrary waveform has {points} points\") return points except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=f\"SOUR{ch}:FUNC:ARB:POINts?\", message=f\"Failed to parse integer points from response: '{response}'\", ) except InstrumentCommunicationError as e: code, msg = await self.get_error() if code != 0: self._logger.warning(f\"Query SOUR{ch}:FUNC:ARB:POINts? failed. Inst Err {code}: {msg}. Returning 0.\") return 0 else: raise e get_arbitrary_waveform_sample_rate(channel, query_type=None) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_arbitrary_waveform_sample_rate(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> float: ch = self._validate_channel(channel) cmd = f\"SOUR{ch}:FUNC:ARB:SRATe?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} limit)\" response = (await self._query(cmd)).strip() try: sr = float(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse sample rate float from response: '{response}'\", ) self._logger.debug(f\"Channel {ch}: Arbitrary waveform sample rate{type_str} is {sr} Sa/s\") return sr get_channel_configuration_summary(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_channel_configuration_summary(self, channel: Union[int, str]) -> str: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:APPLy?\")).strip() self._logger.debug(f\"Channel {ch}: Configuration summary (APPLy?) returned: {response}\") if response.startswith('\"') and response.endswith('\"') and response.count('\"') == 2 : return response[1:-1] return response get_complete_config(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_complete_config(self, channel: Union[int, str]) -> WaveformConfigResult: ch_num = self._validate_channel(channel) self._logger.debug(f\"Getting complete configuration snapshot for channel {ch_num}...\") func_scpi_str = await self.get_function(ch_num) freq = await self.get_frequency(ch_num) ampl = await self.get_amplitude(ch_num) offs = await self.get_offset(ch_num) output_state_enum = await self.get_output_state(ch_num) output_state_bool = True if output_state_enum == SCPIOnOff.ON else False load_impedance_val = await self.get_output_load_impedance(ch_num) load_impedance_str: Union[str, float] if isinstance(load_impedance_val, OutputLoadImpedance) and load_impedance_val == OutputLoadImpedance.INFINITY: load_impedance_str = \"INFinity\" else: load_impedance_str = float(load_impedance_val) voltage_unit_enum = await self.get_voltage_unit(ch_num) voltage_unit_str = voltage_unit_enum.value phase: Optional[float] = None if func_scpi_str not in [WaveformType.DC.value, WaveformType.NOISE.value]: try: phase = await self.get_phase(ch_num) except InstrumentCommunicationError as e: self._log(f\"Note: Phase query failed for CH{ch_num} (function: {func_scpi_str}): {e}\", level=\"info\") symmetry: Optional[float] = None duty_cycle: Optional[float] = None try: if func_scpi_str == WaveformType.RAMP.value: symmetry = await self.get_ramp_symmetry(ch_num) elif func_scpi_str == WaveformType.SQUARE.value: duty_cycle = await self.get_square_duty_cycle(ch_num) elif func_scpi_str == WaveformType.PULSE.value: duty_cycle = await self.get_pulse_duty_cycle(ch_num) except InstrumentCommunicationError as e: self._log(f\"Note: Query failed for function-specific parameter for CH{ch_num} func {func_scpi_str}: {e}\", level=\"info\") return WaveformConfigResult(channel=ch_num, function=func_scpi_str, frequency=freq, amplitude=ampl, offset=offs, phase=phase, symmetry=symmetry, duty_cycle=duty_cycle, output_state=output_state_bool, load_impedance=load_impedance_str, voltage_unit=voltage_unit_str) get_free_volatile_arbitrary_memory(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_free_volatile_arbitrary_memory(self, channel: Union[int, str]) -> int: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:DATA:VOLatile:FREE?\")).strip() try: free_points = int(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=f\"SOUR{ch}:DATA:VOLatile:FREE?\", message=f\"Unexpected non-integer response: {response}\", ) self._logger.debug(f\"Channel {ch}: Free volatile arbitrary memory: {free_points} points\") return free_points get_frequency(channel, query_type=None) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_frequency(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> float: ch = self._validate_channel(channel) cmd = f\"SOUR{ch}:FREQ?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} limit)\" response = (await self._query(cmd)).strip() try: freq = float(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse frequency float from response: '{response}'\", ) self._logger.debug(f\"Channel {ch}: Frequency{type_str} is {freq} Hz\") return freq get_function(channel) async Source code in pytestlab/instruments/WaveformGenerator.py async def get_function(self, channel: Union[int, str]) -> str: ch = self._validate_channel(channel) scpi_func = (await self._query(f\"SOUR{ch}:FUNC?\")).strip() self._logger.debug(f\"Channel {ch}: Current function is {scpi_func}\") return scpi_func get_offset(channel, query_type=None) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_offset(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> float: ch = self._validate_channel(channel) cmd = f\"SOUR{ch}:VOLTage:OFFSet?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} limit)\" response = (await self._query(cmd)).strip() try: offs = float(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse offset float from response: '{response}'\", ) self._logger.debug(f\"Channel {ch}: Offset{type_str} is {offs} V\") return offs get_output_load_impedance(channel, query_type=None) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_output_load_impedance(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> Union[float, OutputLoadImpedance]: ch = self._validate_channel(channel) cmd = f\"OUTPut{ch}:LOAD?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} limit)\" response = (await self._query(cmd)).strip() self._logger.debug(f\"Channel {ch}: Raw impedance response{type_str} is '{response}'\") try: numeric_response = float(response) if abs(numeric_response - 9.9e37) < 1e30: return OutputLoadImpedance.INFINITY else: return numeric_response except ValueError: if response.upper() == OutputLoadImpedance.INFINITY.value.upper(): return OutputLoadImpedance.INFINITY for enum_member in OutputLoadImpedance: if response.upper() == enum_member.value.upper(): return enum_member raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Could not parse impedance response: '{response}'\", ) get_output_polarity(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_output_polarity(self, channel: Union[int, str]) -> OutputPolarity: ch = self._validate_channel(channel) response = (await self._query(f\"OUTPut{ch}:POLarity?\")).strip().upper() try: return OutputPolarity(response) except ValueError: if response == \"NORM\": return OutputPolarity.NORMAL if response == \"INV\": return OutputPolarity.INVERTED raise InstrumentCommunicationError( instrument=self.config.model, command=f\"OUTPut{ch}:POLarity?\", message=f\"Unexpected polarity response from instrument: {response}\", ) get_output_state(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_output_state(self, channel: Union[int, str]) -> SCPIOnOff: ch = self._validate_channel(channel) response = (await self._query(f\"OUTPut{ch}:STATe?\")).strip() state = SCPIOnOff.ON if response == \"1\" else SCPIOnOff.OFF self._logger.debug(f\"Channel {ch}: Output state is {state.value}\") return state get_phase(channel, query_type=None) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_phase(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> float: ch = self._validate_channel(channel) cmd = f\"SOUR{ch}:PHASe?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} limit)\" response = (await self._query(cmd)).strip() try: ph = float(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse phase float from response: '{response}'\", ) unit = await self.get_angle_unit() self._logger.debug(f\"Channel {ch}: Phase{type_str} is {ph} {unit}\") return ph get_phase_unlock_error_state() async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_phase_unlock_error_state(self) -> SCPIOnOff: response = (await self._query(\"SOUR1:PHASe:UNLock:ERRor:STATe?\")).strip() state = SCPIOnOff.ON if response == \"1\" else SCPIOnOff.OFF self._logger.debug(f\"Phase unlock error state is {state.value}\") return state get_pulse_duty_cycle(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_pulse_duty_cycle(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:PULS:DCYCle?\")).strip() return float(response) get_pulse_hold_mode(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_pulse_hold_mode(self, channel: Union[int, str]) -> str: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:PULS:HOLD?\")).strip().upper() return response get_pulse_period(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_pulse_period(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:PULS:PERiod?\")).strip() return float(response) get_pulse_transition_both(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_pulse_transition_both(self, channel: Union[int, str]) -> float: warnings.warn(\"Querying PULS:TRAN:BOTH; specific query may not exist or might return leading edge time.\", UserWarning, stacklevel=2) return await self.get_pulse_transition_leading(channel) get_pulse_transition_leading(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_pulse_transition_leading(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:PULS:TRANsition:LEADing?\")).strip() return float(response) get_pulse_transition_trailing(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_pulse_transition_trailing(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:PULS:TRANsition:TRAiling?\")).strip() return float(response) get_pulse_width(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_pulse_width(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:PULS:WIDTh?\")).strip() return float(response) get_ramp_symmetry(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_ramp_symmetry(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:RAMP:SYMMetry?\")).strip() return float(response) get_selected_arbitrary_waveform_name(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_selected_arbitrary_waveform_name(self, channel: Union[int, str]) -> str: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:ARBitrary?\")).strip() if response.startswith('\"') and response.endswith('\"'): response = response[1:-1] self._logger.debug(f\"Channel {ch}: Currently selected arbitrary waveform is '{response}'\") return response get_square_duty_cycle(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_square_duty_cycle(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:SQUare:DCYCle?\")).strip() return float(response) get_square_period(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_square_period(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:SQUare:PERiod?\")).strip() return float(response) get_sync_output_mode(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_sync_output_mode(self, channel: Union[int, str]) -> SyncMode: ch = self._validate_channel(channel) response = (await self._query(f\"OUTPut{ch}:SYNC:MODE?\")).strip().upper() try: return SyncMode(response) except ValueError: if response == \"NORM\": return SyncMode.NORMAL if response == \"CARR\": return SyncMode.CARRIER if response == \"MARK\": return SyncMode.MARKER raise InstrumentCommunicationError( instrument=self.config.model, command=f\"OUTPut{ch}:SYNC:MODE?\", message=f\"Unexpected sync mode response from instrument: {response}\", ) get_sync_output_polarity(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_sync_output_polarity(self, channel: Union[int, str]) -> OutputPolarity: ch = self._validate_channel(channel) response = (await self._query(f\"OUTPut{ch}:SYNC:POLarity?\")).strip().upper() try: return OutputPolarity(response) except ValueError: if response == \"NORM\": return OutputPolarity.NORMAL if response == \"INV\": return OutputPolarity.INVERTED raise InstrumentCommunicationError( instrument=self.config.model, command=f\"OUTPut{ch}:SYNC:POLarity?\", message=f\"Unexpected sync polarity response from instrument: {response}\", ) get_sync_output_source() async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_sync_output_source(self) -> int: response = (await self._query(\"OUTPut:SYNC:SOURce?\")).strip().upper() match = re.match(r\"CH(\\d+)\", response) if match: src_ch = int(match.group(1)) self._logger.debug(f\"Sync output source is CH{src_ch}\") return src_ch else: raise InstrumentCommunicationError( instrument=self.config.model, command=\"OUTPut:SYNC:SOURce?\", message=f\"Unexpected response querying Sync source: '{response}'\", ) get_sync_output_state() async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_sync_output_state(self) -> SCPIOnOff: response = (await self._query(\"OUTPut:SYNC:STATe?\")).strip() state = SCPIOnOff.ON if response == \"1\" else SCPIOnOff.OFF self._logger.debug(f\"Sync output state is {state.value}\") return state get_voltage_autorange_state(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_voltage_autorange_state(self, channel: Union[int, str]) -> SCPIOnOff: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:VOLTage:RANGe:AUTO?\")).strip() state = SCPIOnOff.ON if response == \"1\" else SCPIOnOff.OFF self._logger.debug(f\"Channel {ch}: Voltage autorange state is {state.value} (Query response: {response})\") return state get_voltage_limit_high(channel, query_type=None) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_voltage_limit_high(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> float: ch = self._validate_channel(channel) cmd = f\"SOUR{ch}:VOLTage:LIMit:HIGH?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} possible)\" response = (await self._query(cmd)).strip() try: val = float(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse high limit float from response: '{response}'\", ) self._logger.debug(f\"Channel {ch}: Voltage high limit{type_str} is {val} V\") return val get_voltage_limit_low(channel, query_type=None) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_voltage_limit_low(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> float: ch = self._validate_channel(channel) cmd = f\"SOUR{ch}:VOLTage:LIMit:LOW?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} possible)\" response = (await self._query(cmd)).strip() try: val = float(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse low limit float from response: '{response}'\", ) self._logger.debug(f\"Channel {ch}: Voltage low limit{type_str} is {val} V\") return val get_voltage_limits_state(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_voltage_limits_state(self, channel: Union[int, str]) -> SCPIOnOff: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:VOLTage:LIMit:STATe?\")).strip() state = SCPIOnOff.ON if response == \"1\" else SCPIOnOff.OFF self._logger.debug(f\"Channel {ch}: Voltage limits state is {state.value}\") return state get_voltage_unit(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_voltage_unit(self, channel: Union[int, str]) -> VoltageUnit: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:VOLTage:UNIT?\")).strip().upper() try: return VoltageUnit(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=f\"SOUR{ch}:VOLTage:UNIT?\", message=f\"Unexpected voltage unit response from instrument: {response}\", ) list_directory(path='') async Source code in pytestlab/instruments/WaveformGenerator.py async def list_directory(self, path: str = \"\") -> FileSystemInfo: path_scpi = f' \"{path}\"' if path else \"\" cmd = f\"MMEMory:CATalog:ALL?{path_scpi}\" response = (await self._query(cmd)).strip() try: parts = response.split(',', 2) if len(parts) < 2: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Unexpected response format from MMEM:CAT?: {response}\", ) bytes_used = int(parts[0]) bytes_free = int(parts[1]) info = FileSystemInfo(bytes_used=bytes_used, bytes_free=bytes_free) if len(parts) > 2 and parts[2]: file_pattern = r'\"([^\"]+),([^\"]*),(\\d+)\"' listings = re.findall(file_pattern, parts[2]) for name, ftype, size_str in listings: file_type = ftype if ftype else 'FILE' try: size = int(size_str) except ValueError: self._log(f\"Warning: Could not parse size '{size_str}' for file '{name}'.\", level=\"warning\") continue info.files.append({'name': name, 'type': file_type.upper(), 'size': size}) self._logger.log(f\"Directory listing for '{path or 'current dir'}': Used={info.bytes_used}, Free={info.bytes_free}, Items={len(info.files)}\") return info except (ValueError, IndexError) as e: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse MMEM:CAT? response: '{response}'. Error: {e}\", ) from e select_arbitrary_waveform(channel, arb_name) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def select_arbitrary_waveform(self, channel: Union[int, str], arb_name: str) -> None: ch = self._validate_channel(channel) if not arb_name: raise InstrumentParameterError( parameter=\"arb_name\", message=\"Arbitrary waveform name cannot be empty.\" ) if '\"' in arb_name or \"'\" in arb_name: raise InstrumentParameterError( parameter=\"arb_name\", value=arb_name, message=\"Arbitrary waveform name cannot contain quotes.\", ) quoted_arb_name = f'\"{arb_name}\"' await self._send_command(f\"SOUR{ch}:FUNC:ARBitrary {quoted_arb_name}\") self._logger.debug(f\"Channel {ch}: Active arbitrary waveform selection set to '{arb_name}'\") await self._error_check() set_am_depth(channel, depth_percent) async Source code in pytestlab/instruments/WaveformGenerator.py async def set_am_depth(self, channel: Union[int, str], depth_percent: Union[float, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(depth_percent) if isinstance(depth_percent, (int, float)) and not (0 <= float(depth_percent) <= 120): self._log(f\"Warning: AM depth {depth_percent}% is outside typical 0-120 range.\", level=\"warning\") await self._send_command(f\"SOUR{ch}:AM:DEPTh {cmd_val}\") self._logger.log(f\"Channel {ch}: AM depth set to {depth_percent}%\") await self._error_check() set_am_source(channel, source) async Source code in pytestlab/instruments/WaveformGenerator.py async def set_am_source(self, channel: Union[int, str], source: ModulationSource) -> None: ch = self._validate_channel(channel) cmd_src = source.value if cmd_src == f\"CH{ch}\": raise InstrumentParameterError( parameter=\"source\", value=source, message=f\"Channel {ch} cannot be its own AM source.\", ) if cmd_src == ModulationSource.CH2.value and self.channel_count < 2: raise InstrumentParameterError( parameter=\"source\", value=source, message=\"CH2 source invalid for 1-channel instrument.\", ) await self._send_command(f\"SOUR{ch}:AM:SOURce {cmd_src}\") self._logger.log(f\"Channel {ch}: AM source set to {cmd_src}\") await self._error_check() set_amplitude(channel, amplitude) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_amplitude(self, channel: Union[int, str], amplitude: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) amp_cmd_val = self._format_value_min_max_def(amplitude) if isinstance(amplitude, (int, float)): if 0 <= (ch - 1) < len(self.config.channels): channel_config_model = self.config.channels[ch-1] channel_config_model.amplitude.assert_in_range(float(amplitude), name=f\"Amplitude for CH{ch}\") await self._send_command(f\"SOUR{ch}:VOLTage {amp_cmd_val}\") unit = await self.get_voltage_unit(ch) self._logger.debug(f\"Channel {ch}: Amplitude set to {amplitude} (in current unit: {unit.value}, using SCPI value: {amp_cmd_val})\") await self._error_check() set_angle_unit(unit) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_angle_unit(self, unit: str) -> None: unit_upper = unit.upper().strip() valid_scpi_units = {\"DEGREE\", \"RADIAN\", \"SECOND\", \"DEG\", \"RAD\", \"SEC\"} map_to_scpi_preferred = {\"DEG\": \"DEGREE\", \"DEGREES\": \"DEGREE\", \"RAD\": \"RADIAN\", \"RADIANS\": \"RADIAN\", \"SEC\": \"SECOND\", \"SECONDS\": \"SECOND\"} scpi_to_send = map_to_scpi_preferred.get(unit_upper, unit_upper) if scpi_to_send not in valid_scpi_units and unit_upper not in valid_scpi_units : raise InstrumentParameterError( parameter=\"unit\", value=unit, valid_range=[\"DEGREE\", \"RADIAN\", \"SECONd\"], message=\"Invalid angle unit.\", ) await self._send_command(f\"UNIT:ANGLe {scpi_to_send}\") self._logger.debug(f\"Global angle unit set to {scpi_to_send}\") await self._error_check() set_arbitrary_waveform_sample_rate(channel, sample_rate) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_arbitrary_waveform_sample_rate(self, channel: Union[int, str], sample_rate: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(sample_rate) if isinstance(sample_rate, (int, float)): if 0 <= (ch - 1) < len(self.config.channels): channel_config_model = self.config.channels[ch-1] if hasattr(channel_config_model, 'arbitrary') and hasattr(channel_config_model.arbitrary, 'sampling_rate'): channel_config_model.arbitrary.sampling_rate.assert_in_range(float(sample_rate), name=f\"Arbitrary sample rate for CH{ch}\") await self._send_command(f\"SOUR{ch}:FUNC:ARB:SRATe {cmd_val}\") self._logger.debug(f\"Channel {ch}: Arbitrary waveform sample rate set to {sample_rate} Sa/s (using SCPI value: {cmd_val})\") await self._error_check() set_burst_cycles(channel, n_cycles) async Source code in pytestlab/instruments/WaveformGenerator.py async def set_burst_cycles(self, channel: Union[int, str], n_cycles: Union[int, str]) -> None: ch = self._validate_channel(channel) cmd_val: str log_val: Union[int, str] = n_cycles if isinstance(n_cycles, str): nc_upper = n_cycles.upper().strip() if nc_upper in {\"MIN\", \"MINIMUM\"}: cmd_val = OutputLoadImpedance.MINIMUM.value elif nc_upper in {\"MAX\", \"MAXIMUM\"}: cmd_val = OutputLoadImpedance.MAXIMUM.value elif nc_upper in {\"INF\", \"INFINITY\"}: cmd_val = \"INFinity\" else: raise InstrumentParameterError( parameter=\"n_cycles\", value=n_cycles, message=\"Invalid string for burst cycles.\", ) elif isinstance(n_cycles, int): if n_cycles < 1: raise InstrumentParameterError( parameter=\"n_cycles\", value=n_cycles, message=\"Burst cycle count must be positive.\", ) inst_max_cycles = 100_000_000 if n_cycles > inst_max_cycles: self._log(f\"Warning: Burst cycles {n_cycles} > typical max ({inst_max_cycles}).\", level=\"warning\") cmd_val = str(n_cycles) else: raise InstrumentParameterError( parameter=\"n_cycles\", value=n_cycles, message=f\"Invalid type '{type(n_cycles)}' for burst cycles.\", ) await self._send_command(f\"SOUR{ch}:BURSt:NCYCles {cmd_val}\") self._logger.log(f\"Channel {ch}: Burst cycles set to {log_val}\") await self._error_check() set_burst_mode(channel, mode) async Source code in pytestlab/instruments/WaveformGenerator.py async def set_burst_mode(self, channel: Union[int, str], mode: BurstMode) -> None: ch = self._validate_channel(channel) await self._send_command(f\"SOUR{ch}:BURSt:MODE {mode.value}\") self._logger.log(f\"Channel {ch}: Burst mode set to {mode.value}\") await self._error_check() set_burst_period(channel, period_sec) async Source code in pytestlab/instruments/WaveformGenerator.py async def set_burst_period(self, channel: Union[int, str], period_sec: Union[float, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(period_sec) await self._send_command(f\"SOUR{ch}:BURSt:INTernal:PERiod {cmd_val}\") self._logger.log(f\"Channel {ch}: Internal burst period set to {period_sec} s\") await self._error_check() set_fm_deviation(channel, deviation_hz) async Source code in pytestlab/instruments/WaveformGenerator.py async def set_fm_deviation(self, channel: Union[int, str], deviation_hz: Union[float, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(deviation_hz) await self._send_command(f\"SOUR{ch}:FM:DEViation {cmd_val}\") self._logger.log(f\"Channel {ch}: FM deviation set to {deviation_hz} Hz\") await self._error_check() set_frequency(channel, frequency) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_frequency(self, channel: Union[int, str], frequency: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) freq_cmd_val = self._format_value_min_max_def(frequency) if isinstance(frequency, (int, float)): if 0 <= (ch - 1) < len(self.config.channels): channel_config_model = self.config.channels[ch - 1] channel_config_model.frequency.assert_in_range(float(frequency), name=f\"Frequency for CH{ch}\") await self._send_command(f\"SOUR{ch}:FREQ {freq_cmd_val}\") self._logger.debug(f\"Channel {ch}: Frequency set to {frequency} Hz (using SCPI value: {freq_cmd_val})\") await self._error_check() set_function(channel, function_type, **kwargs) async Sets the primary waveform function and associated parameters for a channel. Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_function(self, channel: Union[int, str], function_type: Union[WaveformType, str], **kwargs: Any) -> None: \"\"\" Sets the primary waveform function and associated parameters for a channel. \"\"\" ch = self._validate_channel(channel) scpi_func_short = self._get_scpi_function_name(function_type) standard_params_set: Dict[str, bool] = {} # Assuming FUNC_ARB should be WaveformType.ARB.value if 'frequency' in kwargs and scpi_func_short != WaveformType.ARB.value: await self.set_frequency(ch, kwargs.pop('frequency')) standard_params_set['frequency'] = True if 'amplitude' in kwargs: await self.set_amplitude(ch, kwargs.pop('amplitude')) standard_params_set['amplitude'] = True if 'offset' in kwargs: await self.set_offset(ch, kwargs.pop('offset')) standard_params_set['offset'] = True await self._send_command(f\"SOUR{ch}:FUNC {scpi_func_short}\") self._logger.debug(f\"Channel {ch}: Function set to {function_type} (SCPI: {scpi_func_short})\") await self._error_check() if kwargs: # Ensure WAVEFORM_PARAM_COMMANDS keys are WaveformType enum members # And scpi_func_short is mapped to its corresponding WaveformType enum member if it's a string func_enum_key: Optional[WaveformType] = None if isinstance(function_type, WaveformType): func_enum_key = function_type elif isinstance(function_type, str): try: # First try to convert SCPI string directly to enum member func_enum_key = WaveformType(scpi_func_short) except ValueError: # If that fails, try to map profile config values to enum members scpi_to_enum_map = { \"SINUSOID\": WaveformType.SINE, \"SQUARE\": WaveformType.SQUARE, \"RAMP\": WaveformType.RAMP, \"PULSE\": WaveformType.PULSE, \"NOISE\": WaveformType.NOISE, \"DC\": WaveformType.DC, \"ARB\": WaveformType.ARB, \"ARBITRARY\": WaveformType.ARB, # Add enum values as fallback \"SIN\": WaveformType.SINE, \"SQU\": WaveformType.SQUARE, \"PULS\": WaveformType.PULSE, \"NOIS\": WaveformType.NOISE, } func_enum_key = scpi_to_enum_map.get(scpi_func_short.upper()) if func_enum_key is None: self._logger.warning(f\"SCPI function '{scpi_func_short}' not mappable to WaveformType enum for parameter lookup.\") param_cmds_for_func = WAVEFORM_PARAM_COMMANDS.get(func_enum_key) if func_enum_key else None if not param_cmds_for_func: self._logger.warning(f\"No specific parameters defined for function '{function_type}' (SCPI: {scpi_func_short}). \" f\"Ignoring remaining kwargs: {kwargs}\") if any(k not in standard_params_set for k in kwargs): raise InstrumentParameterError( message=f\"Unknown parameters {list(kwargs.keys())} passed for function {function_type}.\" ) return for param_name, value in kwargs.items(): if param_name in param_cmds_for_func: try: if param_name in [\"duty_cycle\", \"symmetry\"] and isinstance(value, (int, float)): if not (0 <= float(value) <= 100): self._logger.warning(f\"Parameter '{param_name}' value {value}% is outside the \" f\"typical 0-100 range. Instrument validation will apply.\") value_to_format = value if isinstance(value, (ArbFilterType, ArbAdvanceMode)): # Pass enum value for formatting value_to_format = value.value formatted_value = self._format_value_min_max_def(value_to_format) cmd_lambda = param_cmds_for_func[param_name] cmd = cmd_lambda(ch, formatted_value) await self._send_command(cmd) self._logger.debug(f\"Channel {ch}: Parameter '{param_name}' set to {value}\") await self._error_check() except InstrumentParameterError as ipe: raise InstrumentParameterError( parameter=param_name, value=value, message=f\"Invalid value for function '{function_type}'. Cause: {ipe}\", ) from ipe except InstrumentCommunicationError: raise except Exception as e: self._logger.error(f\"Error setting parameter '{param_name}' for function '{scpi_func_short}': {e}\") raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to set parameter {param_name}\", ) from e else: raise InstrumentParameterError( parameter=param_name, message=f\"Parameter is not supported for function '{function_type}' ({scpi_func_short}). Supported: {list(param_cmds_for_func.keys())}\", ) set_offset(channel, offset) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_offset(self, channel: Union[int, str], offset: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) offset_cmd_val = self._format_value_min_max_def(offset) await self._send_command(f\"SOUR{ch}:VOLTage:OFFSet {offset_cmd_val}\") self._logger.debug(f\"Channel {ch}: Offset set to {offset} V\") await self._error_check() set_output_load_impedance(channel, impedance) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_output_load_impedance(self, channel: Union[int, str], impedance: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) cmd_impedance = self._format_value_min_max_def(impedance) if isinstance(impedance, (int, float)): if 0 <= (ch - 1) < len(self.config.channels): channel_config_model = self.config.channels[ch-1] if hasattr(channel_config_model, 'output') and hasattr(channel_config_model.output, 'load_impedance'): channel_config_model.output.load_impedance.assert_in_range(float(impedance), name=f\"Load impedance for CH{ch}\") await self._send_command(f\"OUTPut{ch}:LOAD {cmd_impedance}\") self._logger.debug(f\"Channel {ch}: Output load impedance setting updated to {impedance} (using SCPI value: {cmd_impedance})\") await self._error_check() set_output_polarity(channel, polarity) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_output_polarity(self, channel: Union[int, str], polarity: OutputPolarity) -> None: ch = self._validate_channel(channel) await self._send_command(f\"OUTPut{ch}:POLarity {polarity.value}\") self._logger.debug(f\"Channel {ch}: Output polarity set to {polarity.value}\") await self._error_check() set_output_state(channel, state) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call # Duplicated @validate_call removed async def set_output_state(self, channel: Union[int, str], state: SCPIOnOff) -> None: ch = self._validate_channel(channel) await self._send_command(f\"OUTPut{ch}:STATe {state.value}\") self._logger.debug(f\"Channel {ch}: Output state set to {state.value}\") await self._error_check() set_phase(channel, phase) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_phase(self, channel: Union[int, str], phase: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) phase_cmd_val = self._format_value_min_max_def(phase) if isinstance(phase, (int, float)): if 0 <= (ch - 1) < len(self.config.channels): channel_config_model = self.config.channels[ch-1] channel_config_model.phase.assert_in_range(float(phase), name=f\"Phase for CH{ch}\") await self._send_command(f\"SOUR{ch}:PHASe {phase_cmd_val}\") unit = await self.get_angle_unit() self._logger.debug(f\"Channel {ch}: Phase set to {phase} (in current unit: {unit}, using SCPI value: {phase_cmd_val})\") await self._error_check() set_phase_reference(channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_phase_reference(self, channel: Union[int, str]) -> None: ch = self._validate_channel(channel) await self._send_command(f\"SOUR{ch}:PHASe:REFerence\") self._logger.debug(f\"Channel {ch}: Phase reference reset (current phase defined as 0).\") await self._error_check() set_phase_unlock_error_state(state) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_phase_unlock_error_state(self, state: SCPIOnOff) -> None: await self._send_command(f\"SOUR1:PHASe:UNLock:ERRor:STATe {state.value}\") self._logger.debug(f\"Phase unlock error state set to {state.value}\") await self._error_check() set_sweep_spacing(channel, spacing) async Source code in pytestlab/instruments/WaveformGenerator.py async def set_sweep_spacing(self, channel: Union[int, str], spacing: SweepSpacing) -> None: ch = self._validate_channel(channel) await self._send_command(f\"SOUR{ch}:SWEep:SPACing {spacing.value}\") self._logger.debug(f\"Channel {ch}: Sweep spacing set to {spacing.value}\") await self._error_check() set_sweep_start_frequency(channel, freq_hz) async Source code in pytestlab/instruments/WaveformGenerator.py async def set_sweep_start_frequency(self, channel: Union[int, str], freq_hz: Union[float, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(freq_hz) await self._send_command(f\"SOUR{ch}:FREQuency:STARt {cmd_val}\") self._logger.debug(f\"Channel {ch}: Sweep start frequency set to {freq_hz} Hz\") await self._error_check() set_sweep_stop_frequency(channel, freq_hz) async Source code in pytestlab/instruments/WaveformGenerator.py async def set_sweep_stop_frequency(self, channel: Union[int, str], freq_hz: Union[float, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(freq_hz) await self._send_command(f\"SOUR{ch}:FREQuency:STOP {cmd_val}\") self._logger.debug(f\"Channel {ch}: Sweep stop frequency set to {freq_hz} Hz\") await self._error_check() set_sweep_time(channel, sweep_time_sec) async Source code in pytestlab/instruments/WaveformGenerator.py async def set_sweep_time(self, channel: Union[int, str], sweep_time_sec: Union[float, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(sweep_time_sec) await self._send_command(f\"SOUR{ch}:SWEep:TIME {cmd_val}\") self._logger.log(f\"Channel {ch}: Sweep time set to {sweep_time_sec} s\") await self._error_check() set_sync_output_mode(channel, mode) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_sync_output_mode(self, channel: Union[int, str], mode: SyncMode) -> None: ch = self._validate_channel(channel) await self._send_command(f\"OUTPut{ch}:SYNC:MODE {mode.value}\") self._logger.debug(f\"Channel {ch}: Sync output mode set to {mode.value}\") await self._error_check() set_sync_output_polarity(channel, polarity) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_sync_output_polarity(self, channel: Union[int, str], polarity: OutputPolarity) -> None: ch = self._validate_channel(channel) await self._send_command(f\"OUTPut{ch}:SYNC:POLarity {polarity.value}\") self._logger.debug(f\"Channel {ch}: Sync output polarity set to {polarity.value}\") await self._error_check() set_sync_output_source(source_channel) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_sync_output_source(self, source_channel: int) -> None: ch_to_set = self._validate_channel(source_channel) await self._send_command(f\"OUTPut:SYNC:SOURce CH{ch_to_set}\") self._logger.debug(f\"Sync output source set to CH{ch_to_set}\") await self._error_check() set_sync_output_state(state) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_sync_output_state(self, state: SCPIOnOff) -> None: await self._send_command(f\"OUTPut:SYNC:STATe {state.value}\") self._logger.debug(f\"Sync output state set to {state.value}\") await self._error_check() set_trigger_slope(channel, slope) async Source code in pytestlab/instruments/WaveformGenerator.py async def set_trigger_slope(self, channel: Union[int, str], slope: TriggerSlope) -> None: ch = self._validate_channel(channel) await self._send_command(f\"TRIGger{ch}:SLOPe {slope.value}\") self._logger.log(f\"Channel {ch}: Trigger slope set to {slope.value}\") await self._error_check() set_trigger_source(channel, source) async Source code in pytestlab/instruments/WaveformGenerator.py async def set_trigger_source(self, channel: Union[int, str], source: TriggerSource) -> None: ch = self._validate_channel(channel) await self._send_command(f\"TRIGger{ch}:SOURce {source.value}\") self._logger.log(f\"Channel {ch}: Trigger source set to {source.value}\") await self._error_check() set_voltage_autorange_state(channel, state) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_voltage_autorange_state(self, channel: Union[int, str], state: SCPIOnOff) -> None: ch = self._validate_channel(channel) await self._send_command(f\"SOUR{ch}:VOLTage:RANGe:AUTO {state.value}\") self._logger.debug(f\"Channel {ch}: Voltage autorange state set to {state.value}\") await self._error_check() set_voltage_limit_high(channel, voltage) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_voltage_limit_high(self, channel: Union[int, str], voltage: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(voltage) await self._send_command(f\"SOUR{ch}:VOLTage:LIMit:HIGH {cmd_val}\") self._logger.debug(f\"Channel {ch}: Voltage high limit set to {voltage} V (using SCPI value: {cmd_val})\") await self._error_check() set_voltage_limit_low(channel, voltage) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_voltage_limit_low(self, channel: Union[int, str], voltage: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(voltage) await self._send_command(f\"SOUR{ch}:VOLTage:LIMit:LOW {cmd_val}\") self._logger.debug(f\"Channel {ch}: Voltage low limit set to {voltage} V (using SCPI value: {cmd_val})\") await self._error_check() set_voltage_limits_state(channel, state) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_voltage_limits_state(self, channel: Union[int, str], state: SCPIOnOff) -> None: ch = self._validate_channel(channel) await self._send_command(f\"SOUR{ch}:VOLTage:LIMit:STATe {state.value}\") self._logger.debug(f\"Channel {ch}: Voltage limits state set to {state.value}\") await self._error_check() set_voltage_unit(channel, unit) async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_voltage_unit(self, channel: Union[int, str], unit: VoltageUnit) -> None: ch = self._validate_channel(channel) await self._send_command(f\"SOUR{ch}:VOLTage:UNIT {unit.value}\") self._logger.debug(f\"Channel {ch}: Voltage unit set to {unit.value}\") await self._error_check() synchronize_phase_all_channels() async Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def synchronize_phase_all_channels(self) -> None: if self.channel_count < 2: self._logger.warning(\"Warning: Phase synchronization command sent, but primarily intended for multi-channel instruments.\") await self._send_command(\"PHASe:SYNChronize\") self._logger.debug(\"All channels/internal phase generators synchronized.\") await self._error_check() trigger_now(channel=None) async Source code in pytestlab/instruments/WaveformGenerator.py async def trigger_now(self, channel: Optional[Union[int, str]] = None) -> None: if channel is not None: ch = self._validate_channel(channel) await self._send_command(f\"TRIGger{ch}\") self._logger.log(f\"Sent immediate channel-specific trigger command TRIGger{ch}\") else: await self._send_command(\"*TRG\") self._logger.log(\"Sent general bus trigger command *TRG\") await self._error_check() Multimeter pytestlab.instruments.Multimeter Attributes logger = get_logger(__name__) module-attribute Classes Multimeter(config, backend, **kwargs) Bases: Instrument [ MultimeterConfig ] Drives a Digital Multimeter (DMM) for various measurements. This class provides a high-level interface for controlling a DMM, building upon the base Instrument class. It includes methods for common DMM operations such as measuring voltage, current, resistance, and frequency. It also handles instrument-specific configurations and can incorporate measurement uncertainty based on the provided configuration. ATTRIBUTE DESCRIPTION config The Pydantic configuration object ( MultimeterConfig ) containing settings specific to this DMM. TYPE: MultimeterConfig Source code in pytestlab/instruments/instrument.py def __init__(self, config: ConfigType, backend: AsyncInstrumentIO, **kwargs: Any) -> None: # Changed to AsyncInstrumentIO \"\"\" Initialize the Instrument class. Args: config (ConfigType): Configuration for the instrument. backend (AsyncInstrumentIO): The communication backend instance. **kwargs: Additional keyword arguments. \"\"\" if not isinstance(config, InstrumentConfig): # Check against the bound base raise InstrumentConfigurationError( self.__class__.__name__, f\"A valid InstrumentConfig-compatible object must be provided, but got {type(config).__name__}.\", ) self.config = config self._backend = backend # This will be an AsyncInstrumentIO instance self._command_log = [] logger_name = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ self._logger = get_logger(logger_name) self._logger.info(f\"Instrument '{logger_name}': Initializing with backend '{type(backend).__name__}'.\") Attributes config instance-attribute Functions configure_measurement(function, range_val=None, resolution=None) async Configures the instrument for a measurement without triggering it. Source code in pytestlab/instruments/Multimeter.py async def configure_measurement(self, function: DMMFunction, range_val: Optional[str] = None, resolution: Optional[str] = None): \"\"\"Configures the instrument for a measurement without triggering it.\"\"\" scpi_function_val = function.value range_for_query = range_val.upper() if range_val is not None else \"AUTO\" resolution_for_query = resolution.upper() if resolution is not None else \"DEF\" # Using CONFigure command as per programming guide page 44 cmd = f\"CONFigure:{scpi_function_val} {range_for_query},{resolution_for_query}\" await self._send_command(cmd) self._logger.info(f\"Configured DMM for {function.name} with range={range_for_query}, resolution={resolution_for_query}\") from_config(config, debug_mode=False) classmethod Source code in pytestlab/instruments/Multimeter.py @classmethod def from_config(cls: Type[\"Multimeter\"], config: MultimeterConfig, debug_mode: bool = False) -> \"Multimeter\": # This method is generally handled by the `AutoInstrument` factory. # It's provided here for completeness but direct instantiation is preferred # when not using the factory. # If config is a dict that needs to be passed to MultimeterConfig constructor: # return cls(config=MultimeterConfig(**config), debug_mode=debug_mode) # If config is already a MultimeterConfig instance: raise NotImplementedError(\"Please use AutoInstrument.from_config() to create instrument instances.\") get_config() async Retrieves the current measurement configuration from the DMM. This method queries the instrument to determine its current settings, such as the active measurement function, range, and resolution. It then parses this information into a structured MultimeterConfigResult object. RETURNS DESCRIPTION MultimeterConfigResult A MultimeterConfigResult dataclass instance with the DMM's current MultimeterConfigResult configuration. RAISES DESCRIPTION InstrumentDataError If the configuration string from the DMM cannot be parsed. Source code in pytestlab/instruments/Multimeter.py async def get_config(self) -> MultimeterConfigResult: \"\"\"Retrieves the current measurement configuration from the DMM. This method queries the instrument to determine its current settings, such as the active measurement function, range, and resolution. It then parses this information into a structured `MultimeterConfigResult` object. Returns: A `MultimeterConfigResult` dataclass instance with the DMM's current configuration. Raises: InstrumentDataError: If the configuration string from the DMM cannot be parsed. \"\"\" # Query the instrument for its current configuration. The response is typically # a string like '\"VOLT:DC 10,0.0001\"'. config_str: str = (await self._query(\"CONFigure?\")).replace('\"', '').strip() try: # Handle cases where resolution is not returned, e.g., \"FRES 1.000000E+02\" parts = config_str.split() mode_part = parts[0] # Settings part can be complex, find first comma settings_part = \" \".join(parts[1:]) if ',' in settings_part: range_str, resolution_str = settings_part.split(\",\", 1) else: range_str = settings_part resolution_str = \"N/A\" # Resolution not specified in query response # Parse the string to extract the mode, range, and resolution. range_value_float: float = float(range_str) except (ValueError, IndexError) as e: raise InstrumentDataError(self.config.model, f\"Failed to parse configuration string: '{config_str}'\") from e # Determine human-friendly measurement mode and assign units based on mode measurement_mode_str: str = \"\" # Renamed unit_str: str = \"\" # Renamed mode_upper: str = mode_part.upper() if mode_upper.startswith(\"VOLT\"): measurement_mode_str = \"Voltage\" unit_str = \"V\" elif mode_upper.startswith(\"CURR\"): measurement_mode_str = \"Current\" unit_str = \"A\" elif \"RES\" in mode_upper: # Catches RES and FRES measurement_mode_str = \"Resistance\" unit_str = \"Ohm\" elif \"FREQ\" in mode_upper: measurement_mode_str = \"Frequency\" unit_str = \"Hz\" elif mode_upper.startswith(\"TEMP\"): measurement_mode_str = \"Temperature\" unit_str = \"\u00b0C\" # Default; could also be \u00b0F depending on settings else: measurement_mode_str = mode_part return MultimeterConfigResult( measurement_mode=measurement_mode_str, range_value=range_value_float, resolution=resolution_str.strip(), units=unit_str ) measure(function, range_val=None, resolution=None) async Performs a measurement and returns the result. This is the primary method for acquiring data from the DMM. It configures the measurement, triggers it, and reads the result. If measurement accuracy specifications are provided in the instrument's configuration, this method will calculate the uncertainty and return the value as a UFloat object. PARAMETER DESCRIPTION function The measurement function to perform (e.g., DC Voltage). TYPE: DMMFunction range_val The measurement range (e.g., \"1V\", \"AUTO\"). If not provided, \"AUTO\" is used. The value is validated against the ranges defined in the instrument's configuration. TYPE: Optional [ str ] DEFAULT: None resolution The desired resolution (e.g., \"MIN\", \"MAX\", \"DEF\"). If not provided, \"DEF\" (default) is used. TYPE: Optional [ str ] DEFAULT: None RETURNS DESCRIPTION MeasurementResult A MeasurementResult object containing the measured value (as a float MeasurementResult or UFloat ), units, and other metadata. RAISES DESCRIPTION InstrumentParameterError If an unsupported range_val is provided. Source code in pytestlab/instruments/Multimeter.py async def measure(self, function: DMMFunction, range_val: Optional[str] = None, resolution: Optional[str] = None) -> MeasurementResult: \"\"\"Performs a measurement and returns the result. This is the primary method for acquiring data from the DMM. It configures the measurement, triggers it, and reads the result. If measurement accuracy specifications are provided in the instrument's configuration, this method will calculate the uncertainty and return the value as a `UFloat` object. Args: function: The measurement function to perform (e.g., DC Voltage). range_val: The measurement range (e.g., \"1V\", \"AUTO\"). If not provided, \"AUTO\" is used. The value is validated against the ranges defined in the instrument's configuration. resolution: The desired resolution (e.g., \"MIN\", \"MAX\", \"DEF\"). If not provided, \"DEF\" (default) is used. Returns: A `MeasurementResult` object containing the measured value (as a float or `UFloat`), units, and other metadata. Raises: InstrumentParameterError: If an unsupported `range_val` is provided. \"\"\" scpi_function_val = function.value is_autorange = range_val is None or range_val.upper() == \"AUTO\" # The MEASure command is a combination of CONFigure, INITiate, and FETCh. # This is convenient but makes querying the actual range used in autorange tricky. # For accurate uncertainty, we will use CONFigure separately when in autorange. if is_autorange: await self.set_measurement_function(function) await self._send_command(f\"{function.value}:RANGe:AUTO ON\") if resolution: await self._send_command(f\"{function.value}:RESolution {resolution.upper()}\") response_str = await self._query(\"READ?\") else: # Use the combined MEASure? command for fixed range range_for_query = range_val.upper() if range_val is not None else \"AUTO\" resolution_for_query = resolution.upper() if resolution is not None else \"DEF\" query_command = f\"MEASURE:{scpi_function_val}? {range_for_query},{resolution_for_query}\" self._logger.debug(f\"Executing DMM measure query: {query_command}\") response_str = await self._query(query_command) try: reading = float(response_str) except ValueError: raise InstrumentDataError(self.config.instrument['model'], f\"Could not parse measurement reading: '{response_str}'\") value_to_return: Union[float, UFloat] = reading # --- Uncertainty Calculation --- function_spec = self._get_function_spec(function) if function_spec: try: # Determine the actual range used by the instrument to find the correct spec current_instrument_config = await self.get_config() actual_instrument_range = current_instrument_config.range_value # Find the matching range specification matching_range_spec = None # Find the smallest nominal range that is >= the actual range used. # Assumes specs in YAML are sorted by nominal value, which is typical. for r_spec in sorted(function_spec.ranges, key=lambda r: r.nominal): if r_spec.nominal >= actual_instrument_range: matching_range_spec = r_spec break # Fallback to the largest range if no suitable one is found (e.g. if actual > largest nominal) if not matching_range_spec: matching_range_spec = max(function_spec.ranges, key=lambda r: r.nominal) if matching_range_spec: accuracy_spec = matching_range_spec.default_accuracy if accuracy_spec: # Use the spec's nominal value for the '% of range' calculation range_for_calc = matching_range_spec.nominal std_dev = accuracy_spec.calculate_uncertainty(reading, range_for_calc) if std_dev > 0: value_to_return = ufloat(reading, std_dev) self._logger.debug(f\"Applied accuracy spec for range {range_for_calc}, value: {value_to_return}\") else: self._logger.debug(f\"Calculated uncertainty is zero. Returning float.\") else: self._logger.warning(f\"No applicable accuracy specification found for function '{function.name}' at range {actual_instrument_range}. Returning float.\") else: self._logger.warning(f\"Could not find a matching range specification for function '{function.name}' at range {actual_instrument_range}. Returning float.\") except Exception as e: self._logger.error(f\"Error during uncertainty calculation: {e}. Returning float.\") else: self._logger.debug(f\"No measurement function specification in config for '{function.name}'. Returning float.\") units_val, measurement_name_val = self._get_measurement_unit_and_type(function) return MeasurementResult( values=value_to_return, instrument=self.config.model, units=units_val, measurement_type=measurement_name_val, ) set_measurement_function(function) async Configures the primary measurement function of the DMM. This method sets the DMM to measure a specific quantity, such as DC Voltage, AC Current, or Resistance. PARAMETER DESCRIPTION function The desired measurement function, as defined by the DMMFunction enum. TYPE: DMMFunction Source code in pytestlab/instruments/Multimeter.py async def set_measurement_function(self, function: DMMFunction) -> None: \"\"\"Configures the primary measurement function of the DMM. This method sets the DMM to measure a specific quantity, such as DC Voltage, AC Current, or Resistance. Args: function: The desired measurement function, as defined by the `DMMFunction` enum. \"\"\" # Using the recommended SCPI command from the programming guide (page 145) await self._send_command(f'SENSe:FUNCtion \"{function.value}\"') self._logger.info(f\"Set measurement function to {function.name} ({function.value})\") set_trigger_source(source) async Sets the trigger source for initiating a measurement. The trigger source determines what event will cause the DMM to start taking a reading. - \"IMM\": Immediate, the DMM triggers as soon as it's ready. - \"EXT\": External, a hardware signal on the rear panel triggers the DMM. - \"BUS\": A software command ( *TRG ) triggers the DMM. PARAMETER DESCRIPTION source The desired trigger source. TYPE: Literal ['IMM', 'EXT', 'BUS'] Source code in pytestlab/instruments/Multimeter.py async def set_trigger_source(self, source: Literal[\"IMM\", \"EXT\", \"BUS\"]) -> None: \"\"\"Sets the trigger source for initiating a measurement. The trigger source determines what event will cause the DMM to start taking a reading. - \"IMM\": Immediate, the DMM triggers as soon as it's ready. - \"EXT\": External, a hardware signal on the rear panel triggers the DMM. - \"BUS\": A software command (`*TRG`) triggers the DMM. Args: source: The desired trigger source. \"\"\" await self._send_command(f\"TRIG:SOUR {source.upper()}\") self._logger.info(f\"Set trigger source to {source}\") MultimeterConfigResult(measurement_mode, range_value, resolution, units='') dataclass Stores the current measurement configuration of the multimeter. This data class holds the state of the multimeter's configuration at a point in time, such as the measurement mode, range, and resolution. It is typically returned by methods that query the instrument's status. ATTRIBUTE DESCRIPTION measurement_mode The type of measurement being made (e.g., \"Voltage\"). TYPE: str range_value The configured measurement range. TYPE: float resolution The configured resolution. TYPE: str units The units for the measurement range (e.g., \"V\", \"A\"). TYPE: str Attributes measurement_mode instance-attribute range_value instance-attribute resolution instance-attribute units = '' class-attribute instance-attribute Functions __str__() Source code in pytestlab/instruments/Multimeter.py def __str__(self) -> str: return (f\"Measurement Mode: {self.measurement_mode}\\n\" f\"Range: {self.range_value} {self.units}\\n\" f\"Resolution: {self.resolution}\") Functions DC Active Load pytestlab.instruments.DCActiveLoad Classes DCActiveLoad(config, backend, **kwargs) Bases: Instrument Drives a DC Electronic Load instrument, such as the Keysight EL30000 series. This class provides a driver for controlling a DC Active Load, enabling programmatic control over its operating modes and settings. It is designed to work with SCPI-compliant instruments and leverages a detailed Pydantic configuration model to provide uncertainty-aware measurements and feature-rich control. The driver supports the following primary operations: - Setting the operating mode (Constant Current, Voltage, Power, Resistance). - Programming the load value for the current mode. - Enabling or disabling the load's input. - Measuring voltage, current, and power with uncertainty. - Configuring and controlling transient and battery test modes. Source code in pytestlab/instruments/DCActiveLoad.py def __init__(self, config: DCActiveLoadConfig, backend: AsyncInstrumentIO, **kwargs: Any) -> None: super().__init__(config, backend, **kwargs) self.current_mode = None Attributes config instance-attribute current_mode = None class-attribute instance-attribute Functions configure_transient_mode(mode, channel=1) async Sets the operating mode of the transient generator. Source code in pytestlab/instruments/DCActiveLoad.py async def configure_transient_mode(self, mode: Literal['CONTinuous', 'PULSe', 'TOGGle', 'LIST'], channel: int = 1) -> None: \"\"\"Sets the operating mode of the transient generator.\"\"\" await self._send_command(f\"TRANsient:MODE {mode.upper()}, (@{channel})\") enable_battery_test(state, channel=1) async Enables or disables the battery test operation. Source code in pytestlab/instruments/DCActiveLoad.py async def enable_battery_test(self, state: bool, channel: int = 1) -> None: \"\"\"Enables or disables the battery test operation.\"\"\" await self._send_command(f\"BATTery:ENABle {'ON' if state else 'OFF'}, (@{channel})\") enable_input(state, channel=1) async Enables or disables the load's input. PARAMETER DESCRIPTION state True to enable the input, False to disable. TYPE: bool channel The channel to control (default is 1). TYPE: int DEFAULT: 1 Source code in pytestlab/instruments/DCActiveLoad.py async def enable_input(self, state: bool, channel: int = 1) -> None: \"\"\"Enables or disables the load's input. Args: state: True to enable the input, False to disable. channel: The channel to control (default is 1). \"\"\" await self._send_command(f\"INPut:STATe {'ON' if state else 'OFF'}, (@{channel})\") self._log(f\"Input on channel {channel} turned {'ON' if state else 'OFF'}.\") fetch_datalogger_data(num_points, channel=1) async Fetches the specified number of logged data points. Source code in pytestlab/instruments/DCActiveLoad.py async def fetch_datalogger_data(self, num_points: int, channel: int = 1) -> List[float]: \"\"\"Fetches the specified number of logged data points.\"\"\" response = await self._query(f\"FETCh:SCALar:DLOG? {num_points}, (@{channel})\") return [float(x) for x in response.split(',')] fetch_scope_data(measurement, channel=1) async Fetches the captured waveform (scope) data as a NumPy array. Source code in pytestlab/instruments/DCActiveLoad.py async def fetch_scope_data(self, measurement: Literal[\"current\", \"voltage\", \"power\"], channel: int = 1) -> np.ndarray: \"\"\"Fetches the captured waveform (scope) data as a NumPy array.\"\"\" scpi_map = {\"current\": \"CURRent\", \"voltage\": \"VOLTage\", \"power\": \"POWer\"} raw_data = await self._query_raw(f\"FETCh:ARRay:{scpi_map[measurement]}? (@{channel})\") # Assumes the backend handles binary block data parsing; if not, call self._read_to_np return np.frombuffer(raw_data, dtype=np.float32) # Assuming float data from_config(config, debug_mode=False, simulate=False) classmethod Creates a DCActiveLoad instance from a configuration. This factory method allows for the creation of a DCActiveLoad driver from either a raw dictionary or a DCActiveLoadConfig object. It simplifies the instantiation process by handling the configuration object creation internally. PARAMETER DESCRIPTION config A dictionary or a DCActiveLoadConfig object containing the instrument's settings. TYPE: Union [ Dict [ str , Any ], DCActiveLoadConfig ] debug_mode If True, enables detailed logging for debugging purposes. TYPE: bool DEFAULT: False simulate If True, initializes the instrument in simulation mode. TYPE: bool DEFAULT: False RETURNS DESCRIPTION DCActiveLoad An initialized DCActiveLoad object. RAISES DESCRIPTION InstrumentConfigurationError If the provided config is not a dict or a DCActiveLoadConfig instance. Source code in pytestlab/instruments/DCActiveLoad.py @classmethod def from_config( cls: Type[DCActiveLoad], config: Union[Dict[str, Any], DCActiveLoadConfig], debug_mode: bool = False, simulate: bool = False ) -> DCActiveLoad: \"\"\"Creates a DCActiveLoad instance from a configuration. This factory method allows for the creation of a DCActiveLoad driver from either a raw dictionary or a `DCActiveLoadConfig` object. It simplifies the instantiation process by handling the configuration object creation internally. Args: config: A dictionary or a `DCActiveLoadConfig` object containing the instrument's settings. debug_mode: If True, enables detailed logging for debugging purposes. simulate: If True, initializes the instrument in simulation mode. Returns: An initialized DCActiveLoad object. Raises: InstrumentConfigurationError: If the provided config is not a dict or a `DCActiveLoadConfig` instance. \"\"\" conf_obj: DCActiveLoadConfig if isinstance(config, dict): conf_obj = DCActiveLoadConfig(**config) elif isinstance(config, DCActiveLoadConfig): conf_obj = config else: raise InstrumentConfigurationError( \"DCActiveLoad\", \"Configuration must be a dict or DCActiveLoadConfig instance.\" ) return cls(config=conf_obj, debug_mode=debug_mode, simulate=simulate) get_battery_test_measurement(metric, channel=1) async Queries a measurement from the ongoing battery test. Source code in pytestlab/instruments/DCActiveLoad.py async def get_battery_test_measurement(self, metric: Literal[\"capacity\", \"power\", \"time\"], channel: int = 1) -> float: \"\"\"Queries a measurement from the ongoing battery test.\"\"\" scpi_map = {\"capacity\": \"CAPacity\", \"power\": \"POWer\", \"time\": \"TIMe\"} response = await self._query(f\"BATTery:MEASure:{scpi_map[metric]}? (@{channel})\") return float(response) is_input_enabled(channel=1) async Queries the state of the load's input. RETURNS DESCRIPTION bool True if the input is enabled, False otherwise. Source code in pytestlab/instruments/DCActiveLoad.py async def is_input_enabled(self, channel: int = 1) -> bool: \"\"\"Queries the state of the load's input. Returns: True if the input is enabled, False otherwise. \"\"\" response = await self._query(f\"INPut:STATe? (@{channel})\") return response.strip() == '1' measure_current() async Measures the sinking current, including uncertainty if available. Source code in pytestlab/instruments/DCActiveLoad.py async def measure_current(self) -> MeasurementResult: \"\"\"Measures the sinking current, including uncertainty if available.\"\"\" return await self._measure_with_uncertainty(\"current\") measure_power() async Measures the power being dissipated, including uncertainty if available. Source code in pytestlab/instruments/DCActiveLoad.py async def measure_power(self) -> MeasurementResult: \"\"\"Measures the power being dissipated, including uncertainty if available.\"\"\" return await self._measure_with_uncertainty(\"power\") measure_voltage() async Measures the voltage across the load, including uncertainty if available. Source code in pytestlab/instruments/DCActiveLoad.py async def measure_voltage(self) -> MeasurementResult: \"\"\"Measures the voltage across the load, including uncertainty if available.\"\"\" return await self._measure_with_uncertainty(\"voltage\") set_battery_cutoff_capacity(capacity, state=True, channel=1) async Configures the capacity (Ah) cutoff condition for the battery test. Source code in pytestlab/instruments/DCActiveLoad.py async def set_battery_cutoff_capacity(self, capacity: float, state: bool = True, channel: int = 1) -> None: \"\"\"Configures the capacity (Ah) cutoff condition for the battery test.\"\"\" await self._send_command(f\"BATTery:CUTOff:CAPacity:STATe {'ON' if state else 'OFF'}, (@{channel})\") if state: await self._send_command(f\"BATTery:CUTOff:CAPacity {capacity}, (@{channel})\") set_battery_cutoff_timer(time_s, state=True, channel=1) async Configures the timer (seconds) cutoff condition for the battery test. Source code in pytestlab/instruments/DCActiveLoad.py async def set_battery_cutoff_timer(self, time_s: float, state: bool = True, channel: int = 1) -> None: \"\"\"Configures the timer (seconds) cutoff condition for the battery test.\"\"\" await self._send_command(f\"BATTery:CUTOff:TIMer:STATe {'ON' if state else 'OFF'}, (@{channel})\") if state: await self._send_command(f\"BATTery:CUTOff:TIMer {time_s}, (@{channel})\") set_battery_cutoff_voltage(voltage, state=True, channel=1) async Configures the voltage cutoff condition for the battery test. Source code in pytestlab/instruments/DCActiveLoad.py async def set_battery_cutoff_voltage(self, voltage: float, state: bool = True, channel: int = 1) -> None: \"\"\"Configures the voltage cutoff condition for the battery test.\"\"\" await self._send_command(f\"BATTery:CUTOff:VOLTage:STATe {'ON' if state else 'OFF'}, (@{channel})\") if state: await self._send_command(f\"BATTery:CUTOff:VOLTage {voltage}, (@{channel})\") set_load(value) async Programs the load's setpoint for the current operating mode. This method sets the target value that the load will maintain. The unit of the value argument depends on the currently active mode: - \"CC\" mode: value is in Amperes (A). - \"CV\" mode: value is in Volts (V). - \"CP\" mode: value is in Watts (W). - \"CR\" mode: value is in Ohms (\u03a9). PARAMETER DESCRIPTION value The target value for the load. TYPE: float RAISES DESCRIPTION InstrumentParameterError If the operating mode has not been set first by calling set_mode() . Source code in pytestlab/instruments/DCActiveLoad.py async def set_load(self, value: float) -> None: \"\"\"Programs the load's setpoint for the current operating mode. This method sets the target value that the load will maintain. The unit of the `value` argument depends on the currently active mode: - \"CC\" mode: `value` is in Amperes (A). - \"CV\" mode: `value` is in Volts (V). - \"CP\" mode: `value` is in Watts (W). - \"CR\" mode: `value` is in Ohms (\u03a9). Args: value: The target value for the load. Raises: InstrumentParameterError: If the operating mode has not been set first by calling `set_mode()`. \"\"\" if self.current_mode is None: raise InstrumentParameterError(\"Load mode has not been set. Call set_mode() first.\") command_map = {\"CC\": \"CURRent\", \"CV\": \"VOLTage\", \"CP\": \"POWer\", \"CR\": \"RESistance\"} scpi_param = command_map.get(self.current_mode) if scpi_param: await self._send_command(f\"{scpi_param}:LEVel:IMMediate:AMPLitude {value}\") self._log(f\"Load value set to {value} in mode {self.current_mode}.\") else: raise InstrumentParameterError(f\"Internal error: Unknown current_mode '{self.current_mode}'.\") set_mode(mode) async Sets the operating mode of the electronic load. This method configures the load to operate in one of the supported modes. The mode determines what physical quantity the load will attempt to keep constant. The supported modes are: - \"CC\": Constant Current - \"CV\": Constant Voltage - \"CP\": Constant Power - \"CR\": Constant Resistance PARAMETER DESCRIPTION mode The desired operating mode. The input is case-insensitive. TYPE: str RAISES DESCRIPTION InstrumentParameterError If the specified mode is not supported. Source code in pytestlab/instruments/DCActiveLoad.py async def set_mode(self, mode: str) -> None: \"\"\"Sets the operating mode of the electronic load. This method configures the load to operate in one of the supported modes. The mode determines what physical quantity the load will attempt to keep constant. The supported modes are: - \"CC\": Constant Current - \"CV\": Constant Voltage - \"CP\": Constant Power - \"CR\": Constant Resistance Args: mode: The desired operating mode. The input is case-insensitive. Raises: InstrumentParameterError: If the specified mode is not supported. \"\"\" mode_upper = mode.upper() mode_map: Dict[str, str] = { \"CC\": \"CURR\", \"CV\": \"VOLTage\", \"CP\": \"POWer\", \"CR\": \"RESistance\" } if mode_upper not in mode_map: raise InstrumentParameterError( parameter=\"mode\", value=mode, valid_range=list(mode_map.keys()), message=f\"Unsupported mode '{mode}'. Valid modes are: {', '.join(mode_map.keys())}.\" ) await self._send_command(f\"FUNC {mode_map[mode_upper]}\") self.current_mode = mode_upper self._log(f\"Operating mode set to {mode_upper}.\") set_range(value, channel=1) async Sets the operating range for the current mode. PARAMETER DESCRIPTION value The maximum expected value to set the range. Can also be \"MIN\" or \"MAX\". TYPE: Union [ float , str ] channel The channel to configure (default is 1). TYPE: int DEFAULT: 1 Source code in pytestlab/instruments/DCActiveLoad.py async def set_range(self, value: Union[float, str], channel: int = 1) -> None: \"\"\"Sets the operating range for the current mode. Args: value: The maximum expected value to set the range. Can also be \"MIN\" or \"MAX\". channel: The channel to configure (default is 1). \"\"\" if self.current_mode is None: raise InstrumentParameterError(\"Mode must be set before setting range.\") command_map = {\"CC\": \"CURRent\", \"CV\": \"VOLTage\", \"CP\": \"POWer\", \"CR\": \"RESistance\"} scpi_param = command_map.get(self.current_mode) await self._send_command(f\"{scpi_param}:RANGe {value}, (@{channel})\") self._log(f\"Range for mode {self.current_mode} on channel {channel} set for value {value}.\") set_slew_rate(rate, channel=1) async Sets the slew rate for the current operating mode. PARAMETER DESCRIPTION rate The desired slew rate. Units depend on the mode (A/s, V/s, etc.). Can also be \"MIN\", \"MAX\", or \"INF\". TYPE: Union [ float , str ] channel The channel to configure (default is 1). TYPE: int DEFAULT: 1 Source code in pytestlab/instruments/DCActiveLoad.py async def set_slew_rate(self, rate: Union[float, str], channel: int = 1) -> None: \"\"\"Sets the slew rate for the current operating mode. Args: rate: The desired slew rate. Units depend on the mode (A/s, V/s, etc.). Can also be \"MIN\", \"MAX\", or \"INF\". channel: The channel to configure (default is 1). \"\"\" if self.current_mode is None: raise InstrumentParameterError(\"Mode must be set before setting slew rate.\") command_map = {\"CC\": \"CURRent\", \"CV\": \"VOLTage\", \"CP\": \"POWer\", \"CR\": \"RESistance\"} scpi_param = command_map.get(self.current_mode) await self._send_command(f\"{scpi_param}:SLEW {rate}, (@{channel})\") self._log(f\"Slew rate for mode {self.current_mode} on channel {channel} set to {rate}.\") set_transient_level(value, channel=1) async Sets the secondary (transient) level for the current operating mode. Source code in pytestlab/instruments/DCActiveLoad.py async def set_transient_level(self, value: float, channel: int = 1) -> None: \"\"\"Sets the secondary (transient) level for the current operating mode.\"\"\" if self.current_mode is None: raise InstrumentParameterError(\"Mode must be set before setting transient level.\") command_map = {\"CC\": \"CURRent\", \"CV\": \"VOLTage\", \"CP\": \"POWer\", \"CR\": \"RESistance\"} scpi_param = command_map.get(self.current_mode) await self._send_command(f\"{scpi_param}:TLEVel {value}, (@{channel})\") short_input(state, channel=1) async Enables or disables a short circuit on the input. PARAMETER DESCRIPTION state True to enable the short, False to disable. TYPE: bool channel The channel to control (default is 1). TYPE: int DEFAULT: 1 Source code in pytestlab/instruments/DCActiveLoad.py async def short_input(self, state: bool, channel: int = 1) -> None: \"\"\"Enables or disables a short circuit on the input. Args: state: True to enable the short, False to disable. channel: The channel to control (default is 1). \"\"\" await self._send_command(f\"INPut:SHORt:STATe {'ON' if state else 'OFF'}, (@{channel})\") self._log(f\"Input short on channel {channel} turned {'ON' if state else 'OFF'}.\") start_transient(continuous=False, channel=1) async Initiates the transient trigger system. Source code in pytestlab/instruments/DCActiveLoad.py async def start_transient(self, continuous: bool = False, channel: int = 1) -> None: \"\"\"Initiates the transient trigger system.\"\"\" await self._send_command(f\"INITiate:CONTinuous:TRANsient {'ON' if continuous else 'OFF'}, (@{channel})\") if not continuous: await self._send_command(f\"INITiate:TRANsient (@{channel})\") stop_transient(channel=1) async Aborts any pending or in-progress transient operations. Source code in pytestlab/instruments/DCActiveLoad.py async def stop_transient(self, channel: int = 1) -> None: \"\"\"Aborts any pending or in-progress transient operations.\"\"\" await self._send_command(f\"ABORt:TRANsient (@{channel})\") Functions health_check(self) async Performs a health check on the DC Electronic Load. Source code in pytestlab/instruments/DCActiveLoad.py async def health_check(self) -> HealthReport: \"\"\"Performs a health check on the DC Electronic Load.\"\"\" report = HealthReport() try: report.instrument_idn = await self.id() errors = await self.get_all_errors() if errors: report.status = HealthStatus.WARNING report.warnings.extend([f\"Stored Error: {code} - {msg}\" for code, msg in errors]) else: report.status = HealthStatus.OK except Exception as e: report.status = HealthStatus.ERROR report.errors.append(f\"Health check failed: {e}\") return report Spectrum Analyzer pytestlab.instruments.SpectrumAnalyser Classes PlaceholderMeasurementResult(x, y, x_label='Frequency (Hz)', y_label='Amplitude (dBm)') Source code in pytestlab/instruments/SpectrumAnalyser.py def __init__(self, x: List[float], y: List[float], x_label: str = \"Frequency (Hz)\", y_label: str = \"Amplitude (dBm)\"): self.x = x self.y = y self.x_label = x_label self.y_label = y_label Attributes x = x instance-attribute x_label = x_label instance-attribute y = y instance-attribute y_label = y_label instance-attribute Functions SpectrumAnalyser(config, backend, **kwargs) Bases: Instrument [ SpectrumAnalyzerConfig ] Source code in pytestlab/instruments/instrument.py def __init__(self, config: ConfigType, backend: AsyncInstrumentIO, **kwargs: Any) -> None: # Changed to AsyncInstrumentIO \"\"\" Initialize the Instrument class. Args: config (ConfigType): Configuration for the instrument. backend (AsyncInstrumentIO): The communication backend instance. **kwargs: Additional keyword arguments. \"\"\" if not isinstance(config, InstrumentConfig): # Check against the bound base raise InstrumentConfigurationError( self.__class__.__name__, f\"A valid InstrumentConfig-compatible object must be provided, but got {type(config).__name__}.\", ) self.config = config self._backend = backend # This will be an AsyncInstrumentIO instance self._command_log = [] logger_name = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ self._logger = get_logger(logger_name) self._logger.info(f\"Instrument '{logger_name}': Initializing with backend '{type(backend).__name__}'.\") Functions configure_measurement(center_freq=None, span=None, rbw=None) async Source code in pytestlab/instruments/SpectrumAnalyser.py async def configure_measurement( self, center_freq: Optional[float] = None, span: Optional[float] = None, rbw: Optional[float] = None ) -> None: if center_freq is not None: await self._send_command(f\"FREQ:CENT {center_freq}\") # Use SCPI_MAP later self.config.frequency_center = center_freq # Update config if span is not None: await self._send_command(f\"FREQ:SPAN {span}\") self.config.frequency_span = span # Update config if rbw is not None: await self._send_command(f\"BAND {rbw}\") # RBW command self.config.resolution_bandwidth = rbw # Update config get_trace(channel=1) async Source code in pytestlab/instruments/SpectrumAnalyser.py async def get_trace(self, channel: int = 1) -> PlaceholderMeasurementResult: # Use actual MeasurementResult later # Example: Query trace data, parse it (often CSV or binary) # raw_data_str = await self._query(f\"TRAC:DATA? TRACE{channel}\") # Use SCPI_MAP # For simulation, SimBackend needs to be taught to respond to this # For now, return dummy data # freqs = [1e9, 2e9, 3e9] # Dummy frequencies # amps = [-20, -30, -25] # Dummy amplitudes # return PlaceholderMeasurementResult(x=freqs, y=amps) self._logger.warning(\"get_trace for SpectrumAnalyser is a placeholder and returns dummy data.\") # Simulating a basic trace for now sim_freqs = [self.config.frequency_center or 1e9 - (self.config.frequency_span or 100e6)/2 + i * ((self.config.frequency_span or 100e6)/10) for i in range(11)] sim_amps = [-20.0 - i*2 for i in range(11)] # Dummy amplitudes return PlaceholderMeasurementResult(x=sim_freqs, y=sim_amps) Vector Network Analyzer (VNA) pytestlab.instruments.VectorNetworkAnalyser Classes SParameterData(frequencies, s_params, param_names) Source code in pytestlab/instruments/VectorNetworkAnalyser.py def __init__(self, frequencies: List[float], s_params: List[List[complex]], param_names: List[str]): self.frequencies = frequencies # List of frequencies self.s_params = s_params # List of lists, each inner list contains complex S-param values for a given S-parameter type self.param_names = param_names # List of S-parameter names, e.g., [\"S11\", \"S21\"] Attributes frequencies = frequencies instance-attribute param_names = param_names instance-attribute s_params = s_params instance-attribute Functions VectorNetworkAnalyser(config, backend, **kwargs) Bases: Instrument [ VNAConfig ] Source code in pytestlab/instruments/instrument.py def __init__(self, config: ConfigType, backend: AsyncInstrumentIO, **kwargs: Any) -> None: # Changed to AsyncInstrumentIO \"\"\" Initialize the Instrument class. Args: config (ConfigType): Configuration for the instrument. backend (AsyncInstrumentIO): The communication backend instance. **kwargs: Additional keyword arguments. \"\"\" if not isinstance(config, InstrumentConfig): # Check against the bound base raise InstrumentConfigurationError( self.__class__.__name__, f\"A valid InstrumentConfig-compatible object must be provided, but got {type(config).__name__}.\", ) self.config = config self._backend = backend # This will be an AsyncInstrumentIO instance self._command_log = [] logger_name = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ self._logger = get_logger(logger_name) self._logger.info(f\"Instrument '{logger_name}': Initializing with backend '{type(backend).__name__}'.\") Attributes model_config = {'arbitrary_types_allowed': True} class-attribute instance-attribute Functions configure_s_parameter_sweep(s_params=None, start_freq=None, stop_freq=None, num_points=None, if_bandwidth=None, power_level=None) async Source code in pytestlab/instruments/VectorNetworkAnalyser.py async def configure_s_parameter_sweep( self, s_params: Optional[List[str]] = None, # e.g. [\"S11\", \"S21\"] start_freq: Optional[float] = None, stop_freq: Optional[float] = None, num_points: Optional[int] = None, if_bandwidth: Optional[float] = None, power_level: Optional[float] = None ) -> None: if s_params is not None: # SCPI command to select S-parameters might be like: CALC:PAR:DEF \"S11\" # This is highly instrument specific. For now, just update config. self.config.s_parameters = s_params self._logger.info(f\"VNA S-parameters set to: {s_params}\") if start_freq is not None: await self._send_command(f\"SENS:FREQ:STAR {start_freq}\") # Example SCPI self.config.start_frequency = start_freq if stop_freq is not None: await self._send_command(f\"SENS:FREQ:STOP {stop_freq}\") # Example SCPI self.config.stop_frequency = stop_freq if num_points is not None: await self._send_command(f\"SENS:SWE:POIN {num_points}\") # Example SCPI self.config.num_points = num_points if if_bandwidth is not None: await self._send_command(f\"SENS:BWID {if_bandwidth}\") # Example SCPI for IF bandwidth self.config.if_bandwidth = if_bandwidth if power_level is not None: await self._send_command(f\"SOUR:POW {power_level}\") # Example SCPI for power self.config.power_level = power_level self._logger.info(\"VNA measurement configured (simulated).\") get_s_parameter_data() async Source code in pytestlab/instruments/VectorNetworkAnalyser.py async def get_s_parameter_data(self) -> SParameterData: # Example: Query S-parameter data. This is often complex, involving selecting # the S-parameter, then querying data (e.g., in Real, Imaginary or LogMag, Phase format). # raw_data_str = await self._query(f\"CALC:DATA? SDAT\") # Example SCPI for S-parameter data # For simulation, SimBackend needs to be taught to respond. self._logger.warning(\"get_s_parameter_data for VNA is a placeholder and returns dummy data.\") num_points = self.config.num_points or 101 start_f = self.config.start_frequency or 1e9 stop_f = self.config.stop_frequency or 2e9 frequencies = [start_f + i * (stop_f - start_f) / (num_points -1 if num_points > 1 else 1) for i in range(num_points)] s_params_to_measure = self.config.s_parameters or [\"S11\"] sim_s_params_data: List[List[complex]] = [] for _ in s_params_to_measure: # Dummy data: e.g., S11 a simple reflection, S21 a simple transmission param_data = [] for i in range(num_points): # Create some varying complex numbers real_part = -0.1 * i / num_points imag_part = -0.05 * (1 - i / num_points) param_data.append(complex(real_part, imag_part)) sim_s_params_data.append(param_data) return SParameterData(frequencies=frequencies, s_params=sim_s_params_data, param_names=s_params_to_measure) Power Meter pytestlab.instruments.PowerMeter Classes PowerMeter(config, backend, **kwargs) Bases: Instrument [ PowerMeterConfig ] Drives a Power Meter instrument for power measurements. This class provides a high-level interface for controlling a power meter, building upon the base Instrument class. It includes methods for configuring the power sensor and reading power values. Source code in pytestlab/instruments/instrument.py def __init__(self, config: ConfigType, backend: AsyncInstrumentIO, **kwargs: Any) -> None: # Changed to AsyncInstrumentIO \"\"\" Initialize the Instrument class. Args: config (ConfigType): Configuration for the instrument. backend (AsyncInstrumentIO): The communication backend instance. **kwargs: Additional keyword arguments. \"\"\" if not isinstance(config, InstrumentConfig): # Check against the bound base raise InstrumentConfigurationError( self.__class__.__name__, f\"A valid InstrumentConfig-compatible object must be provided, but got {type(config).__name__}.\", ) self.config = config self._backend = backend # This will be an AsyncInstrumentIO instance self._command_log = [] logger_name = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ self._logger = get_logger(logger_name) self._logger.info(f\"Instrument '{logger_name}': Initializing with backend '{type(backend).__name__}'.\") Functions configure_sensor(channel=1, freq=None, averaging_count=None, units=None) async Configures the settings for a specific power sensor channel. This method allows setting the frequency compensation, averaging count, and power units for the measurement. PARAMETER DESCRIPTION channel The sensor channel number to configure (default is 1). TYPE: int DEFAULT: 1 freq The frequency compensation value in Hz. TYPE: Optional [ float ] DEFAULT: None averaging_count The number of measurements to average. TYPE: Optional [ int ] DEFAULT: None units The desired power units (e.g., \"dBm\", \"W\"). TYPE: Optional [ str ] DEFAULT: None Source code in pytestlab/instruments/PowerMeter.py async def configure_sensor( self, channel: int = 1, freq: Optional[float] = None, averaging_count: Optional[int] = None, units: Optional[str] = None ) -> None: \"\"\"Configures the settings for a specific power sensor channel. This method allows setting the frequency compensation, averaging count, and power units for the measurement. Args: channel: The sensor channel number to configure (default is 1). freq: The frequency compensation value in Hz. averaging_count: The number of measurements to average. units: The desired power units (e.g., \"dBm\", \"W\"). \"\"\" # The specific SCPI commands can vary between power meter models. # The following are common examples. # Set the frequency compensation for the sensor. if freq is not None: await self._send_command(f\"SENS{channel}:FREQ {freq}\") self.config.frequency_compensation_value = freq # Update local config state # Set the number of readings to average. if averaging_count is not None: await self._send_command(f\"SENS{channel}:AVER:COUN {averaging_count}\") self.config.averaging_count = averaging_count # Update local config state # Set the units for the power measurement. if units is not None: # Validate that the requested units are supported by the config model. if units in PowerMeterConfig.model_fields['power_units'].annotation.__args__: await self._send_command(f\"UNIT:POW {units.upper()}\") self.config.power_units = units # type: ignore else: self._logger.warning(f\"Invalid power units '{units}' specified. Using config default '{self.config.power_units}'.\") self._logger.info(f\"Power meter sensor channel {channel} configured.\") read_power(channel=1) async Reads the power from a specified sensor channel. This method queries the instrument for a power reading. Note that this is a placeholder implementation and currently returns simulated data. PARAMETER DESCRIPTION channel The sensor channel number to read from (default is 1). TYPE: int DEFAULT: 1 RETURNS DESCRIPTION float The measured power as a float. The units depend on the current float instrument configuration. Source code in pytestlab/instruments/PowerMeter.py async def read_power(self, channel: int = 1) -> float: \"\"\"Reads the power from a specified sensor channel. This method queries the instrument for a power reading. Note that this is a placeholder implementation and currently returns simulated data. Args: channel: The sensor channel number to read from (default is 1). Returns: The measured power as a float. The units depend on the current instrument configuration. \"\"\" # In a real implementation, you would query the instrument. # Example: raw_power_str = await self._query(f\"FETC{channel}?\") # The SimBackend would need to be configured to provide realistic responses. self._logger.warning(f\"read_power for PowerMeter channel {channel} is a placeholder and returns dummy data.\") # Simulate a power reading based on the configured units. sim_power = -10.0 # Default dummy power in dBm if self.config.power_units == \"W\": sim_power = 0.0001 # 100uW elif self.config.power_units == \"mW\": sim_power = 0.1 # 0.1mW elif self.config.power_units == \"uW\": sim_power = 100.0 # 100uW # For more realistic simulations, a small random variation could be added. # import random # sim_power *= (1 + random.uniform(-0.01, 0.01)) return sim_power Facade Pattern All instrument drivers expose \"facade\" objects for common operations, enabling a fluent, chainable API. For example, you can configure and enable a channel with: await scope.channel(1).setup(scale=0.5, offset=0).enable() See the 10-Minute Tour for practical examples. Simulation Support All drivers support simulation via the simulate=True flag or by using a simulated backend. See the Simulation Guide for details. Extending Drivers To add support for a new instrument, create a profile YAML file and use AutoInstrument.from_config() or subclass Instrument . See Creating Profiles for guidance.","title":"Instruments"},{"location":"api/instruments/#instrument-drivers","text":"This section documents the main instrument driver classes provided by PyTestLab. All drivers support both real and simulated backends, and expose a modern, async-first API.","title":"Instrument Drivers"},{"location":"api/instruments/#core-instrument-classes","text":"","title":"Core Instrument Classes"},{"location":"api/instruments/#pytestlab.instruments.AutoInstrument","text":"","title":"AutoInstrument"},{"location":"api/instruments/#pytestlab.instruments.AutoInstrument-classes","text":"","title":"Classes"},{"location":"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument","text":"A factory class for creating and configuring instrument objects. This class provides a high-level interface to instantiate various types of instruments based on configuration files, instrument types, or other identifiers. It handles the complexities of locating configuration data, selecting the appropriate communication backend (e.g., VISA, simulation), and initializing the correct instrument driver. The primary methods are from_config for creating an instrument from a configuration source and from_type for creating one based on a generic instrument category.","title":"AutoInstrument"},{"location":"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config","text":"Initializes an instrument from a configuration source. This is the primary factory method for creating instrument instances. It orchestrates the entire setup process: 1. Loads configuration from a dictionary, a local file, or a CDN URL. 2. Determines whether to run in simulation or live mode. 3. Selects and instantiates the appropriate communication backend (Sim, VISA, Lamb). 4. Instantiates the final instrument driver with the config and backend. Note: This method creates and configures the instrument object but does not establish the connection. The caller must explicitly call await instrument.connect_backend() on the returned object. PARAMETER DESCRIPTION config_source A dictionary containing the configuration, a string identifier for a CDN/local profile, or a file path. TYPE: Union [ str , Dict [ str , Any ]] serial_number An optional serial number to override the one in the config. TYPE: Optional [ str ] DEFAULT: None debug_mode If True, prints detailed logs during the setup process. TYPE: bool DEFAULT: False simulate Explicitly enable or disable simulation mode, overriding environment variables and config settings. TYPE: Optional [ bool ] DEFAULT: None backend_type_hint Manually specify the backend ('visa' or 'lamb'), bypassing automatic detection. TYPE: Optional [ str ] DEFAULT: None address_override Use a specific communication address, overriding the one in the config. TYPE: Optional [ str ] DEFAULT: None timeout_override_ms Use a specific communication timeout in milliseconds. TYPE: Optional [ int ] DEFAULT: None RETURNS DESCRIPTION Instrument [ Any ] An initialized instrument object ready to be connected. RAISES DESCRIPTION FileNotFoundError If the configuration source is a string and the corresponding file cannot be found. InstrumentConfigurationError If the configuration is invalid or a required setting is missing. TypeError If config_source is not a dictionary or a string. Source code in pytestlab/instruments/AutoInstrument.py @classmethod async def from_config(cls: Type[AutoInstrument], config_source: Union[str, Dict[str, Any]], *args, serial_number: Optional[str] = None, debug_mode: bool = False, # For logging during config load simulate: Optional[bool] = None, backend_type_hint: Optional[str] = None, address_override: Optional[str] = None, timeout_override_ms: Optional[int] = None ) -> Instrument[Any]: # Returns an instance of a subclass of Instrument \"\"\"Initializes an instrument from a configuration source. This is the primary factory method for creating instrument instances. It orchestrates the entire setup process: 1. Loads configuration from a dictionary, a local file, or a CDN URL. 2. Determines whether to run in simulation or live mode. 3. Selects and instantiates the appropriate communication backend (Sim, VISA, Lamb). 4. Instantiates the final instrument driver with the config and backend. Note: This method creates and configures the instrument object but does not establish the connection. The caller must explicitly call `await instrument.connect_backend()` on the returned object. Args: config_source: A dictionary containing the configuration, a string identifier for a CDN/local profile, or a file path. serial_number: An optional serial number to override the one in the config. debug_mode: If True, prints detailed logs during the setup process. simulate: Explicitly enable or disable simulation mode, overriding environment variables and config settings. backend_type_hint: Manually specify the backend ('visa' or 'lamb'), bypassing automatic detection. address_override: Use a specific communication address, overriding the one in the config. timeout_override_ms: Use a specific communication timeout in milliseconds. Returns: An initialized instrument object ready to be connected. Raises: FileNotFoundError: If the configuration source is a string and the corresponding file cannot be found. InstrumentConfigurationError: If the configuration is invalid or a required setting is missing. TypeError: If `config_source` is not a dictionary or a string. \"\"\" # Support serial_number as positional second argument if len(args) > 0 and isinstance(args[0], str): serial_number = args[0] config_data: Dict[str, Any] # Step 1: Load configuration data from the provided source config_model: PydanticInstrumentConfig if isinstance(config_source, PydanticInstrumentConfig): config_model = config_source config_data = config_model.model_dump(mode='python') elif isinstance(config_source, dict): config_data = config_source config_model = load_profile(config_data) elif isinstance(config_source, str): try: # Try fetching from the CDN first config_data = await cls.get_config_from_cdn(config_source) if debug_mode: print(f\"Successfully loaded configuration for '{config_source}' from CDN.\") except FileNotFoundError: try: # Fallback to local file system if not found on CDN config_data = await cls.get_config_from_local(config_source) if debug_mode: print(f\"Successfully loaded configuration for '{config_source}' from local.\") except FileNotFoundError: # If not found in either location, raise an error raise FileNotFoundError(f\"Configuration '{config_source}' not found in CDN or local paths.\") config_model = load_profile(config_data) else: raise TypeError(\"config_source must be a file path (str), a dict, or an InstrumentConfig object.\") # Override the serial number in the config if one is provided as an argument if serial_number is not None and hasattr(config_model, 'serial_number'): config_model.serial_number = serial_number # type: ignore backend_instance: AsyncInstrumentIO # Step 2: Determine the final simulation mode based on a clear priority final_simulation_mode: bool if simulate is not None: # Highest priority: explicit argument to the function final_simulation_mode = simulate if debug_mode: print(f\"Simulation mode explicitly set to {final_simulation_mode} by argument.\") else: # Second priority: environment variable env_simulate = os.getenv(\"PYTESTLAB_SIMULATE\") if env_simulate is not None: final_simulation_mode = env_simulate.lower() in ('true', '1', 'yes') if debug_mode: print(f\"Simulation mode set to {final_simulation_mode} by PYTESTLAB_SIMULATE environment variable.\") else: # Lowest priority: default to False final_simulation_mode = False if debug_mode: print(f\"Simulation mode defaulted to {final_simulation_mode} (no explicit argument or PYTESTLAB_SIMULATE).\") # Step 3: Determine the actual communication address and timeout actual_address: Optional[str] if address_override is not None: # Argument override has the highest priority for address actual_address = address_override if debug_mode: print(f\"Address overridden to '{actual_address}'.\") else: # Otherwise, get the address from the configuration data actual_address = getattr(config_model, 'address', getattr(config_model, 'resource_name', None)) if debug_mode: print(f\"Address from config: '{actual_address}'.\") actual_timeout: int default_communication_timeout_ms = 30000 # Default if not in override or config if timeout_override_ms is not None: actual_timeout = timeout_override_ms if debug_mode: print(f\"Timeout overridden to {actual_timeout}ms.\") else: # Assuming 'communication.timeout_ms' or 'communication_timeout_ms' might exist # Prefer 'communication_timeout_ms' as per previous logic if 'communication' object isn't standard timeout_from_config = getattr(config_model, 'communication_timeout_ms', None) if hasattr(config_model, 'communication') and hasattr(config_model.communication, 'timeout_ms'): # type: ignore timeout_from_config = config_model.communication.timeout_ms # type: ignore if isinstance(timeout_from_config, int) and timeout_from_config > 0: actual_timeout = timeout_from_config if debug_mode: print(f\"Timeout from config: {actual_timeout}ms.\") else: actual_timeout = default_communication_timeout_ms if debug_mode: print(f\"Warning: Invalid or missing timeout in config, using default {actual_timeout}ms.\") if not isinstance(actual_timeout, int) or actual_timeout <= 0: # Final safety check actual_timeout = default_communication_timeout_ms if debug_mode: print(f\"Warning: Corrected invalid timeout to default {actual_timeout}ms.\") # Step 4: Instantiate the appropriate backend based on the mode and configuration if final_simulation_mode: # Helper to resolve sim profile path def resolve_sim_profile_path(profile_key_or_path: str) -> str: # 1. User override in ~/.pytestlab/profiles user_profile = os.path.expanduser(os.path.join(\"~/.pytestlab/profiles\", profile_key_or_path + \".yaml\")) if os.path.exists(user_profile): return user_profile # 2. User sim_profiles (legacy) user_sim_profile = os.path.expanduser(os.path.join(\"~/.pytestlab/sim_profiles\", profile_key_or_path + \".yaml\")) if os.path.exists(user_sim_profile): return user_sim_profile # 3. Package profile import pytestlab as ptl pkg_profile = os.path.join(os.path.dirname(ptl.__file__), \"profiles\", profile_key_or_path + \".yaml\") if os.path.exists(pkg_profile): return pkg_profile # 4. Direct path if os.path.exists(profile_key_or_path): return profile_key_or_path raise FileNotFoundError(f\"Simulation profile not found for '{profile_key_or_path}'\") device_model_str = getattr(config_model, \"model\", \"GenericSimulatedModel\") if isinstance(config_source, str): sim_profile_path = os.path.abspath(resolve_sim_profile_path(config_source)) if debug_mode: print(f\"Resolved sim profile path: {sim_profile_path}\") else: # Write dict config to a temp file with tempfile.NamedTemporaryFile(\"w\", suffix=\".yaml\", delete=False) as tf: yaml.dump(config_data, tf) sim_profile_path = os.path.abspath(tf.name) if debug_mode: print(f\"Wrote temp sim profile: {sim_profile_path}\") backend_instance = SimBackendV2( profile_path=sim_profile_path, model=device_model_str, timeout_ms=actual_timeout, ) if debug_mode: print( f\"Using SimBackendV2 for {device_model_str} with timeout {actual_timeout}ms. Profile: {sim_profile_path}\" ) else: # For live hardware, determine the backend type (VISA or Lamb) if backend_type_hint: # Explicit hint overrides any inference chosen_backend_type = backend_type_hint.lower() if debug_mode: print(f\"Backend type hint provided: '{chosen_backend_type}'.\") elif actual_address and \"LAMB::\" in actual_address.upper(): # Infer 'lamb' backend from the address format chosen_backend_type = 'lamb' if debug_mode: print(f\"Inferred backend type: 'lamb' from address '{actual_address}'.\") elif actual_address: # Infer 'visa' for any other address type chosen_backend_type = 'visa' if debug_mode: print(f\"Inferred backend type: 'visa' from address '{actual_address}'.\") else: # Default to 'lamb' if no address is provided (e.g., for remote discovery) chosen_backend_type = 'lamb' if debug_mode: print(f\"Defaulting backend type to 'lamb' (no address present).\") if chosen_backend_type == 'visa': if actual_address is None: raise InstrumentConfigurationError( config_source, \"Missing address/resource_name for VISA backend.\" ) backend_instance = AsyncVisaBackend(address=actual_address, timeout_ms=actual_timeout) if debug_mode: print(f\"Using AsyncVisaBackend for '{actual_address}' with timeout {actual_timeout}ms.\") elif chosen_backend_type == 'lamb': lamb_server_url = getattr(config_model, 'lamb_url', 'http://lamb-server:8000') if actual_address: backend_instance = AsyncLambBackend(address=actual_address, url=lamb_server_url, timeout_ms=actual_timeout) elif hasattr(config_model, \"model\") and hasattr(config_model, \"serial_number\"): backend_instance = AsyncLambBackend( address=None, url=lamb_server_url, timeout_ms=actual_timeout, model_name=getattr(config_model, \"model\"), serial_number=getattr(config_model, \"serial_number\") ) else: raise InstrumentConfigurationError( config_source, \"Lamb backend requires either an address or both model and serial_number in the config.\", ) if debug_mode: print(f\"Using AsyncLambBackend for model='{getattr(config_model, 'model', None)}', serial='{getattr(config_model, 'serial_number', None)}' via '{lamb_server_url}' with timeout {actual_timeout}ms.\") else: raise InstrumentConfigurationError( config_source, f\"Unsupported backend_type '{chosen_backend_type}'.\" ) # Step 5: Instantiate the final instrument driver class device_type_str: str = config_model.device_type instrument_class_to_init = cls._instrument_mapping.get(device_type_str.lower()) if instrument_class_to_init is None: raise InstrumentConfigurationError( config_source, f\"Unknown device_type: '{device_type_str}'. No registered instrument class.\", ) # The instrument's constructor receives the parsed configuration model and the # instantiated backend. instrument = instrument_class_to_init(config=config_model, backend=backend_instance) if debug_mode: print(f\"Instantiated {instrument_class_to_init.__name__} with {type(backend_instance).__name__}.\") print(\"Note: Backend connection is not established by __init__. Call 'await instrument.connect_backend()' explicitly.\") return instrument","title":"from_config"},{"location":"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type","text":"Initializes a specific instrument driver based on its type string. This factory method uses a mapping to find the appropriate instrument class for a given instrument_type string (e.g., 'oscilloscope') and passes any additional arguments to its constructor. PARAMETER DESCRIPTION instrument_type The type of the instrument to initialize. TYPE: str *args Positional arguments to pass to the instrument's constructor. TYPE: Any DEFAULT: () **kwargs Keyword arguments to pass to the instrument's constructor. TYPE: Any DEFAULT: {} RETURNS DESCRIPTION Instrument An instance of a specific Instrument subclass. RAISES DESCRIPTION InstrumentConfigurationError If the instrument_type is not recognized. Source code in pytestlab/instruments/AutoInstrument.py @classmethod def from_type(cls: Type[AutoInstrument], instrument_type: str, *args: Any, **kwargs: Any) -> Instrument: \"\"\"Initializes a specific instrument driver based on its type string. This factory method uses a mapping to find the appropriate instrument class for a given `instrument_type` string (e.g., 'oscilloscope') and passes any additional arguments to its constructor. Args: instrument_type: The type of the instrument to initialize. *args: Positional arguments to pass to the instrument's constructor. **kwargs: Keyword arguments to pass to the instrument's constructor. Returns: An instance of a specific Instrument subclass. Raises: InstrumentConfigurationError: If the instrument_type is not recognized. \"\"\" instrument_class = cls._instrument_mapping.get(instrument_type.lower()) if instrument_class: return instrument_class(*args, **kwargs) # type: ignore else: raise InstrumentConfigurationError( instrument_type, f\"Unknown instrument type: {instrument_type}\" )","title":"from_type"},{"location":"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn","text":"Fetches an instrument configuration from a CDN with local caching. This method attempts to retrieve a configuration file from a predefined CDN URL. For efficiency, it caches the configuration locally. If a cached version is available, it's used directly. Otherwise, the file is downloaded, cached for future use, and then returned. PARAMETER DESCRIPTION identifier The unique identifier for the configuration, which is used to construct the CDN URL (e.g., 'keysight/dsox1204g'). TYPE: str RETURNS DESCRIPTION Dict [ str , Any ] The loaded configuration data as a dictionary. RAISES DESCRIPTION FileNotFoundError If the configuration is not found on the CDN. InstrumentConfigurationError If the downloaded configuration is invalid. Source code in pytestlab/instruments/AutoInstrument.py @classmethod async def get_config_from_cdn(cls: Type[AutoInstrument], identifier: str) -> Dict[str, Any]: \"\"\"Fetches an instrument configuration from a CDN with local caching. This method attempts to retrieve a configuration file from a predefined CDN URL. For efficiency, it caches the configuration locally. If a cached version is available, it's used directly. Otherwise, the file is downloaded, cached for future use, and then returned. Args: identifier: The unique identifier for the configuration, which is used to construct the CDN URL (e.g., 'keysight/dsox1204g'). Returns: The loaded configuration data as a dictionary. Raises: FileNotFoundError: If the configuration is not found on the CDN. InstrumentConfigurationError: If the downloaded configuration is invalid. \"\"\" import pytestlab as ptl cache_dir = os.path.join(os.path.dirname(ptl.__file__), \"cache\", \"configs\") os.makedirs(cache_dir, exist_ok=True) cache_file = os.path.join(cache_dir, f\"{identifier}.yaml\") # Check for a cached version of the configuration first if os.path.exists(cache_file): try: async with aiofiles.open(cache_file, 'r') as f: content = await f.read() loaded_config = yaml.safe_load(content) # Validate the cached content; if corrupt, proceed to download if not isinstance(loaded_config, dict): os.remove(cache_file) raise InstrumentConfigurationError( identifier, \"Cached config is not a valid dictionary.\" ) return loaded_config except Exception as e: # If reading the cache fails, remove the broken file and fetch from CDN print(f\"Cache read failed for {identifier}: {e}. Fetching from CDN.\") if os.path.exists(cache_file): try: os.remove(cache_file) except OSError: pass # If not cached, fetch from the official CDN url = f\"https://pytestlab.org/config/{identifier}.yaml\" async with httpx.AsyncClient() as client: try: response = await client.get(url, timeout=10) response.raise_for_status() # Raise an exception for bad status codes config_text = response.text loaded_config = yaml.safe_load(config_text) if not isinstance(loaded_config, dict): raise InstrumentConfigurationError( identifier, f\"CDN config for {identifier} is not a valid dictionary.\", ) # Cache the newly downloaded configuration async with aiofiles.open(cache_file, 'w') as f: await f.write(config_text) return loaded_config except httpx.HTTPStatusError as http_err: # Handle HTTP errors, specifically 404 for not found if http_err.response.status_code == 404: raise FileNotFoundError(f\"Configuration file not found at {url} (HTTP 404).\") from http_err else: raise FileNotFoundError(f\"Failed to fetch configuration from CDN ({url}): HTTP {http_err.response.status_code}\") from http_err except httpx.RequestError as e: # Handle network-related errors raise FileNotFoundError(f\"Failed to fetch configuration from CDN ({url}): {str(e)}\") from e except yaml.YAMLError as ye: # Handle errors in parsing the YAML content raise InstrumentConfigurationError( identifier, f\"Error parsing YAML from CDN for {identifier}: {ye}\" ) from ye","title":"get_config_from_cdn"},{"location":"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local","text":"Loads an instrument configuration from the local filesystem. This method searches for a configuration file in two primary locations: 1. A built-in 'profiles' directory within the PyTestLab package. 2. A direct file path provided by the user. PARAMETER DESCRIPTION identifier The identifier for the profile (e.g., 'keysight/dsox1204g') or a direct path to a .yaml or .json file. TYPE: str normalized_identifier A pre-normalized version of the identifier. TYPE: Optional [ str ] DEFAULT: None RETURNS DESCRIPTION Dict [ str , Any ] The loaded configuration data as a dictionary. RAISES DESCRIPTION FileNotFoundError If no configuration file can be found at any of the searched locations. InstrumentConfigurationError If the file is found but is not a valid YAML/JSON dictionary. Source code in pytestlab/instruments/AutoInstrument.py @classmethod async def get_config_from_local(cls: Type[AutoInstrument], identifier: str, normalized_identifier: Optional[str] = None) -> Dict[str, Any]: \"\"\"Loads an instrument configuration from the local filesystem. This method searches for a configuration file in two primary locations: 1. A built-in 'profiles' directory within the PyTestLab package. 2. A direct file path provided by the user. Args: identifier: The identifier for the profile (e.g., 'keysight/dsox1204g') or a direct path to a .yaml or .json file. normalized_identifier: A pre-normalized version of the identifier. Returns: The loaded configuration data as a dictionary. Raises: FileNotFoundError: If no configuration file can be found at any of the searched locations. InstrumentConfigurationError: If the file is found but is not a valid YAML/JSON dictionary. \"\"\" import pytestlab as ptl norm_id = normalized_identifier if normalized_identifier is not None else os.path.normpath(identifier) current_file_directory = os.path.dirname(ptl.__file__) preset_path = os.path.join(current_file_directory, \"profiles\", norm_id + '.yaml') # Determine the correct file path to load from path_to_try: Optional[str] = None if os.path.exists(preset_path): # First, check for a built-in profile matching the identifier path_to_try = preset_path elif os.path.exists(identifier) and (identifier.endswith('.yaml') or identifier.endswith('.json')): # Next, check if the identifier is a direct path to an existing file path_to_try = identifier if path_to_try: try: async with aiofiles.open(path_to_try, 'r') as file: content = await file.read() loaded_config = yaml.safe_load(content) if not isinstance(loaded_config, dict): raise InstrumentConfigurationError( identifier, f\"Local config file '{path_to_try}' did not load as a dictionary.\", ) return loaded_config except yaml.YAMLError as ye: raise InstrumentConfigurationError( identifier, f\"Error parsing YAML from local file '{path_to_try}': {ye}\", ) from ye except Exception as e: raise FileNotFoundError(f\"Error reading local config file '{path_to_try}': {e}\") from e raise FileNotFoundError(f\"No configuration found for identifier '{identifier}' in local paths.\")","title":"get_config_from_local"},{"location":"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument","text":"Dynamically registers a new custom instrument class. This allows users to extend PyTestLab with their own instrument drivers. Once registered, the new instrument type can be used with the factory methods like from_config and from_type . PARAMETER DESCRIPTION instrument_type The string identifier for the new instrument type (e.g., 'my_custom_scope'). This is case-insensitive. TYPE: str instrument_class The class object that implements the instrument driver. It must be a subclass of pytestlab.Instrument . TYPE: Type [ Instrument [ Any ]] RAISES DESCRIPTION InstrumentConfigurationError If the instrument type name is already in use or if the provided class is not a valid subclass of Instrument . Source code in pytestlab/instruments/AutoInstrument.py @classmethod def register_instrument(cls: Type[AutoInstrument], instrument_type: str, instrument_class: Type[Instrument[Any]]) -> None: \"\"\"Dynamically registers a new custom instrument class. This allows users to extend PyTestLab with their own instrument drivers. Once registered, the new instrument type can be used with the factory methods like `from_config` and `from_type`. Args: instrument_type: The string identifier for the new instrument type (e.g., 'my_custom_scope'). This is case-insensitive. instrument_class: The class object that implements the instrument driver. It must be a subclass of `pytestlab.Instrument`. Raises: InstrumentConfigurationError: If the instrument type name is already in use or if the provided class is not a valid subclass of `Instrument`. \"\"\" type_key = instrument_type.lower() if type_key in cls._instrument_mapping: raise InstrumentConfigurationError( instrument_type, f\"Instrument type '{instrument_type}' already registered with class {cls._instrument_mapping[type_key].__name__}\", ) if not issubclass(instrument_class, Instrument): raise InstrumentConfigurationError( instrument_type, f\"Cannot register class {instrument_class.__name__}. It must be a subclass of Instrument.\", ) cls._instrument_mapping[type_key] = instrument_class # Consider using a logger if available, instead of print print(f\"Instrument type '{instrument_type}' registered with class {instrument_class.__name__}.\")","title":"register_instrument"},{"location":"api/instruments/#pytestlab.instruments.AutoInstrument-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.Instrument","text":"Bases: Generic [ ConfigType ] Base class for all instrument drivers. This class provides the core functionality for interacting with an instrument through a standardized, asynchronous interface. It handles command sending, querying, error checking, and logging. It is designed to be subclassed for specific instrument types (e.g., Oscilloscope, PowerSupply). The Instrument class is generic and typed with ConfigType , which allows each subclass to specify its own Pydantic configuration model. ATTRIBUTE DESCRIPTION config The Pydantic configuration model instance for this instrument. TYPE: ConfigType _backend The communication backend used to interact with the hardware or simulation. TYPE: AsyncInstrumentIO _command_log A log of all commands sent and responses received. TYPE: List [ Dict [ str , Any ]] _logger The logger instance for this instrument. TYPE: Any Initialize the Instrument class. PARAMETER DESCRIPTION config Configuration for the instrument. TYPE: ConfigType backend The communication backend instance. TYPE: AsyncInstrumentIO **kwargs Additional keyword arguments. TYPE: Any DEFAULT: {} Source code in pytestlab/instruments/instrument.py def __init__(self, config: ConfigType, backend: AsyncInstrumentIO, **kwargs: Any) -> None: # Changed to AsyncInstrumentIO \"\"\" Initialize the Instrument class. Args: config (ConfigType): Configuration for the instrument. backend (AsyncInstrumentIO): The communication backend instance. **kwargs: Additional keyword arguments. \"\"\" if not isinstance(config, InstrumentConfig): # Check against the bound base raise InstrumentConfigurationError( self.__class__.__name__, f\"A valid InstrumentConfig-compatible object must be provided, but got {type(config).__name__}.\", ) self.config = config self._backend = backend # This will be an AsyncInstrumentIO instance self._command_log = [] logger_name = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ self._logger = get_logger(logger_name) self._logger.info(f\"Instrument '{logger_name}': Initializing with backend '{type(backend).__name__}'.\")","title":"Instrument"},{"location":"api/instruments/#pytestlab.instruments.Instrument-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.Instrument.config","text":"","title":"config"},{"location":"api/instruments/#pytestlab.instruments.Instrument-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.Instrument.clear_status","text":"Clears the instrument's status registers and error queue (*CLS). Source code in pytestlab/instruments/instrument.py async def clear_status(self) -> None: \"\"\" Clears the instrument's status registers and error queue (*CLS). \"\"\" await self._send_command(\"*CLS\", skip_check=True) self._logger.debug(\"Status registers and error queue cleared (*CLS).\")","title":"clear_status"},{"location":"api/instruments/#pytestlab.instruments.Instrument.close","text":"Close the connection to the instrument via the backend. Source code in pytestlab/instruments/instrument.py async def close(self) -> None: \"\"\"Close the connection to the instrument via the backend.\"\"\" try: model_name_for_logger = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ self._logger.info(f\"Instrument '{model_name_for_logger}': Closing connection.\") await self._backend.close() # Changed to use close as per AsyncInstrumentIO self._logger.info(f\"Instrument '{model_name_for_logger}': Connection closed.\") except Exception as e: self._logger.error(f\"Instrument '{model_name_for_logger}': Error during backend close: {e}\")","title":"close"},{"location":"api/instruments/#pytestlab.instruments.Instrument.connect_backend","text":"Establishes the connection to the instrument via the backend. This method must be called after the instrument is instantiated to open the communication channel. It delegates the connection logic to the underlying backend. RAISES DESCRIPTION InstrumentConnectionError If the backend fails to connect. Source code in pytestlab/instruments/instrument.py async def connect_backend(self) -> None: \"\"\"Establishes the connection to the instrument via the backend. This method must be called after the instrument is instantiated to open the communication channel. It delegates the connection logic to the underlying backend. Raises: InstrumentConnectionError: If the backend fails to connect. \"\"\" logger_name = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ try: await self._backend.connect() self._logger.info(f\"Instrument '{logger_name}': Backend connected.\") except Exception as e: self._logger.error(f\"Instrument '{logger_name}': Failed to connect backend: {e}\") if hasattr(self._backend, 'disconnect'): # Check if disconnect is available (it should be for AsyncInstrumentIO) try: await self._backend.disconnect() except Exception as disc_e: self._logger.error(f\"Instrument '{logger_name}': Error disconnecting backend during failed connect: {disc_e}\") raise InstrumentConnectionError( instrument=logger_name, message=f\"Failed to connect backend: {e}\" ) from e","title":"connect_backend"},{"location":"api/instruments/#pytestlab.instruments.Instrument.from_config","text":"Source code in pytestlab/instruments/instrument.py @classmethod def from_config(cls: Type[Instrument], config: InstrumentConfig, debug_mode: bool = False) -> Instrument: # This method will likely need significant changes to support async backends. # For now, it's a placeholder and might not work correctly with async backends. # It should ideally accept an async_mode flag or similar to determine backend type. if not isinstance(config, InstrumentConfig): raise InstrumentConfigurationError( cls.__name__, \"from_config expects an InstrumentConfig object.\" ) # The backend instantiation is missing here and is crucial. # This will be handled by AutoInstrument.from_config later. raise NotImplementedError( \"from_config needs to be updated for async backend instantiation.\" )","title":"from_config"},{"location":"api/instruments/#pytestlab.instruments.Instrument.get_all_errors","text":"Reads and clears all errors currently present in the instrument's error queue. Source code in pytestlab/instruments/instrument.py async def get_all_errors(self) -> TypingList[Tuple[int, str]]: \"\"\" Reads and clears all errors currently present in the instrument's error queue. \"\"\" errors: TypingList[Tuple[int, str]] = [] max_errors_to_read = 50 for i in range(max_errors_to_read): try: code, message = await self.get_error() except InstrumentCommunicationError as e: self._logger.debug(f\"Communication error while reading error queue (iteration {i+1}): {e}\") if errors: self._logger.debug(f\"Returning errors read before communication failure: {errors}\") return errors if code == 0: break errors.append((code, message)) if code == -350: self._logger.debug(\"Error queue overflow (-350) detected. Stopping read.\") break else: self._logger.debug(f\"Warning: Read {max_errors_to_read} errors without reaching 'No error'. \" \"Error queue might still contain errors or be in an unexpected state.\") if not errors: self._logger.debug(\"No errors found in instrument queue.\") else: self._logger.debug(f\"Retrieved {len(errors)} error(s) from queue: {errors}\") return errors","title":"get_all_errors"},{"location":"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout","text":"Gets the communication timeout from the backend. Source code in pytestlab/instruments/instrument.py async def get_communication_timeout(self) -> int: \"\"\"Gets the communication timeout from the backend.\"\"\" timeout = await self._backend.get_timeout() self._logger.debug(f\"Communication timeout retrieved from backend: {timeout} ms.\") return timeout","title":"get_communication_timeout"},{"location":"api/instruments/#pytestlab.instruments.Instrument.get_error","text":"Reads and clears the oldest error from the instrument's error queue. Source code in pytestlab/instruments/instrument.py async def get_error(self) -> Tuple[int, str]: \"\"\" Reads and clears the oldest error from the instrument's error queue. \"\"\" response = (await self._query(\"SYSTem:ERRor?\")).strip() try: code_str, msg_part = response.split(',', 1) code = int(code_str) message = msg_part.strip().strip('\"') except (ValueError, IndexError) as e: self._logger.debug(f\"Warning: Unexpected error response format: '{response}'. Raising error.\") raise InstrumentCommunicationError( instrument=self.config.model, command=\"SYSTem:ERRor?\", message=f\"Could not parse error response: '{response}'\", ) from e if code != 0: self._logger.debug(f\"Instrument Error Query: Code={code}, Message='{message}'\") return code, message","title":"get_error"},{"location":"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version","text":"Queries the version of the SCPI standard the instrument complies with. Source code in pytestlab/instruments/instrument.py async def get_scpi_version(self) -> str: \"\"\" Queries the version of the SCPI standard the instrument complies with. \"\"\" response = (await self._query(\"SYSTem:VERSion?\")).strip() self._logger.debug(f\"SCPI Version reported: {response}\") return response","title":"get_scpi_version"},{"location":"api/instruments/#pytestlab.instruments.Instrument.health_check","text":"Performs a basic health check of the instrument. Source code in pytestlab/instruments/instrument.py @abstractmethod async def health_check(self) -> HealthReport: # Type hint HealthReport \"\"\"Performs a basic health check of the instrument.\"\"\" # Base implementation could try IDN and error queue check # report = HealthReport() # Initialize HealthReport # try: # report.instrument_idn = await self.id() # Ensure await for async calls # instrument_errors = await self.get_all_errors() # Ensure await for async calls # if instrument_errors: # report.warnings.extend([f\"Stored Error: {code} - {msg}\" for code, msg in instrument_errors]) # # if not report.errors and not report.warnings: # report.status = HealthStatus.OK # elif report.warnings and not report.errors: # report.status = HealthStatus.WARNING # else: # if errors are present # report.status = HealthStatus.ERROR # # except Exception as e: # report.status = HealthStatus.ERROR # report.errors.append(f\"Health check failed during IDN/Error Query: {str(e)}\") # return report pass # Replace with actual base implementation","title":"health_check"},{"location":"api/instruments/#pytestlab.instruments.Instrument.id","text":"Query the instrument for its identification string (*IDN?). Source code in pytestlab/instruments/instrument.py async def id(self) -> str: \"\"\" Query the instrument for its identification string (*IDN?). \"\"\" name = await self._query(\"*IDN?\") self._logger.debug(f\"Connected to {name}\") return name","title":"id"},{"location":"api/instruments/#pytestlab.instruments.Instrument.lock_panel","text":"Locks or unlocks the front panel of the instrument. Source code in pytestlab/instruments/instrument.py async def lock_panel(self, lock: bool = True) -> None: \"\"\" Locks or unlocks the front panel of the instrument. \"\"\" if lock: await self._send_command(\":SYSTem:LOCK\") else: await self._send_command(\":SYSTem:LOCal\") self._logger.debug(f\"Panel {'locked' if lock else 'unlocked (local control enabled)'}.\")","title":"lock_panel"},{"location":"api/instruments/#pytestlab.instruments.Instrument.requires","text":"Decorator to specify method requirements based on instrument configuration. Source code in pytestlab/instruments/instrument.py @classmethod def requires(cls, requirement: str) -> Callable: \"\"\" Decorator to specify method requirements based on instrument configuration. \"\"\" def decorator(func: Callable) -> Callable: def wrapped_func(self: Instrument, *args: Any, **kwargs: Any) -> Any: if not hasattr(self.config, 'requires') or not callable(self.config.requires): raise InstrumentConfigurationError( self.config.model, \"Config object missing 'requires' method for decorator.\", ) if self.config.requires(requirement): return func(self, *args, **kwargs) else: raise InstrumentConfigurationError( self.config.model, f\"Method '{func.__name__}' requires '{requirement}', which is not available for this instrument model/configuration.\", ) return wrapped_func return decorator","title":"requires"},{"location":"api/instruments/#pytestlab.instruments.Instrument.reset","text":"Reset the instrument to its default settings (*RST). Source code in pytestlab/instruments/instrument.py async def reset(self) -> None: \"\"\"Reset the instrument to its default settings (*RST).\"\"\" await self._send_command(\"*RST\") self._logger.debug(\"Instrument reset to default settings (*RST).\")","title":"reset"},{"location":"api/instruments/#pytestlab.instruments.Instrument.run_self_test","text":"Executes the instrument's internal self-test routine (*TST?) and reports result. Source code in pytestlab/instruments/instrument.py async def run_self_test(self, full_test: bool = True) -> str: \"\"\" Executes the instrument's internal self-test routine (*TST?) and reports result. \"\"\" if not full_test: self._logger.debug(\"Note: `full_test=False` currently ignored, running standard *TST? self-test.\") self._logger.debug(\"Running self-test (*TST?)...\") try: result_str = await self._query(\"*TST?\") code = int(result_str.strip()) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=\"*TST?\", message=f\"Unexpected non-integer response: '{result_str}'\", ) except InstrumentCommunicationError as e: raise InstrumentCommunicationError( instrument=self.config.model, command=\"*TST?\", message=\"Failed to execute query.\", ) from e if code == 0: self._logger.debug(\"Self-test query (*TST?) returned 0 (Passed).\") errors_after_test = await self.get_all_errors() if errors_after_test: details = \"; \".join([f\"{c}: {m}\" for c, m in errors_after_test]) warn_msg = f\"Self-test query passed, but errors found in queue afterwards: {details}\" self._logger.debug(warn_msg) return \"Passed\" else: self._logger.debug(f\"Self-test query (*TST?) returned non-zero code: {code} (Failed). Reading error queue...\") errors = await self.get_all_errors() details = \"; \".join([f\"{c}: {m}\" for c, m in errors]) if errors else 'No specific errors reported in queue' fail_msg = f\"Failed: Code {code}. Errors: {details}\" self._logger.debug(fail_msg) return fail_msg","title":"run_self_test"},{"location":"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout","text":"Sets the communication timeout on the backend. Source code in pytestlab/instruments/instrument.py async def set_communication_timeout(self, timeout_ms: int) -> None: \"\"\"Sets the communication timeout on the backend.\"\"\" await self._backend.set_timeout(timeout_ms) self._logger.debug(f\"Communication timeout set to {timeout_ms} ms on backend.\")","title":"set_communication_timeout"},{"location":"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete","text":"Waits for the instrument to finish all pending overlapping commands. The 'timeout' parameter's effect depends on the backend's query timeout settings. Source code in pytestlab/instruments/instrument.py async def wait_for_operation_complete(self, query_instrument: bool = True, timeout: float = 10.0) -> Optional[str]: \"\"\" Waits for the instrument to finish all pending overlapping commands. The 'timeout' parameter's effect depends on the backend's query timeout settings. \"\"\" if query_instrument: # The original logic for setting/restoring instrument.timeout has been removed # as the _Backend protocol does not define a timeout attribute. # The 'timeout' argument of this method might influence a timeout if the # _query method or backend implementation uses it, but _query currently # passes 'delay', not 'timeout'. For *OPC?, no delay is typically needed. # The backend's own communication timeout will apply to the query. self._logger.debug(f\"Waiting for operation complete (*OPC?). Effective timeout depends on backend (method timeout hint: {timeout}s).\") try: # The timeout parameter of this method is not directly passed to _query here. # _query's delay parameter is for a different purpose. response = await self._query(\"*OPC?\") # This now uses self._backend.query self._logger.debug(\"Operation complete query (*OPC?) returned.\") if response.strip() != \"1\": self._logger.debug(f\"Warning: *OPC? returned '{response}' instead of expected '1'.\") return response.strip() except InstrumentCommunicationError as e: # The 'timeout' parameter of this method is noted here for context. err_msg = f\"*OPC? query failed. This may be due to backend communication timeout (related to method's timeout param: {timeout}s).\" self._logger.debug(err_msg) raise InstrumentCommunicationError( instrument=self.config.model, command=\"*OPC?\", message=err_msg ) from e # 'finally' block for restoring timeout removed. else: await self._send_command(\"*OPC\") # This now uses self._backend.write self._logger.debug(\"Operation complete command (*OPC) sent (non-blocking). Status polling required.\") return None","title":"wait_for_operation_complete"},{"location":"api/instruments/#supported-instrument-types","text":"","title":"Supported Instrument Types"},{"location":"api/instruments/#oscilloscope","text":"","title":"Oscilloscope"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope","text":"","title":"Oscilloscope"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope-classes","text":"","title":"Classes"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult","text":"Bases: MeasurementResult A result class for oscilloscope channel readings (time, voltage, etc). Source code in pytestlab/experiments/results.py def __init__(self, values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat], instrument: str, units: str, measurement_type: str, timestamp: Optional[float] = None, # Allow optional timestamp override envelope: Optional[Dict[str, Any]] = None, # Add envelope as an explicit argument sampling_rate: Optional[float] = None, # Add sampling_rate for FFT **kwargs: Any) -> None: # Added **kwargs and type hint self.values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat] = values self.units: str = units self.instrument: str = instrument self.measurement_type: str = measurement_type self.timestamp: float = timestamp if timestamp is not None else time.time() # Envelope logic: always provide an envelope attribute if envelope is not None: self.envelope = envelope else: # Default: minimal valid envelope (empty dict, or customize as needed) self.envelope = {} # Store sampling rate for FFT calculations self.sampling_rate = sampling_rate # Store any additional kwargs as attributes for key, value in kwargs.items(): setattr(self, key, value)","title":"ChannelReadingResult"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult","text":"Bases: MeasurementResult A result class for FFT data from the oscilloscope. Source code in pytestlab/experiments/results.py def __init__(self, values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat], instrument: str, units: str, measurement_type: str, timestamp: Optional[float] = None, # Allow optional timestamp override envelope: Optional[Dict[str, Any]] = None, # Add envelope as an explicit argument sampling_rate: Optional[float] = None, # Add sampling_rate for FFT **kwargs: Any) -> None: # Added **kwargs and type hint self.values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat] = values self.units: str = units self.instrument: str = instrument self.measurement_type: str = measurement_type self.timestamp: float = timestamp if timestamp is not None else time.time() # Envelope logic: always provide an envelope attribute if envelope is not None: self.envelope = envelope else: # Default: minimal valid envelope (empty dict, or customize as needed) self.envelope = {} # Store sampling rate for FFT calculations self.sampling_rate = sampling_rate # Store any additional kwargs as attributes for key, value in kwargs.items(): setattr(self, key, value)","title":"FFTResult"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult","text":"Bases: MeasurementResult A result class for frequency response analysis data. Source code in pytestlab/experiments/results.py def __init__(self, values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat], instrument: str, units: str, measurement_type: str, timestamp: Optional[float] = None, # Allow optional timestamp override envelope: Optional[Dict[str, Any]] = None, # Add envelope as an explicit argument sampling_rate: Optional[float] = None, # Add sampling_rate for FFT **kwargs: Any) -> None: # Added **kwargs and type hint self.values: Union[np.ndarray, pl.DataFrame, np.float64, TypingList[Any], UFloat] = values self.units: str = units self.instrument: str = instrument self.measurement_type: str = measurement_type self.timestamp: float = timestamp if timestamp is not None else time.time() # Envelope logic: always provide an envelope attribute if envelope is not None: self.envelope = envelope else: # Default: minimal valid envelope (empty dict, or customize as needed) self.envelope = {} # Store sampling rate for FFT calculations self.sampling_rate = sampling_rate # Store any additional kwargs as attributes for key, value in kwargs.items(): setattr(self, key, value)","title":"FRanalysisResult"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope","text":"Bases: Instrument [ OscilloscopeConfig ] Drives a digital oscilloscope for waveform acquisition and measurement. This class provides a comprehensive, high-level interface for controlling an oscilloscope. It builds upon the base Instrument class and adds extensive functionality specific to oscilloscopes. Key features include: - Facade-based interfaces for channels, trigger, and acquisition for cleaner code. - Methods for reading waveforms, performing automated measurements (e.g., Vpp, Vrms). - Support for advanced features like FFT and Frequency Response Analysis (FRA). - Built-in waveform generator control if the hardware supports it. - Screenshot capability. ATTRIBUTE DESCRIPTION config The Pydantic configuration object ( OscilloscopeConfig ) containing settings specific to this oscilloscope. TYPE: OscilloscopeConfig trigger A ScopeTriggerFacade for configuring trigger settings. acquisition A ScopeAcquisitionFacade for acquisition system settings. Initialize the Oscilloscope class with the given VISA resource and profile information. Args: config (OscilloscopeConfig): Configuration object for the oscilloscope. debug_mode (bool): Enable debug mode. (Handled by base or backend) simulate (bool): Enable simulation mode. (Handled by base or backend) Source code in pytestlab/instruments/Oscilloscope.py def __init__(self, config: OscilloscopeConfig, debug_mode: bool = False, simulate: bool = False, **kwargs: Any) -> None: # config is now non-optional \"\"\" Initialize the Oscilloscope class with the given VISA resource and profile information. Args: config (OscilloscopeConfig): Configuration object for the oscilloscope. debug_mode (bool): Enable debug mode. (Handled by base or backend) simulate (bool): Enable simulation mode. (Handled by base or backend) \"\"\" # The config is already validated by the loader to be OscilloscopeConfig V2 super().__init__(config=config, debug_mode=debug_mode, simulate=simulate, **kwargs) # Pass kwargs # Initialize facades self.trigger = ScopeTriggerFacade(self) self.acquisition = ScopeAcquisitionFacade(self)","title":"Oscilloscope"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.acquisition","text":"","title":"acquisition"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.config","text":"","title":"config"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.trigger","text":"","title":"trigger"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale","text":"Auto scale the oscilloscope display. This method sends an SCPI command to the oscilloscope to auto scale the display. Example: auto_scale() Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def auto_scale(self) -> None: \"\"\" Auto scale the oscilloscope display. This method sends an SCPI command to the oscilloscope to auto scale the display. Example: >>> auto_scale() \"\"\" await self._send_command(\":AUToscale\")","title":"auto_scale"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel","text":"Returns a facade for interacting with a specific channel. This method provides a convenient, chainable interface for controlling a single oscilloscope channel. PARAMETER DESCRIPTION ch_num The channel number (1-based). TYPE: int RETURNS DESCRIPTION ScopeChannelFacade A ScopeChannelFacade object for the specified channel. RAISES DESCRIPTION InstrumentParameterError If the channel number is invalid. Source code in pytestlab/instruments/Oscilloscope.py @validate_call def channel(self, ch_num: int) -> ScopeChannelFacade: \"\"\"Returns a facade for interacting with a specific channel. This method provides a convenient, chainable interface for controlling a single oscilloscope channel. Args: ch_num: The channel number (1-based). Returns: A `ScopeChannelFacade` object for the specified channel. Raises: InstrumentParameterError: If the channel number is invalid. \"\"\" if not self.config.channels or not (1 <= ch_num <= len(self.config.channels)): num_conf_ch = len(self.config.channels) if self.config.channels else 0 raise InstrumentParameterError( parameter=\"ch_num\", value=ch_num, valid_range=(1, num_conf_ch), message=\"Channel number is out of range.\", ) return ScopeChannelFacade(self, ch_num)","title":"channel"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft","text":"Configure the oscilloscope to perform an FFT on the specified channel. :param source_channel: The channel number to perform FFT on. :param scale: The vertical scale of the FFT display. Instrument specific. :param offset: The vertical offset of the FFT display. Instrument specific. :param span: The frequency span for the FFT. Instrument specific. :param window_type: The windowing function. Case-insensitive. From config.fft.window_types. :param units: The unit for FFT magnitude. Case-insensitive. From config.fft.units. :param display: True to turn FFT display ON, False for OFF. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"fft\") async def configure_fft(self, source_channel: int, scale: Optional[float] = None, offset: Optional[float] = None, span: Optional[float] = None, window_type: str = 'HANNing', units: str = 'DECibel', display: bool = True) -> None: \"\"\" Configure the oscilloscope to perform an FFT on the specified channel. :param source_channel: The channel number to perform FFT on. :param scale: The vertical scale of the FFT display. Instrument specific. :param offset: The vertical offset of the FFT display. Instrument specific. :param span: The frequency span for the FFT. Instrument specific. :param window_type: The windowing function. Case-insensitive. From config.fft.window_types. :param units: The unit for FFT magnitude. Case-insensitive. From config.fft.units. :param display: True to turn FFT display ON, False for OFF. \"\"\" if self.config.fft is None: raise InstrumentConfigurationError( self.config.model, \"FFT not configured for this instrument.\" ) if not (1 <= source_channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"source_channel\", value=source_channel, valid_range=(1, len(self.config.channels)), message=\"Source channel number is out of range.\", ) # Validate window_type against config.fft.window_types (List[str]) # Assuming window_type parameter is the SCPI string itself if window_type.upper() not in [wt.upper() for wt in self.config.fft.window_types]: raise InstrumentParameterError( parameter=\"window_type\", value=window_type, valid_range=self.config.fft.window_types, message=\"Unsupported FFT window type.\", ) scpi_window = window_type # Validate units against config.fft.units (List[str]) if units.upper() not in [u.upper() for u in self.config.fft.units]: raise InstrumentParameterError( parameter=\"units\", value=units, valid_range=self.config.fft.units, message=\"Unsupported FFT units.\", ) scpi_units = units await self._send_command(f':FFT:SOURce1 CHANnel{source_channel}') await self._send_command(f':FFT:WINDow {scpi_window}') if span is not None: await self._send_command(f':FFT:SPAn {span}') await self._send_command(f':FFT:VTYPe {scpi_units}') if scale is not None: await self._send_command(f':FFT:SCALe {scale}') if offset is not None: await self._send_command(f':FFT:OFFSet {offset}') scpi_display_state = SCPIOnOff.ON.value if display else SCPIOnOff.OFF.value await self._send_command(f':FFT:DISPlay {scpi_display_state}') self._logger.debug(f\"FFT configured for channel {source_channel}.\")","title":"configure_fft"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger","text":"Sets the trigger for the oscilloscope. :param channel: The channel to set the trigger for (used if source is None or a channel itself) :param level: The trigger level in volts :param source: The source of the trigger. Default behaviour is to use the channel. Valid options CHANnel | EXTernal | LINE | WGEN :param trigger_type: The type of trigger. Default is 'HIGH' (Note: this param seems unused in current logic for level setting) :param slope: The slope of the trigger. Default is TriggerSlope.POSITIVE :param mode: The trigger mode. Default is 'EDGE' Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def configure_trigger(self, channel: int, level: float, source: Optional[str] = None, trigger_type: str = \"HIGH\", slope: TriggerSlope = TriggerSlope.POSITIVE, mode: str = \"EDGE\") -> None: \"\"\" Sets the trigger for the oscilloscope. :param channel: The channel to set the trigger for (used if source is None or a channel itself) :param level: The trigger level in volts :param source: The source of the trigger. Default behaviour is to use the channel. Valid options CHANnel<n> | EXTernal | LINE | WGEN :param trigger_type: The type of trigger. Default is 'HIGH' (Note: this param seems unused in current logic for level setting) :param slope: The slope of the trigger. Default is TriggerSlope.POSITIVE :param mode: The trigger mode. Default is 'EDGE' \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Primary channel number is out of range.\", ) actual_source: str if source is None: actual_source = f\"CHANnel{channel}\" else: actual_source = source.upper() # Check if source is a channel (handle CH1, CHAN1, CHANNEL1 formats) if actual_source.startswith(\"CH\"): try: num_str = \"\".join(filter(str.isdigit, actual_source)) if not num_str: raise ValueError(\"No digits found in channel source string\") source_channel_to_validate = int(num_str) if not (1 <= source_channel_to_validate <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"source\", value=source, valid_range=(1, len(self.config.channels)), message=\"Source channel number is out of range.\", ) # Normalize the channel source to CHANNEL format for SCPI command actual_source = f\"CHANnel{source_channel_to_validate}\" except (ValueError, IndexError) as e: raise InstrumentParameterError( parameter=\"source\", value=source, message=\"Invalid channel format in source.\", ) from e elif actual_source not in [\"EXTERNAL\", \"LINE\", \"WGEN\"]: raise InstrumentParameterError( parameter=\"source\", value=source, valid_range=[\"EXTernal\", \"LINE\", \"WGEN\"], message=\"Invalid source.\", ) await self._send_command(f':TRIG:SOUR {actual_source}') await self._send_command(f':TRIGger:LEVel {level}, CHANnel{channel}') if slope.value not in self.config.trigger.slopes: raise InstrumentParameterError( parameter=\"slope\", value=slope.value, valid_range=self.config.trigger.slopes, message=\"Unsupported trigger slope.\", ) scpi_slope = slope.value if mode.upper() not in [m.upper() for m in self.config.trigger.modes]: # Case-insensitive check self._logger.warning(f\"Trigger mode '{mode}' not in configured supported modes: {self.config.trigger.modes}. Passing directly to instrument.\") scpi_mode = mode await self._send_command(f':TRIGger:SLOPe {scpi_slope}') await self._send_command(f':TRIGger:MODE {scpi_mode}') await self._wait() self._logger.debug(f\"\"\"Trigger set with the following parameters: Trigger Source: {actual_source} Trigger Level for CHAN{channel}: {level} Trigger Slope: {scpi_slope} Trigger Mode: {scpi_mode}\"\"\")","title":"configure_trigger"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel","text":"Display or hide the specified channel(s) on the oscilloscope. Args: channels (Union[int, List[int]]): A single channel number or a list of channel numbers. state (bool): True to display (ON), False to hide (OFF). Default is True. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def display_channel(self, channels: Union[int, List[int]], state: bool = True) -> None: \"\"\" Display or hide the specified channel(s) on the oscilloscope. Args: channels (Union[int, List[int]]): A single channel number or a list of channel numbers. state (bool): True to display (ON), False to hide (OFF). Default is True. \"\"\" ch_list: List[int] if isinstance(channels, int): ch_list = [channels] elif isinstance(channels, list) and all(isinstance(ch, int) for ch in channels): ch_list = channels else: # validate_call should catch this if type hints are precise enough raise InstrumentParameterError( message=\"channels must be an int or a list of ints\" ) scpi_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value for ch_num in ch_list: if not (1 <= ch_num <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channels\", value=ch_num, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) await self._send_command(f\"CHANnel{ch_num}:DISPlay {scpi_state}\")","title":"display_channel"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display","text":"Switches on or off the FFT display. :param state: True to enable FFT display, False to disable. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"fft\") async def fft_display(self, state: bool = True) -> None: \"\"\" Switches on or off the FFT display. :param state: True to enable FFT display, False to disable. \"\"\" scpi_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value await self._send_command(f\":FFT:DISPlay {scpi_state}\") self._logger.debug(f\"FFT display {'enabled' if state else 'disabled'}.\")","title":"fft_display"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep","text":"Perform a frequency response analysis sweep. RETURNS DESCRIPTION FRanalysisResult Containing the frequency response analysis data. TYPE: FRanalysisResult Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"franalysis\") #@ConfigRequires(\"function_generator\") async def franalysis_sweep(self, input_channel: int, output_channel: int, start_freq: float, stop_freq: float, amplitude: float, points: int = 10, trace: str = \"none\", load: str = \"onemeg\", disable_on_complete: bool = True) -> FRanalysisResult: \"\"\" Perform a frequency response analysis sweep. Returns: FRanalysisResult: Containing the frequency response analysis data. \"\"\" if self.config.function_generator is None or self.config.franalysis is None: raise InstrumentConfigurationError( self.config.model, \"Function generator or FRANalysis not configured.\" ) if not (1 <= input_channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"input_channel\", value=input_channel, valid_range=(1, len(self.config.channels)), message=\"Input channel is out of range.\", ) if not (1 <= output_channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"output_channel\", value=output_channel, valid_range=(1, len(self.config.channels)), message=\"Output channel is out of range.\", ) # Ensure points is at least 2 for a valid sweep if points < 2: raise InstrumentParameterError( parameter=\"points\", value=points, valid_range=(2, \"inf\"), message=\"Points for sweep must be at least 2.\", ) # SCPI commands for frequency response analysis sweep await self._send_command(f\":FUNCtion:FRANalysis\") await self._send_command(f\":FREQuency:START {start_freq}\") await self._send_command(f\":FREQuency:STOP {stop_freq}\") await self._send_command(f\":AMPLitude {amplitude}\") await self._send_command(f\":POINTS {points}\") await self._send_command(f\":TRACe:FEED {trace}\") await self._send_command(f\":LOAD {load}\") if disable_on_complete: await self._send_command(\":DISABLE\") # Optionally wait for completion or check status await self._wait() # Ensure to wait for the command to complete # Assuming the result can be fetched with a common query, adjust as necessary result_data = await self._query(\":FETCH:FRANalysis?\") # Parse the result data into a structured format if needed # For now, let's assume it's a simple comma-separated value string parsed_results = [float(val) for val in result_data.split(',')] # Create a DataFrame or structured result object # Assuming two columns: Frequency and Magnitude freq_values = parsed_results[0::2] # Extracting frequency values mag_values = parsed_results[1::2] # Extracting magnitude values return FRanalysisResult( instrument=self.config.model, units=\"\", measurement_type=\"FrequencyResponse\", values=pl.DataFrame({ \"Frequency (Hz)\": freq_values, \"Magnitude\": mag_values }) )","title":"franalysis_sweep"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config","text":"Source code in pytestlab/instruments/Oscilloscope.py @classmethod def from_config(cls: Type['Oscilloscope'], config: OscilloscopeConfig, debug_mode: bool = False, **kwargs: Any) -> 'Oscilloscope': # This method aligns with the new __init__ signature. return cls(config=config, debug_mode=debug_mode, **kwargs)","title":"from_config"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display","text":"Switches on or off the function display (e.g. Math or WGEN waveform). :param state: True to enable display, False to disable. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def function_display(self, state: bool = True) -> None: \"\"\" Switches on or off the function display (e.g. Math or WGEN waveform). :param state: True to enable display, False to disable. \"\"\" scpi_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value await self._send_command(f\":FUNCtion:DISPlay {scpi_state}\") self._logger.debug(f\"Function display {'enabled' if state else 'disabled'}.\")","title":"function_display"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis","text":"Gets the channel axis of the oscilloscope. (y-axis) :param channel: The channel to get the axis for :return: A list containing the channel axis scale and offset Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_channel_axis(self, channel: int) -> List[float]: \"\"\" Gets the channel axis of the oscilloscope. (y-axis) :param channel: The channel to get the axis for :return: A list containing the channel axis scale and offset \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) scale_str: str = await self._query(f\":CHANnel{channel}:SCALe?\") offset_str: str = await self._query(f\":CHANnel{channel}:OFFSet?\") return [np.float64(scale_str), np.float64(offset_str)]","title":"get_channel_axis"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation","text":"Gets the probe attenuation for a given channel. PARAMETER DESCRIPTION channel The oscilloscope channel to get the probe attenuation for. TYPE: int RETURNS DESCRIPTION str The probe attenuation value (e.g., '10:1', '1:1'). TYPE: str Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_probe_attenuation(self, channel: int) -> str: # Returns string like \"10:1\" \"\"\" Gets the probe attenuation for a given channel. Parameters: channel (int): The oscilloscope channel to get the probe attenuation for. Returns: str: The probe attenuation value (e.g., '10:1', '1:1'). \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) response_str: str = (await self._query(f\"CHANnel{channel}:PROBe?\")).strip() # Assuming response is the numeric factor (e.g., \"10\", \"1\") try: # Ensure it's a number before formatting num_factor = float(response_str) if num_factor.is_integer(): return f\"{int(num_factor)}:1\" return f\"{num_factor}:1\" except ValueError: self._logger.warning(f\"Could not parse probe attenuation factor '{response_str}' as number. Returning raw.\") return response_str # Or raise error","title":"get_probe_attenuation"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate","text":"Get the current sampling rate of the oscilloscope. Returns: float: The sampling rate in Hz. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_sampling_rate(self) -> float: \"\"\" Get the current sampling rate of the oscilloscope. Returns: float: The sampling rate in Hz. \"\"\" response_str: str = await self._query(\":ACQuire:SRATe?\") sampling_rate_float: float = np.float64(response_str) return sampling_rate_float","title":"get_sampling_rate"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis","text":"Gets the time axis of the oscilloscope. (x-axis) :return: A list containing the time axis scale and position Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_time_axis(self) -> List[float]: \"\"\" Gets the time axis of the oscilloscope. (x-axis) :return: A list containing the time axis scale and position \"\"\" scale_str: str = await self._query(\":TIMebase:SCALe?\") position_str: str = await self._query(\":TIMebase:POSition?\") return [np.float64(scale_str), np.float64(position_str)]","title":"get_time_axis"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check","text":"Performs a basic health check of the oscilloscope instrument. RETURNS DESCRIPTION HealthReport A report containing the instrument's health status, errors, warnings, and supported features. TYPE: HealthReport Source code in pytestlab/instruments/Oscilloscope.py async def health_check(self) -> HealthReport: \"\"\" Performs a basic health check of the oscilloscope instrument. Returns: HealthReport: A report containing the instrument's health status, errors, warnings, and supported features. \"\"\" report = HealthReport() try: # Get instrument identification report.instrument_idn = await self.id() # Check for stored errors instrument_errors = await self.get_all_errors() if instrument_errors: report.warnings.extend([f\"Stored Error: {code} - {msg}\" for code, msg in instrument_errors]) # Set initial status based on errors if not report.errors and not report.warnings: report.status = HealthStatus.OK elif report.warnings and not report.errors: report.status = HealthStatus.WARNING else: report.status = HealthStatus.ERROR except Exception as e: report.status = HealthStatus.ERROR report.errors.append(f\"Health check failed during IDN/Error Query: {str(e)}\") try: # Test basic oscilloscope functionality _ = await self.get_time_axis() # Check supported features based on configuration if hasattr(self.config, 'fft') and self.config.fft: report.supported_features[\"fft\"] = True else: report.supported_features[\"fft\"] = False if hasattr(self.config, 'franalysis') and self.config.franalysis: report.supported_features[\"franalysis\"] = True else: report.supported_features[\"franalysis\"] = False if hasattr(self.config, 'function_generator') and self.config.function_generator: report.supported_features[\"function_generator\"] = True else: report.supported_features[\"function_generator\"] = False except Exception as e: report.errors.append(f\"Oscilloscope-specific check failed: {str(e)}\") # Determine backend status if hasattr(self, '_backend') and hasattr(self._backend, '__class__'): backend_name = self._backend.__class__.__name__ if \"SimBackend\" in backend_name: report.backend_status = \"Simulated\" elif \"VisaBackend\" in backend_name: report.backend_status = \"VISA Connection\" elif \"LambInstrument\" in backend_name or \"LambBackend\" in backend_name: report.backend_status = \"Lamb Connection\" else: report.backend_status = f\"Unknown backend: {backend_name}\" else: report.backend_status = \"Backend information unavailable\" # Final status evaluation if report.errors and report.status != HealthStatus.ERROR: report.status = HealthStatus.ERROR elif report.warnings and report.status == HealthStatus.OK: report.status = HealthStatus.WARNING # If no errors or warnings after all checks, and status is still UNKNOWN, set to OK if report.status == HealthStatus.UNKNOWN and not report.errors and not report.warnings: report.status = HealthStatus.OK return report","title":"health_check"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel","text":"Locks the panel of the instrument PARAMETER DESCRIPTION lock True to lock the panel, False to unlock it TYPE: bool DEFAULT: True Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def lock_panel(self, lock: bool = True) -> None: \"\"\" Locks the panel of the instrument Args: lock (bool): True to lock the panel, False to unlock it \"\"\" scpi_state = SCPIOnOff.ON.value if lock else SCPIOnOff.OFF.value await self._send_command(f\":SYSTem:LOCK {scpi_state}\")","title":"lock_panel"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage","text":"Measure the root-mean-square (RMS) voltage for a specified channel. Args: channel (int): The channel identifier. Returns: MeasurementResult: An object containing the RMS voltage measurement. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def measure_rms_voltage(self, channel: int) -> MeasurementResult: \"\"\" Measure the root-mean-square (RMS) voltage for a specified channel. Args: channel (int): The channel identifier. Returns: MeasurementResult: An object containing the RMS voltage measurement. \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) response_str: str = await self._query(f\"MEAS:VRMS? CHAN{channel}\") reading: float = float(response_str) value_to_return: float | UFloat = reading if self.config.measurement_accuracy: mode_key = f\"vrms_ch{channel}\" self._logger.debug(f\"Attempting to find accuracy spec for Vrms on channel {channel} with key: '{mode_key}'\") spec = self.config.measurement_accuracy.get(mode_key) if spec: sigma = spec.calculate_std_dev(reading, range_value=None) if sigma > 0: value_to_return = ufloat(reading, sigma) self._logger.debug(f\"Applied accuracy spec '{mode_key}', value: {value_to_return}\") else: self._logger.debug(f\"Accuracy spec '{mode_key}' resulted in sigma=0. Returning float.\") else: self._logger.debug(f\"No accuracy spec found for Vrms on channel {channel} with key '{mode_key}'. Returning float.\") else: self._logger.debug(f\"No measurement_accuracy configuration in instrument for Vrms on channel {channel}. Returning float.\") self._logger.debug(f\"RMS Voltage (Channel {channel}): {value_to_return}\") measurement_result = MeasurementResult( values=value_to_return, instrument=self.config.model, units=\"V\", measurement_type=\"rms_voltage\" ) return measurement_result","title":"measure_rms_voltage"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak","text":"Measure the peak-to-peak voltage for a specified channel. Args: channel (int): The channel identifier. Returns: MeasurementResult: An object containing the peak-to-peak voltage measurement. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def measure_voltage_peak_to_peak(self, channel: int) -> MeasurementResult: \"\"\" Measure the peak-to-peak voltage for a specified channel. Args: channel (int): The channel identifier. Returns: MeasurementResult: An object containing the peak-to-peak voltage measurement. \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) response_str: str = await self._query(f\"MEAS:VPP? CHAN{channel}\") reading: float = float(response_str) value_to_return: float | UFloat = reading if self.config.measurement_accuracy: mode_key = f\"vpp_ch{channel}\" self._logger.debug(f\"Attempting to find accuracy spec for Vpp on channel {channel} with key: '{mode_key}'\") spec = self.config.measurement_accuracy.get(mode_key) if spec: sigma = spec.calculate_std_dev(reading, range_value=None) if sigma > 0: value_to_return = ufloat(reading, sigma) self._logger.debug(f\"Applied accuracy spec '{mode_key}', value: {value_to_return}\") else: self._logger.debug(f\"Accuracy spec '{mode_key}' resulted in sigma=0. Returning float.\") else: self._logger.debug(f\"No accuracy spec found for Vpp on channel {channel} with key '{mode_key}'. Returning float.\") else: self._logger.debug(f\"No measurement_accuracy configuration in instrument for Vpp on channel {channel}. Returning float.\") measurement_result = MeasurementResult( values=value_to_return, units=\"V\", instrument=self.config.model, measurement_type=\"P2PV\" ) self._logger.debug(f\"Peak to Peak Voltage (Channel {channel}): {value_to_return}\") return measurement_result","title":"measure_voltage_peak_to_peak"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels","text":"Reads and processes waveform data from one or more channels. This is a primary data acquisition method. It triggers an acquisition, reads the raw data for the specified channels, and uses the preamble to convert the data into a ChannelReadingResult containing properly scaled time and voltage values in a Polars DataFrame. PARAMETER DESCRIPTION *channels A variable number of channel numbers (e.g., read_channels(1, 2) ) or a single list/tuple of channels (e.g., read_channels([1, 2]) ). TYPE: Union [ int , List [ int ], Tuple [ int , ...]] DEFAULT: () points Deprecated. The number of points is determined by the timebase and instrument settings. TYPE: Optional [ int ] DEFAULT: None run_after This parameter is currently unused. TYPE: bool DEFAULT: True timebase If provided, sets the time-per-division for this acquisition. TYPE: Optional [ float ] DEFAULT: None RETURNS DESCRIPTION ChannelReadingResult A ChannelReadingResult containing the waveform data. RAISES DESCRIPTION InstrumentParameterError If channel numbers are invalid or not provided. InstrumentDataError If time values cannot be generated. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def read_channels(self, *channels: Union[int, List[int], Tuple[int, ...]], points: Optional[int] = None, run_after: bool = True, timebase: Optional[float] = None, **kwargs) -> ChannelReadingResult: \"\"\"Reads and processes waveform data from one or more channels. This is a primary data acquisition method. It triggers an acquisition, reads the raw data for the specified channels, and uses the preamble to convert the data into a `ChannelReadingResult` containing properly scaled time and voltage values in a Polars DataFrame. Args: *channels: A variable number of channel numbers (e.g., `read_channels(1, 2)`) or a single list/tuple of channels (e.g., `read_channels([1, 2])`). points: Deprecated. The number of points is determined by the timebase and instrument settings. run_after: This parameter is currently unused. timebase: If provided, sets the time-per-division for this acquisition. Returns: A `ChannelReadingResult` containing the waveform data. Raises: InstrumentParameterError: If channel numbers are invalid or not provided. InstrumentDataError: If time values cannot be generated. \"\"\" if 'runAfter' in kwargs: warnings.warn( \"'runAfter' is deprecated, use 'run_after' instead.\", DeprecationWarning, stacklevel=2, ) run_after = kwargs['runAfter'] processed_channels: List[int] if not channels: raise InstrumentParameterError(message=\"No channels specified.\") first_arg = channels[0] if isinstance(first_arg, (list, tuple)) and len(channels) == 1: if not all(isinstance(ch_num, int) for ch_num in first_arg): raise InstrumentParameterError( message=\"All elements in channel list/tuple must be integers.\" ) processed_channels = list(first_arg) elif all(isinstance(ch_num, int) for ch_num in channels): # type: ignore [arg-type] processed_channels = list(channels) # type: ignore [assignment] else: raise InstrumentParameterError( message=\"Invalid channel arguments. Must be integers or a single list/tuple of integers.\" ) if not processed_channels: raise InstrumentParameterError( message=\"No channels specified in the list/tuple.\" ) if timebase is not None: current_time_axis = await self.get_time_axis() await self.set_time_axis(scale=timebase, position=current_time_axis[1]) if points is not None: self._logger.debug(f\"Points argument is deprecated (value: {points}). Use set_time_axis instead.\") self._logger.debug(\"starting channel read\") for ch_num_val in processed_channels: if not (1 <= ch_num_val <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channels\", value=ch_num_val, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) sampling_rate_float: float = float(await self.get_sampling_rate()) channel_commands_str: str = ', '.join(f\"CHANnel{ch}\" for ch in processed_channels) acq_type_enum_or_str = await self.acquisition.get_acquisition_type() is_average_mode = False if isinstance(acq_type_enum_or_str, AcquisitionType): is_average_mode = acq_type_enum_or_str == AcquisitionType.AVERAGE elif isinstance(acq_type_enum_or_str, str): is_average_mode = acq_type_enum_or_str.upper() == \"AVERAGE\" # Handle different acquisition modes. Averaging mode often requires a # special command sequence to ensure the requested number of averages # are acquired before the data is read. if is_average_mode: self._logger.debug(\"AVERAGE acquisition type detected - using special sequence\") avg_count_int: int = await self.acquisition.get_acquisition_average_count() self._logger.debug(f\"Current average count: {avg_count_int}\") await self._send_command(\":ACQuire:COMPlete 100\") # Ensure all averages are processed await self._send_command(\":STOP\") await self._wait() # Force a new acquisition sequence for averaging sweep_orig_str: str = (await self._query(\":TRIGger:SWEep?\")).strip() await self._send_command(\":TRIGger:SWEep AUTO\") await self._send_command(f\"DIGitize {channel_commands_str}\", skip_check=True) await self._send_command(\":TRIGger:FORCe\", skip_check=True) await self._send_command(\"*OPC\") self._logger.debug(\"Waiting for acquisition to complete \u2026\") await self._wait() await self._send_command(\":TRIGger:FORCe\", skip_check=True) self._logger.debug(\"Waiting for acquisition to complete \u2026\") await self._wait() await self._send_command(f\":TRIGger:SWEep {sweep_orig_str}\", skip_check=True) await self.clear_status() else: # For other modes, a simple DIGitize command is sufficient. await self._send_command(f\"DIGitize {channel_commands_str}\") await self._send_command(f':WAVeform:SOURce CHANnel{processed_channels[0]}') await self._send_command(':WAVeform:FORMat BYTE') await self._send_command(':WAVeform:POINts:MODE RAW') pream: Preamble = await self._read_preamble() time_values_np: Optional[np.ndarray] = None measurement_results_dict: Dict[str, np.ndarray] = {} # Loop through each requested channel to read its data for ch_num_loop in processed_channels: raw_wave_data = await self._read_wave_data(f\"CHANnel{ch_num_loop}\") # Convert raw ADC values to volts using the preamble data voltages_np: np.ndarray = (raw_wave_data - pream.yref) * pream.yinc + pream.yorg # Generate the corresponding time axis array, but only once. if time_values_np is None: n_pts_int: int = len(voltages_np) time_values_np = (np.arange(n_pts_int) - pream.xref) * pream.xinc + pream.xorg measurement_results_dict[f\"Channel {ch_num_loop} (V)\"] = voltages_np if time_values_np is None: raise InstrumentDataError( self.config.model, \"Time values were not generated during channel read.\" ) return ChannelReadingResult( instrument=self.config.model, units=\"V\", measurement_type=\"ChannelVoltageTime\", sampling_rate=sampling_rate_float, values=pl.DataFrame({ \"Time (s)\": time_values_np, **measurement_results_dict }) )","title":"read_channels"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data","text":"Acquires time-domain data for the specified channel and computes the FFT using the analysis submodule. PARAMETER DESCRIPTION channel The channel number to perform FFT on. TYPE: int window The windowing function to apply before FFT (e.g., 'hann', 'hamming', None). TYPE: Optional [ str ] DEFAULT: 'hann' RETURNS DESCRIPTION FFTResult An object containing the computed FFT data (frequency and linear magnitude). TYPE: FFTResult Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def read_fft_data(self, channel: int, window: Optional[str] = 'hann') -> FFTResult: \"\"\" Acquires time-domain data for the specified channel and computes the FFT using the analysis submodule. Args: channel (int): The channel number to perform FFT on. window (Optional[str]): The windowing function to apply before FFT (e.g., 'hann', 'hamming', None). Returns: FFTResult: An object containing the computed FFT data (frequency and linear magnitude). \"\"\" self._logger.debug(f\"Initiating FFT computation for channel {channel} using analysis module.\") if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) # 1. Acquire raw time-domain waveform data waveform_data: ChannelReadingResult = await self.read_channels(channel) if waveform_data.values is None or waveform_data.values.is_empty(): self._logger.warning(f\"No waveform data acquired for channel {channel}. Cannot compute FFT.\") # Return an empty FFTResult or raise an error return FFTResult( instrument=self.config.model, units=\"Linear\", measurement_type=\"FFT_computed_python\", values=pl.DataFrame({ \"Frequency (Hz)\": np.array([]), \"Magnitude (Linear)\": np.array([]) }) ) time_array = waveform_data.values[\"Time (s)\"].to_numpy() voltage_column_name = f\"Channel {channel} (V)\" if voltage_column_name not in waveform_data.values.columns: raise InstrumentDataError( self.config.model, f\"Could not find voltage data for channel {channel} in waveform results.\", ) voltage_array = waveform_data.values[voltage_column_name].to_numpy() # 2. Call the appropriate function from pytestlab.analysis.fft frequency_array, magnitude_array = analysis_fft.compute_fft( time_array=time_array, voltage_array=voltage_array, window=window ) # 3. Return or further process the results return FFTResult( instrument=self.config.model, units=\"Linear\", # compute_fft returns linear magnitude measurement_type=\"FFT_computed_python\", values=pl.DataFrame({ \"Frequency (Hz)\": frequency_array, \"Magnitude (Linear)\": magnitude_array }) )","title":"read_fft_data"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot","text":"Capture a screenshot of the oscilloscope display. :return Image: A PIL Image object containing the screenshot. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def screenshot(self) -> Image.Image: \"\"\" Capture a screenshot of the oscilloscope display. :return Image: A PIL Image object containing the screenshot. \"\"\" binary_data_response: bytes = await self._query_raw(\":DISPlay:DATA? PNG, COLor\") if not binary_data_response.startswith(b'#'): raise InstrumentDataError( self.config.model, \"Invalid screenshot data format: does not start with #\" ) length_of_length_field: int = int(chr(binary_data_response[1])) png_data_length_str: str = binary_data_response[2 : 2 + length_of_length_field].decode('ascii') png_data_length: int = int(png_data_length_str) png_data_start_index: int = 2 + length_of_length_field image_data_bytes: bytes = binary_data_response[png_data_start_index : png_data_start_index + png_data_length] return Image.open(BytesIO(image_data_bytes))","title":"screenshot"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time","text":"Set the total acquisition time for the oscilloscope. PARAMETER DESCRIPTION time The total acquisition time in seconds. TYPE: float Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_acquisition_time(self, time: float) -> None: \"\"\" Set the total acquisition time for the oscilloscope. Args: time (float): The total acquisition time in seconds. \"\"\" await self._send_command(f\":TIMebase:MAIN:RANGe {time}\")","title":"set_acquisition_time"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit","text":"Sets the bandwidth limit for a specified channel. Args: channel (int): The channel number. bandwidth (Union[str, float]): The bandwidth limit (e.g., \"20M\", 20e6, or \"FULL\"). Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_bandwidth_limit(self, channel: int, bandwidth: Union[str, float]) -> None: \"\"\" Sets the bandwidth limit for a specified channel. Args: channel (int): The channel number. bandwidth (Union[str, float]): The bandwidth limit (e.g., \"20M\", 20e6, or \"FULL\"). \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) await self._send_command(f\"CHANnel{channel}:BANDwidth {bandwidth}\")","title":"set_bandwidth_limit"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis","text":"Sets the channel axis of the oscilloscope. (y-axis) :param channel: The channel to set :param scale: The scale of the channel axis in volts :param offset: The offset of the channel in volts Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_channel_axis(self, channel: int, scale: float, offset: float) -> None: \"\"\" Sets the channel axis of the oscilloscope. (y-axis) :param channel: The channel to set :param scale: The scale of the channel axis in volts :param offset: The offset of the channel in volts \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) await self._send_command(f':CHANnel{channel}:SCALe {scale}') await self._send_command(f':CHANnel{channel}:OFFSet {offset}') await self._wait()","title":"set_channel_axis"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation","text":"Sets the probe scale for a given channel. PARAMETER DESCRIPTION channel The oscilloscope channel to set the scale for. TYPE: int scale The probe scale value (e.g., 10 for 10:1, 1 for 1:1). TYPE: int Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_probe_attenuation(self, channel: int, scale: int) -> None: \"\"\" Sets the probe scale for a given channel. Parameters: channel (int): The oscilloscope channel to set the scale for. scale (int): The probe scale value (e.g., 10 for 10:1, 1 for 1:1). \"\"\" if not (1 <= channel <= len(self.config.channels)): raise InstrumentParameterError( parameter=\"channel\", value=channel, valid_range=(1, len(self.config.channels)), message=\"Channel number is out of range.\", ) channel_model_config = self.config.channels[channel - 1] if scale not in channel_model_config.probe_attenuation: # probe_attenuation is List[int] raise InstrumentParameterError( parameter=\"scale\", value=scale, valid_range=channel_model_config.probe_attenuation, message=f\"Scale not in supported probe_attenuation list for channel {channel}.\", ) # SCPI command usually takes the numeric factor directly await self._send_command(f\":CHANnel{channel}:PROBe {scale}\") self._logger.debug(f\"Set probe scale to {scale}:1 for channel {channel}.\")","title":"set_probe_attenuation"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate","text":"Sets the sample rate for the oscilloscope. Args: rate (str): The desired sample rate. Valid values are 'MAX' and 'AUTO'. Case-insensitive. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_sample_rate(self, rate: str) -> None: \"\"\" Sets the sample rate for the oscilloscope. Args: rate (str): The desired sample rate. Valid values are 'MAX' and 'AUTO'. Case-insensitive. \"\"\" rate_upper: str = rate.upper() valid_values: List[str] = [\"MAX\", \"AUTO\"] # These are common SCPI values if rate_upper not in valid_values: raise InstrumentParameterError( parameter=\"rate\", value=rate, valid_range=valid_values, message=\"Invalid rate.\", ) await self._send_command(f\"ACQuire:SRATe {rate_upper}\")","title":"set_sample_rate"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis","text":"Sets the time axis of the Oscilloscope. (x-axis) :param scale: scale The scale of the axis in seconds :param position: The position of the time axis from the trigger in seconds Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_time_axis(self, scale: float, position: float) -> None: \"\"\" Sets the time axis of the Oscilloscope. (x-axis) :param scale: scale The scale of the axis in seconds :param position: The position of the time axis from the trigger in seconds \"\"\" await self._send_command(f':TIMebase:SCALe {scale}') await self._send_command(f':TIMebase:POSition {position}') await self._wait()","title":"set_time_axis"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp","text":"Set the amplitude for the waveform generator. Args: amp (float): The desired amplitude for the waveform generator in volts. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wave_gen_amp(self, amp: float) -> None: \"\"\" Set the amplitude for the waveform generator. Args: amp (float): The desired amplitude for the waveform generator in volts. \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) self.config.function_generator.amplitude.assert_in_range(amp, name=\"Waveform generator amplitude\") await self._send_command(f\"WGEN:VOLT {amp}\")","title":"set_wave_gen_amp"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq","text":"Set the frequency for the waveform generator. Args: freq (float): The desired frequency for the waveform generator in Hz. Source code in pytestlab/instruments/Oscilloscope.py @validate_call ##@ConfigRequires(\"function_generator\") async def set_wave_gen_freq(self, freq: float) -> None: \"\"\" Set the frequency for the waveform generator. Args: freq (float): The desired frequency for the waveform generator in Hz. \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) # Assuming RangeMixin's assert_in_range is preferred for validation self.config.function_generator.frequency.assert_in_range(freq, name=\"Waveform generator frequency\") await self._send_command(f\"WGEN:FREQ {freq}\")","title":"set_wave_gen_freq"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func","text":"Set the waveform function for the oscilloscope's waveform generator. Args: func_type (WaveformType): The desired function enum member. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wave_gen_func(self, func_type: WaveformType) -> None: \"\"\" Set the waveform function for the oscilloscope's waveform generator. Args: func_type (WaveformType): The desired function enum member. \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) # Check if the SCPI value of the enum is in the list of supported waveform types from config if func_type.value not in self.config.function_generator.waveform_types: raise InstrumentParameterError( parameter=\"func_type\", value=func_type.value, valid_range=self.config.function_generator.waveform_types, message=\"Unsupported waveform type.\", ) await self._send_command(f\"WGEN:FUNC {func_type.value}\")","title":"set_wave_gen_func"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset","text":"Set the voltage offset for the waveform generator. Args: offset (float): The desired voltage offset for the waveform generator in volts. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wave_gen_offset(self, offset: float) -> None: \"\"\" Set the voltage offset for the waveform generator. Args: offset (float): The desired voltage offset for the waveform generator in volts. \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) self.config.function_generator.offset.assert_in_range(offset, name=\"Waveform generator offset\") await self._send_command(f\"WGEN:VOLT:OFFSet {offset}\")","title":"set_wave_gen_offset"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc","text":"Sets the waveform generator to a DC wave. :param offset: The offset of the DC wave in volts Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wgen_dc(self, offset: float) -> None: \"\"\"Sets the waveform generator to a DC wave. :param offset: The offset of the DC wave in volts \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) await self.set_wave_gen_func(WaveformType.DC) await self.set_wave_gen_offset(offset)","title":"set_wgen_dc"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise","text":"Sets the waveform generator to a noise wave. :param v0: The 'low' amplitude component or similar parameter for noise. :param v1: The 'high' amplitude component or similar parameter for noise. :param offset: The offset of the noise wave in volts. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wgen_noise(self, v0: float, v1: float, offset: float) -> None: \"\"\"Sets the waveform generator to a noise wave. :param v0: The 'low' amplitude component or similar parameter for noise. :param v1: The 'high' amplitude component or similar parameter for noise. :param offset: The offset of the noise wave in volts. \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) await self.set_wave_gen_func(WaveformType.NOISE) await self._send_command(f':WGEN:VOLTage:LOW {v0}') await self._send_command(f':WGEN:VOLTage:HIGH {v1}') await self.set_wave_gen_offset(offset)","title":"set_wgen_noise"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse","text":"Sets the waveform generator to a pulse wave. :param v0: The voltage of the low state in volts :param v1: The voltage of the high state in volts :param period: The period of the pulse wave in seconds. :param pulse_width: The pulse width in seconds. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wgen_pulse(self, v0: float, v1: float, period: float, pulse_width: Optional[float] = None, **kwargs) -> None: \"\"\"Sets the waveform generator to a pulse wave. :param v0: The voltage of the low state in volts :param v1: The voltage of the high state in volts :param period: The period of the pulse wave in seconds. :param pulse_width: The pulse width in seconds. \"\"\" if 'pulseWidth' in kwargs: warnings.warn( \"'pulseWidth' is deprecated, use 'pulse_width' instead.\", DeprecationWarning, stacklevel=2, ) pulse_width = kwargs['pulseWidth'] if pulse_width is None: raise InstrumentParameterError(message=\"pulse_width is required.\") if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) await self.set_wave_gen_func(WaveformType.PULSE) await self._send_command(f':WGEN:VOLTage:LOW {v0}') await self._send_command(f':WGEN:VOLTage:HIGH {v1}') await self._send_command(f':WGEN:PERiod {period}') await self._send_command(f':WGEN:FUNCtion:PULSe:WIDTh {pulse_width}')","title":"set_wgen_pulse"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp","text":"Sets the waveform generator to a ramp wave. :param v0: The voltage of the low state in volts :param v1: The voltage of the high state in volts :param freq: The frequency of the ramp wave in Hz. :param symmetry: Symmetry (0% to 100%). Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wgen_ramp(self, v0: float, v1: float, freq: float, symmetry: int) -> None: \"\"\"Sets the waveform generator to a ramp wave. :param v0: The voltage of the low state in volts :param v1: The voltage of the high state in volts :param freq: The frequency of the ramp wave in Hz. :param symmetry: Symmetry (0% to 100%). \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) await self.set_wave_gen_func(WaveformType.RAMP) def clamp_symmetry(number: int) -> int: return max(0, min(number, 100)) await self._send_command(f':WGEN:VOLTage:LOW {v0}') await self._send_command(f':WGEN:VOLTage:HIGH {v1}') await self._send_command(f':WGEN:FREQuency {freq}') await self._send_command(f':WGEN:FUNCtion:RAMP:SYMMetry {clamp_symmetry(symmetry)}')","title":"set_wgen_ramp"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin","text":"Sets the waveform generator to a sine wave. :param amp: The amplitude of the sine wave in volts :param offset: The offset of the sine wave in volts :param freq: The frequency of the sine wave in Hz. Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wgen_sin(self, amp: float, offset: float, freq: float) -> None: \"\"\"Sets the waveform generator to a sine wave. :param amp: The amplitude of the sine wave in volts :param offset: The offset of the sine wave in volts :param freq: The frequency of the sine wave in Hz. \"\"\" if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) await self.set_wave_gen_func(WaveformType.SINE) await self.set_wave_gen_amp(amp) await self.set_wave_gen_offset(offset) await self.set_wave_gen_freq(freq)","title":"set_wgen_sin"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square","text":"Sets the waveform generator to a square wave. :param v0: The voltage of the low state in volts :param v1: The voltage of the high state in volts :param freq: The frequency of the square wave in Hz. :param duty_cycle: The duty cycle (1% to 99%). Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def set_wgen_square(self, v0: float, v1: float, freq: float, duty_cycle: Optional[int] = None, **kwargs) -> None: \"\"\"Sets the waveform generator to a square wave. :param v0: The voltage of the low state in volts :param v1: The voltage of the high state in volts :param freq: The frequency of the square wave in Hz. :param duty_cycle: The duty cycle (1% to 99%). \"\"\" if 'dutyCycle' in kwargs: warnings.warn( \"'dutyCycle' is deprecated, use 'duty_cycle' instead.\", DeprecationWarning, stacklevel=2, ) duty_cycle = kwargs['dutyCycle'] if duty_cycle is None: duty_cycle = 50 if self.config.function_generator is None: raise InstrumentConfigurationError( self.config.model, \"Function generator not configured.\" ) await self.set_wave_gen_func(WaveformType.SQUARE) def clamp_duty(number: int) -> int: return max(1, min(number, 99)) await self._send_command(f':WGEN:VOLTage:LOW {v0}') await self._send_command(f':WGEN:VOLTage:HIGH {v1}') await self._send_command(f':WGEN:FREQuency {freq}') await self._send_command(f':WGEN:FUNCtion:SQUare:DCYCle {clamp_duty(duty_cycle)}')","title":"set_wgen_square"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen","text":"Enable or disable the waveform generator of the oscilloscope. Args: state (bool): True to enable ('ON'), False to disable ('OFF'). Source code in pytestlab/instruments/Oscilloscope.py @validate_call #@ConfigRequires(\"function_generator\") async def wave_gen(self, state: bool) -> None: \"\"\" Enable or disable the waveform generator of the oscilloscope. Args: state (bool): True to enable ('ON'), False to disable ('OFF'). \"\"\" scpi_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value await self._send_command(f\"WGEN:OUTP {scpi_state}\")","title":"wave_gen"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble","text":"Holds the waveform preamble data from the oscilloscope. The preamble contains all the necessary metadata to convert the raw, digitized ADC values from the oscilloscope into meaningful time and voltage arrays. It describes the scaling and offset factors for both the X (time) and Y (voltage) axes. ATTRIBUTE DESCRIPTION format Data format (e.g., 'BYTE', 'WORD'). TYPE: str type Acquisition type (e.g., 'NORMal', 'AVERage'). TYPE: str points The number of data points in the waveform. TYPE: int xinc The time difference between adjacent data points (sampling interval). TYPE: float xorg The time value of the first data point. TYPE: float xref The reference time point (usually the trigger point). TYPE: float yinc The voltage difference for each ADC level (voltage resolution). TYPE: float yorg The voltage value at the vertical center of the screen. TYPE: float yref The ADC level corresponding to the vertical center. TYPE: float","title":"Preamble"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.format","text":"","title":"format"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.points","text":"","title":"points"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.type","text":"","title":"type"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.xinc","text":"","title":"xinc"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.xorg","text":"","title":"xorg"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.xref","text":"","title":"xref"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.yinc","text":"","title":"yinc"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.yorg","text":"","title":"yorg"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.yref","text":"","title":"yref"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade","text":"Provides a simplified interface for the oscilloscope's acquisition system. This facade manages settings related to how the oscilloscope digitizes signals, including acquisition type (e.g., Normal, Averaging), memory mode (Real-time vs. Segmented), and sample rates. ATTRIBUTE DESCRIPTION _scope The parent Oscilloscope instance. Source code in pytestlab/instruments/Oscilloscope.py def __init__(self, scope: 'Oscilloscope'): self._scope = scope","title":"ScopeAcquisitionFacade"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments","text":"Execute the scope's Analyze Segments soft-key. Requires scope to be stopped and in SEGMENTED mode. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def analyze_all_segments(self) -> None: \"\"\" Execute the scope's *Analyze Segments* soft-key. Requires scope to be stopped and in SEGMENTED mode. \"\"\" if await self.get_acquisition_mode() != \"SEGMENTED\": raise InstrumentParameterError( message=\"Segment analysis requires SEGMENTED mode.\" ) await self._scope._send_command(\":ACQuire:SEGMented:ANALyze\") await self._scope._wait()","title":"analyze_all_segments"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points","text":"Hardware points actually acquired for the next waveform transfer. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_acquire_points(self) -> int: \"\"\" Hardware points actually *acquired* for the next waveform transfer. \"\"\" return int(await self._scope._query(\":ACQuire:POINts?\"))","title":"get_acquire_points"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup","text":"Return a parsed dictionary of the scope's :ACQuire? status string. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_acquire_setup(self) -> Dict[str, str]: \"\"\" Return a parsed dictionary of the scope's :ACQuire? status string. \"\"\" raw_str: str = (await self._scope._query(\":ACQuire?\")).strip() parts: List[str] = [p.strip() for p in raw_str.split(';')] setup_dict: Dict[str, str] = {} for part in parts: kv = part.split(maxsplit=1) if len(kv) == 2: setup_dict[kv[0]] = kv[1] return setup_dict","title":"get_acquire_setup"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count","text":"Integer average count (valid only when acquisition type == AVERAGE). Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_acquisition_average_count(self) -> int: \"\"\"Integer average count (valid only when acquisition type == AVERAGE).\"\"\" return int(await self._scope._query(\":ACQuire:COUNt?\"))","title":"get_acquisition_average_count"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode","text":"Return \"REAL_TIME\" or \"SEGMENTED\". Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_acquisition_mode(self) -> str: \"\"\"Return \"REAL_TIME\" or \"SEGMENTED\".\"\"\" resp_str_raw: str = (await self._scope._query(\":ACQuire:MODE?\")).strip() for friendly_name, scpi_command_str in _ACQ_MODE_MAP.items(): if resp_str_raw.upper().startswith(scpi_command_str.upper()[:4]): return friendly_name self._scope._logger.warning(f\"Could not map SCPI response '{resp_str_raw}' to a known AcquisitionMode. Returning raw response.\") return resp_str_raw","title":"get_acquisition_mode"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate","text":"Current sample rate of acquisition. Equivalent to get_sampling_rate(). Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_acquisition_sample_rate(self) -> float: \"\"\" Current sample rate of acquisition. Equivalent to get_sampling_rate(). \"\"\" return float(await self._scope._query(\":ACQuire:SRATe?\"))","title":"get_acquisition_sample_rate"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type","text":"Returns current acquisition type (e.g., \"NORMAL\", \"AVERAGE\"). Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_acquisition_type(self) -> str: \"\"\" Returns current acquisition type (e.g., \"NORMAL\", \"AVERAGE\"). \"\"\" # Invert _ACQ_TYPE_MAP for lookup: SCPI response -> Enum member name # SCPI responses can be short forms (e.g., \"NORM\" for \"NORMal\") # We need to match based on how the instrument actually responds. # A common way is that instrument responds with the short form. # Let's assume the instrument responds with a value that can be mapped back. resp_str_raw: str = (await self._scope._query(\":ACQuire:TYPE?\")).strip() for enum_member, scpi_command_str in _ACQ_TYPE_MAP.items(): # Check if the response starts with the typical short SCPI command part # e.g. \"NORM\" from \"NORMal\" # This matching logic might need to be more robust based on actual instrument behavior if resp_str_raw.upper().startswith(scpi_command_str.upper()[:4]): # Compare first 4 chars return enum_member.name # Return the string name of the enum member self._scope._logger.warning(f\"Could not map SCPI response '{resp_str_raw}' to a known AcquisitionType. Returning raw response.\") return resp_str_raw # Fallback to raw response if no match","title":"get_acquisition_type"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index","text":"Index (1-based) of the currently selected memory segment. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_segment_index(self) -> int: \"\"\"Index (1-based) of the currently selected memory segment.\"\"\" return int(await self._scope._query(\":ACQuire:SEGMented:INDex?\"))","title":"get_segment_index"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count","text":"Number of segments currently configured (SEGMENTED mode only). Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def get_segmented_count(self) -> int: \"\"\"Number of segments currently configured (SEGMENTED mode only).\"\"\" return int(await self._scope._query(\":ACQuire:SEGMented:COUNt?\"))","title":"get_segmented_count"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count","text":"Set the running-average length for AVERAGE mode. 2 <= count <= 65536 (Keysight limit). Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_acquisition_average_count(self, count: int) -> None: \"\"\" Set the running-average length for AVERAGE mode. 2 <= count <= 65536 (Keysight limit). \"\"\" await _validate_range(count, 2, 65_536, \"Average count\") # Sync current_acq_type_str = await self.get_acquisition_type() if current_acq_type_str != AcquisitionType.AVERAGE.name: raise InstrumentParameterError( parameter=\"count\", message=f\"Average count can only be set when acquisition type is AVERAGE, not {current_acq_type_str}.\", ) await self._scope._send_command(f\":ACQuire:COUNt {count}\") await self._scope._wait() self._scope._logger.debug(f\"AVERAGE count set \u2192 {count}\")","title":"set_acquisition_average_count"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode","text":"Select real-time or segmented memory acquisition. (Case-insensitive for mode). Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_acquisition_mode(self, mode: str) -> None: \"\"\" Select real-time or segmented memory acquisition. (Case-insensitive for mode). \"\"\" mode_upper: str = mode.upper() scpi_mode_val = _ACQ_MODE_MAP.get(mode_upper) if not scpi_mode_val: raise InstrumentParameterError( parameter=\"mode\", value=mode, valid_range=list(_ACQ_MODE_MAP.keys()), message=\"Unknown acquisition mode.\", ) await self._scope._send_command(f\":ACQuire:MODE {scpi_mode_val}\") await self._scope._wait() self._scope._logger.debug(f\"Acquisition MODE set \u2192 {mode_upper}\")","title":"set_acquisition_mode"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type","text":"Select the oscilloscope acquisition algorithm. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_acquisition_type(self, acq_type: AcquisitionType) -> None: \"\"\" Select the oscilloscope acquisition algorithm. \"\"\" scpi_val = _ACQ_TYPE_MAP.get(acq_type) if not scpi_val: raise InstrumentParameterError( parameter=\"acq_type\", value=acq_type, message=\"Unsupported acquisition type enum member.\", ) current_mode_query: str = (await self._scope._query(\":ACQuire:MODE?\")).strip().upper() if acq_type == AcquisitionType.AVERAGE and current_mode_query == _ACQ_MODE_MAP[\"SEGMENTED\"].upper()[:4]: raise InstrumentParameterError( parameter=\"acq_type\", value=\"AVERAGE\", message=\"AVERAGE mode is unavailable in SEGMENTED acquisition.\", ) await self._scope._send_command(f\":ACQuire:TYPE {scpi_val}\") await self._scope._wait() self._scope._logger.debug(f\"Acquisition TYPE set \u2192 {acq_type.name}\")","title":"set_acquisition_type"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index","text":"Select which memory segment is active for readback. 1 <= index <= get_segmented_count() Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_segment_index(self, index: int) -> None: \"\"\" Select which memory segment is active for readback. 1 <= index <= get_segmented_count() \"\"\" total_segments: int = await self.get_segmented_count() await _validate_range(index, 1, total_segments, \"Segment index\") # Sync await self._scope._send_command(f\":ACQuire:SEGMented:INDex {index}\") await self._scope._wait()","title":"set_segment_index"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count","text":"Configure number of memory segments for SEGMENTED acquisitions. Default Keysight limit: 2 <= count <= 500 (check instrument specs) Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def set_segmented_count(self, count: int) -> None: \"\"\" Configure number of memory segments for SEGMENTED acquisitions. Default Keysight limit: 2 <= count <= 500 (check instrument specs) \"\"\" if await self.get_acquisition_mode() != \"SEGMENTED\": raise InstrumentParameterError( parameter=\"count\", message=\"Segmented count can only be set while in SEGMENTED acquisition mode.\", ) await _validate_range(count, 2, 500, \"Segmented count\") # Sync await self._scope._send_command(f\":ACQuire:SEGMented:COUNt {count}\") await self._scope._wait() self._scope._logger.debug(f\"Segmented COUNT set \u2192 {count}\")","title":"set_segmented_count"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade","text":"Provides a simplified, chainable interface for a single oscilloscope channel. This facade abstracts the underlying SCPI commands for common channel operations, allowing for more readable and fluent test scripts. For example: await scope.channel(1).setup(scale=0.5, offset=0).enable() ATTRIBUTE DESCRIPTION _scope The parent Oscilloscope instance. _channel The channel number this facade controls. Source code in pytestlab/instruments/Oscilloscope.py def __init__(self, scope: 'Oscilloscope', channel_num: int): self._scope = scope self._channel = channel_num","title":"ScopeChannelFacade"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable","text":"Disables the channel display. Source code in pytestlab/instruments/Oscilloscope.py async def disable(self) -> Self: \"\"\"Disables the channel display.\"\"\" await self._scope.display_channel(self._channel, False) return self","title":"disable"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable","text":"Enables the channel display. Source code in pytestlab/instruments/Oscilloscope.py async def enable(self) -> Self: \"\"\"Enables the channel display.\"\"\" await self._scope.display_channel(self._channel, True) return self","title":"enable"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak","text":"Performs a peak-to-peak voltage measurement on this channel. Source code in pytestlab/instruments/Oscilloscope.py async def measure_peak_to_peak(self) -> MeasurementResult: \"\"\"Performs a peak-to-peak voltage measurement on this channel.\"\"\" return await self._scope.measure_voltage_peak_to_peak(self._channel)","title":"measure_peak_to_peak"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms","text":"Performs an RMS voltage measurement on this channel. Source code in pytestlab/instruments/Oscilloscope.py async def measure_rms(self) -> MeasurementResult: \"\"\"Performs an RMS voltage measurement on this channel.\"\"\" return await self._scope.measure_rms_voltage(self._channel)","title":"measure_rms"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup","text":"Configures multiple settings for the channel in a single call. This method allows setting the vertical scale, position/offset, coupling, probe attenuation, and bandwidth limit. Any parameter left as None will not be changed. PARAMETER DESCRIPTION scale The vertical scale in volts per division. TYPE: Optional [ float ] DEFAULT: None position The vertical position in divisions from the center. TYPE: Optional [ float ] DEFAULT: None offset The vertical offset in volts. 'offset' is often preferred over 'position' as it's independent of the scale. TYPE: Optional [ float ] DEFAULT: None coupling The input coupling (\"AC\" or \"DC\"). TYPE: Optional [ str ] DEFAULT: None probe_attenuation The attenuation factor of the probe (e.g., 10 for 10:1). TYPE: Optional [ int ] DEFAULT: None bandwidth_limit The bandwidth limit to apply (e.g., \"20M\" or 20e6). TYPE: Optional [ Union [ str , float ]] DEFAULT: None RETURNS DESCRIPTION Self The ScopeChannelFacade instance for method chaining. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def setup(self, scale: Optional[float] = None, position: Optional[float] = None, offset: Optional[float] = None, coupling: Optional[str] = None, probe_attenuation: Optional[int] = None, bandwidth_limit: Optional[Union[str, float]] = None) -> Self: \"\"\"Configures multiple settings for the channel in a single call. This method allows setting the vertical scale, position/offset, coupling, probe attenuation, and bandwidth limit. Any parameter left as `None` will not be changed. Args: scale: The vertical scale in volts per division. position: The vertical position in divisions from the center. offset: The vertical offset in volts. 'offset' is often preferred over 'position' as it's independent of the scale. coupling: The input coupling (\"AC\" or \"DC\"). probe_attenuation: The attenuation factor of the probe (e.g., 10 for 10:1). bandwidth_limit: The bandwidth limit to apply (e.g., \"20M\" or 20e6). Returns: The `ScopeChannelFacade` instance for method chaining. \"\"\" if scale is not None: current_offset_val = (await self._scope.get_channel_axis(self._channel))[1] if offset is None and position is None else (offset or position or 0.0) await self._scope.set_channel_axis(self._channel, scale, current_offset_val) elif position is not None or offset is not None: # only position/offset is set val_to_set = position if position is not None else offset current_scale_val = (await self._scope.get_channel_axis(self._channel))[0] await self._scope.set_channel_axis(self._channel, current_scale_val, val_to_set) if coupling is not None: await self._scope._send_command(f\":CHANnel{self._channel}:COUPling {coupling.upper()}\") self._scope._logger.debug(f\"Channel {self._channel} coupling set to {coupling.upper()}\") if probe_attenuation is not None: await self._scope.set_probe_attenuation(self._channel, probe_attenuation) if bandwidth_limit is not None: await self._scope.set_bandwidth_limit(self._channel, bandwidth_limit) return self","title":"setup"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade","text":"Provides a simplified, chainable interface for the oscilloscope's trigger system. This facade abstracts the underlying SCPI commands for trigger operations, focusing on common use cases like setting up an edge trigger. ATTRIBUTE DESCRIPTION _scope The parent Oscilloscope instance. Source code in pytestlab/instruments/Oscilloscope.py def __init__(self, scope: 'Oscilloscope'): self._scope = scope","title":"ScopeTriggerFacade"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge","text":"Configures a standard edge trigger. PARAMETER DESCRIPTION source The trigger source (e.g., \"CH1\", \"CH2\", \"EXT\", \"LINE\"). TYPE: str level The trigger level in volts. TYPE: float slope The trigger slope ( TriggerSlope.POSITIVE , NEGATIVE , or EITHER ). TYPE: TriggerSlope DEFAULT: POSITIVE coupling The trigger coupling (e.g., \"AC\", \"DC\"). Can be instrument-specific. TYPE: Optional [ str ] DEFAULT: None mode The trigger mode, defaults to \"EDGE\". TYPE: str DEFAULT: 'EDGE' RETURNS DESCRIPTION Self The ScopeTriggerFacade instance for method chaining. Source code in pytestlab/instruments/Oscilloscope.py @validate_call async def setup_edge(self, source: str, level: float, slope: TriggerSlope = TriggerSlope.POSITIVE, coupling: Optional[str] = None, mode: str = \"EDGE\") -> Self: \"\"\"Configures a standard edge trigger. Args: source: The trigger source (e.g., \"CH1\", \"CH2\", \"EXT\", \"LINE\"). level: The trigger level in volts. slope: The trigger slope (`TriggerSlope.POSITIVE`, `NEGATIVE`, or `EITHER`). coupling: The trigger coupling (e.g., \"AC\", \"DC\"). Can be instrument-specific. mode: The trigger mode, defaults to \"EDGE\". Returns: The `ScopeTriggerFacade` instance for method chaining. \"\"\" # Determine channel number if source is like 'CH1' for the level command trigger_channel_for_level = 1 # Default or fallback if source.upper().startswith(\"CHAN\"): try: trigger_channel_for_level = int(source[len(\"CHAN\"):]) except ValueError: raise InstrumentParameterError( parameter=\"source\", value=source, message=\"Invalid trigger source format for channel.\", ) elif source.upper().startswith(\"CH\"): try: trigger_channel_for_level = int(source[len(\"CH\"):]) except ValueError: raise InstrumentParameterError( parameter=\"source\", value=source, message=\"Invalid trigger source format for channel.\", ) # The main configure_trigger method handles source validation and mapping. await self._scope.configure_trigger( channel=trigger_channel_for_level, # This is for the :TRIGger:LEVel CHANnel<n> part level=level, source=source, # This is for :TRIGger:SOURce part slope=slope, mode=mode ) # Coupling for trigger is often separate, e.g., :TRIGger:COUPling if coupling is not None: await self._scope._send_command(f\":TRIGger:{mode.upper()}:COUPling {coupling.upper()}\") # Assuming edge trigger coupling self._scope._logger.debug(f\"Trigger coupling set to {coupling.upper()}\") return self","title":"setup_edge"},{"location":"api/instruments/#power-supply","text":"","title":"Power Supply"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply","text":"","title":"PowerSupply"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply-classes","text":"","title":"Classes"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig","text":"A data class to hold the measured configuration of a single PSU channel. This class is used to structure the data returned by get_configuration , providing a snapshot of a channel's state. It is not a Pydantic model for loading configurations from files. ATTRIBUTE DESCRIPTION voltage The measured voltage of the channel. TYPE: float | UFloat current The measured current of the channel. TYPE: float | UFloat state The output state of the channel (\"ON\" or \"OFF\"). TYPE: str Initializes the PSUChannelConfig. PARAMETER DESCRIPTION voltage The voltage value for the channel. TYPE: float | UFloat current The current value for the channel. TYPE: float | UFloat state The state of the channel (e.g., 0, 1, \"ON\", \"OFF\"). TYPE: Union [ int , str ] Source code in pytestlab/instruments/PowerSupply.py def __init__(self, voltage: float | UFloat, current: float | UFloat, state: Union[int, str]) -> None: \"\"\"Initializes the PSUChannelConfig. Args: voltage: The voltage value for the channel. current: The current value for the channel. state: The state of the channel (e.g., 0, 1, \"ON\", \"OFF\"). \"\"\" self.voltage: float | UFloat = voltage self.current: float | UFloat = current self.state: str # Store state as string \"ON\" or \"OFF\" for consistency if isinstance(state, str): # Normalize state from various string inputs like \"1\", \"0\", \"ON\", \"OFF\" state_upper = state.upper().strip() if state_upper == SCPIOnOff.ON.value or state_upper == \"1\": self.state = SCPIOnOff.ON.value elif state_upper == SCPIOnOff.OFF.value or state_upper == \"0\": self.state = SCPIOnOff.OFF.value else: raise ValueError(f\"Invalid string state value: {state}\") elif isinstance(state, (int, float)): # float for query results that might be like 1.0 self.state = SCPIOnOff.ON.value if int(state) == 1 else SCPIOnOff.OFF.value else: raise ValueError(f\"Invalid state value type: {type(state)}, value: {state}\")","title":"PSUChannelConfig"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.current","text":"","title":"current"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.state","text":"","title":"state"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.voltage","text":"","title":"voltage"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__","text":"Source code in pytestlab/instruments/PowerSupply.py def __repr__(self) -> str: return f\"PSUChannelConfig(voltage={self.voltage!r}, current={self.current!r}, state='{self.state}')\"","title":"__repr__"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade","text":"Provides a simplified, chainable interface for a single PSU channel. This facade abstracts the underlying SCPI commands for common channel operations, allowing for more readable and fluent test scripts. For example: await psu.channel(1).set(voltage=5.0, current_limit=0.1).on() ATTRIBUTE DESCRIPTION _psu The parent PowerSupply instance. _channel The channel number (1-based) this facade controls. Source code in pytestlab/instruments/PowerSupply.py def __init__(self, psu: 'PowerSupply', channel_num: int): self._psu = psu self._channel = channel_num","title":"PSUChannelFacade"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current","text":"Reads the measured current from this channel. Source code in pytestlab/instruments/PowerSupply.py async def get_current(self) -> float | UFloat: \"\"\"Reads the measured current from this channel.\"\"\" return await self._psu.read_current(self._channel)","title":"get_current"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state","text":"Checks if the channel output is enabled (ON). RETURNS DESCRIPTION bool True if the output is on, False otherwise. RAISES DESCRIPTION InstrumentParameterError If the instrument returns an unexpected state. Source code in pytestlab/instruments/PowerSupply.py async def get_output_state(self) -> bool: \"\"\"Checks if the channel output is enabled (ON). Returns: True if the output is on, False otherwise. Raises: InstrumentParameterError: If the instrument returns an unexpected state. \"\"\" command = f\"{self._psu.SCPI_MAP.OUTPUT_STATE_QUERY_BASE} (@{self._channel})\" state_str = (await self._psu._query(command)).strip().upper() if state_str in (\"1\", \"ON\"): return True elif state_str in (\"0\", \"OFF\"): return False raise InstrumentParameterError(f\"Unexpected output state '{state_str}' for channel {self._channel}\")","title":"get_output_state"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage","text":"Reads the measured voltage from this channel. Source code in pytestlab/instruments/PowerSupply.py async def get_voltage(self) -> float | UFloat: \"\"\"Reads the measured voltage from this channel.\"\"\" return await self._psu.read_voltage(self._channel)","title":"get_voltage"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off","text":"Disables the output of this channel. Source code in pytestlab/instruments/PowerSupply.py async def off(self) -> Self: \"\"\"Disables the output of this channel.\"\"\" await self._psu.output(self._channel, False) return self","title":"off"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on","text":"Enables the output of this channel. Source code in pytestlab/instruments/PowerSupply.py async def on(self) -> Self: \"\"\"Enables the output of this channel.\"\"\" await self._psu.output(self._channel, True) return self","title":"on"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set","text":"Sets the voltage and/or current limit for this channel. PARAMETER DESCRIPTION voltage The target voltage in Volts. TYPE: Optional [ float ] DEFAULT: None current_limit The current limit in Amperes. TYPE: Optional [ float ] DEFAULT: None RETURNS DESCRIPTION Self The PSUChannelFacade instance for method chaining. Source code in pytestlab/instruments/PowerSupply.py @validate_call async def set(self, voltage: Optional[float] = None, current_limit: Optional[float] = None) -> Self: \"\"\"Sets the voltage and/or current limit for this channel. Args: voltage: The target voltage in Volts. current_limit: The current limit in Amperes. Returns: The `PSUChannelFacade` instance for method chaining. \"\"\" if voltage is not None: await self._psu.set_voltage(self._channel, voltage) if current_limit is not None: await self._psu.set_current(self._channel, current_limit) return self","title":"set"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply","text":"Bases: Instrument [ PowerSupplyConfig ] Drives a multi-channel Power Supply Unit (PSU). This class provides a high-level interface for controlling a programmable power supply. It builds upon the base Instrument class and adds methods for setting and reading voltage and current on a per-channel basis. It also supports incorporating measurement uncertainty if configured. A key feature is the channel() method, which returns a PSUChannelFacade for a simplified, chainable programming experience. ATTRIBUTE DESCRIPTION config The Pydantic configuration object ( PowerSupplyConfig ) containing settings specific to this PSU. TYPE: PowerSupplyConfig SCPI_MAP An object that maps generic functions to model-specific SCPI commands. Source code in pytestlab/instruments/instrument.py def __init__(self, config: ConfigType, backend: AsyncInstrumentIO, **kwargs: Any) -> None: # Changed to AsyncInstrumentIO \"\"\" Initialize the Instrument class. Args: config (ConfigType): Configuration for the instrument. backend (AsyncInstrumentIO): The communication backend instance. **kwargs: Additional keyword arguments. \"\"\" if not isinstance(config, InstrumentConfig): # Check against the bound base raise InstrumentConfigurationError( self.__class__.__name__, f\"A valid InstrumentConfig-compatible object must be provided, but got {type(config).__name__}.\", ) self.config = config self._backend = backend # This will be an AsyncInstrumentIO instance self._command_log = [] logger_name = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ self._logger = get_logger(logger_name) self._logger.info(f\"Instrument '{logger_name}': Initializing with backend '{type(backend).__name__}'.\")","title":"PowerSupply"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.SCPI_MAP","text":"","title":"SCPI_MAP"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.config","text":"","title":"config"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.model_config","text":"","title":"model_config"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel","text":"Returns a facade for interacting with a specific channel. PARAMETER DESCRIPTION ch_num The channel number (1-based). TYPE: int RETURNS DESCRIPTION PSUChannelFacade A facade object for the specified channel. TYPE: PSUChannelFacade RAISES DESCRIPTION InstrumentParameterError If channel number is invalid. Source code in pytestlab/instruments/PowerSupply.py @validate_call def channel(self, ch_num: int) -> PSUChannelFacade: \"\"\" Returns a facade for interacting with a specific channel. Args: ch_num (int): The channel number (1-based). Returns: PSUChannelFacade: A facade object for the specified channel. Raises: InstrumentParameterError: If channel number is invalid. \"\"\" if not self.config.channels or not (1 <= ch_num <= len(self.config.channels)): num_ch = len(self.config.channels) if self.config.channels else 0 raise InstrumentParameterError(f\"Channel number {ch_num} is out of range (1-{num_ch}).\") return PSUChannelFacade(self, ch_num)","title":"channel"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display","text":"Enables or disables the instrument's front panel display. PARAMETER DESCRIPTION state True to turn the display on, False to turn it off. TYPE: bool Source code in pytestlab/instruments/PowerSupply.py @validate_call async def display(self, state: bool) -> None: \"\"\"Enables or disables the instrument's front panel display. Args: state: True to turn the display on, False to turn it off. \"\"\" scpi_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value await self._send_command(f\"DISP {scpi_state}\")","title":"display"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config","text":"Source code in pytestlab/instruments/PowerSupply.py @classmethod def from_config(cls: Type['PowerSupply'], config: PowerSupplyConfig, **kwargs: Any) -> 'PowerSupply': return cls(config=config, **kwargs)","title":"from_config"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration","text":"Reads the live state of all configured PSU channels. This method iterates through all channels defined in the configuration, queries their current voltage, current, and output state, and returns the collected data. RETURNS DESCRIPTION Dict [ int , PSUChannelConfig ] A dictionary where keys are channel numbers (1-based) and values are Dict [ int , PSUChannelConfig ] PSUChannelConfig objects representing the state of each channel. Source code in pytestlab/instruments/PowerSupply.py @validate_call async def get_configuration(self) -> Dict[int, PSUChannelConfig]: \"\"\"Reads the live state of all configured PSU channels. This method iterates through all channels defined in the configuration, queries their current voltage, current, and output state, and returns the collected data. Returns: A dictionary where keys are channel numbers (1-based) and values are `PSUChannelConfig` objects representing the state of each channel. \"\"\" results: Dict[int, PSUChannelConfig] = {} if not self.config.channels: self._logger.warning(\"No channels defined in the PowerSupplyConfig. Cannot get configuration.\") return results num_channels = len(self.config.channels) for channel_num in range(1, num_channels + 1): # Iterate 1-indexed channel numbers voltage_val: float | UFloat = await self.read_voltage(channel_num) # Already uses @validate_call current_val: float | UFloat = await self.read_current(channel_num) # Already uses @validate_call # Query output state using SCPI_MAP output_state_command = f\"{self.SCPI_MAP.OUTPUT_STATE_QUERY_BASE} (@{channel_num})\" state_str: str = await self._query(output_state_command) results[channel_num] = PSUChannelConfig( voltage=voltage_val, current=current_val, state=state_str.strip() ) return results","title":"get_configuration"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id","text":"Queries the instrument identification string. RETURNS DESCRIPTION str The instrument identification string. TYPE: str Source code in pytestlab/instruments/PowerSupply.py async def id(self) -> str: \"\"\" Queries the instrument identification string. Returns: str: The instrument identification string. \"\"\" return await self._query(self.SCPI_MAP.IDN)","title":"id"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output","text":"Enables or disables the output for one or more channels. PARAMETER DESCRIPTION channel A single channel number (1-based) or a list of channel numbers. TYPE: Union [ int , List [ int ]] state True to enable the output (ON), False to disable (OFF). TYPE: bool DEFAULT: True RAISES DESCRIPTION InstrumentParameterError If any channel number is invalid. ValueError If the channel argument is not an int or a list of ints. Source code in pytestlab/instruments/PowerSupply.py @validate_call async def output(self, channel: Union[int, List[int]], state: bool = True) -> None: \"\"\"Enables or disables the output for one or more channels. Args: channel: A single channel number (1-based) or a list of channel numbers. state: True to enable the output (ON), False to disable (OFF). Raises: InstrumentParameterError: If any channel number is invalid. ValueError: If the `channel` argument is not an int or a list of ints. \"\"\" channels_to_process: List[int] if isinstance(channel, int): channels_to_process = [channel] elif isinstance(channel, list): # Ensure all elements in the list are integers if not all(isinstance(ch, int) for ch in channel): raise ValueError(\"All elements in channel list must be integers.\") channels_to_process = channel else: # This case should ideally be caught by validate_call if type hints are precise enough, # but an explicit check remains good practice. raise ValueError(f\"Invalid channel type: {type(channel)}. Expected int or List[int].\") num_configured_channels = len(self.config.channels) if self.config.channels else 0 for ch_num in channels_to_process: if not (1 <= ch_num <= num_configured_channels): raise InstrumentParameterError(f\"Channel number {ch_num} is out of range (1-{num_configured_channels}).\") argument = \",\".join(map(str, channels_to_process)) scpi_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value command = f\"{self.SCPI_MAP.OUTPUT_STATE_SET_BASE} {scpi_state}, (@{argument})\" await self._send_command(command)","title":"output"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current","text":"Reads the measured output current from a specific channel. If measurement accuracy is defined in the configuration, this method will return a UFloat object containing the value and its uncertainty. Otherwise, it returns a standard float. PARAMETER DESCRIPTION channel The channel number to measure (1-based). TYPE: int RETURNS DESCRIPTION float | UFloat The measured current as a float or UFloat . RAISES DESCRIPTION InstrumentParameterError If the channel number is invalid. Source code in pytestlab/instruments/PowerSupply.py @validate_call async def read_current(self, channel: int) -> float | UFloat: \"\"\"Reads the measured output current from a specific channel. If measurement accuracy is defined in the configuration, this method will return a `UFloat` object containing the value and its uncertainty. Otherwise, it returns a standard float. Args: channel: The channel number to measure (1-based). Returns: The measured current as a float or `UFloat`. Raises: InstrumentParameterError: If the channel number is invalid. \"\"\" if not self.config.channels or not (1 <= channel <= len(self.config.channels)): num_ch = len(self.config.channels) if self.config.channels else 0 raise InstrumentParameterError(f\"Channel number {channel} is out of range (1-{num_ch}).\") command = f\"{self.SCPI_MAP.MEAS_CURRENT_QUERY_BASE} (@{channel})\" response_str: str = await self._query(command) reading: float = float(response_str) value_to_return: float | UFloat = reading if self.config.measurement_accuracy: mode_key = f\"read_current_ch{channel}\" self._logger.debug(f\"Attempting to find accuracy spec for read_current on channel {channel} with key: '{mode_key}'\") spec = self.config.measurement_accuracy.get(mode_key) if spec: sigma = spec.calculate_std_dev(reading, range_value=None) if sigma > 0: value_to_return = ufloat(reading, sigma) self._logger.debug(f\"Applied accuracy spec '{mode_key}', value: {value_to_return}\") else: self._logger.debug(f\"Accuracy spec '{mode_key}' resulted in sigma=0. Returning float.\") else: self._logger.debug(f\"No accuracy spec found for read_current on channel {channel} with key '{mode_key}'. Returning float.\") else: self._logger.debug(f\"No measurement_accuracy configuration in instrument for read_current on channel {channel}. Returning float.\") return value_to_return","title":"read_current"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage","text":"Reads the measured output voltage from a specific channel. If measurement accuracy is defined in the configuration, this method will return a UFloat object containing the value and its uncertainty. Otherwise, it returns a standard float. PARAMETER DESCRIPTION channel The channel number to measure (1-based). TYPE: int RETURNS DESCRIPTION float | UFloat The measured voltage as a float or UFloat . RAISES DESCRIPTION InstrumentParameterError If the channel number is invalid. Source code in pytestlab/instruments/PowerSupply.py @validate_call async def read_voltage(self, channel: int) -> float | UFloat: \"\"\"Reads the measured output voltage from a specific channel. If measurement accuracy is defined in the configuration, this method will return a `UFloat` object containing the value and its uncertainty. Otherwise, it returns a standard float. Args: channel: The channel number to measure (1-based). Returns: The measured voltage as a float or `UFloat`. Raises: InstrumentParameterError: If the channel number is invalid. \"\"\" if not self.config.channels or not (1 <= channel <= len(self.config.channels)): num_ch = len(self.config.channels) if self.config.channels else 0 raise InstrumentParameterError(f\"Channel number {channel} is out of range (1-{num_ch}).\") command = f\"{self.SCPI_MAP.MEAS_VOLTAGE_QUERY_BASE} (@{channel})\" response_str: str = await self._query(command) reading: float = float(response_str) value_to_return: float | UFloat = reading if self.config.measurement_accuracy: mode_key = f\"read_voltage_ch{channel}\" self._logger.debug(f\"Attempting to find accuracy spec for read_voltage on channel {channel} with key: '{mode_key}'\") spec = self.config.measurement_accuracy.get(mode_key) if spec: sigma = spec.calculate_std_dev(reading, range_value=None) if sigma > 0: value_to_return = ufloat(reading, sigma) self._logger.debug(f\"Applied accuracy spec '{mode_key}', value: {value_to_return}\") else: self._logger.debug(f\"Accuracy spec '{mode_key}' resulted in sigma=0. Returning float.\") else: self._logger.debug(f\"No accuracy spec found for read_voltage on channel {channel} with key '{mode_key}'. Returning float.\") else: self._logger.debug(f\"No measurement_accuracy configuration in instrument for read_voltage on channel {channel}. Returning float.\") return value_to_return","title":"read_voltage"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset","text":"Resets the instrument to its factory default settings. Source code in pytestlab/instruments/PowerSupply.py async def reset(self) -> None: \"\"\" Resets the instrument to its factory default settings. \"\"\" await self._send_command(self.SCPI_MAP.RESET)","title":"reset"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current","text":"Sets the current limit for a specific channel. PARAMETER DESCRIPTION channel The channel number (1-based). TYPE: int current The current limit in Amperes. TYPE: float RAISES DESCRIPTION InstrumentParameterError If the channel number is invalid or the current is outside the configured range for that channel. Source code in pytestlab/instruments/PowerSupply.py @validate_call async def set_current(self, channel: int, current: float) -> None: \"\"\"Sets the current limit for a specific channel. Args: channel: The channel number (1-based). current: The current limit in Amperes. Raises: InstrumentParameterError: If the channel number is invalid or the current is outside the configured range for that channel. \"\"\" if not self.config.channels or not (1 <= channel <= len(self.config.channels)): num_ch = len(self.config.channels) if self.config.channels else 0 raise InstrumentParameterError(f\"Channel number {channel} is out of range (1-{num_ch}).\") channel_config = self.config.channels[channel - 1] # channel is 1-based channel_config.current_limit_range.assert_in_range(current, name=f\"Current for channel {channel}\") # Assuming current_limit_range from example command = f\"{self.SCPI_MAP.CURRENT_SET_BASE} {current}, (@{channel})\" await self._send_command(command)","title":"set_current"},{"location":"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage","text":"Sets the output voltage for a specific channel. PARAMETER DESCRIPTION channel The channel number (1-based). TYPE: int voltage The target voltage in Volts. TYPE: float RAISES DESCRIPTION InstrumentParameterError If the channel number is invalid or the voltage is outside the configured range for that channel. Source code in pytestlab/instruments/PowerSupply.py @validate_call async def set_voltage(self, channel: int, voltage: float) -> None: \"\"\"Sets the output voltage for a specific channel. Args: channel: The channel number (1-based). voltage: The target voltage in Volts. Raises: InstrumentParameterError: If the channel number is invalid or the voltage is outside the configured range for that channel. \"\"\" # Validate that the channel number is within the configured range if not self.config.channels or not (1 <= channel <= len(self.config.channels)): num_ch = len(self.config.channels) if self.config.channels else 0 raise InstrumentParameterError(f\"Channel number {channel} is out of range (1-{num_ch}).\") # Validate the voltage against the limits defined in the configuration channel_config = self.config.channels[channel - 1] channel_config.voltage_range.assert_in_range(voltage, name=f\"Voltage for channel {channel}\") # Construct and send the SCPI command command = f\"{self.SCPI_MAP.VOLTAGE_SET_BASE} {voltage}, (@{channel})\" await self._send_command(command)","title":"set_voltage"},{"location":"api/instruments/#waveform-generator","text":"","title":"Waveform Generator"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator","text":"","title":"WaveformGenerator"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WAVEFORM_PARAM_COMMANDS","text":"","title":"WAVEFORM_PARAM_COMMANDS"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator-classes","text":"","title":"Classes"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo","text":"Data class representing the results of a directory listing query ( list_directory ). Contains information about memory usage and the files/folders found in the queried path. ATTRIBUTE DESCRIPTION bytes_used Total bytes used on the specified memory volume (INT or USB). TYPE: int bytes_free Total bytes free on the specified memory volume. TYPE: int files A list of dictionaries, each representing a file or folder. Example entry: {'name': 'f.txt', 'type': 'FILE', 'size': 1024} . Type might be 'FILE', 'FOLDER', 'ARB', 'STAT', etc., depending on the file extension and instrument response. Size is in bytes. TYPE: List [ Dict [ str , Any ]]","title":"FileSystemInfo"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo.bytes_free","text":"","title":"bytes_free"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo.bytes_used","text":"","title":"bytes_used"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo.files","text":"","title":"files"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade","text":"Source code in pytestlab/instruments/WaveformGenerator.py def __init__(self, wg: 'WaveformGenerator', channel_num: int): self._wg = wg self._channel = channel_num","title":"WGChannelFacade"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def disable(self) -> Self: await self._wg.set_output_state(self._channel, SCPIOnOff.OFF) return self","title":"disable"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def enable(self) -> Self: await self._wg.set_output_state(self._channel, SCPIOnOff.ON) return self","title":"enable"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_load_impedance(self, impedance: Union[float, OutputLoadImpedance, str]) -> Self: await self._wg.set_output_load_impedance(self._channel, impedance) return self","title":"set_load_impedance"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_voltage_unit(self, unit: VoltageUnit) -> Self: await self._wg.set_voltage_unit(self._channel, unit) return self","title":"set_voltage_unit"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def setup_arbitrary(self, arb_name: str, sample_rate: float, amplitude: float, offset: float = 0.0, phase: Optional[float] = None) -> Self: await self._wg.set_function(self._channel, WaveformType.ARB) await self._wg.select_arbitrary_waveform(self._channel, arb_name) await self._wg.set_arbitrary_waveform_sample_rate(self._channel, sample_rate) await self._wg.set_amplitude(self._channel, amplitude) await self._wg.set_offset(self._channel, offset) if phase is not None: await self._wg.set_phase(self._channel, phase) return self","title":"setup_arbitrary"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def setup_dc(self, offset: float) -> Self: await self._wg.set_function(self._channel, WaveformType.DC) await self._wg.set_offset(self._channel, offset) return self","title":"setup_dc"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def setup_pulse(self, frequency: float, amplitude: float, offset: float = 0.0, width: Optional[float] = None, duty_cycle: Optional[float] = None, transition_both: Optional[float] = None, phase: Optional[float] = None) -> Self: period = 1.0 / frequency if frequency > 0 else OutputLoadImpedance.MAXIMUM pulse_params = {\"period\": period} if width is not None: pulse_params[\"width\"] = width elif duty_cycle is not None: pulse_params[\"duty_cycle\"] = duty_cycle else: pulse_params[\"duty_cycle\"] = 50.0 if transition_both is not None: pulse_params[\"transition_both\"] = transition_both await self._wg.set_function(self._channel, WaveformType.PULSE, **pulse_params) await self._wg.set_amplitude(self._channel, amplitude) await self._wg.set_offset(self._channel, offset) if phase is not None: await self._wg.set_phase(self._channel, phase) return self","title":"setup_pulse"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def setup_ramp(self, frequency: float, amplitude: float, offset: float = 0.0, symmetry: float = 50.0, phase: Optional[float] = None) -> Self: await self._wg.set_function(self._channel, WaveformType.RAMP, symmetry=symmetry) await self._wg.set_frequency(self._channel, frequency) await self._wg.set_amplitude(self._channel, amplitude) await self._wg.set_offset(self._channel, offset) if phase is not None: await self._wg.set_phase(self._channel, phase) return self","title":"setup_ramp"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def setup_sine(self, frequency: float, amplitude: float, offset: float = 0.0, phase: Optional[float] = None) -> Self: await self._wg.set_function(self._channel, WaveformType.SINE) await self._wg.set_frequency(self._channel, frequency) await self._wg.set_amplitude(self._channel, amplitude) await self._wg.set_offset(self._channel, offset) if phase is not None: await self._wg.set_phase(self._channel, phase) return self","title":"setup_sine"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def setup_square(self, frequency: float, amplitude: float, offset: float = 0.0, duty_cycle: float = 50.0, phase: Optional[float] = None) -> Self: await self._wg.set_function(self._channel, WaveformType.SQUARE, duty_cycle=duty_cycle) await self._wg.set_frequency(self._channel, frequency) await self._wg.set_amplitude(self._channel, amplitude) await self._wg.set_offset(self._channel, offset) if phase is not None: await self._wg.set_phase(self._channel, phase) return self","title":"setup_square"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult","text":"Data class storing the retrieved waveform configuration of a channel. Provides a structured way to access key parameters of the channel's current state, obtained by querying multiple SCPI commands. ATTRIBUTE DESCRIPTION channel The channel number (1 or 2). TYPE: int function The short SCPI name of the active waveform function (e.g., \"SIN\", \"RAMP\"). TYPE: str frequency The current frequency in Hz (or sample rate in Sa/s for ARB). TYPE: float amplitude The current amplitude in the configured voltage units. TYPE: float offset The current DC offset voltage in Volts. TYPE: float phase The current phase offset in the configured angle units (None if not applicable). TYPE: Optional [ float ] symmetry The current symmetry percentage for RAMP/TRIANGLE (None otherwise). TYPE: Optional [ float ] duty_cycle The current duty cycle percentage for SQUARE/PULSE (None otherwise). TYPE: Optional [ float ] output_state The current state of the main output (True=ON, False=OFF). TYPE: Optional [ bool ] load_impedance The configured load impedance (Ohms or \"INFinity\"). TYPE: Optional [ Union [ float , str ]] voltage_unit The currently configured voltage unit (\"VPP\", \"VRMS\", \"DBM\"). TYPE: Optional [ str ]","title":"WaveformConfigResult"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.amplitude","text":"","title":"amplitude"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.channel","text":"","title":"channel"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.duty_cycle","text":"","title":"duty_cycle"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.frequency","text":"","title":"frequency"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.function","text":"","title":"function"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.load_impedance","text":"","title":"load_impedance"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.offset","text":"","title":"offset"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.output_state","text":"","title":"output_state"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.phase","text":"","title":"phase"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.symmetry","text":"","title":"symmetry"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.voltage_unit","text":"","title":"voltage_unit"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator","text":"Bases: Instrument [ WaveformGeneratorConfig ] Provides a high-level Python interface for controlling Keysight EDU33210 Series Trueform Arbitrary Waveform Generators via SCPI commands. Initializes the WaveformGenerator instance. Source code in pytestlab/instruments/WaveformGenerator.py def __init__(self, config: WaveformGeneratorConfig, debug_mode: bool = False, **kwargs: Any) -> None: \"\"\" Initializes the WaveformGenerator instance. \"\"\" super().__init__(config=config, debug_mode=debug_mode, **kwargs) # Pass kwargs to base # self.config is already set by base Instrument's __init__ due to Generic type # Determine channel count from the length of the channels list in the config if hasattr(self.config, 'channels') and isinstance(self.config.channels, list): self._channel_count = len(self.config.channels) else: # This case should ideally be caught by Pydantic validation of WaveformGeneratorConfig self._logger.warning(\"config.channels is not a list. Defaulting channel count to 0.\") self._channel_count = 0 if self._channel_count <= 0: self._logger.warning(f\"Channel count determined as {self._channel_count}. Check instrument configuration.\") # Consider if raising an error is more appropriate if channel_count is essential and expected to be > 0 # For now, logging a warning to allow flexibility if some AWGs might be configured with 0 channels initially. self._logger.debug(f\"Detected {self._channel_count} channels from configuration.\")","title":"WaveformGenerator"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel_count","text":"Returns the number of output channels supported by this instrument, based on configuration.","title":"channel_count"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.config","text":"","title":"config"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.model_config","text":"","title":"model_config"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def apply_waveform_settings(self, channel: Union[int, str], function_type: Union[WaveformType, str], frequency: Union[float, OutputLoadImpedance, str] = OutputLoadImpedance.DEFAULT, amplitude: Union[float, OutputLoadImpedance, str] = OutputLoadImpedance.DEFAULT, offset: Union[float, OutputLoadImpedance, str] = OutputLoadImpedance.DEFAULT) -> None: ch = self._validate_channel(channel) scpi_short_name = self._get_scpi_function_name(function_type) apply_suffix_map: Dict[str, str] = { WaveformType.SINE.value: \"SINusoid\", WaveformType.SQUARE.value: \"SQUare\", WaveformType.RAMP.value: \"RAMP\", WaveformType.PULSE.value: \"PULSe\", WaveformType.NOISE.value: \"NOISe\", WaveformType.ARB.value: \"ARBitrary\", WaveformType.DC.value: \"DC\",} if scpi_short_name == \"TRI\" and \"TRI\" not in apply_suffix_map: apply_suffix_map[\"TRI\"] = \"TRIangle\" apply_suffix = apply_suffix_map.get(scpi_short_name) if not apply_suffix: if scpi_short_name in apply_suffix_map: apply_suffix = apply_suffix_map[scpi_short_name] else: raise InstrumentParameterError( parameter=\"function_type\", value=function_type, message=f\"Waveform function (SCPI: {scpi_short_name}) not supported by APPLy.\", ) params: List[str] = [self._format_value_min_max_def(frequency), self._format_value_min_max_def(amplitude), self._format_value_min_max_def(offset)] param_str = \",\".join(params) cmd = f\"SOUR{ch}:APPLy:{apply_suffix} {param_str}\" await self._send_command(cmd) self._logger.debug(f\"Channel {ch}: Applied {apply_suffix} with params: Freq/SR={frequency}, Ampl={amplitude}, Offs={offset}\") await self._error_check()","title":"apply_waveform_settings"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel","text":"Returns a facade for interacting with a specific channel. PARAMETER DESCRIPTION ch_num The channel number (1-based) or string identifier (e.g. \"CH1\"). TYPE: Union [ int , str ] RETURNS DESCRIPTION WGChannelFacade A facade object for the specified channel. TYPE: WGChannelFacade RAISES DESCRIPTION InstrumentParameterError If channel number is invalid. Source code in pytestlab/instruments/WaveformGenerator.py @validate_call def channel(self, ch_num: Union[int,str]) -> WGChannelFacade: \"\"\" Returns a facade for interacting with a specific channel. Args: ch_num (Union[int,str]): The channel number (1-based) or string identifier (e.g. \"CH1\"). Returns: WGChannelFacade: A facade object for the specified channel. Raises: InstrumentParameterError: If channel number is invalid. \"\"\" validated_ch_num = self._validate_channel(ch_num) # _validate_channel returns int return WGChannelFacade(self, validated_ch_num)","title":"channel"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def clear_volatile_arbitrary_waveforms(self, channel: Union[int, str]) -> None: ch = self._validate_channel(channel) await self._send_command(f\"SOUR{ch}:DATA:VOLatile:CLEar\") self._logger.debug(f\"Channel {ch}: Cleared volatile arbitrary waveform memory.\") await self._error_check()","title":"clear_volatile_arbitrary_waveforms"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def delete_file_or_folder(self, path: str) -> None: if not path: raise InstrumentParameterError( parameter=\"path\", message=\"Path cannot be empty for deletion.\" ) path_scpi = f'\"{path}\"' cmd = f\"MMEMory:DELete {path_scpi}\" try: await self._send_command(cmd) self._logger.log(f\"Attempted to delete file/folder: '{path}' using MMEM:DELete\") await self._error_check() except InstrumentCommunicationError as e: code, msg = await self.get_error() if code != 0: if \"Directory not empty\" in msg or \"folder\" in msg.lower(): raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to delete '{path}'. Non-empty folder? Inst Err {code}: {msg}\", ) from e else: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to delete '{path}'. Inst Err {code}: {msg}\", ) from e else: raise e","title":"delete_file_or_folder"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def download_arbitrary_waveform_data(self, channel: Union[int, str], arb_name: str, data_points: Union[List[int], List[float], np.ndarray], data_type: str = \"DAC\", use_binary: bool = True, is_dual_channel_data: bool = False, dual_data_format: Optional[str] = None) -> None: if use_binary: await self.download_arbitrary_waveform_data_binary(channel, arb_name, data_points, data_type, is_dual_channel_data=is_dual_channel_data, dual_data_format=dual_data_format) else: await self.download_arbitrary_waveform_data_csv(channel, arb_name, data_points, data_type)","title":"download_arbitrary_waveform_data"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def download_arbitrary_waveform_data_binary(self, channel: Union[int, str], arb_name: str, data_points: Union[List[int], List[float], np.ndarray], data_type: str = \"DAC\", is_dual_channel_data: bool = False, dual_data_format: Optional[str] = None) -> None: ch = self._validate_channel(channel) if not re.match(r\"^[a-zA-Z0-9_]{1,12}$\", arb_name): raise InstrumentParameterError( parameter=\"arb_name\", value=arb_name, message=\"Arbitrary waveform name is invalid.\", ) data_type_upper = data_type.upper().strip() if data_type_upper not in [\"DAC\", \"NORM\"]: raise InstrumentParameterError( parameter=\"data_type\", value=data_type, valid_range=[\"DAC\", \"NORM\"], message=\"Invalid data_type.\", ) np_data = np.asarray(data_points) if np_data.ndim != 1 or np_data.size == 0: raise InstrumentParameterError( parameter=\"data_points\", message=\"data_points must be a non-empty 1D sequence.\" ) num_points_total = np_data.size num_points_per_channel = num_points_total arb_cmd_node = \"ARBitrary\" if is_dual_channel_data: if self.channel_count < 2: raise InstrumentConfigurationError( self.config.model, \"Dual channel download requires 2-channel instrument.\", ) arb_cmd_node = \"ARBitrary2\" if num_points_total % 2 != 0: raise InstrumentParameterError( parameter=\"data_points\", message=\"Total data_points must be even for dual channel.\", ) num_points_per_channel = num_points_total // 2 if dual_data_format: fmt_upper = dual_data_format.upper().strip() if fmt_upper not in [\"AABB\", \"ABAB\"]: raise InstrumentParameterError( parameter=\"dual_data_format\", value=dual_data_format, valid_range=[\"AABB\", \"ABAB\"], message=\"Invalid dual_data_format.\", ) await self._send_command(f\"SOUR{ch}:DATA:{arb_cmd_node}:FORMat {fmt_upper}\") await self._error_check() self._logger.debug(f\"Channel {ch}: Dual arb data format set to {fmt_upper}\") binary_data: bytes scpi_suffix: str transfer_type_log_msg: str = \"Binary Block\" if data_type_upper == \"DAC\": scpi_suffix = \":DAC\" if not np.issubdtype(np_data.dtype, np.integer): self._logger.warning(\"Warning: DAC data not integer, converting to int16.\") try: np_data = np_data.astype(np.int16) except ValueError as e: raise InstrumentParameterError( parameter=\"data_points\", message=\"Cannot convert DAC data to int16.\", ) from e dac_min, dac_max = getattr(self.config.waveforms, 'arbitrary_dac_range', (-32768, 32767)) if np.any(np_data < dac_min) or np.any(np_data > dac_max): raise InstrumentParameterError( parameter=\"data_points\", message=f\"DAC data out of range [{dac_min}, {dac_max}].\", ) binary_data = np_data.astype('<h').tobytes() else: # NORM scpi_suffix = \"\" if not np.issubdtype(np_data.dtype, np.floating): self._logger.warning(\"Warning: Normalized data not float, converting to float32.\") try: np_data = np_data.astype(np.float32) except ValueError as e: raise InstrumentParameterError( parameter=\"data_points\", message=\"Cannot convert Normalized data to float32.\", ) from e norm_min, norm_max = -1.0, 1.0 tolerance = 1e-6 if np.any(np_data < norm_min - tolerance) or np.any( np_data > norm_max + tolerance ): raise InstrumentParameterError( parameter=\"data_points\", message=f\"Normalized data out of range [{norm_min}, {norm_max}].\", ) np_data = np.clip(np_data, norm_min, norm_max) binary_data = np_data.astype('<f').tobytes() cmd_prefix = f\"SOUR{ch}:DATA:{arb_cmd_node}{scpi_suffix} {arb_name},\" try: await self._write_binary(cmd_prefix, binary_data) # Assumed async transfer_type_log_msg = \"IEEE 488.2 Binary Block via _write_binary\" self._logger.debug(f\"Channel {ch}: Downloaded arb '{arb_name}' via {transfer_type_log_msg} ({num_points_per_channel} pts/ch, {len(binary_data)} bytes, type: {data_type_upper})\") await self._error_check() except InstrumentCommunicationError as e: self._logger.error(f\"Error during {transfer_type_log_msg} arb download for '{arb_name}'.\") code, msg = await self.get_error() if code == 786: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd_prefix, message=f\"Arb Name Conflict (786) for '{arb_name}'.\", ) from e elif code == 781: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd_prefix, message=f\"Out of Memory (781) for '{arb_name}'.\", ) from e elif code == -113: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd_prefix, message=f\"SCPI Syntax Error (-113) for '{arb_name}'.\", ) from e elif code != 0: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd_prefix, message=f\"Arb download for '{arb_name}' failed. Inst Err {code}: {msg}\", ) from e else: raise e except Exception as e: self._logger.error(f\"Unexpected error during binary arb download for '{arb_name}': {e}\") raise InstrumentCommunicationError( instrument=self.config.model, command=cmd_prefix, message=f\"Unexpected failure downloading arb '{arb_name}'\", ) from e","title":"download_arbitrary_waveform_data_binary"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def download_arbitrary_waveform_data_csv(self, channel: Union[int, str], arb_name: str, data_points: Union[List[int], List[float], np.ndarray], data_type: str = \"DAC\") -> None: ch = self._validate_channel(channel) if not re.match(r\"^[a-zA-Z0-9_]{1,12}$\", arb_name): raise InstrumentParameterError( parameter=\"arb_name\", value=arb_name, message=\"Arbitrary waveform name is invalid.\", ) data_type_upper = data_type.upper().strip() if data_type_upper not in [\"DAC\", \"NORM\"]: raise InstrumentParameterError( parameter=\"data_type\", value=data_type, valid_range=[\"DAC\", \"NORM\"], message=\"Invalid data_type.\", ) np_data = np.asarray(data_points) if np_data.ndim != 1 or np_data.size == 0: raise InstrumentParameterError( parameter=\"data_points\", message=\"data_points must be a non-empty 1D sequence.\" ) if 0 <= (ch - 1) < len(self.config.channels): channel_conf = self.config.channels[ch-1] if hasattr(channel_conf, 'arbitrary') and hasattr(channel_conf.arbitrary, 'max_points') and np_data.size > channel_conf.arbitrary.max_points: self._logger.warning(f\"Number of data points ({np_data.size}) exceeds configured max_points ({channel_conf.arbitrary.max_points}) for CH{ch}.\") formatted_data: str scpi_suffix: str if data_type_upper == \"DAC\": if not np.issubdtype(np_data.dtype, np.integer): self._logger.warning(\"DAC data not integer, converting to int16.\") try: np_data = np_data.astype(np.int16) except ValueError as e: raise InstrumentParameterError( parameter=\"data_points\", message=\"Cannot convert DAC data to int16.\", ) from e dac_min, dac_max = getattr(self.config.waveforms, 'arbitrary_dac_range', (-32768, 32767)) if np.any(np_data < dac_min) or np.any(np_data > dac_max): raise InstrumentParameterError( parameter=\"data_points\", message=f\"DAC data out of range [{dac_min}, {dac_max}].\", ) formatted_data = ','.join(map(str, np_data)) scpi_suffix = \":DAC\" else: # NORM if not np.issubdtype(np_data.dtype, np.floating): self._logger.warning(\"Normalized data not float, converting to float32.\") try: np_data = np_data.astype(np.float32) except ValueError as e: raise InstrumentParameterError( parameter=\"data_points\", message=\"Cannot convert Normalized data to floats.\", ) from e norm_min, norm_max = -1.0, 1.0 tolerance = 1e-9 if np.any(np_data < norm_min - tolerance) or np.any( np_data > norm_max + tolerance ): raise InstrumentParameterError( parameter=\"data_points\", message=f\"Normalized data out of range [{norm_min}, {norm_max}].\", ) np_data = np.clip(np_data, norm_min, norm_max) formatted_data = ','.join(map(lambda x: f\"{x:.8G}\", np_data)) scpi_suffix = \"\" cmd = f\"SOUR{ch}:DATA:ARBitrary{scpi_suffix} {arb_name},{formatted_data}\" max_cmd_len = getattr(self.config, 'max_scpi_command_length', 10000) if len(cmd) > max_cmd_len: self._logger.warning(f\"SCPI command length ({len(cmd)}) large. Consider binary transfer.\") try: await self._send_command(cmd) self._logger.debug(f\"Channel {ch}: Downloaded arb '{arb_name}' via CSV ({np_data.size} points, type: {data_type_upper})\") await self._error_check() except InstrumentCommunicationError as e: self._logger.error(f\"Error during CSV arb download for '{arb_name}'.\") code, msg = await self.get_error() if code == -113: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"SCPI Syntax Error (-113) for '{arb_name}'.\", ) from e elif code == 786: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Arb Name Conflict (786) for '{arb_name}'.\", ) from e elif code == 781: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Out of Memory (781) for '{arb_name}'.\", ) from e elif code == -102: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"SCPI Syntax Error (-102) for '{arb_name}'.\", ) from e elif code != 0: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Arb download for '{arb_name}' failed. Inst Err {code}: {msg}\", ) from e else: raise e","title":"download_arbitrary_waveform_data_csv"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def enable_burst(self, channel: Union[int, str], state: bool) -> None: ch = self._validate_channel(channel) cmd_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value await self._send_command(f\"SOUR{ch}:BURSt:STATe {cmd_state}\") self._logger.log(f\"Channel {ch}: Burst state set to {cmd_state}\") await self._error_check()","title":"enable_burst"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def enable_modulation(self, channel: Union[int, str], mod_type: str, state: bool) -> None: ch = self._validate_channel(channel) mod_upper = mod_type.upper().strip() valid_mods = {\"AM\", \"FM\", \"PM\", \"PWM\", \"FSK\", \"BPSK\", \"SUM\"} if mod_upper not in valid_mods: raise InstrumentParameterError( parameter=\"mod_type\", value=mod_type, valid_range=valid_mods, message=\"Invalid modulation type.\", ) cmd_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value await self._send_command(f\"SOUR{ch}:{mod_upper}:STATe {cmd_state}\") self._logger.log(f\"Channel {ch}: {mod_upper} modulation state set to {cmd_state}\") await self._error_check()","title":"enable_modulation"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def enable_sweep(self, channel: Union[int, str], state: bool) -> None: ch = self._validate_channel(channel) cmd_state = SCPIOnOff.ON.value if state else SCPIOnOff.OFF.value await self._send_command(f\"SOUR{ch}:SWEep:STATe {cmd_state}\") self._logger.log(f\"Channel {ch}: Sweep state set to {cmd_state}\") await self._error_check()","title":"enable_sweep"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config","text":"Source code in pytestlab/instruments/WaveformGenerator.py @classmethod @validate_call def from_config(cls: Type['WaveformGenerator'], config: WaveformGeneratorConfig, debug_mode: bool = False, **kwargs: Any) -> 'WaveformGenerator': return cls(config=config, debug_mode=debug_mode, **kwargs)","title":"from_config"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_amplitude(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> float: ch = self._validate_channel(channel) cmd = f\"SOUR{ch}:VOLTage?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} limit)\" response = (await self._query(cmd)).strip() try: amp = float(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse amplitude float from response: '{response}'\", ) unit = await self.get_voltage_unit(ch) self._logger.debug(f\"Channel {ch}: Amplitude{type_str} is {amp} {unit.value}\") return amp","title":"get_amplitude"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_angle_unit(self) -> str: response = (await self._query(\"UNIT:ANGLe?\")).strip().upper() if response not in [\"DEG\", \"RAD\", \"SEC\"]: self._logger.warning(f\"Warning: Unexpected angle unit response '{response}'.\") self._logger.debug(f\"Current global angle unit is {response}\") return response","title":"get_angle_unit"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_arbitrary_waveform_points(self, channel: Union[int, str]) -> int: ch = self._validate_channel(channel) try: response = (await self._query(f\"SOUR{ch}:FUNC:ARB:POINts?\")).strip() points = int(response) self._logger.debug(f\"Channel {ch}: Currently selected arbitrary waveform has {points} points\") return points except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=f\"SOUR{ch}:FUNC:ARB:POINts?\", message=f\"Failed to parse integer points from response: '{response}'\", ) except InstrumentCommunicationError as e: code, msg = await self.get_error() if code != 0: self._logger.warning(f\"Query SOUR{ch}:FUNC:ARB:POINts? failed. Inst Err {code}: {msg}. Returning 0.\") return 0 else: raise e","title":"get_arbitrary_waveform_points"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_arbitrary_waveform_sample_rate(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> float: ch = self._validate_channel(channel) cmd = f\"SOUR{ch}:FUNC:ARB:SRATe?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} limit)\" response = (await self._query(cmd)).strip() try: sr = float(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse sample rate float from response: '{response}'\", ) self._logger.debug(f\"Channel {ch}: Arbitrary waveform sample rate{type_str} is {sr} Sa/s\") return sr","title":"get_arbitrary_waveform_sample_rate"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_channel_configuration_summary(self, channel: Union[int, str]) -> str: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:APPLy?\")).strip() self._logger.debug(f\"Channel {ch}: Configuration summary (APPLy?) returned: {response}\") if response.startswith('\"') and response.endswith('\"') and response.count('\"') == 2 : return response[1:-1] return response","title":"get_channel_configuration_summary"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_complete_config(self, channel: Union[int, str]) -> WaveformConfigResult: ch_num = self._validate_channel(channel) self._logger.debug(f\"Getting complete configuration snapshot for channel {ch_num}...\") func_scpi_str = await self.get_function(ch_num) freq = await self.get_frequency(ch_num) ampl = await self.get_amplitude(ch_num) offs = await self.get_offset(ch_num) output_state_enum = await self.get_output_state(ch_num) output_state_bool = True if output_state_enum == SCPIOnOff.ON else False load_impedance_val = await self.get_output_load_impedance(ch_num) load_impedance_str: Union[str, float] if isinstance(load_impedance_val, OutputLoadImpedance) and load_impedance_val == OutputLoadImpedance.INFINITY: load_impedance_str = \"INFinity\" else: load_impedance_str = float(load_impedance_val) voltage_unit_enum = await self.get_voltage_unit(ch_num) voltage_unit_str = voltage_unit_enum.value phase: Optional[float] = None if func_scpi_str not in [WaveformType.DC.value, WaveformType.NOISE.value]: try: phase = await self.get_phase(ch_num) except InstrumentCommunicationError as e: self._log(f\"Note: Phase query failed for CH{ch_num} (function: {func_scpi_str}): {e}\", level=\"info\") symmetry: Optional[float] = None duty_cycle: Optional[float] = None try: if func_scpi_str == WaveformType.RAMP.value: symmetry = await self.get_ramp_symmetry(ch_num) elif func_scpi_str == WaveformType.SQUARE.value: duty_cycle = await self.get_square_duty_cycle(ch_num) elif func_scpi_str == WaveformType.PULSE.value: duty_cycle = await self.get_pulse_duty_cycle(ch_num) except InstrumentCommunicationError as e: self._log(f\"Note: Query failed for function-specific parameter for CH{ch_num} func {func_scpi_str}: {e}\", level=\"info\") return WaveformConfigResult(channel=ch_num, function=func_scpi_str, frequency=freq, amplitude=ampl, offset=offs, phase=phase, symmetry=symmetry, duty_cycle=duty_cycle, output_state=output_state_bool, load_impedance=load_impedance_str, voltage_unit=voltage_unit_str)","title":"get_complete_config"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_free_volatile_arbitrary_memory(self, channel: Union[int, str]) -> int: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:DATA:VOLatile:FREE?\")).strip() try: free_points = int(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=f\"SOUR{ch}:DATA:VOLatile:FREE?\", message=f\"Unexpected non-integer response: {response}\", ) self._logger.debug(f\"Channel {ch}: Free volatile arbitrary memory: {free_points} points\") return free_points","title":"get_free_volatile_arbitrary_memory"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_frequency(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> float: ch = self._validate_channel(channel) cmd = f\"SOUR{ch}:FREQ?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} limit)\" response = (await self._query(cmd)).strip() try: freq = float(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse frequency float from response: '{response}'\", ) self._logger.debug(f\"Channel {ch}: Frequency{type_str} is {freq} Hz\") return freq","title":"get_frequency"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def get_function(self, channel: Union[int, str]) -> str: ch = self._validate_channel(channel) scpi_func = (await self._query(f\"SOUR{ch}:FUNC?\")).strip() self._logger.debug(f\"Channel {ch}: Current function is {scpi_func}\") return scpi_func","title":"get_function"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_offset(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> float: ch = self._validate_channel(channel) cmd = f\"SOUR{ch}:VOLTage:OFFSet?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} limit)\" response = (await self._query(cmd)).strip() try: offs = float(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse offset float from response: '{response}'\", ) self._logger.debug(f\"Channel {ch}: Offset{type_str} is {offs} V\") return offs","title":"get_offset"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_output_load_impedance(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> Union[float, OutputLoadImpedance]: ch = self._validate_channel(channel) cmd = f\"OUTPut{ch}:LOAD?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} limit)\" response = (await self._query(cmd)).strip() self._logger.debug(f\"Channel {ch}: Raw impedance response{type_str} is '{response}'\") try: numeric_response = float(response) if abs(numeric_response - 9.9e37) < 1e30: return OutputLoadImpedance.INFINITY else: return numeric_response except ValueError: if response.upper() == OutputLoadImpedance.INFINITY.value.upper(): return OutputLoadImpedance.INFINITY for enum_member in OutputLoadImpedance: if response.upper() == enum_member.value.upper(): return enum_member raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Could not parse impedance response: '{response}'\", )","title":"get_output_load_impedance"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_output_polarity(self, channel: Union[int, str]) -> OutputPolarity: ch = self._validate_channel(channel) response = (await self._query(f\"OUTPut{ch}:POLarity?\")).strip().upper() try: return OutputPolarity(response) except ValueError: if response == \"NORM\": return OutputPolarity.NORMAL if response == \"INV\": return OutputPolarity.INVERTED raise InstrumentCommunicationError( instrument=self.config.model, command=f\"OUTPut{ch}:POLarity?\", message=f\"Unexpected polarity response from instrument: {response}\", )","title":"get_output_polarity"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_output_state(self, channel: Union[int, str]) -> SCPIOnOff: ch = self._validate_channel(channel) response = (await self._query(f\"OUTPut{ch}:STATe?\")).strip() state = SCPIOnOff.ON if response == \"1\" else SCPIOnOff.OFF self._logger.debug(f\"Channel {ch}: Output state is {state.value}\") return state","title":"get_output_state"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_phase(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> float: ch = self._validate_channel(channel) cmd = f\"SOUR{ch}:PHASe?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} limit)\" response = (await self._query(cmd)).strip() try: ph = float(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse phase float from response: '{response}'\", ) unit = await self.get_angle_unit() self._logger.debug(f\"Channel {ch}: Phase{type_str} is {ph} {unit}\") return ph","title":"get_phase"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_phase_unlock_error_state(self) -> SCPIOnOff: response = (await self._query(\"SOUR1:PHASe:UNLock:ERRor:STATe?\")).strip() state = SCPIOnOff.ON if response == \"1\" else SCPIOnOff.OFF self._logger.debug(f\"Phase unlock error state is {state.value}\") return state","title":"get_phase_unlock_error_state"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_pulse_duty_cycle(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:PULS:DCYCle?\")).strip() return float(response)","title":"get_pulse_duty_cycle"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_pulse_hold_mode(self, channel: Union[int, str]) -> str: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:PULS:HOLD?\")).strip().upper() return response","title":"get_pulse_hold_mode"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_pulse_period(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:PULS:PERiod?\")).strip() return float(response)","title":"get_pulse_period"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_pulse_transition_both(self, channel: Union[int, str]) -> float: warnings.warn(\"Querying PULS:TRAN:BOTH; specific query may not exist or might return leading edge time.\", UserWarning, stacklevel=2) return await self.get_pulse_transition_leading(channel)","title":"get_pulse_transition_both"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_pulse_transition_leading(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:PULS:TRANsition:LEADing?\")).strip() return float(response)","title":"get_pulse_transition_leading"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_pulse_transition_trailing(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:PULS:TRANsition:TRAiling?\")).strip() return float(response)","title":"get_pulse_transition_trailing"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_pulse_width(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:PULS:WIDTh?\")).strip() return float(response)","title":"get_pulse_width"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_ramp_symmetry(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:RAMP:SYMMetry?\")).strip() return float(response)","title":"get_ramp_symmetry"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_selected_arbitrary_waveform_name(self, channel: Union[int, str]) -> str: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:ARBitrary?\")).strip() if response.startswith('\"') and response.endswith('\"'): response = response[1:-1] self._logger.debug(f\"Channel {ch}: Currently selected arbitrary waveform is '{response}'\") return response","title":"get_selected_arbitrary_waveform_name"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_square_duty_cycle(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:SQUare:DCYCle?\")).strip() return float(response)","title":"get_square_duty_cycle"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_square_period(self, channel: Union[int, str]) -> float: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:FUNC:SQUare:PERiod?\")).strip() return float(response)","title":"get_square_period"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_sync_output_mode(self, channel: Union[int, str]) -> SyncMode: ch = self._validate_channel(channel) response = (await self._query(f\"OUTPut{ch}:SYNC:MODE?\")).strip().upper() try: return SyncMode(response) except ValueError: if response == \"NORM\": return SyncMode.NORMAL if response == \"CARR\": return SyncMode.CARRIER if response == \"MARK\": return SyncMode.MARKER raise InstrumentCommunicationError( instrument=self.config.model, command=f\"OUTPut{ch}:SYNC:MODE?\", message=f\"Unexpected sync mode response from instrument: {response}\", )","title":"get_sync_output_mode"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_sync_output_polarity(self, channel: Union[int, str]) -> OutputPolarity: ch = self._validate_channel(channel) response = (await self._query(f\"OUTPut{ch}:SYNC:POLarity?\")).strip().upper() try: return OutputPolarity(response) except ValueError: if response == \"NORM\": return OutputPolarity.NORMAL if response == \"INV\": return OutputPolarity.INVERTED raise InstrumentCommunicationError( instrument=self.config.model, command=f\"OUTPut{ch}:SYNC:POLarity?\", message=f\"Unexpected sync polarity response from instrument: {response}\", )","title":"get_sync_output_polarity"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_sync_output_source(self) -> int: response = (await self._query(\"OUTPut:SYNC:SOURce?\")).strip().upper() match = re.match(r\"CH(\\d+)\", response) if match: src_ch = int(match.group(1)) self._logger.debug(f\"Sync output source is CH{src_ch}\") return src_ch else: raise InstrumentCommunicationError( instrument=self.config.model, command=\"OUTPut:SYNC:SOURce?\", message=f\"Unexpected response querying Sync source: '{response}'\", )","title":"get_sync_output_source"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_sync_output_state(self) -> SCPIOnOff: response = (await self._query(\"OUTPut:SYNC:STATe?\")).strip() state = SCPIOnOff.ON if response == \"1\" else SCPIOnOff.OFF self._logger.debug(f\"Sync output state is {state.value}\") return state","title":"get_sync_output_state"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_voltage_autorange_state(self, channel: Union[int, str]) -> SCPIOnOff: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:VOLTage:RANGe:AUTO?\")).strip() state = SCPIOnOff.ON if response == \"1\" else SCPIOnOff.OFF self._logger.debug(f\"Channel {ch}: Voltage autorange state is {state.value} (Query response: {response})\") return state","title":"get_voltage_autorange_state"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_voltage_limit_high(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> float: ch = self._validate_channel(channel) cmd = f\"SOUR{ch}:VOLTage:LIMit:HIGH?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} possible)\" response = (await self._query(cmd)).strip() try: val = float(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse high limit float from response: '{response}'\", ) self._logger.debug(f\"Channel {ch}: Voltage high limit{type_str} is {val} V\") return val","title":"get_voltage_limit_high"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_voltage_limit_low(self, channel: Union[int, str], query_type: Optional[OutputLoadImpedance] = None) -> float: ch = self._validate_channel(channel) cmd = f\"SOUR{ch}:VOLTage:LIMit:LOW?\" type_str = \"\" if query_type: cmd += f\" {query_type.value}\"; type_str = f\" ({query_type.name} possible)\" response = (await self._query(cmd)).strip() try: val = float(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse low limit float from response: '{response}'\", ) self._logger.debug(f\"Channel {ch}: Voltage low limit{type_str} is {val} V\") return val","title":"get_voltage_limit_low"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_voltage_limits_state(self, channel: Union[int, str]) -> SCPIOnOff: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:VOLTage:LIMit:STATe?\")).strip() state = SCPIOnOff.ON if response == \"1\" else SCPIOnOff.OFF self._logger.debug(f\"Channel {ch}: Voltage limits state is {state.value}\") return state","title":"get_voltage_limits_state"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def get_voltage_unit(self, channel: Union[int, str]) -> VoltageUnit: ch = self._validate_channel(channel) response = (await self._query(f\"SOUR{ch}:VOLTage:UNIT?\")).strip().upper() try: return VoltageUnit(response) except ValueError: raise InstrumentCommunicationError( instrument=self.config.model, command=f\"SOUR{ch}:VOLTage:UNIT?\", message=f\"Unexpected voltage unit response from instrument: {response}\", )","title":"get_voltage_unit"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def list_directory(self, path: str = \"\") -> FileSystemInfo: path_scpi = f' \"{path}\"' if path else \"\" cmd = f\"MMEMory:CATalog:ALL?{path_scpi}\" response = (await self._query(cmd)).strip() try: parts = response.split(',', 2) if len(parts) < 2: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Unexpected response format from MMEM:CAT?: {response}\", ) bytes_used = int(parts[0]) bytes_free = int(parts[1]) info = FileSystemInfo(bytes_used=bytes_used, bytes_free=bytes_free) if len(parts) > 2 and parts[2]: file_pattern = r'\"([^\"]+),([^\"]*),(\\d+)\"' listings = re.findall(file_pattern, parts[2]) for name, ftype, size_str in listings: file_type = ftype if ftype else 'FILE' try: size = int(size_str) except ValueError: self._log(f\"Warning: Could not parse size '{size_str}' for file '{name}'.\", level=\"warning\") continue info.files.append({'name': name, 'type': file_type.upper(), 'size': size}) self._logger.log(f\"Directory listing for '{path or 'current dir'}': Used={info.bytes_used}, Free={info.bytes_free}, Items={len(info.files)}\") return info except (ValueError, IndexError) as e: raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to parse MMEM:CAT? response: '{response}'. Error: {e}\", ) from e","title":"list_directory"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def select_arbitrary_waveform(self, channel: Union[int, str], arb_name: str) -> None: ch = self._validate_channel(channel) if not arb_name: raise InstrumentParameterError( parameter=\"arb_name\", message=\"Arbitrary waveform name cannot be empty.\" ) if '\"' in arb_name or \"'\" in arb_name: raise InstrumentParameterError( parameter=\"arb_name\", value=arb_name, message=\"Arbitrary waveform name cannot contain quotes.\", ) quoted_arb_name = f'\"{arb_name}\"' await self._send_command(f\"SOUR{ch}:FUNC:ARBitrary {quoted_arb_name}\") self._logger.debug(f\"Channel {ch}: Active arbitrary waveform selection set to '{arb_name}'\") await self._error_check()","title":"select_arbitrary_waveform"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def set_am_depth(self, channel: Union[int, str], depth_percent: Union[float, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(depth_percent) if isinstance(depth_percent, (int, float)) and not (0 <= float(depth_percent) <= 120): self._log(f\"Warning: AM depth {depth_percent}% is outside typical 0-120 range.\", level=\"warning\") await self._send_command(f\"SOUR{ch}:AM:DEPTh {cmd_val}\") self._logger.log(f\"Channel {ch}: AM depth set to {depth_percent}%\") await self._error_check()","title":"set_am_depth"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def set_am_source(self, channel: Union[int, str], source: ModulationSource) -> None: ch = self._validate_channel(channel) cmd_src = source.value if cmd_src == f\"CH{ch}\": raise InstrumentParameterError( parameter=\"source\", value=source, message=f\"Channel {ch} cannot be its own AM source.\", ) if cmd_src == ModulationSource.CH2.value and self.channel_count < 2: raise InstrumentParameterError( parameter=\"source\", value=source, message=\"CH2 source invalid for 1-channel instrument.\", ) await self._send_command(f\"SOUR{ch}:AM:SOURce {cmd_src}\") self._logger.log(f\"Channel {ch}: AM source set to {cmd_src}\") await self._error_check()","title":"set_am_source"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_amplitude(self, channel: Union[int, str], amplitude: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) amp_cmd_val = self._format_value_min_max_def(amplitude) if isinstance(amplitude, (int, float)): if 0 <= (ch - 1) < len(self.config.channels): channel_config_model = self.config.channels[ch-1] channel_config_model.amplitude.assert_in_range(float(amplitude), name=f\"Amplitude for CH{ch}\") await self._send_command(f\"SOUR{ch}:VOLTage {amp_cmd_val}\") unit = await self.get_voltage_unit(ch) self._logger.debug(f\"Channel {ch}: Amplitude set to {amplitude} (in current unit: {unit.value}, using SCPI value: {amp_cmd_val})\") await self._error_check()","title":"set_amplitude"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_angle_unit(self, unit: str) -> None: unit_upper = unit.upper().strip() valid_scpi_units = {\"DEGREE\", \"RADIAN\", \"SECOND\", \"DEG\", \"RAD\", \"SEC\"} map_to_scpi_preferred = {\"DEG\": \"DEGREE\", \"DEGREES\": \"DEGREE\", \"RAD\": \"RADIAN\", \"RADIANS\": \"RADIAN\", \"SEC\": \"SECOND\", \"SECONDS\": \"SECOND\"} scpi_to_send = map_to_scpi_preferred.get(unit_upper, unit_upper) if scpi_to_send not in valid_scpi_units and unit_upper not in valid_scpi_units : raise InstrumentParameterError( parameter=\"unit\", value=unit, valid_range=[\"DEGREE\", \"RADIAN\", \"SECONd\"], message=\"Invalid angle unit.\", ) await self._send_command(f\"UNIT:ANGLe {scpi_to_send}\") self._logger.debug(f\"Global angle unit set to {scpi_to_send}\") await self._error_check()","title":"set_angle_unit"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_arbitrary_waveform_sample_rate(self, channel: Union[int, str], sample_rate: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(sample_rate) if isinstance(sample_rate, (int, float)): if 0 <= (ch - 1) < len(self.config.channels): channel_config_model = self.config.channels[ch-1] if hasattr(channel_config_model, 'arbitrary') and hasattr(channel_config_model.arbitrary, 'sampling_rate'): channel_config_model.arbitrary.sampling_rate.assert_in_range(float(sample_rate), name=f\"Arbitrary sample rate for CH{ch}\") await self._send_command(f\"SOUR{ch}:FUNC:ARB:SRATe {cmd_val}\") self._logger.debug(f\"Channel {ch}: Arbitrary waveform sample rate set to {sample_rate} Sa/s (using SCPI value: {cmd_val})\") await self._error_check()","title":"set_arbitrary_waveform_sample_rate"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def set_burst_cycles(self, channel: Union[int, str], n_cycles: Union[int, str]) -> None: ch = self._validate_channel(channel) cmd_val: str log_val: Union[int, str] = n_cycles if isinstance(n_cycles, str): nc_upper = n_cycles.upper().strip() if nc_upper in {\"MIN\", \"MINIMUM\"}: cmd_val = OutputLoadImpedance.MINIMUM.value elif nc_upper in {\"MAX\", \"MAXIMUM\"}: cmd_val = OutputLoadImpedance.MAXIMUM.value elif nc_upper in {\"INF\", \"INFINITY\"}: cmd_val = \"INFinity\" else: raise InstrumentParameterError( parameter=\"n_cycles\", value=n_cycles, message=\"Invalid string for burst cycles.\", ) elif isinstance(n_cycles, int): if n_cycles < 1: raise InstrumentParameterError( parameter=\"n_cycles\", value=n_cycles, message=\"Burst cycle count must be positive.\", ) inst_max_cycles = 100_000_000 if n_cycles > inst_max_cycles: self._log(f\"Warning: Burst cycles {n_cycles} > typical max ({inst_max_cycles}).\", level=\"warning\") cmd_val = str(n_cycles) else: raise InstrumentParameterError( parameter=\"n_cycles\", value=n_cycles, message=f\"Invalid type '{type(n_cycles)}' for burst cycles.\", ) await self._send_command(f\"SOUR{ch}:BURSt:NCYCles {cmd_val}\") self._logger.log(f\"Channel {ch}: Burst cycles set to {log_val}\") await self._error_check()","title":"set_burst_cycles"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def set_burst_mode(self, channel: Union[int, str], mode: BurstMode) -> None: ch = self._validate_channel(channel) await self._send_command(f\"SOUR{ch}:BURSt:MODE {mode.value}\") self._logger.log(f\"Channel {ch}: Burst mode set to {mode.value}\") await self._error_check()","title":"set_burst_mode"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def set_burst_period(self, channel: Union[int, str], period_sec: Union[float, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(period_sec) await self._send_command(f\"SOUR{ch}:BURSt:INTernal:PERiod {cmd_val}\") self._logger.log(f\"Channel {ch}: Internal burst period set to {period_sec} s\") await self._error_check()","title":"set_burst_period"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def set_fm_deviation(self, channel: Union[int, str], deviation_hz: Union[float, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(deviation_hz) await self._send_command(f\"SOUR{ch}:FM:DEViation {cmd_val}\") self._logger.log(f\"Channel {ch}: FM deviation set to {deviation_hz} Hz\") await self._error_check()","title":"set_fm_deviation"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_frequency(self, channel: Union[int, str], frequency: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) freq_cmd_val = self._format_value_min_max_def(frequency) if isinstance(frequency, (int, float)): if 0 <= (ch - 1) < len(self.config.channels): channel_config_model = self.config.channels[ch - 1] channel_config_model.frequency.assert_in_range(float(frequency), name=f\"Frequency for CH{ch}\") await self._send_command(f\"SOUR{ch}:FREQ {freq_cmd_val}\") self._logger.debug(f\"Channel {ch}: Frequency set to {frequency} Hz (using SCPI value: {freq_cmd_val})\") await self._error_check()","title":"set_frequency"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function","text":"Sets the primary waveform function and associated parameters for a channel. Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_function(self, channel: Union[int, str], function_type: Union[WaveformType, str], **kwargs: Any) -> None: \"\"\" Sets the primary waveform function and associated parameters for a channel. \"\"\" ch = self._validate_channel(channel) scpi_func_short = self._get_scpi_function_name(function_type) standard_params_set: Dict[str, bool] = {} # Assuming FUNC_ARB should be WaveformType.ARB.value if 'frequency' in kwargs and scpi_func_short != WaveformType.ARB.value: await self.set_frequency(ch, kwargs.pop('frequency')) standard_params_set['frequency'] = True if 'amplitude' in kwargs: await self.set_amplitude(ch, kwargs.pop('amplitude')) standard_params_set['amplitude'] = True if 'offset' in kwargs: await self.set_offset(ch, kwargs.pop('offset')) standard_params_set['offset'] = True await self._send_command(f\"SOUR{ch}:FUNC {scpi_func_short}\") self._logger.debug(f\"Channel {ch}: Function set to {function_type} (SCPI: {scpi_func_short})\") await self._error_check() if kwargs: # Ensure WAVEFORM_PARAM_COMMANDS keys are WaveformType enum members # And scpi_func_short is mapped to its corresponding WaveformType enum member if it's a string func_enum_key: Optional[WaveformType] = None if isinstance(function_type, WaveformType): func_enum_key = function_type elif isinstance(function_type, str): try: # First try to convert SCPI string directly to enum member func_enum_key = WaveformType(scpi_func_short) except ValueError: # If that fails, try to map profile config values to enum members scpi_to_enum_map = { \"SINUSOID\": WaveformType.SINE, \"SQUARE\": WaveformType.SQUARE, \"RAMP\": WaveformType.RAMP, \"PULSE\": WaveformType.PULSE, \"NOISE\": WaveformType.NOISE, \"DC\": WaveformType.DC, \"ARB\": WaveformType.ARB, \"ARBITRARY\": WaveformType.ARB, # Add enum values as fallback \"SIN\": WaveformType.SINE, \"SQU\": WaveformType.SQUARE, \"PULS\": WaveformType.PULSE, \"NOIS\": WaveformType.NOISE, } func_enum_key = scpi_to_enum_map.get(scpi_func_short.upper()) if func_enum_key is None: self._logger.warning(f\"SCPI function '{scpi_func_short}' not mappable to WaveformType enum for parameter lookup.\") param_cmds_for_func = WAVEFORM_PARAM_COMMANDS.get(func_enum_key) if func_enum_key else None if not param_cmds_for_func: self._logger.warning(f\"No specific parameters defined for function '{function_type}' (SCPI: {scpi_func_short}). \" f\"Ignoring remaining kwargs: {kwargs}\") if any(k not in standard_params_set for k in kwargs): raise InstrumentParameterError( message=f\"Unknown parameters {list(kwargs.keys())} passed for function {function_type}.\" ) return for param_name, value in kwargs.items(): if param_name in param_cmds_for_func: try: if param_name in [\"duty_cycle\", \"symmetry\"] and isinstance(value, (int, float)): if not (0 <= float(value) <= 100): self._logger.warning(f\"Parameter '{param_name}' value {value}% is outside the \" f\"typical 0-100 range. Instrument validation will apply.\") value_to_format = value if isinstance(value, (ArbFilterType, ArbAdvanceMode)): # Pass enum value for formatting value_to_format = value.value formatted_value = self._format_value_min_max_def(value_to_format) cmd_lambda = param_cmds_for_func[param_name] cmd = cmd_lambda(ch, formatted_value) await self._send_command(cmd) self._logger.debug(f\"Channel {ch}: Parameter '{param_name}' set to {value}\") await self._error_check() except InstrumentParameterError as ipe: raise InstrumentParameterError( parameter=param_name, value=value, message=f\"Invalid value for function '{function_type}'. Cause: {ipe}\", ) from ipe except InstrumentCommunicationError: raise except Exception as e: self._logger.error(f\"Error setting parameter '{param_name}' for function '{scpi_func_short}': {e}\") raise InstrumentCommunicationError( instrument=self.config.model, command=cmd, message=f\"Failed to set parameter {param_name}\", ) from e else: raise InstrumentParameterError( parameter=param_name, message=f\"Parameter is not supported for function '{function_type}' ({scpi_func_short}). Supported: {list(param_cmds_for_func.keys())}\", )","title":"set_function"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_offset(self, channel: Union[int, str], offset: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) offset_cmd_val = self._format_value_min_max_def(offset) await self._send_command(f\"SOUR{ch}:VOLTage:OFFSet {offset_cmd_val}\") self._logger.debug(f\"Channel {ch}: Offset set to {offset} V\") await self._error_check()","title":"set_offset"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_output_load_impedance(self, channel: Union[int, str], impedance: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) cmd_impedance = self._format_value_min_max_def(impedance) if isinstance(impedance, (int, float)): if 0 <= (ch - 1) < len(self.config.channels): channel_config_model = self.config.channels[ch-1] if hasattr(channel_config_model, 'output') and hasattr(channel_config_model.output, 'load_impedance'): channel_config_model.output.load_impedance.assert_in_range(float(impedance), name=f\"Load impedance for CH{ch}\") await self._send_command(f\"OUTPut{ch}:LOAD {cmd_impedance}\") self._logger.debug(f\"Channel {ch}: Output load impedance setting updated to {impedance} (using SCPI value: {cmd_impedance})\") await self._error_check()","title":"set_output_load_impedance"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_output_polarity(self, channel: Union[int, str], polarity: OutputPolarity) -> None: ch = self._validate_channel(channel) await self._send_command(f\"OUTPut{ch}:POLarity {polarity.value}\") self._logger.debug(f\"Channel {ch}: Output polarity set to {polarity.value}\") await self._error_check()","title":"set_output_polarity"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call # Duplicated @validate_call removed async def set_output_state(self, channel: Union[int, str], state: SCPIOnOff) -> None: ch = self._validate_channel(channel) await self._send_command(f\"OUTPut{ch}:STATe {state.value}\") self._logger.debug(f\"Channel {ch}: Output state set to {state.value}\") await self._error_check()","title":"set_output_state"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_phase(self, channel: Union[int, str], phase: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) phase_cmd_val = self._format_value_min_max_def(phase) if isinstance(phase, (int, float)): if 0 <= (ch - 1) < len(self.config.channels): channel_config_model = self.config.channels[ch-1] channel_config_model.phase.assert_in_range(float(phase), name=f\"Phase for CH{ch}\") await self._send_command(f\"SOUR{ch}:PHASe {phase_cmd_val}\") unit = await self.get_angle_unit() self._logger.debug(f\"Channel {ch}: Phase set to {phase} (in current unit: {unit}, using SCPI value: {phase_cmd_val})\") await self._error_check()","title":"set_phase"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_phase_reference(self, channel: Union[int, str]) -> None: ch = self._validate_channel(channel) await self._send_command(f\"SOUR{ch}:PHASe:REFerence\") self._logger.debug(f\"Channel {ch}: Phase reference reset (current phase defined as 0).\") await self._error_check()","title":"set_phase_reference"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_phase_unlock_error_state(self, state: SCPIOnOff) -> None: await self._send_command(f\"SOUR1:PHASe:UNLock:ERRor:STATe {state.value}\") self._logger.debug(f\"Phase unlock error state set to {state.value}\") await self._error_check()","title":"set_phase_unlock_error_state"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def set_sweep_spacing(self, channel: Union[int, str], spacing: SweepSpacing) -> None: ch = self._validate_channel(channel) await self._send_command(f\"SOUR{ch}:SWEep:SPACing {spacing.value}\") self._logger.debug(f\"Channel {ch}: Sweep spacing set to {spacing.value}\") await self._error_check()","title":"set_sweep_spacing"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def set_sweep_start_frequency(self, channel: Union[int, str], freq_hz: Union[float, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(freq_hz) await self._send_command(f\"SOUR{ch}:FREQuency:STARt {cmd_val}\") self._logger.debug(f\"Channel {ch}: Sweep start frequency set to {freq_hz} Hz\") await self._error_check()","title":"set_sweep_start_frequency"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def set_sweep_stop_frequency(self, channel: Union[int, str], freq_hz: Union[float, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(freq_hz) await self._send_command(f\"SOUR{ch}:FREQuency:STOP {cmd_val}\") self._logger.debug(f\"Channel {ch}: Sweep stop frequency set to {freq_hz} Hz\") await self._error_check()","title":"set_sweep_stop_frequency"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def set_sweep_time(self, channel: Union[int, str], sweep_time_sec: Union[float, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(sweep_time_sec) await self._send_command(f\"SOUR{ch}:SWEep:TIME {cmd_val}\") self._logger.log(f\"Channel {ch}: Sweep time set to {sweep_time_sec} s\") await self._error_check()","title":"set_sweep_time"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_sync_output_mode(self, channel: Union[int, str], mode: SyncMode) -> None: ch = self._validate_channel(channel) await self._send_command(f\"OUTPut{ch}:SYNC:MODE {mode.value}\") self._logger.debug(f\"Channel {ch}: Sync output mode set to {mode.value}\") await self._error_check()","title":"set_sync_output_mode"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_sync_output_polarity(self, channel: Union[int, str], polarity: OutputPolarity) -> None: ch = self._validate_channel(channel) await self._send_command(f\"OUTPut{ch}:SYNC:POLarity {polarity.value}\") self._logger.debug(f\"Channel {ch}: Sync output polarity set to {polarity.value}\") await self._error_check()","title":"set_sync_output_polarity"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_sync_output_source(self, source_channel: int) -> None: ch_to_set = self._validate_channel(source_channel) await self._send_command(f\"OUTPut:SYNC:SOURce CH{ch_to_set}\") self._logger.debug(f\"Sync output source set to CH{ch_to_set}\") await self._error_check()","title":"set_sync_output_source"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_sync_output_state(self, state: SCPIOnOff) -> None: await self._send_command(f\"OUTPut:SYNC:STATe {state.value}\") self._logger.debug(f\"Sync output state set to {state.value}\") await self._error_check()","title":"set_sync_output_state"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def set_trigger_slope(self, channel: Union[int, str], slope: TriggerSlope) -> None: ch = self._validate_channel(channel) await self._send_command(f\"TRIGger{ch}:SLOPe {slope.value}\") self._logger.log(f\"Channel {ch}: Trigger slope set to {slope.value}\") await self._error_check()","title":"set_trigger_slope"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def set_trigger_source(self, channel: Union[int, str], source: TriggerSource) -> None: ch = self._validate_channel(channel) await self._send_command(f\"TRIGger{ch}:SOURce {source.value}\") self._logger.log(f\"Channel {ch}: Trigger source set to {source.value}\") await self._error_check()","title":"set_trigger_source"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_voltage_autorange_state(self, channel: Union[int, str], state: SCPIOnOff) -> None: ch = self._validate_channel(channel) await self._send_command(f\"SOUR{ch}:VOLTage:RANGe:AUTO {state.value}\") self._logger.debug(f\"Channel {ch}: Voltage autorange state set to {state.value}\") await self._error_check()","title":"set_voltage_autorange_state"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_voltage_limit_high(self, channel: Union[int, str], voltage: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(voltage) await self._send_command(f\"SOUR{ch}:VOLTage:LIMit:HIGH {cmd_val}\") self._logger.debug(f\"Channel {ch}: Voltage high limit set to {voltage} V (using SCPI value: {cmd_val})\") await self._error_check()","title":"set_voltage_limit_high"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_voltage_limit_low(self, channel: Union[int, str], voltage: Union[float, OutputLoadImpedance, str]) -> None: ch = self._validate_channel(channel) cmd_val = self._format_value_min_max_def(voltage) await self._send_command(f\"SOUR{ch}:VOLTage:LIMit:LOW {cmd_val}\") self._logger.debug(f\"Channel {ch}: Voltage low limit set to {voltage} V (using SCPI value: {cmd_val})\") await self._error_check()","title":"set_voltage_limit_low"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_voltage_limits_state(self, channel: Union[int, str], state: SCPIOnOff) -> None: ch = self._validate_channel(channel) await self._send_command(f\"SOUR{ch}:VOLTage:LIMit:STATe {state.value}\") self._logger.debug(f\"Channel {ch}: Voltage limits state set to {state.value}\") await self._error_check()","title":"set_voltage_limits_state"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def set_voltage_unit(self, channel: Union[int, str], unit: VoltageUnit) -> None: ch = self._validate_channel(channel) await self._send_command(f\"SOUR{ch}:VOLTage:UNIT {unit.value}\") self._logger.debug(f\"Channel {ch}: Voltage unit set to {unit.value}\") await self._error_check()","title":"set_voltage_unit"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels","text":"Source code in pytestlab/instruments/WaveformGenerator.py @validate_call async def synchronize_phase_all_channels(self) -> None: if self.channel_count < 2: self._logger.warning(\"Warning: Phase synchronization command sent, but primarily intended for multi-channel instruments.\") await self._send_command(\"PHASe:SYNChronize\") self._logger.debug(\"All channels/internal phase generators synchronized.\") await self._error_check()","title":"synchronize_phase_all_channels"},{"location":"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now","text":"Source code in pytestlab/instruments/WaveformGenerator.py async def trigger_now(self, channel: Optional[Union[int, str]] = None) -> None: if channel is not None: ch = self._validate_channel(channel) await self._send_command(f\"TRIGger{ch}\") self._logger.log(f\"Sent immediate channel-specific trigger command TRIGger{ch}\") else: await self._send_command(\"*TRG\") self._logger.log(\"Sent general bus trigger command *TRG\") await self._error_check()","title":"trigger_now"},{"location":"api/instruments/#multimeter","text":"","title":"Multimeter"},{"location":"api/instruments/#pytestlab.instruments.Multimeter","text":"","title":"Multimeter"},{"location":"api/instruments/#pytestlab.instruments.Multimeter-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.logger","text":"","title":"logger"},{"location":"api/instruments/#pytestlab.instruments.Multimeter-classes","text":"","title":"Classes"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.Multimeter","text":"Bases: Instrument [ MultimeterConfig ] Drives a Digital Multimeter (DMM) for various measurements. This class provides a high-level interface for controlling a DMM, building upon the base Instrument class. It includes methods for common DMM operations such as measuring voltage, current, resistance, and frequency. It also handles instrument-specific configurations and can incorporate measurement uncertainty based on the provided configuration. ATTRIBUTE DESCRIPTION config The Pydantic configuration object ( MultimeterConfig ) containing settings specific to this DMM. TYPE: MultimeterConfig Source code in pytestlab/instruments/instrument.py def __init__(self, config: ConfigType, backend: AsyncInstrumentIO, **kwargs: Any) -> None: # Changed to AsyncInstrumentIO \"\"\" Initialize the Instrument class. Args: config (ConfigType): Configuration for the instrument. backend (AsyncInstrumentIO): The communication backend instance. **kwargs: Additional keyword arguments. \"\"\" if not isinstance(config, InstrumentConfig): # Check against the bound base raise InstrumentConfigurationError( self.__class__.__name__, f\"A valid InstrumentConfig-compatible object must be provided, but got {type(config).__name__}.\", ) self.config = config self._backend = backend # This will be an AsyncInstrumentIO instance self._command_log = [] logger_name = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ self._logger = get_logger(logger_name) self._logger.info(f\"Instrument '{logger_name}': Initializing with backend '{type(backend).__name__}'.\")","title":"Multimeter"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.Multimeter-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.config","text":"","title":"config"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.Multimeter-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement","text":"Configures the instrument for a measurement without triggering it. Source code in pytestlab/instruments/Multimeter.py async def configure_measurement(self, function: DMMFunction, range_val: Optional[str] = None, resolution: Optional[str] = None): \"\"\"Configures the instrument for a measurement without triggering it.\"\"\" scpi_function_val = function.value range_for_query = range_val.upper() if range_val is not None else \"AUTO\" resolution_for_query = resolution.upper() if resolution is not None else \"DEF\" # Using CONFigure command as per programming guide page 44 cmd = f\"CONFigure:{scpi_function_val} {range_for_query},{resolution_for_query}\" await self._send_command(cmd) self._logger.info(f\"Configured DMM for {function.name} with range={range_for_query}, resolution={resolution_for_query}\")","title":"configure_measurement"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config","text":"Source code in pytestlab/instruments/Multimeter.py @classmethod def from_config(cls: Type[\"Multimeter\"], config: MultimeterConfig, debug_mode: bool = False) -> \"Multimeter\": # This method is generally handled by the `AutoInstrument` factory. # It's provided here for completeness but direct instantiation is preferred # when not using the factory. # If config is a dict that needs to be passed to MultimeterConfig constructor: # return cls(config=MultimeterConfig(**config), debug_mode=debug_mode) # If config is already a MultimeterConfig instance: raise NotImplementedError(\"Please use AutoInstrument.from_config() to create instrument instances.\")","title":"from_config"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config","text":"Retrieves the current measurement configuration from the DMM. This method queries the instrument to determine its current settings, such as the active measurement function, range, and resolution. It then parses this information into a structured MultimeterConfigResult object. RETURNS DESCRIPTION MultimeterConfigResult A MultimeterConfigResult dataclass instance with the DMM's current MultimeterConfigResult configuration. RAISES DESCRIPTION InstrumentDataError If the configuration string from the DMM cannot be parsed. Source code in pytestlab/instruments/Multimeter.py async def get_config(self) -> MultimeterConfigResult: \"\"\"Retrieves the current measurement configuration from the DMM. This method queries the instrument to determine its current settings, such as the active measurement function, range, and resolution. It then parses this information into a structured `MultimeterConfigResult` object. Returns: A `MultimeterConfigResult` dataclass instance with the DMM's current configuration. Raises: InstrumentDataError: If the configuration string from the DMM cannot be parsed. \"\"\" # Query the instrument for its current configuration. The response is typically # a string like '\"VOLT:DC 10,0.0001\"'. config_str: str = (await self._query(\"CONFigure?\")).replace('\"', '').strip() try: # Handle cases where resolution is not returned, e.g., \"FRES 1.000000E+02\" parts = config_str.split() mode_part = parts[0] # Settings part can be complex, find first comma settings_part = \" \".join(parts[1:]) if ',' in settings_part: range_str, resolution_str = settings_part.split(\",\", 1) else: range_str = settings_part resolution_str = \"N/A\" # Resolution not specified in query response # Parse the string to extract the mode, range, and resolution. range_value_float: float = float(range_str) except (ValueError, IndexError) as e: raise InstrumentDataError(self.config.model, f\"Failed to parse configuration string: '{config_str}'\") from e # Determine human-friendly measurement mode and assign units based on mode measurement_mode_str: str = \"\" # Renamed unit_str: str = \"\" # Renamed mode_upper: str = mode_part.upper() if mode_upper.startswith(\"VOLT\"): measurement_mode_str = \"Voltage\" unit_str = \"V\" elif mode_upper.startswith(\"CURR\"): measurement_mode_str = \"Current\" unit_str = \"A\" elif \"RES\" in mode_upper: # Catches RES and FRES measurement_mode_str = \"Resistance\" unit_str = \"Ohm\" elif \"FREQ\" in mode_upper: measurement_mode_str = \"Frequency\" unit_str = \"Hz\" elif mode_upper.startswith(\"TEMP\"): measurement_mode_str = \"Temperature\" unit_str = \"\u00b0C\" # Default; could also be \u00b0F depending on settings else: measurement_mode_str = mode_part return MultimeterConfigResult( measurement_mode=measurement_mode_str, range_value=range_value_float, resolution=resolution_str.strip(), units=unit_str )","title":"get_config"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure","text":"Performs a measurement and returns the result. This is the primary method for acquiring data from the DMM. It configures the measurement, triggers it, and reads the result. If measurement accuracy specifications are provided in the instrument's configuration, this method will calculate the uncertainty and return the value as a UFloat object. PARAMETER DESCRIPTION function The measurement function to perform (e.g., DC Voltage). TYPE: DMMFunction range_val The measurement range (e.g., \"1V\", \"AUTO\"). If not provided, \"AUTO\" is used. The value is validated against the ranges defined in the instrument's configuration. TYPE: Optional [ str ] DEFAULT: None resolution The desired resolution (e.g., \"MIN\", \"MAX\", \"DEF\"). If not provided, \"DEF\" (default) is used. TYPE: Optional [ str ] DEFAULT: None RETURNS DESCRIPTION MeasurementResult A MeasurementResult object containing the measured value (as a float MeasurementResult or UFloat ), units, and other metadata. RAISES DESCRIPTION InstrumentParameterError If an unsupported range_val is provided. Source code in pytestlab/instruments/Multimeter.py async def measure(self, function: DMMFunction, range_val: Optional[str] = None, resolution: Optional[str] = None) -> MeasurementResult: \"\"\"Performs a measurement and returns the result. This is the primary method for acquiring data from the DMM. It configures the measurement, triggers it, and reads the result. If measurement accuracy specifications are provided in the instrument's configuration, this method will calculate the uncertainty and return the value as a `UFloat` object. Args: function: The measurement function to perform (e.g., DC Voltage). range_val: The measurement range (e.g., \"1V\", \"AUTO\"). If not provided, \"AUTO\" is used. The value is validated against the ranges defined in the instrument's configuration. resolution: The desired resolution (e.g., \"MIN\", \"MAX\", \"DEF\"). If not provided, \"DEF\" (default) is used. Returns: A `MeasurementResult` object containing the measured value (as a float or `UFloat`), units, and other metadata. Raises: InstrumentParameterError: If an unsupported `range_val` is provided. \"\"\" scpi_function_val = function.value is_autorange = range_val is None or range_val.upper() == \"AUTO\" # The MEASure command is a combination of CONFigure, INITiate, and FETCh. # This is convenient but makes querying the actual range used in autorange tricky. # For accurate uncertainty, we will use CONFigure separately when in autorange. if is_autorange: await self.set_measurement_function(function) await self._send_command(f\"{function.value}:RANGe:AUTO ON\") if resolution: await self._send_command(f\"{function.value}:RESolution {resolution.upper()}\") response_str = await self._query(\"READ?\") else: # Use the combined MEASure? command for fixed range range_for_query = range_val.upper() if range_val is not None else \"AUTO\" resolution_for_query = resolution.upper() if resolution is not None else \"DEF\" query_command = f\"MEASURE:{scpi_function_val}? {range_for_query},{resolution_for_query}\" self._logger.debug(f\"Executing DMM measure query: {query_command}\") response_str = await self._query(query_command) try: reading = float(response_str) except ValueError: raise InstrumentDataError(self.config.instrument['model'], f\"Could not parse measurement reading: '{response_str}'\") value_to_return: Union[float, UFloat] = reading # --- Uncertainty Calculation --- function_spec = self._get_function_spec(function) if function_spec: try: # Determine the actual range used by the instrument to find the correct spec current_instrument_config = await self.get_config() actual_instrument_range = current_instrument_config.range_value # Find the matching range specification matching_range_spec = None # Find the smallest nominal range that is >= the actual range used. # Assumes specs in YAML are sorted by nominal value, which is typical. for r_spec in sorted(function_spec.ranges, key=lambda r: r.nominal): if r_spec.nominal >= actual_instrument_range: matching_range_spec = r_spec break # Fallback to the largest range if no suitable one is found (e.g. if actual > largest nominal) if not matching_range_spec: matching_range_spec = max(function_spec.ranges, key=lambda r: r.nominal) if matching_range_spec: accuracy_spec = matching_range_spec.default_accuracy if accuracy_spec: # Use the spec's nominal value for the '% of range' calculation range_for_calc = matching_range_spec.nominal std_dev = accuracy_spec.calculate_uncertainty(reading, range_for_calc) if std_dev > 0: value_to_return = ufloat(reading, std_dev) self._logger.debug(f\"Applied accuracy spec for range {range_for_calc}, value: {value_to_return}\") else: self._logger.debug(f\"Calculated uncertainty is zero. Returning float.\") else: self._logger.warning(f\"No applicable accuracy specification found for function '{function.name}' at range {actual_instrument_range}. Returning float.\") else: self._logger.warning(f\"Could not find a matching range specification for function '{function.name}' at range {actual_instrument_range}. Returning float.\") except Exception as e: self._logger.error(f\"Error during uncertainty calculation: {e}. Returning float.\") else: self._logger.debug(f\"No measurement function specification in config for '{function.name}'. Returning float.\") units_val, measurement_name_val = self._get_measurement_unit_and_type(function) return MeasurementResult( values=value_to_return, instrument=self.config.model, units=units_val, measurement_type=measurement_name_val, )","title":"measure"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function","text":"Configures the primary measurement function of the DMM. This method sets the DMM to measure a specific quantity, such as DC Voltage, AC Current, or Resistance. PARAMETER DESCRIPTION function The desired measurement function, as defined by the DMMFunction enum. TYPE: DMMFunction Source code in pytestlab/instruments/Multimeter.py async def set_measurement_function(self, function: DMMFunction) -> None: \"\"\"Configures the primary measurement function of the DMM. This method sets the DMM to measure a specific quantity, such as DC Voltage, AC Current, or Resistance. Args: function: The desired measurement function, as defined by the `DMMFunction` enum. \"\"\" # Using the recommended SCPI command from the programming guide (page 145) await self._send_command(f'SENSe:FUNCtion \"{function.value}\"') self._logger.info(f\"Set measurement function to {function.name} ({function.value})\")","title":"set_measurement_function"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source","text":"Sets the trigger source for initiating a measurement. The trigger source determines what event will cause the DMM to start taking a reading. - \"IMM\": Immediate, the DMM triggers as soon as it's ready. - \"EXT\": External, a hardware signal on the rear panel triggers the DMM. - \"BUS\": A software command ( *TRG ) triggers the DMM. PARAMETER DESCRIPTION source The desired trigger source. TYPE: Literal ['IMM', 'EXT', 'BUS'] Source code in pytestlab/instruments/Multimeter.py async def set_trigger_source(self, source: Literal[\"IMM\", \"EXT\", \"BUS\"]) -> None: \"\"\"Sets the trigger source for initiating a measurement. The trigger source determines what event will cause the DMM to start taking a reading. - \"IMM\": Immediate, the DMM triggers as soon as it's ready. - \"EXT\": External, a hardware signal on the rear panel triggers the DMM. - \"BUS\": A software command (`*TRG`) triggers the DMM. Args: source: The desired trigger source. \"\"\" await self._send_command(f\"TRIG:SOUR {source.upper()}\") self._logger.info(f\"Set trigger source to {source}\")","title":"set_trigger_source"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult","text":"Stores the current measurement configuration of the multimeter. This data class holds the state of the multimeter's configuration at a point in time, such as the measurement mode, range, and resolution. It is typically returned by methods that query the instrument's status. ATTRIBUTE DESCRIPTION measurement_mode The type of measurement being made (e.g., \"Voltage\"). TYPE: str range_value The configured measurement range. TYPE: float resolution The configured resolution. TYPE: str units The units for the measurement range (e.g., \"V\", \"A\"). TYPE: str","title":"MultimeterConfigResult"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.measurement_mode","text":"","title":"measurement_mode"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.range_value","text":"","title":"range_value"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.resolution","text":"","title":"resolution"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.units","text":"","title":"units"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__","text":"Source code in pytestlab/instruments/Multimeter.py def __str__(self) -> str: return (f\"Measurement Mode: {self.measurement_mode}\\n\" f\"Range: {self.range_value} {self.units}\\n\" f\"Resolution: {self.resolution}\")","title":"__str__"},{"location":"api/instruments/#pytestlab.instruments.Multimeter-functions","text":"","title":"Functions"},{"location":"api/instruments/#dc-active-load","text":"","title":"DC Active Load"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad","text":"","title":"DCActiveLoad"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad-classes","text":"","title":"Classes"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad","text":"Bases: Instrument Drives a DC Electronic Load instrument, such as the Keysight EL30000 series. This class provides a driver for controlling a DC Active Load, enabling programmatic control over its operating modes and settings. It is designed to work with SCPI-compliant instruments and leverages a detailed Pydantic configuration model to provide uncertainty-aware measurements and feature-rich control. The driver supports the following primary operations: - Setting the operating mode (Constant Current, Voltage, Power, Resistance). - Programming the load value for the current mode. - Enabling or disabling the load's input. - Measuring voltage, current, and power with uncertainty. - Configuring and controlling transient and battery test modes. Source code in pytestlab/instruments/DCActiveLoad.py def __init__(self, config: DCActiveLoadConfig, backend: AsyncInstrumentIO, **kwargs: Any) -> None: super().__init__(config, backend, **kwargs) self.current_mode = None","title":"DCActiveLoad"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.config","text":"","title":"config"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.current_mode","text":"","title":"current_mode"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode","text":"Sets the operating mode of the transient generator. Source code in pytestlab/instruments/DCActiveLoad.py async def configure_transient_mode(self, mode: Literal['CONTinuous', 'PULSe', 'TOGGle', 'LIST'], channel: int = 1) -> None: \"\"\"Sets the operating mode of the transient generator.\"\"\" await self._send_command(f\"TRANsient:MODE {mode.upper()}, (@{channel})\")","title":"configure_transient_mode"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test","text":"Enables or disables the battery test operation. Source code in pytestlab/instruments/DCActiveLoad.py async def enable_battery_test(self, state: bool, channel: int = 1) -> None: \"\"\"Enables or disables the battery test operation.\"\"\" await self._send_command(f\"BATTery:ENABle {'ON' if state else 'OFF'}, (@{channel})\")","title":"enable_battery_test"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input","text":"Enables or disables the load's input. PARAMETER DESCRIPTION state True to enable the input, False to disable. TYPE: bool channel The channel to control (default is 1). TYPE: int DEFAULT: 1 Source code in pytestlab/instruments/DCActiveLoad.py async def enable_input(self, state: bool, channel: int = 1) -> None: \"\"\"Enables or disables the load's input. Args: state: True to enable the input, False to disable. channel: The channel to control (default is 1). \"\"\" await self._send_command(f\"INPut:STATe {'ON' if state else 'OFF'}, (@{channel})\") self._log(f\"Input on channel {channel} turned {'ON' if state else 'OFF'}.\")","title":"enable_input"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data","text":"Fetches the specified number of logged data points. Source code in pytestlab/instruments/DCActiveLoad.py async def fetch_datalogger_data(self, num_points: int, channel: int = 1) -> List[float]: \"\"\"Fetches the specified number of logged data points.\"\"\" response = await self._query(f\"FETCh:SCALar:DLOG? {num_points}, (@{channel})\") return [float(x) for x in response.split(',')]","title":"fetch_datalogger_data"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data","text":"Fetches the captured waveform (scope) data as a NumPy array. Source code in pytestlab/instruments/DCActiveLoad.py async def fetch_scope_data(self, measurement: Literal[\"current\", \"voltage\", \"power\"], channel: int = 1) -> np.ndarray: \"\"\"Fetches the captured waveform (scope) data as a NumPy array.\"\"\" scpi_map = {\"current\": \"CURRent\", \"voltage\": \"VOLTage\", \"power\": \"POWer\"} raw_data = await self._query_raw(f\"FETCh:ARRay:{scpi_map[measurement]}? (@{channel})\") # Assumes the backend handles binary block data parsing; if not, call self._read_to_np return np.frombuffer(raw_data, dtype=np.float32) # Assuming float data","title":"fetch_scope_data"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config","text":"Creates a DCActiveLoad instance from a configuration. This factory method allows for the creation of a DCActiveLoad driver from either a raw dictionary or a DCActiveLoadConfig object. It simplifies the instantiation process by handling the configuration object creation internally. PARAMETER DESCRIPTION config A dictionary or a DCActiveLoadConfig object containing the instrument's settings. TYPE: Union [ Dict [ str , Any ], DCActiveLoadConfig ] debug_mode If True, enables detailed logging for debugging purposes. TYPE: bool DEFAULT: False simulate If True, initializes the instrument in simulation mode. TYPE: bool DEFAULT: False RETURNS DESCRIPTION DCActiveLoad An initialized DCActiveLoad object. RAISES DESCRIPTION InstrumentConfigurationError If the provided config is not a dict or a DCActiveLoadConfig instance. Source code in pytestlab/instruments/DCActiveLoad.py @classmethod def from_config( cls: Type[DCActiveLoad], config: Union[Dict[str, Any], DCActiveLoadConfig], debug_mode: bool = False, simulate: bool = False ) -> DCActiveLoad: \"\"\"Creates a DCActiveLoad instance from a configuration. This factory method allows for the creation of a DCActiveLoad driver from either a raw dictionary or a `DCActiveLoadConfig` object. It simplifies the instantiation process by handling the configuration object creation internally. Args: config: A dictionary or a `DCActiveLoadConfig` object containing the instrument's settings. debug_mode: If True, enables detailed logging for debugging purposes. simulate: If True, initializes the instrument in simulation mode. Returns: An initialized DCActiveLoad object. Raises: InstrumentConfigurationError: If the provided config is not a dict or a `DCActiveLoadConfig` instance. \"\"\" conf_obj: DCActiveLoadConfig if isinstance(config, dict): conf_obj = DCActiveLoadConfig(**config) elif isinstance(config, DCActiveLoadConfig): conf_obj = config else: raise InstrumentConfigurationError( \"DCActiveLoad\", \"Configuration must be a dict or DCActiveLoadConfig instance.\" ) return cls(config=conf_obj, debug_mode=debug_mode, simulate=simulate)","title":"from_config"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement","text":"Queries a measurement from the ongoing battery test. Source code in pytestlab/instruments/DCActiveLoad.py async def get_battery_test_measurement(self, metric: Literal[\"capacity\", \"power\", \"time\"], channel: int = 1) -> float: \"\"\"Queries a measurement from the ongoing battery test.\"\"\" scpi_map = {\"capacity\": \"CAPacity\", \"power\": \"POWer\", \"time\": \"TIMe\"} response = await self._query(f\"BATTery:MEASure:{scpi_map[metric]}? (@{channel})\") return float(response)","title":"get_battery_test_measurement"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled","text":"Queries the state of the load's input. RETURNS DESCRIPTION bool True if the input is enabled, False otherwise. Source code in pytestlab/instruments/DCActiveLoad.py async def is_input_enabled(self, channel: int = 1) -> bool: \"\"\"Queries the state of the load's input. Returns: True if the input is enabled, False otherwise. \"\"\" response = await self._query(f\"INPut:STATe? (@{channel})\") return response.strip() == '1'","title":"is_input_enabled"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current","text":"Measures the sinking current, including uncertainty if available. Source code in pytestlab/instruments/DCActiveLoad.py async def measure_current(self) -> MeasurementResult: \"\"\"Measures the sinking current, including uncertainty if available.\"\"\" return await self._measure_with_uncertainty(\"current\")","title":"measure_current"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power","text":"Measures the power being dissipated, including uncertainty if available. Source code in pytestlab/instruments/DCActiveLoad.py async def measure_power(self) -> MeasurementResult: \"\"\"Measures the power being dissipated, including uncertainty if available.\"\"\" return await self._measure_with_uncertainty(\"power\")","title":"measure_power"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage","text":"Measures the voltage across the load, including uncertainty if available. Source code in pytestlab/instruments/DCActiveLoad.py async def measure_voltage(self) -> MeasurementResult: \"\"\"Measures the voltage across the load, including uncertainty if available.\"\"\" return await self._measure_with_uncertainty(\"voltage\")","title":"measure_voltage"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity","text":"Configures the capacity (Ah) cutoff condition for the battery test. Source code in pytestlab/instruments/DCActiveLoad.py async def set_battery_cutoff_capacity(self, capacity: float, state: bool = True, channel: int = 1) -> None: \"\"\"Configures the capacity (Ah) cutoff condition for the battery test.\"\"\" await self._send_command(f\"BATTery:CUTOff:CAPacity:STATe {'ON' if state else 'OFF'}, (@{channel})\") if state: await self._send_command(f\"BATTery:CUTOff:CAPacity {capacity}, (@{channel})\")","title":"set_battery_cutoff_capacity"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer","text":"Configures the timer (seconds) cutoff condition for the battery test. Source code in pytestlab/instruments/DCActiveLoad.py async def set_battery_cutoff_timer(self, time_s: float, state: bool = True, channel: int = 1) -> None: \"\"\"Configures the timer (seconds) cutoff condition for the battery test.\"\"\" await self._send_command(f\"BATTery:CUTOff:TIMer:STATe {'ON' if state else 'OFF'}, (@{channel})\") if state: await self._send_command(f\"BATTery:CUTOff:TIMer {time_s}, (@{channel})\")","title":"set_battery_cutoff_timer"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage","text":"Configures the voltage cutoff condition for the battery test. Source code in pytestlab/instruments/DCActiveLoad.py async def set_battery_cutoff_voltage(self, voltage: float, state: bool = True, channel: int = 1) -> None: \"\"\"Configures the voltage cutoff condition for the battery test.\"\"\" await self._send_command(f\"BATTery:CUTOff:VOLTage:STATe {'ON' if state else 'OFF'}, (@{channel})\") if state: await self._send_command(f\"BATTery:CUTOff:VOLTage {voltage}, (@{channel})\")","title":"set_battery_cutoff_voltage"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load","text":"Programs the load's setpoint for the current operating mode. This method sets the target value that the load will maintain. The unit of the value argument depends on the currently active mode: - \"CC\" mode: value is in Amperes (A). - \"CV\" mode: value is in Volts (V). - \"CP\" mode: value is in Watts (W). - \"CR\" mode: value is in Ohms (\u03a9). PARAMETER DESCRIPTION value The target value for the load. TYPE: float RAISES DESCRIPTION InstrumentParameterError If the operating mode has not been set first by calling set_mode() . Source code in pytestlab/instruments/DCActiveLoad.py async def set_load(self, value: float) -> None: \"\"\"Programs the load's setpoint for the current operating mode. This method sets the target value that the load will maintain. The unit of the `value` argument depends on the currently active mode: - \"CC\" mode: `value` is in Amperes (A). - \"CV\" mode: `value` is in Volts (V). - \"CP\" mode: `value` is in Watts (W). - \"CR\" mode: `value` is in Ohms (\u03a9). Args: value: The target value for the load. Raises: InstrumentParameterError: If the operating mode has not been set first by calling `set_mode()`. \"\"\" if self.current_mode is None: raise InstrumentParameterError(\"Load mode has not been set. Call set_mode() first.\") command_map = {\"CC\": \"CURRent\", \"CV\": \"VOLTage\", \"CP\": \"POWer\", \"CR\": \"RESistance\"} scpi_param = command_map.get(self.current_mode) if scpi_param: await self._send_command(f\"{scpi_param}:LEVel:IMMediate:AMPLitude {value}\") self._log(f\"Load value set to {value} in mode {self.current_mode}.\") else: raise InstrumentParameterError(f\"Internal error: Unknown current_mode '{self.current_mode}'.\")","title":"set_load"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode","text":"Sets the operating mode of the electronic load. This method configures the load to operate in one of the supported modes. The mode determines what physical quantity the load will attempt to keep constant. The supported modes are: - \"CC\": Constant Current - \"CV\": Constant Voltage - \"CP\": Constant Power - \"CR\": Constant Resistance PARAMETER DESCRIPTION mode The desired operating mode. The input is case-insensitive. TYPE: str RAISES DESCRIPTION InstrumentParameterError If the specified mode is not supported. Source code in pytestlab/instruments/DCActiveLoad.py async def set_mode(self, mode: str) -> None: \"\"\"Sets the operating mode of the electronic load. This method configures the load to operate in one of the supported modes. The mode determines what physical quantity the load will attempt to keep constant. The supported modes are: - \"CC\": Constant Current - \"CV\": Constant Voltage - \"CP\": Constant Power - \"CR\": Constant Resistance Args: mode: The desired operating mode. The input is case-insensitive. Raises: InstrumentParameterError: If the specified mode is not supported. \"\"\" mode_upper = mode.upper() mode_map: Dict[str, str] = { \"CC\": \"CURR\", \"CV\": \"VOLTage\", \"CP\": \"POWer\", \"CR\": \"RESistance\" } if mode_upper not in mode_map: raise InstrumentParameterError( parameter=\"mode\", value=mode, valid_range=list(mode_map.keys()), message=f\"Unsupported mode '{mode}'. Valid modes are: {', '.join(mode_map.keys())}.\" ) await self._send_command(f\"FUNC {mode_map[mode_upper]}\") self.current_mode = mode_upper self._log(f\"Operating mode set to {mode_upper}.\")","title":"set_mode"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range","text":"Sets the operating range for the current mode. PARAMETER DESCRIPTION value The maximum expected value to set the range. Can also be \"MIN\" or \"MAX\". TYPE: Union [ float , str ] channel The channel to configure (default is 1). TYPE: int DEFAULT: 1 Source code in pytestlab/instruments/DCActiveLoad.py async def set_range(self, value: Union[float, str], channel: int = 1) -> None: \"\"\"Sets the operating range for the current mode. Args: value: The maximum expected value to set the range. Can also be \"MIN\" or \"MAX\". channel: The channel to configure (default is 1). \"\"\" if self.current_mode is None: raise InstrumentParameterError(\"Mode must be set before setting range.\") command_map = {\"CC\": \"CURRent\", \"CV\": \"VOLTage\", \"CP\": \"POWer\", \"CR\": \"RESistance\"} scpi_param = command_map.get(self.current_mode) await self._send_command(f\"{scpi_param}:RANGe {value}, (@{channel})\") self._log(f\"Range for mode {self.current_mode} on channel {channel} set for value {value}.\")","title":"set_range"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate","text":"Sets the slew rate for the current operating mode. PARAMETER DESCRIPTION rate The desired slew rate. Units depend on the mode (A/s, V/s, etc.). Can also be \"MIN\", \"MAX\", or \"INF\". TYPE: Union [ float , str ] channel The channel to configure (default is 1). TYPE: int DEFAULT: 1 Source code in pytestlab/instruments/DCActiveLoad.py async def set_slew_rate(self, rate: Union[float, str], channel: int = 1) -> None: \"\"\"Sets the slew rate for the current operating mode. Args: rate: The desired slew rate. Units depend on the mode (A/s, V/s, etc.). Can also be \"MIN\", \"MAX\", or \"INF\". channel: The channel to configure (default is 1). \"\"\" if self.current_mode is None: raise InstrumentParameterError(\"Mode must be set before setting slew rate.\") command_map = {\"CC\": \"CURRent\", \"CV\": \"VOLTage\", \"CP\": \"POWer\", \"CR\": \"RESistance\"} scpi_param = command_map.get(self.current_mode) await self._send_command(f\"{scpi_param}:SLEW {rate}, (@{channel})\") self._log(f\"Slew rate for mode {self.current_mode} on channel {channel} set to {rate}.\")","title":"set_slew_rate"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level","text":"Sets the secondary (transient) level for the current operating mode. Source code in pytestlab/instruments/DCActiveLoad.py async def set_transient_level(self, value: float, channel: int = 1) -> None: \"\"\"Sets the secondary (transient) level for the current operating mode.\"\"\" if self.current_mode is None: raise InstrumentParameterError(\"Mode must be set before setting transient level.\") command_map = {\"CC\": \"CURRent\", \"CV\": \"VOLTage\", \"CP\": \"POWer\", \"CR\": \"RESistance\"} scpi_param = command_map.get(self.current_mode) await self._send_command(f\"{scpi_param}:TLEVel {value}, (@{channel})\")","title":"set_transient_level"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input","text":"Enables or disables a short circuit on the input. PARAMETER DESCRIPTION state True to enable the short, False to disable. TYPE: bool channel The channel to control (default is 1). TYPE: int DEFAULT: 1 Source code in pytestlab/instruments/DCActiveLoad.py async def short_input(self, state: bool, channel: int = 1) -> None: \"\"\"Enables or disables a short circuit on the input. Args: state: True to enable the short, False to disable. channel: The channel to control (default is 1). \"\"\" await self._send_command(f\"INPut:SHORt:STATe {'ON' if state else 'OFF'}, (@{channel})\") self._log(f\"Input short on channel {channel} turned {'ON' if state else 'OFF'}.\")","title":"short_input"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient","text":"Initiates the transient trigger system. Source code in pytestlab/instruments/DCActiveLoad.py async def start_transient(self, continuous: bool = False, channel: int = 1) -> None: \"\"\"Initiates the transient trigger system.\"\"\" await self._send_command(f\"INITiate:CONTinuous:TRANsient {'ON' if continuous else 'OFF'}, (@{channel})\") if not continuous: await self._send_command(f\"INITiate:TRANsient (@{channel})\")","title":"start_transient"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient","text":"Aborts any pending or in-progress transient operations. Source code in pytestlab/instruments/DCActiveLoad.py async def stop_transient(self, channel: int = 1) -> None: \"\"\"Aborts any pending or in-progress transient operations.\"\"\" await self._send_command(f\"ABORt:TRANsient (@{channel})\")","title":"stop_transient"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check","text":"Performs a health check on the DC Electronic Load. Source code in pytestlab/instruments/DCActiveLoad.py async def health_check(self) -> HealthReport: \"\"\"Performs a health check on the DC Electronic Load.\"\"\" report = HealthReport() try: report.instrument_idn = await self.id() errors = await self.get_all_errors() if errors: report.status = HealthStatus.WARNING report.warnings.extend([f\"Stored Error: {code} - {msg}\" for code, msg in errors]) else: report.status = HealthStatus.OK except Exception as e: report.status = HealthStatus.ERROR report.errors.append(f\"Health check failed: {e}\") return report","title":"health_check"},{"location":"api/instruments/#spectrum-analyzer","text":"","title":"Spectrum Analyzer"},{"location":"api/instruments/#pytestlab.instruments.SpectrumAnalyser","text":"","title":"SpectrumAnalyser"},{"location":"api/instruments/#pytestlab.instruments.SpectrumAnalyser-classes","text":"","title":"Classes"},{"location":"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult","text":"Source code in pytestlab/instruments/SpectrumAnalyser.py def __init__(self, x: List[float], y: List[float], x_label: str = \"Frequency (Hz)\", y_label: str = \"Amplitude (dBm)\"): self.x = x self.y = y self.x_label = x_label self.y_label = y_label","title":"PlaceholderMeasurementResult"},{"location":"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.x","text":"","title":"x"},{"location":"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.x_label","text":"","title":"x_label"},{"location":"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.y","text":"","title":"y"},{"location":"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.y_label","text":"","title":"y_label"},{"location":"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser","text":"Bases: Instrument [ SpectrumAnalyzerConfig ] Source code in pytestlab/instruments/instrument.py def __init__(self, config: ConfigType, backend: AsyncInstrumentIO, **kwargs: Any) -> None: # Changed to AsyncInstrumentIO \"\"\" Initialize the Instrument class. Args: config (ConfigType): Configuration for the instrument. backend (AsyncInstrumentIO): The communication backend instance. **kwargs: Additional keyword arguments. \"\"\" if not isinstance(config, InstrumentConfig): # Check against the bound base raise InstrumentConfigurationError( self.__class__.__name__, f\"A valid InstrumentConfig-compatible object must be provided, but got {type(config).__name__}.\", ) self.config = config self._backend = backend # This will be an AsyncInstrumentIO instance self._command_log = [] logger_name = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ self._logger = get_logger(logger_name) self._logger.info(f\"Instrument '{logger_name}': Initializing with backend '{type(backend).__name__}'.\")","title":"SpectrumAnalyser"},{"location":"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement","text":"Source code in pytestlab/instruments/SpectrumAnalyser.py async def configure_measurement( self, center_freq: Optional[float] = None, span: Optional[float] = None, rbw: Optional[float] = None ) -> None: if center_freq is not None: await self._send_command(f\"FREQ:CENT {center_freq}\") # Use SCPI_MAP later self.config.frequency_center = center_freq # Update config if span is not None: await self._send_command(f\"FREQ:SPAN {span}\") self.config.frequency_span = span # Update config if rbw is not None: await self._send_command(f\"BAND {rbw}\") # RBW command self.config.resolution_bandwidth = rbw # Update config","title":"configure_measurement"},{"location":"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace","text":"Source code in pytestlab/instruments/SpectrumAnalyser.py async def get_trace(self, channel: int = 1) -> PlaceholderMeasurementResult: # Use actual MeasurementResult later # Example: Query trace data, parse it (often CSV or binary) # raw_data_str = await self._query(f\"TRAC:DATA? TRACE{channel}\") # Use SCPI_MAP # For simulation, SimBackend needs to be taught to respond to this # For now, return dummy data # freqs = [1e9, 2e9, 3e9] # Dummy frequencies # amps = [-20, -30, -25] # Dummy amplitudes # return PlaceholderMeasurementResult(x=freqs, y=amps) self._logger.warning(\"get_trace for SpectrumAnalyser is a placeholder and returns dummy data.\") # Simulating a basic trace for now sim_freqs = [self.config.frequency_center or 1e9 - (self.config.frequency_span or 100e6)/2 + i * ((self.config.frequency_span or 100e6)/10) for i in range(11)] sim_amps = [-20.0 - i*2 for i in range(11)] # Dummy amplitudes return PlaceholderMeasurementResult(x=sim_freqs, y=sim_amps)","title":"get_trace"},{"location":"api/instruments/#vector-network-analyzer-vna","text":"","title":"Vector Network Analyzer (VNA)"},{"location":"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser","text":"","title":"VectorNetworkAnalyser"},{"location":"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser-classes","text":"","title":"Classes"},{"location":"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData","text":"Source code in pytestlab/instruments/VectorNetworkAnalyser.py def __init__(self, frequencies: List[float], s_params: List[List[complex]], param_names: List[str]): self.frequencies = frequencies # List of frequencies self.s_params = s_params # List of lists, each inner list contains complex S-param values for a given S-parameter type self.param_names = param_names # List of S-parameter names, e.g., [\"S11\", \"S21\"]","title":"SParameterData"},{"location":"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData.frequencies","text":"","title":"frequencies"},{"location":"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData.param_names","text":"","title":"param_names"},{"location":"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData.s_params","text":"","title":"s_params"},{"location":"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser","text":"Bases: Instrument [ VNAConfig ] Source code in pytestlab/instruments/instrument.py def __init__(self, config: ConfigType, backend: AsyncInstrumentIO, **kwargs: Any) -> None: # Changed to AsyncInstrumentIO \"\"\" Initialize the Instrument class. Args: config (ConfigType): Configuration for the instrument. backend (AsyncInstrumentIO): The communication backend instance. **kwargs: Additional keyword arguments. \"\"\" if not isinstance(config, InstrumentConfig): # Check against the bound base raise InstrumentConfigurationError( self.__class__.__name__, f\"A valid InstrumentConfig-compatible object must be provided, but got {type(config).__name__}.\", ) self.config = config self._backend = backend # This will be an AsyncInstrumentIO instance self._command_log = [] logger_name = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ self._logger = get_logger(logger_name) self._logger.info(f\"Instrument '{logger_name}': Initializing with backend '{type(backend).__name__}'.\")","title":"VectorNetworkAnalyser"},{"location":"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser-attributes","text":"","title":"Attributes"},{"location":"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.model_config","text":"","title":"model_config"},{"location":"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep","text":"Source code in pytestlab/instruments/VectorNetworkAnalyser.py async def configure_s_parameter_sweep( self, s_params: Optional[List[str]] = None, # e.g. [\"S11\", \"S21\"] start_freq: Optional[float] = None, stop_freq: Optional[float] = None, num_points: Optional[int] = None, if_bandwidth: Optional[float] = None, power_level: Optional[float] = None ) -> None: if s_params is not None: # SCPI command to select S-parameters might be like: CALC:PAR:DEF \"S11\" # This is highly instrument specific. For now, just update config. self.config.s_parameters = s_params self._logger.info(f\"VNA S-parameters set to: {s_params}\") if start_freq is not None: await self._send_command(f\"SENS:FREQ:STAR {start_freq}\") # Example SCPI self.config.start_frequency = start_freq if stop_freq is not None: await self._send_command(f\"SENS:FREQ:STOP {stop_freq}\") # Example SCPI self.config.stop_frequency = stop_freq if num_points is not None: await self._send_command(f\"SENS:SWE:POIN {num_points}\") # Example SCPI self.config.num_points = num_points if if_bandwidth is not None: await self._send_command(f\"SENS:BWID {if_bandwidth}\") # Example SCPI for IF bandwidth self.config.if_bandwidth = if_bandwidth if power_level is not None: await self._send_command(f\"SOUR:POW {power_level}\") # Example SCPI for power self.config.power_level = power_level self._logger.info(\"VNA measurement configured (simulated).\")","title":"configure_s_parameter_sweep"},{"location":"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data","text":"Source code in pytestlab/instruments/VectorNetworkAnalyser.py async def get_s_parameter_data(self) -> SParameterData: # Example: Query S-parameter data. This is often complex, involving selecting # the S-parameter, then querying data (e.g., in Real, Imaginary or LogMag, Phase format). # raw_data_str = await self._query(f\"CALC:DATA? SDAT\") # Example SCPI for S-parameter data # For simulation, SimBackend needs to be taught to respond. self._logger.warning(\"get_s_parameter_data for VNA is a placeholder and returns dummy data.\") num_points = self.config.num_points or 101 start_f = self.config.start_frequency or 1e9 stop_f = self.config.stop_frequency or 2e9 frequencies = [start_f + i * (stop_f - start_f) / (num_points -1 if num_points > 1 else 1) for i in range(num_points)] s_params_to_measure = self.config.s_parameters or [\"S11\"] sim_s_params_data: List[List[complex]] = [] for _ in s_params_to_measure: # Dummy data: e.g., S11 a simple reflection, S21 a simple transmission param_data = [] for i in range(num_points): # Create some varying complex numbers real_part = -0.1 * i / num_points imag_part = -0.05 * (1 - i / num_points) param_data.append(complex(real_part, imag_part)) sim_s_params_data.append(param_data) return SParameterData(frequencies=frequencies, s_params=sim_s_params_data, param_names=s_params_to_measure)","title":"get_s_parameter_data"},{"location":"api/instruments/#power-meter","text":"","title":"Power Meter"},{"location":"api/instruments/#pytestlab.instruments.PowerMeter","text":"","title":"PowerMeter"},{"location":"api/instruments/#pytestlab.instruments.PowerMeter-classes","text":"","title":"Classes"},{"location":"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter","text":"Bases: Instrument [ PowerMeterConfig ] Drives a Power Meter instrument for power measurements. This class provides a high-level interface for controlling a power meter, building upon the base Instrument class. It includes methods for configuring the power sensor and reading power values. Source code in pytestlab/instruments/instrument.py def __init__(self, config: ConfigType, backend: AsyncInstrumentIO, **kwargs: Any) -> None: # Changed to AsyncInstrumentIO \"\"\" Initialize the Instrument class. Args: config (ConfigType): Configuration for the instrument. backend (AsyncInstrumentIO): The communication backend instance. **kwargs: Additional keyword arguments. \"\"\" if not isinstance(config, InstrumentConfig): # Check against the bound base raise InstrumentConfigurationError( self.__class__.__name__, f\"A valid InstrumentConfig-compatible object must be provided, but got {type(config).__name__}.\", ) self.config = config self._backend = backend # This will be an AsyncInstrumentIO instance self._command_log = [] logger_name = self.config.model if hasattr(self.config, 'model') else self.__class__.__name__ self._logger = get_logger(logger_name) self._logger.info(f\"Instrument '{logger_name}': Initializing with backend '{type(backend).__name__}'.\")","title":"PowerMeter"},{"location":"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter-functions","text":"","title":"Functions"},{"location":"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor","text":"Configures the settings for a specific power sensor channel. This method allows setting the frequency compensation, averaging count, and power units for the measurement. PARAMETER DESCRIPTION channel The sensor channel number to configure (default is 1). TYPE: int DEFAULT: 1 freq The frequency compensation value in Hz. TYPE: Optional [ float ] DEFAULT: None averaging_count The number of measurements to average. TYPE: Optional [ int ] DEFAULT: None units The desired power units (e.g., \"dBm\", \"W\"). TYPE: Optional [ str ] DEFAULT: None Source code in pytestlab/instruments/PowerMeter.py async def configure_sensor( self, channel: int = 1, freq: Optional[float] = None, averaging_count: Optional[int] = None, units: Optional[str] = None ) -> None: \"\"\"Configures the settings for a specific power sensor channel. This method allows setting the frequency compensation, averaging count, and power units for the measurement. Args: channel: The sensor channel number to configure (default is 1). freq: The frequency compensation value in Hz. averaging_count: The number of measurements to average. units: The desired power units (e.g., \"dBm\", \"W\"). \"\"\" # The specific SCPI commands can vary between power meter models. # The following are common examples. # Set the frequency compensation for the sensor. if freq is not None: await self._send_command(f\"SENS{channel}:FREQ {freq}\") self.config.frequency_compensation_value = freq # Update local config state # Set the number of readings to average. if averaging_count is not None: await self._send_command(f\"SENS{channel}:AVER:COUN {averaging_count}\") self.config.averaging_count = averaging_count # Update local config state # Set the units for the power measurement. if units is not None: # Validate that the requested units are supported by the config model. if units in PowerMeterConfig.model_fields['power_units'].annotation.__args__: await self._send_command(f\"UNIT:POW {units.upper()}\") self.config.power_units = units # type: ignore else: self._logger.warning(f\"Invalid power units '{units}' specified. Using config default '{self.config.power_units}'.\") self._logger.info(f\"Power meter sensor channel {channel} configured.\")","title":"configure_sensor"},{"location":"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power","text":"Reads the power from a specified sensor channel. This method queries the instrument for a power reading. Note that this is a placeholder implementation and currently returns simulated data. PARAMETER DESCRIPTION channel The sensor channel number to read from (default is 1). TYPE: int DEFAULT: 1 RETURNS DESCRIPTION float The measured power as a float. The units depend on the current float instrument configuration. Source code in pytestlab/instruments/PowerMeter.py async def read_power(self, channel: int = 1) -> float: \"\"\"Reads the power from a specified sensor channel. This method queries the instrument for a power reading. Note that this is a placeholder implementation and currently returns simulated data. Args: channel: The sensor channel number to read from (default is 1). Returns: The measured power as a float. The units depend on the current instrument configuration. \"\"\" # In a real implementation, you would query the instrument. # Example: raw_power_str = await self._query(f\"FETC{channel}?\") # The SimBackend would need to be configured to provide realistic responses. self._logger.warning(f\"read_power for PowerMeter channel {channel} is a placeholder and returns dummy data.\") # Simulate a power reading based on the configured units. sim_power = -10.0 # Default dummy power in dBm if self.config.power_units == \"W\": sim_power = 0.0001 # 100uW elif self.config.power_units == \"mW\": sim_power = 0.1 # 0.1mW elif self.config.power_units == \"uW\": sim_power = 100.0 # 100uW # For more realistic simulations, a small random variation could be added. # import random # sim_power *= (1 + random.uniform(-0.01, 0.01)) return sim_power","title":"read_power"},{"location":"api/instruments/#facade-pattern","text":"All instrument drivers expose \"facade\" objects for common operations, enabling a fluent, chainable API. For example, you can configure and enable a channel with: await scope.channel(1).setup(scale=0.5, offset=0).enable() See the 10-Minute Tour for practical examples.","title":"Facade Pattern"},{"location":"api/instruments/#simulation-support","text":"All drivers support simulation via the simulate=True flag or by using a simulated backend. See the Simulation Guide for details.","title":"Simulation Support"},{"location":"api/instruments/#extending-drivers","text":"To add support for a new instrument, create a profile YAML file and use AutoInstrument.from_config() or subclass Instrument . See Creating Profiles for guidance.","title":"Extending Drivers"},{"location":"api/measurements/","text":"Measurement Session The MeasurementSession class in PyTestLab provides a high-level, context-managed interface for orchestrating complex measurement workflows. It is designed to coordinate multiple instruments, manage experiment metadata, and ensure reproducibility and traceability of your measurements. Overview A MeasurementSession encapsulates: The set of instruments involved in a measurement. Experiment metadata (operator, DUT, environmental conditions, etc.). The sequence of measurement steps and their results. Automatic logging and database integration. This abstraction is ideal for automating multi-instrument experiments, batch measurements, or compliance/audit scenarios. API Reference pytestlab.measurements.MeasurementSession(name=None, description='', tz='UTC', *, bench=None) Bases: AbstractAsyncContextManager , AbstractContextManager Core builder \u2013 read the extensive doc-string in earlier assistant response for design details. Now supports asynchronous operations for sweeps. Source code in pytestlab/measurements/session.py def __init__( self, name: Optional[str] = None, description: str = \"\", tz: str = \"UTC\", *, bench: Optional[Bench] = None, ) -> None: self.name = name or \"Untitled\" self.description = description self.tz = tz self.created_at = datetime.now().astimezone().isoformat() self._parameters: Dict[str, _Parameter] = {} self._instruments: Dict[str, _InstrumentRecord] = {} self._meas_funcs: List[Tuple[str, T_MeasFunc]] = [] self._data_rows: List[Dict[str, Any]] = [] self._experiment: Optional[Experiment] = None self._has_run = False self._bench = bench # Inherit experiment data from bench if available if bench is not None and bench.experiment is not None: # Assign bench experiment properties self._experiment = bench.experiment self.name = bench.experiment.name self.description = bench.experiment.description # Set up instruments if self._bench: # Print debug info print(f\"DEBUG: Setting up {len(self._bench.instruments)} instruments from bench\") for alias, inst in self._bench.instruments.items(): self._instruments[alias] = _InstrumentRecord( alias=alias, resource=f\"bench:{alias}\", instance=inst, auto_close=False, ) Attributes created_at = datetime.now().astimezone().isoformat() instance-attribute data property description = description instance-attribute name = name or 'Untitled' instance-attribute tz = tz instance-attribute Functions __aenter__() async Source code in pytestlab/measurements/session.py async def __aenter__(self) -> \"MeasurementSession\": # noqa: D401 return self __aexit__(exc_type, exc, tb) async Source code in pytestlab/measurements/session.py async def __aexit__(self, exc_type, exc, tb) -> bool: # noqa: D401 await self._disconnect_all_instruments() return False __enter__() Synchronous context manager entry. Source code in pytestlab/measurements/session.py def __enter__(self) -> \"MeasurementSession\": # noqa: D401 \"\"\"Synchronous context manager entry.\"\"\" return self __exit__(exc_type, exc, tb) Synchronous context manager exit. Source code in pytestlab/measurements/session.py def __exit__(self, exc_type, exc, tb) -> bool: # noqa: D401 \"\"\"Synchronous context manager exit.\"\"\" # Use asyncio to run the async disconnect method synchronously try: loop = asyncio.get_event_loop() if loop.is_running(): # Create a new loop if we're already in a running event loop loop = asyncio.new_event_loop() loop.run_until_complete(self._disconnect_all_instruments()) loop.close() else: loop.run_until_complete(self._disconnect_all_instruments()) except Exception: # noqa: BLE001 pass # Keep original error handling behavior return False acquire(func=None, /, *, name=None) Source code in pytestlab/measurements/session.py def acquire(self, func: T_MeasFunc | None = None, /, *, name: str | None = None): if func is None: # decorator usage return lambda f: self.acquire(f, name=name) reg_name = name or func.__name__ if any(n == reg_name for n, _ in self._meas_funcs): raise ValueError(f\"Measurement '{reg_name}' already registered.\") self._meas_funcs.append((reg_name, func)) return func instrument(alias, config_key, /, **kw) async Source code in pytestlab/measurements/session.py async def instrument(self, alias: str, config_key: str, /, **kw) -> Any: if alias in self._instruments: record = self._instruments[alias] if not record.resource.startswith(\"bench:\"): raise ValueError(f\"Instrument alias '{alias}' already in use.\") return record.instance if self._bench: raise ValueError( f\"Instrument '{alias}' not found on the bench. \" \"When using a bench, all instruments must be defined in the bench configuration.\" ) inst = await AutoInstrument.from_config(config_key, **kw) self._instruments[alias] = _InstrumentRecord(alias, config_key, inst) return inst parameter(name, values, /, *, unit=None, notes='') Source code in pytestlab/measurements/session.py def parameter(self, name: str, values: T_ParamIterable, /, *, unit: str | None = None, notes: str = \"\") -> None: if name in self._parameters: raise ValueError(f\"Parameter '{name}' already exists.\") if callable(values) and not isinstance(values, (list, tuple, np.ndarray)): values = list(values()) else: values = list(values) self._parameters[name] = _Parameter(name, values, unit, notes) run(show_progress=True) async Source code in pytestlab/measurements/session.py async def run(self, show_progress: bool = True) -> Experiment: if not self._parameters: raise RuntimeError(\"No parameters defined.\") if not self._meas_funcs: raise RuntimeError(\"No measurement functions registered.\") names = [p.name for p in self._parameters.values()] value_lists = [p.values for p in self._parameters.values()] combinations = list(itertools.product(*value_lists)) self._data_rows = [{}] * len(combinations) # pre-allocate iterator = tqdm(enumerate(combinations), total=len(combinations), desc=\"Measurement sweep\", disable=not show_progress) for idx, combo in iterator: param_ctx = dict(zip(names, combo, strict=True)) row: Dict[str, Any] = {**param_ctx, \"timestamp\": time.time()} for meas_name, func in self._meas_funcs: sig = inspect.signature(func) kwargs = {n: v for n, v in param_ctx.items() if n in sig.parameters} for alias, inst_rec in self._instruments.items(): if alias in sig.parameters: kwargs[alias] = inst_rec.instance if \"ctx\" in sig.parameters: kwargs[\"ctx\"] = row res = await func(**kwargs) if not isinstance(res, Mapping): raise TypeError(f\"Measurement '{meas_name}' returned {type(res)}, expected Mapping.\") for key, val in res.items(): col = key if key not in row else f\"{meas_name}.{key}\" row[col] = val self._data_rows[idx] = row # Yield control to the event loop periodically in long sweeps await asyncio.sleep(0) self._has_run = True self._build_experiment() if self._bench and self._bench.db: await self._bench.save_experiment() return self._experiment Example Usage import asyncio from pytestlab.measurements import MeasurementSession from pytestlab.instruments import AutoInstrument async def main(): # Create instrument instances (simulated for this example) dmm = await AutoInstrument.from_config(\"keysight/EDU34450A\", simulate=True) psu = await AutoInstrument.from_config(\"keysight/EDU36311A\", simulate=True) await dmm.connect_backend() await psu.connect_backend() # Start a measurement session async with MeasurementSession( instruments={\"dmm\": dmm, \"psu\": psu}, metadata={\"operator\": \"Alice\", \"experiment\": \"Power Supply Test\"} ) as session: # Configure instruments await psu.channel(1).set(voltage=3.3, current_limit=0.5).on() # Perform measurement voltage = await dmm.measure_voltage_dc() # Record result in the session session.record(\"dmm_voltage\", voltage) # ... additional steps ... # Session automatically logs results and closes instruments asyncio.run(main()) Key Features Async Context Management: Ensures all resources are properly initialized and cleaned up. Metadata Tracking: Attach arbitrary metadata to each session for traceability. Result Recording: Store and retrieve results by key for later analysis or database storage. Integration: Works seamlessly with PyTestLab's database and experiment modules. For more advanced usage, see the Experiments & Sweeps API and the 10-Minute Tour .","title":"Measurements"},{"location":"api/measurements/#measurement-session","text":"The MeasurementSession class in PyTestLab provides a high-level, context-managed interface for orchestrating complex measurement workflows. It is designed to coordinate multiple instruments, manage experiment metadata, and ensure reproducibility and traceability of your measurements.","title":"Measurement Session"},{"location":"api/measurements/#overview","text":"A MeasurementSession encapsulates: The set of instruments involved in a measurement. Experiment metadata (operator, DUT, environmental conditions, etc.). The sequence of measurement steps and their results. Automatic logging and database integration. This abstraction is ideal for automating multi-instrument experiments, batch measurements, or compliance/audit scenarios.","title":"Overview"},{"location":"api/measurements/#api-reference","text":"","title":"API Reference"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession","text":"Bases: AbstractAsyncContextManager , AbstractContextManager Core builder \u2013 read the extensive doc-string in earlier assistant response for design details. Now supports asynchronous operations for sweeps. Source code in pytestlab/measurements/session.py def __init__( self, name: Optional[str] = None, description: str = \"\", tz: str = \"UTC\", *, bench: Optional[Bench] = None, ) -> None: self.name = name or \"Untitled\" self.description = description self.tz = tz self.created_at = datetime.now().astimezone().isoformat() self._parameters: Dict[str, _Parameter] = {} self._instruments: Dict[str, _InstrumentRecord] = {} self._meas_funcs: List[Tuple[str, T_MeasFunc]] = [] self._data_rows: List[Dict[str, Any]] = [] self._experiment: Optional[Experiment] = None self._has_run = False self._bench = bench # Inherit experiment data from bench if available if bench is not None and bench.experiment is not None: # Assign bench experiment properties self._experiment = bench.experiment self.name = bench.experiment.name self.description = bench.experiment.description # Set up instruments if self._bench: # Print debug info print(f\"DEBUG: Setting up {len(self._bench.instruments)} instruments from bench\") for alias, inst in self._bench.instruments.items(): self._instruments[alias] = _InstrumentRecord( alias=alias, resource=f\"bench:{alias}\", instance=inst, auto_close=False, )","title":"MeasurementSession"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession-attributes","text":"","title":"Attributes"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession.created_at","text":"","title":"created_at"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession.data","text":"","title":"data"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession.description","text":"","title":"description"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession.name","text":"","title":"name"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession.tz","text":"","title":"tz"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession-functions","text":"","title":"Functions"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__","text":"Source code in pytestlab/measurements/session.py async def __aenter__(self) -> \"MeasurementSession\": # noqa: D401 return self","title":"__aenter__"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__","text":"Source code in pytestlab/measurements/session.py async def __aexit__(self, exc_type, exc, tb) -> bool: # noqa: D401 await self._disconnect_all_instruments() return False","title":"__aexit__"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__","text":"Synchronous context manager entry. Source code in pytestlab/measurements/session.py def __enter__(self) -> \"MeasurementSession\": # noqa: D401 \"\"\"Synchronous context manager entry.\"\"\" return self","title":"__enter__"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__","text":"Synchronous context manager exit. Source code in pytestlab/measurements/session.py def __exit__(self, exc_type, exc, tb) -> bool: # noqa: D401 \"\"\"Synchronous context manager exit.\"\"\" # Use asyncio to run the async disconnect method synchronously try: loop = asyncio.get_event_loop() if loop.is_running(): # Create a new loop if we're already in a running event loop loop = asyncio.new_event_loop() loop.run_until_complete(self._disconnect_all_instruments()) loop.close() else: loop.run_until_complete(self._disconnect_all_instruments()) except Exception: # noqa: BLE001 pass # Keep original error handling behavior return False","title":"__exit__"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession.acquire","text":"Source code in pytestlab/measurements/session.py def acquire(self, func: T_MeasFunc | None = None, /, *, name: str | None = None): if func is None: # decorator usage return lambda f: self.acquire(f, name=name) reg_name = name or func.__name__ if any(n == reg_name for n, _ in self._meas_funcs): raise ValueError(f\"Measurement '{reg_name}' already registered.\") self._meas_funcs.append((reg_name, func)) return func","title":"acquire"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession.instrument","text":"Source code in pytestlab/measurements/session.py async def instrument(self, alias: str, config_key: str, /, **kw) -> Any: if alias in self._instruments: record = self._instruments[alias] if not record.resource.startswith(\"bench:\"): raise ValueError(f\"Instrument alias '{alias}' already in use.\") return record.instance if self._bench: raise ValueError( f\"Instrument '{alias}' not found on the bench. \" \"When using a bench, all instruments must be defined in the bench configuration.\" ) inst = await AutoInstrument.from_config(config_key, **kw) self._instruments[alias] = _InstrumentRecord(alias, config_key, inst) return inst","title":"instrument"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession.parameter","text":"Source code in pytestlab/measurements/session.py def parameter(self, name: str, values: T_ParamIterable, /, *, unit: str | None = None, notes: str = \"\") -> None: if name in self._parameters: raise ValueError(f\"Parameter '{name}' already exists.\") if callable(values) and not isinstance(values, (list, tuple, np.ndarray)): values = list(values()) else: values = list(values) self._parameters[name] = _Parameter(name, values, unit, notes)","title":"parameter"},{"location":"api/measurements/#pytestlab.measurements.MeasurementSession.run","text":"Source code in pytestlab/measurements/session.py async def run(self, show_progress: bool = True) -> Experiment: if not self._parameters: raise RuntimeError(\"No parameters defined.\") if not self._meas_funcs: raise RuntimeError(\"No measurement functions registered.\") names = [p.name for p in self._parameters.values()] value_lists = [p.values for p in self._parameters.values()] combinations = list(itertools.product(*value_lists)) self._data_rows = [{}] * len(combinations) # pre-allocate iterator = tqdm(enumerate(combinations), total=len(combinations), desc=\"Measurement sweep\", disable=not show_progress) for idx, combo in iterator: param_ctx = dict(zip(names, combo, strict=True)) row: Dict[str, Any] = {**param_ctx, \"timestamp\": time.time()} for meas_name, func in self._meas_funcs: sig = inspect.signature(func) kwargs = {n: v for n, v in param_ctx.items() if n in sig.parameters} for alias, inst_rec in self._instruments.items(): if alias in sig.parameters: kwargs[alias] = inst_rec.instance if \"ctx\" in sig.parameters: kwargs[\"ctx\"] = row res = await func(**kwargs) if not isinstance(res, Mapping): raise TypeError(f\"Measurement '{meas_name}' returned {type(res)}, expected Mapping.\") for key, val in res.items(): col = key if key not in row else f\"{meas_name}.{key}\" row[col] = val self._data_rows[idx] = row # Yield control to the event loop periodically in long sweeps await asyncio.sleep(0) self._has_run = True self._build_experiment() if self._bench and self._bench.db: await self._bench.save_experiment() return self._experiment","title":"run"},{"location":"api/measurements/#example-usage","text":"import asyncio from pytestlab.measurements import MeasurementSession from pytestlab.instruments import AutoInstrument async def main(): # Create instrument instances (simulated for this example) dmm = await AutoInstrument.from_config(\"keysight/EDU34450A\", simulate=True) psu = await AutoInstrument.from_config(\"keysight/EDU36311A\", simulate=True) await dmm.connect_backend() await psu.connect_backend() # Start a measurement session async with MeasurementSession( instruments={\"dmm\": dmm, \"psu\": psu}, metadata={\"operator\": \"Alice\", \"experiment\": \"Power Supply Test\"} ) as session: # Configure instruments await psu.channel(1).set(voltage=3.3, current_limit=0.5).on() # Perform measurement voltage = await dmm.measure_voltage_dc() # Record result in the session session.record(\"dmm_voltage\", voltage) # ... additional steps ... # Session automatically logs results and closes instruments asyncio.run(main())","title":"Example Usage"},{"location":"api/measurements/#key-features","text":"Async Context Management: Ensures all resources are properly initialized and cleaned up. Metadata Tracking: Attach arbitrary metadata to each session for traceability. Result Recording: Store and retrieve results by key for later analysis or database storage. Integration: Works seamlessly with PyTestLab's database and experiment modules. For more advanced usage, see the Experiments & Sweeps API and the 10-Minute Tour .","title":"Key Features"},{"location":"profiles/creating/","text":"Creating Profiles Instrument profiles are YAML files that define an instrument's capabilities and map them to SCPI commands. PyTestLab uses these profiles along with Pydantic models to provide a structured and validated way to control instruments. Profile Structure A profile YAML file has two main sections: Metadata: Fields like manufacturer , model , and device_type . The device_type is crucial as it links the YAML file to a specific Pydantic configuration model (e.g., PowerSupplyConfig ). Configuration Data: Structured data that matches the fields in the corresponding Pydantic model. This includes channel definitions, supported modes, value ranges, and accuracy specifications. Example: Power Supply Profile This example shows a simplified profile for a power supply. ```yaml title=\"my_psu_profile.yaml\" Metadata manufacturer: MyBrand model: PSU-101 device_type: power_supply Configuration Data (matches PowerSupplyConfig model) total_power: 100 channels: - channel_id: 1 description: \"Main Output\" voltage_range: min_val: 0.0 max_val: 30.0 current_limit_range: min_val: 0.0 max_val: 3.0 ``` Creating a New Profile Create a YAML file: Start a new .yaml file for your instrument. Add Metadata: Fill in the manufacturer , model , and device_type . The device_type must match one of the defined Pydantic config models in pytestlab.config . Add Configuration Data: Refer to the corresponding Pydantic model in the Configuration API Reference and fill in the fields with the specifications from your instrument's datasheet. Save the Profile: Save the file in a known location. You can then load it directly by its path in AutoInstrument.from_config() or place it in pytestlab/profiles/<vendor>/ to load it by key. Validate: Use the CLI to validate your new profile: pytestlab profile validate path/to/your/profile.yaml . For more complex instruments, you may need to define nested structures for triggers, channels, FFT, etc., as seen in the built-in profiles. Tips Use the built-in profiles as templates: Browse the Profile Gallery to see real examples. Match the schema: The YAML structure must match the Pydantic model for your device_type . See the Configuration API Reference for details. Simulation logic: You can add a simulation section to provide deterministic responses for testing (see the Simulation Guide). Validation: Always validate your profile before use to catch schema errors early. For further details, see the API Reference and the Simulation Guide .","title":"Creating Profiles"},{"location":"profiles/creating/#creating-profiles","text":"Instrument profiles are YAML files that define an instrument's capabilities and map them to SCPI commands. PyTestLab uses these profiles along with Pydantic models to provide a structured and validated way to control instruments.","title":"Creating Profiles"},{"location":"profiles/creating/#profile-structure","text":"A profile YAML file has two main sections: Metadata: Fields like manufacturer , model , and device_type . The device_type is crucial as it links the YAML file to a specific Pydantic configuration model (e.g., PowerSupplyConfig ). Configuration Data: Structured data that matches the fields in the corresponding Pydantic model. This includes channel definitions, supported modes, value ranges, and accuracy specifications.","title":"Profile Structure"},{"location":"profiles/creating/#example-power-supply-profile","text":"This example shows a simplified profile for a power supply. ```yaml title=\"my_psu_profile.yaml\"","title":"Example: Power Supply Profile"},{"location":"profiles/creating/#metadata","text":"manufacturer: MyBrand model: PSU-101 device_type: power_supply","title":"Metadata"},{"location":"profiles/creating/#configuration-data-matches-powersupplyconfig-model","text":"total_power: 100 channels: - channel_id: 1 description: \"Main Output\" voltage_range: min_val: 0.0 max_val: 30.0 current_limit_range: min_val: 0.0 max_val: 3.0 ```","title":"Configuration Data (matches PowerSupplyConfig model)"},{"location":"profiles/creating/#creating-a-new-profile","text":"Create a YAML file: Start a new .yaml file for your instrument. Add Metadata: Fill in the manufacturer , model , and device_type . The device_type must match one of the defined Pydantic config models in pytestlab.config . Add Configuration Data: Refer to the corresponding Pydantic model in the Configuration API Reference and fill in the fields with the specifications from your instrument's datasheet. Save the Profile: Save the file in a known location. You can then load it directly by its path in AutoInstrument.from_config() or place it in pytestlab/profiles/<vendor>/ to load it by key. Validate: Use the CLI to validate your new profile: pytestlab profile validate path/to/your/profile.yaml . For more complex instruments, you may need to define nested structures for triggers, channels, FFT, etc., as seen in the built-in profiles.","title":"Creating a New Profile"},{"location":"profiles/creating/#tips","text":"Use the built-in profiles as templates: Browse the Profile Gallery to see real examples. Match the schema: The YAML structure must match the Pydantic model for your device_type . See the Configuration API Reference for details. Simulation logic: You can add a simulation section to provide deterministic responses for testing (see the Simulation Guide). Validation: Always validate your profile before use to catch schema errors early. For further details, see the API Reference and the Simulation Guide .","title":"Tips"},{"location":"profiles/gallery/","text":"Instrument Profile Gallery This page lists all the instrument profiles available out-of-the-box with PyTestLab. These profiles live in the pytestlab/profiles/ directory. You can use these profiles by their key (e.g., \"keysight/DSOX1204G\" ) when creating an instrument. keysight 34460A Device Type: multimeter Profile: 34460A.yaml Code Owners: @e-a-olowe Last Updated: N/A keysight 34470A Device Type: multimeter Profile: 34470A.yaml Code Owners: @e-a-olowe Last Updated: N/A Keysight DSOX1202G Device Type: oscilloscope Profile: DSOX1202G.yaml Code Owners: @e-a-olowe Last Updated: N/A Keysight DSOX1204G Device Type: oscilloscope Profile: DSOX1204G.yaml Code Owners: @e-a-olowe Last Updated: N/A keysight DSOX3054G Device Type: oscilloscope Profile: DSOX3054G.yaml Code Owners: @e-a-olowe Last Updated: N/A keysight E36313A Device Type: power_supply Profile: E36313A.yaml Code Owners: @e-a-olowe Last Updated: N/A Keysight E5071C Device Type: vna Profile: E5071C_VNA.yaml Code Owners: @e-a-olowe Last Updated: N/A Keysight EDU33212A Device Type: waveform_generator Profile: EDU33212A.yaml Code Owners: @e-a-olowe Last Updated: N/A Keysight EDU34450A Device Type: multimeter Profile: EDU34450A.yaml Code Owners: @e-a-olowe Last Updated: N/A Keysight EDU36311A Device Type: power_supply Profile: EDU36311A.yaml Code Owners: @e-a-olowe Last Updated: N/A Keysight EL33133A Device Type: dc_active_load Profile: EL33133A.yaml Code Owners: @e-a-olowe Last Updated: N/A keysight MSOX2024A Device Type: oscilloscope Profile: MSOX2024A.yaml Code Owners: @e-a-olowe Last Updated: N/A Keysight MXR404A Device Type: oscilloscope Profile: MXR404A.yaml Code Owners: @e-a-olowe Last Updated: N/A Keysight N9000A Device Type: spectrum_analyzer Profile: N9000A_SA.yaml Code Owners: @e-a-olowe Last Updated: N/A Keysight U2000A Device Type: power_meter Profile: U2000A_PM.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"Profile Gallery"},{"location":"profiles/gallery/#instrument-profile-gallery","text":"This page lists all the instrument profiles available out-of-the-box with PyTestLab. These profiles live in the pytestlab/profiles/ directory. You can use these profiles by their key (e.g., \"keysight/DSOX1204G\" ) when creating an instrument.","title":"Instrument Profile Gallery"},{"location":"profiles/gallery/#keysight-34460a","text":"Device Type: multimeter Profile: 34460A.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"keysight 34460A"},{"location":"profiles/gallery/#keysight-34470a","text":"Device Type: multimeter Profile: 34470A.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"keysight 34470A"},{"location":"profiles/gallery/#keysight-dsox1202g","text":"Device Type: oscilloscope Profile: DSOX1202G.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"Keysight DSOX1202G"},{"location":"profiles/gallery/#keysight-dsox1204g","text":"Device Type: oscilloscope Profile: DSOX1204G.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"Keysight DSOX1204G"},{"location":"profiles/gallery/#keysight-dsox3054g","text":"Device Type: oscilloscope Profile: DSOX3054G.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"keysight DSOX3054G"},{"location":"profiles/gallery/#keysight-e36313a","text":"Device Type: power_supply Profile: E36313A.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"keysight E36313A"},{"location":"profiles/gallery/#keysight-e5071c","text":"Device Type: vna Profile: E5071C_VNA.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"Keysight E5071C"},{"location":"profiles/gallery/#keysight-edu33212a","text":"Device Type: waveform_generator Profile: EDU33212A.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"Keysight EDU33212A"},{"location":"profiles/gallery/#keysight-edu34450a","text":"Device Type: multimeter Profile: EDU34450A.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"Keysight EDU34450A"},{"location":"profiles/gallery/#keysight-edu36311a","text":"Device Type: power_supply Profile: EDU36311A.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"Keysight EDU36311A"},{"location":"profiles/gallery/#keysight-el33133a","text":"Device Type: dc_active_load Profile: EL33133A.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"Keysight EL33133A"},{"location":"profiles/gallery/#keysight-msox2024a","text":"Device Type: oscilloscope Profile: MSOX2024A.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"keysight MSOX2024A"},{"location":"profiles/gallery/#keysight-mxr404a","text":"Device Type: oscilloscope Profile: MXR404A.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"Keysight MXR404A"},{"location":"profiles/gallery/#keysight-n9000a","text":"Device Type: spectrum_analyzer Profile: N9000A_SA.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"Keysight N9000A"},{"location":"profiles/gallery/#keysight-u2000a","text":"Device Type: power_meter Profile: U2000A_PM.yaml Code Owners: @e-a-olowe Last Updated: N/A","title":"Keysight U2000A"},{"location":"user_guide/async_vs_sync/","text":"Asynchronous by Design PyTestLab is designed with an asynchronous-first approach to instrument control and data acquisition. This guide explains why async is the default, how it benefits your workflows, and how to use async code in both scripts and notebooks. Why Async? Interacting with laboratory instruments is fundamentally I/O-bound : every command you send to a device involves waiting for a response. In a synchronous program, this waiting blocks your entire application, making it unresponsive and inefficient\u2014especially when controlling multiple instruments. Asynchronous programming (using Python's asyncio ) allows your code to perform other tasks while waiting for I/O to complete. This is crucial for: Responsiveness: GUIs and CLIs remain interactive while instruments are busy. Concurrency: Easily coordinate multiple instruments in parallel. Efficiency: Lower memory and CPU usage compared to threads or processes. Async in PyTestLab All instrument methods that involve I/O are async functions (coroutines). You must use the await keyword to call them. Example: Async Oscilloscope Measurement ```python title=\"Async Oscilloscope Example\" import asyncio import pytestlab async def measure_waveform(): # Create and connect to a simulated oscilloscope scope = await pytestlab.AutoInstrument.from_config( \"keysight/DSOX1204G\", simulate=True ) await scope.connect_backend() # Configure channel and trigger await scope.channel(1).setup(scale=0.5, offset=0).enable() await scope.trigger.setup_edge(source=\"CH1\", level=0.25) # Acquire waveform result = await scope.read_channels(1) print(\"Captured waveform data:\") print(result.values.head()) await scope.close() if name == \" main \": asyncio.run(measure_waveform()) In this example, every instrument operation (`connect_backend`, `setup`, `read_channels`, etc.) is asynchronous and must be awaited. --- ## Using Async in Different Environments ### In a Script Use `asyncio.run()` to execute your main async function: ```python import asyncio async def main(): # ... your async code ... pass if __name__ == \"__main__\": asyncio.run(main()) In a Jupyter Notebook or IPython Modern Jupyter and IPython support top-level await . You can simply write: import pytestlab scope = await pytestlab.AutoInstrument.from_config(\"keysight/DSOX1204G\", simulate=True) await scope.connect_backend() await scope.channel(1).setup(scale=0.2).enable() result = await scope.read_channels(1) print(result.values.head()) await scope.close() If you see SyntaxError: 'await' outside function , your environment may not support top-level await. In that case, define an async function and use await inside it, or use nest_asyncio to patch the event loop. Migrating Synchronous Scripts If you have old synchronous scripts, migrate them by: Changing all instrument I/O calls to await their async versions. Wrapping your main logic in an async def function. Running your code with asyncio.run() . Synchronous (not supported): # This will NOT work with PyTestLab! def measure_sync(): osc = SomeSyncOscilloscope() osc.connect() osc.setup_acquisition() waveform = osc.read_waveform() print(waveform) osc.disconnect() Asynchronous (PyTestLab way): import asyncio import pytestlab async def measure_async(): osc = await pytestlab.AutoInstrument.from_config(\"keysight/DSOX1204G\", simulate=True) await osc.connect_backend() await osc.channel(1).setup(scale=0.5).enable() result = await osc.read_channels(1) print(result.values.head()) await osc.close() asyncio.run(measure_async()) FAQ Why not threads or processes? Async I/O is lighter, safer, and easier to reason about for I/O-bound tasks. It avoids the complexity and overhead of threads, and is ideal for controlling many instruments concurrently. Can I use PyTestLab synchronously? No. All instrument I/O is async by design. This ensures your code is robust, scalable, and ready for modern lab automation. What if I need to call async code from sync code? You must use an event loop. In scripts, use asyncio.run() . In notebooks, use top-level await or an async function. For more practical examples, see the 10-Minute Tour and the Getting Started Guide .","title":"Async vs. Sync"},{"location":"user_guide/async_vs_sync/#asynchronous-by-design","text":"PyTestLab is designed with an asynchronous-first approach to instrument control and data acquisition. This guide explains why async is the default, how it benefits your workflows, and how to use async code in both scripts and notebooks.","title":"Asynchronous by Design"},{"location":"user_guide/async_vs_sync/#why-async","text":"Interacting with laboratory instruments is fundamentally I/O-bound : every command you send to a device involves waiting for a response. In a synchronous program, this waiting blocks your entire application, making it unresponsive and inefficient\u2014especially when controlling multiple instruments. Asynchronous programming (using Python's asyncio ) allows your code to perform other tasks while waiting for I/O to complete. This is crucial for: Responsiveness: GUIs and CLIs remain interactive while instruments are busy. Concurrency: Easily coordinate multiple instruments in parallel. Efficiency: Lower memory and CPU usage compared to threads or processes.","title":"Why Async?"},{"location":"user_guide/async_vs_sync/#async-in-pytestlab","text":"All instrument methods that involve I/O are async functions (coroutines). You must use the await keyword to call them.","title":"Async in PyTestLab"},{"location":"user_guide/async_vs_sync/#example-async-oscilloscope-measurement","text":"```python title=\"Async Oscilloscope Example\" import asyncio import pytestlab async def measure_waveform(): # Create and connect to a simulated oscilloscope scope = await pytestlab.AutoInstrument.from_config( \"keysight/DSOX1204G\", simulate=True ) await scope.connect_backend() # Configure channel and trigger await scope.channel(1).setup(scale=0.5, offset=0).enable() await scope.trigger.setup_edge(source=\"CH1\", level=0.25) # Acquire waveform result = await scope.read_channels(1) print(\"Captured waveform data:\") print(result.values.head()) await scope.close() if name == \" main \": asyncio.run(measure_waveform()) In this example, every instrument operation (`connect_backend`, `setup`, `read_channels`, etc.) is asynchronous and must be awaited. --- ## Using Async in Different Environments ### In a Script Use `asyncio.run()` to execute your main async function: ```python import asyncio async def main(): # ... your async code ... pass if __name__ == \"__main__\": asyncio.run(main())","title":"Example: Async Oscilloscope Measurement"},{"location":"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython","text":"Modern Jupyter and IPython support top-level await . You can simply write: import pytestlab scope = await pytestlab.AutoInstrument.from_config(\"keysight/DSOX1204G\", simulate=True) await scope.connect_backend() await scope.channel(1).setup(scale=0.2).enable() result = await scope.read_channels(1) print(result.values.head()) await scope.close() If you see SyntaxError: 'await' outside function , your environment may not support top-level await. In that case, define an async function and use await inside it, or use nest_asyncio to patch the event loop.","title":"In a Jupyter Notebook or IPython"},{"location":"user_guide/async_vs_sync/#migrating-synchronous-scripts","text":"If you have old synchronous scripts, migrate them by: Changing all instrument I/O calls to await their async versions. Wrapping your main logic in an async def function. Running your code with asyncio.run() . Synchronous (not supported): # This will NOT work with PyTestLab! def measure_sync(): osc = SomeSyncOscilloscope() osc.connect() osc.setup_acquisition() waveform = osc.read_waveform() print(waveform) osc.disconnect() Asynchronous (PyTestLab way): import asyncio import pytestlab async def measure_async(): osc = await pytestlab.AutoInstrument.from_config(\"keysight/DSOX1204G\", simulate=True) await osc.connect_backend() await osc.channel(1).setup(scale=0.5).enable() result = await osc.read_channels(1) print(result.values.head()) await osc.close() asyncio.run(measure_async())","title":"Migrating Synchronous Scripts"},{"location":"user_guide/async_vs_sync/#faq","text":"","title":"FAQ"},{"location":"user_guide/async_vs_sync/#why-not-threads-or-processes","text":"Async I/O is lighter, safer, and easier to reason about for I/O-bound tasks. It avoids the complexity and overhead of threads, and is ideal for controlling many instruments concurrently.","title":"Why not threads or processes?"},{"location":"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously","text":"No. All instrument I/O is async by design. This ensures your code is robust, scalable, and ready for modern lab automation.","title":"Can I use PyTestLab synchronously?"},{"location":"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code","text":"You must use an event loop. In scripts, use asyncio.run() . In notebooks, use top-level await or an async function. For more practical examples, see the 10-Minute Tour and the Getting Started Guide .","title":"What if I need to call async code from sync code?"},{"location":"user_guide/bench_descriptors/","text":"Working with Benches Bench Descriptors provide a powerful way to define and manage a collection of laboratory instruments as a single, cohesive unit called a \"Bench\" . This is particularly useful for complex experimental setups where multiple instruments need to be configured and controlled together. The configuration for a bench is defined in a YAML file. The bench.yaml File A bench.yaml file is a declarative way to describe your entire test setup. It can include instrument definitions, safety limits, automation scripts, and metadata for traceability. ```yaml title=\"bench.yaml\" bench_name: \"Power Amplifier Characterization\" description: \"A bench for testing the gain and efficiency of a power amplifier.\" version: \"1.0\" experiment: title: \"PA Gain Compression Test\" operator: \"Lab User\" simulate: false # Global flag. Set to true to run the entire bench in simulation mode. backend_defaults: type: \"visa\" # Default backend for all instruments (\"visa\", \"lamb\", or \"sim\"). timeout_ms: 10000 instruments: # Each key under 'instruments' is an alias used to access it in Python (e.g., bench.psu) vna: profile: \"keysight/E5071C_VNA\" address: \"TCPIP0::K-E5071C-12345::inst0::INSTR\" psu: profile: \"keysight/EDU36311A\" address: \"TCPIP0::172.22.1.5::inst0::INSTR\" safety_limits: # Optional safety limits channels: 1: { voltage: { max: 5.5 }, current: { max: 1.0 } } 2: { voltage: { max: 12.0 }, current: { max: 0.5 } } sa: profile: \"keysight/N9000A_SA\" address: \"TCPIP0::K-N9000A-67890::inst0::INSTR\" dmm: profile: \"keysight/34470A\" address: \"USB0::0x0957::0x1B07::MY56430012::INSTR\" source1: profile: \"my_custom_profiles/custom_signal_generator.yaml\" address: \"lamb::SG001\" backend: type: \"lamb\" awg: profile: \"keysight/EDU33212A\" address: \"USB0::0x2A8D::0x2A01::MY57701234::INSTR\" simulate: true # Individual instruments can override the global simulate flag sim_psu: profile: \"keysight/EDU36311A\" # Address defaults to \"sim\" if not provided # simulate: true automation: pre_experiment: - \"psu: output all OFF\" - \"python scripts/setup_environment.py\" post_experiment: - \"psu: output all OFF\" - \"python scripts/save_results.py\" traceability: dut: serial_number: \"PA-SN-042\" description: \"Power Amplifier Prototype Rev C\" **Key Fields:** - `bench_name` (string): A descriptive name for your bench. - `simulate` (boolean): A global flag to run all instruments in simulation mode. Can be overridden per instrument. - `backend_defaults` (dict): Default settings for instrument backends (e.g., `type`, `timeout_ms`). - `instruments` (dict): A dictionary where each key is an **alias** for an instrument. - **Alias** (e.g., `psu`, `dmm`): How you will refer to the instrument in your Python code (e.g., `bench.psu`). - `profile` (string): The instrument profile to use (e.g., `\"keysight/EDU36311A\"`). - `address` (string): The VISA resource string or other connection identifier. - `safety_limits` (dict): Defines maximum voltage/current to prevent accidental damage. - `automation` (dict): A place to define scripts or commands to run before (`pre_experiment`) or after (`post_experiment`) your main script. - `traceability` (dict): A section for metadata about your test, such as calibration dates or information about the Device Under Test (DUT). --- ## Using a Bench in Python The `pytestlab.Bench` class is the primary way to work with bench configurations. The recommended way to load a bench is with the `async with` statement, which handles instrument connection and cleanup automatically. ```python import asyncio import pytestlab async def main(): # Bench.open() loads the YAML, validates it, and connects to all instruments. # The async with statement ensures instruments are closed properly. try: async with await pytestlab.Bench.open(\"path/to/your/bench.yaml\") as bench: print(f\"\u2705 Bench '{bench.config.bench_name}' loaded successfully.\") print(f\"\ud83d\udd2c Testing DUT: {bench.config.traceability.dut.description}\") # Access instruments by their alias. # The API is the same as using a standalone instrument. await bench.psu.channel(1).set(voltage=3.3, current_limit=0.5).on() # Perform a measurement with the DMM. dc_voltage = await bench.dmm.measure_voltage_dc() print(f\"Measured Voltage: {dc_voltage.values:.4f} V\") # Post-experiment hooks are run automatically upon exiting the 'async with' block. print(\"\u2705 Bench closed successfully.\") except Exception as e: print(f\"\u274c An error occurred: {e}\") if __name__ == \"__main__\": asyncio.run(main()) Safety Limits When safety_limits are defined in bench.yaml , PyTestLab wraps the instrument driver with a safety layer. If you attempt to send a command that exceeds a defined limit, a SafetyLimitError is raised before the command is sent to the instrument. try: # This will fail because the safety limit in our YAML is 5.5V await bench.psu.set_voltage(1, 6.0) except SafetyLimitError as e: print(f\"Caught expected safety error: {e}\") Command-Line Interface PyTestLab provides CLI commands to manage and inspect bench configurations. List instruments in a bench: pytestlab bench ls path/to/bench.yaml Validate a bench configuration: pytestlab bench validate path/to/bench.yaml Identify instruments in a bench (IDN query): pytestlab bench id path/to/bench.yaml Convert a bench to simulation mode: pytestlab bench sim path/to/bench.yaml --output-path bench.sim.yaml For more information, see the CLI Reference . This system allows for flexible and reproducible management of your test setups, whether they involve real or simulated instruments.","title":"Bench Descriptors"},{"location":"user_guide/bench_descriptors/#working-with-benches","text":"Bench Descriptors provide a powerful way to define and manage a collection of laboratory instruments as a single, cohesive unit called a \"Bench\" . This is particularly useful for complex experimental setups where multiple instruments need to be configured and controlled together. The configuration for a bench is defined in a YAML file.","title":"Working with Benches"},{"location":"user_guide/bench_descriptors/#the-benchyaml-file","text":"A bench.yaml file is a declarative way to describe your entire test setup. It can include instrument definitions, safety limits, automation scripts, and metadata for traceability. ```yaml title=\"bench.yaml\" bench_name: \"Power Amplifier Characterization\" description: \"A bench for testing the gain and efficiency of a power amplifier.\" version: \"1.0\" experiment: title: \"PA Gain Compression Test\" operator: \"Lab User\" simulate: false # Global flag. Set to true to run the entire bench in simulation mode. backend_defaults: type: \"visa\" # Default backend for all instruments (\"visa\", \"lamb\", or \"sim\"). timeout_ms: 10000 instruments: # Each key under 'instruments' is an alias used to access it in Python (e.g., bench.psu) vna: profile: \"keysight/E5071C_VNA\" address: \"TCPIP0::K-E5071C-12345::inst0::INSTR\" psu: profile: \"keysight/EDU36311A\" address: \"TCPIP0::172.22.1.5::inst0::INSTR\" safety_limits: # Optional safety limits channels: 1: { voltage: { max: 5.5 }, current: { max: 1.0 } } 2: { voltage: { max: 12.0 }, current: { max: 0.5 } } sa: profile: \"keysight/N9000A_SA\" address: \"TCPIP0::K-N9000A-67890::inst0::INSTR\" dmm: profile: \"keysight/34470A\" address: \"USB0::0x0957::0x1B07::MY56430012::INSTR\" source1: profile: \"my_custom_profiles/custom_signal_generator.yaml\" address: \"lamb::SG001\" backend: type: \"lamb\" awg: profile: \"keysight/EDU33212A\" address: \"USB0::0x2A8D::0x2A01::MY57701234::INSTR\" simulate: true # Individual instruments can override the global simulate flag sim_psu: profile: \"keysight/EDU36311A\" # Address defaults to \"sim\" if not provided # simulate: true automation: pre_experiment: - \"psu: output all OFF\" - \"python scripts/setup_environment.py\" post_experiment: - \"psu: output all OFF\" - \"python scripts/save_results.py\" traceability: dut: serial_number: \"PA-SN-042\" description: \"Power Amplifier Prototype Rev C\" **Key Fields:** - `bench_name` (string): A descriptive name for your bench. - `simulate` (boolean): A global flag to run all instruments in simulation mode. Can be overridden per instrument. - `backend_defaults` (dict): Default settings for instrument backends (e.g., `type`, `timeout_ms`). - `instruments` (dict): A dictionary where each key is an **alias** for an instrument. - **Alias** (e.g., `psu`, `dmm`): How you will refer to the instrument in your Python code (e.g., `bench.psu`). - `profile` (string): The instrument profile to use (e.g., `\"keysight/EDU36311A\"`). - `address` (string): The VISA resource string or other connection identifier. - `safety_limits` (dict): Defines maximum voltage/current to prevent accidental damage. - `automation` (dict): A place to define scripts or commands to run before (`pre_experiment`) or after (`post_experiment`) your main script. - `traceability` (dict): A section for metadata about your test, such as calibration dates or information about the Device Under Test (DUT). --- ## Using a Bench in Python The `pytestlab.Bench` class is the primary way to work with bench configurations. The recommended way to load a bench is with the `async with` statement, which handles instrument connection and cleanup automatically. ```python import asyncio import pytestlab async def main(): # Bench.open() loads the YAML, validates it, and connects to all instruments. # The async with statement ensures instruments are closed properly. try: async with await pytestlab.Bench.open(\"path/to/your/bench.yaml\") as bench: print(f\"\u2705 Bench '{bench.config.bench_name}' loaded successfully.\") print(f\"\ud83d\udd2c Testing DUT: {bench.config.traceability.dut.description}\") # Access instruments by their alias. # The API is the same as using a standalone instrument. await bench.psu.channel(1).set(voltage=3.3, current_limit=0.5).on() # Perform a measurement with the DMM. dc_voltage = await bench.dmm.measure_voltage_dc() print(f\"Measured Voltage: {dc_voltage.values:.4f} V\") # Post-experiment hooks are run automatically upon exiting the 'async with' block. print(\"\u2705 Bench closed successfully.\") except Exception as e: print(f\"\u274c An error occurred: {e}\") if __name__ == \"__main__\": asyncio.run(main())","title":"The bench.yaml File"},{"location":"user_guide/bench_descriptors/#safety-limits","text":"When safety_limits are defined in bench.yaml , PyTestLab wraps the instrument driver with a safety layer. If you attempt to send a command that exceeds a defined limit, a SafetyLimitError is raised before the command is sent to the instrument. try: # This will fail because the safety limit in our YAML is 5.5V await bench.psu.set_voltage(1, 6.0) except SafetyLimitError as e: print(f\"Caught expected safety error: {e}\")","title":"Safety Limits"},{"location":"user_guide/bench_descriptors/#command-line-interface","text":"PyTestLab provides CLI commands to manage and inspect bench configurations. List instruments in a bench: pytestlab bench ls path/to/bench.yaml Validate a bench configuration: pytestlab bench validate path/to/bench.yaml Identify instruments in a bench (IDN query): pytestlab bench id path/to/bench.yaml Convert a bench to simulation mode: pytestlab bench sim path/to/bench.yaml --output-path bench.sim.yaml For more information, see the CLI Reference . This system allows for flexible and reproducible management of your test setups, whether they involve real or simulated instruments.","title":"Command-Line Interface"},{"location":"user_guide/cli/","text":"Command-Line Interface PyTestLab includes a powerful command-line interface (CLI) built with Typer for managing profiles, instruments, and benches. You can access it via the pytestlab command. General Usage To see all available commands and sub-commands, use the --help flag: pytestlab --help Profile Management ( pytestlab profile ) Commands for inspecting and validating instrument profiles. list Lists all available built-in instrument profiles. pytestlab profile list show Displays the contents of a specific profile YAML file. pytestlab profile show keysight/DSOX1204G validate Validates one or more profiles against their Pydantic models to ensure they are well-formed. pytestlab profile validate path/to/my_custom_profiles/ Bench Management ( pytestlab bench ) Commands for working with bench.yaml files. ls Lists the instruments defined in a bench configuration file. pytestlab bench ls path/to/bench.yaml validate Validates the structure of a bench.yaml file and checks that all specified profiles can be loaded. pytestlab bench validate path/to/bench.yaml id Connects to all non-simulated instruments in a bench and queries their *IDN? string. pytestlab bench id path/to/bench.yaml sim Converts an existing bench.yaml file into a new one configured entirely for simulation mode. # Print the simulated config to the console pytestlab bench sim path/to/bench.yaml # Save the simulated config to a new file pytestlab bench sim path/to/bench.yaml --output-path bench.sim.yaml For more details on simulation, see the Simulation Guide . Simulation Profile Tools ( pytestlab sim-profile ) Commands for recording, editing, and managing simulation profiles. record Interactively record a simulation profile by proxying commands to a real instrument and saving the responses. pytestlab sim-profile record keysight/EDU36311A --address \"TCPIP0::...\" edit Opens the user-specific simulation profile for the specified instrument in your default text editor. pytestlab sim-profile edit keysight/EDU36311A reset Deletes the user-specific simulation profile, reverting to the default profile. pytestlab sim-profile reset keysight/EDU36311A diff Shows the differences between the user-specific simulation profile and the default profile. pytestlab sim-profile diff keysight/EDU36311A Other Useful Commands pytestlab --version Print the installed version of PyTestLab. pytestlab profile list List all available instrument profiles. pytestlab bench validate Validate your bench configuration before running experiments. Tips Use pytestlab --help and pytestlab <subcommand> --help for detailed usage and options. The CLI is ideal for quick validation, automation, and scripting in CI/CD pipelines. For advanced scripting, combine CLI commands with Python scripts using the PyTestLab API. For more information, see the User Guide and the Simulation Guide .","title":"Command-Line Interface"},{"location":"user_guide/cli/#command-line-interface","text":"PyTestLab includes a powerful command-line interface (CLI) built with Typer for managing profiles, instruments, and benches. You can access it via the pytestlab command.","title":"Command-Line Interface"},{"location":"user_guide/cli/#general-usage","text":"To see all available commands and sub-commands, use the --help flag: pytestlab --help","title":"General Usage"},{"location":"user_guide/cli/#profile-management-pytestlab-profile","text":"Commands for inspecting and validating instrument profiles.","title":"Profile Management (pytestlab profile)"},{"location":"user_guide/cli/#list","text":"Lists all available built-in instrument profiles. pytestlab profile list","title":"list"},{"location":"user_guide/cli/#show","text":"Displays the contents of a specific profile YAML file. pytestlab profile show keysight/DSOX1204G","title":"show"},{"location":"user_guide/cli/#validate","text":"Validates one or more profiles against their Pydantic models to ensure they are well-formed. pytestlab profile validate path/to/my_custom_profiles/","title":"validate"},{"location":"user_guide/cli/#bench-management-pytestlab-bench","text":"Commands for working with bench.yaml files.","title":"Bench Management (pytestlab bench)"},{"location":"user_guide/cli/#ls","text":"Lists the instruments defined in a bench configuration file. pytestlab bench ls path/to/bench.yaml","title":"ls"},{"location":"user_guide/cli/#validate_1","text":"Validates the structure of a bench.yaml file and checks that all specified profiles can be loaded. pytestlab bench validate path/to/bench.yaml","title":"validate"},{"location":"user_guide/cli/#id","text":"Connects to all non-simulated instruments in a bench and queries their *IDN? string. pytestlab bench id path/to/bench.yaml","title":"id"},{"location":"user_guide/cli/#sim","text":"Converts an existing bench.yaml file into a new one configured entirely for simulation mode. # Print the simulated config to the console pytestlab bench sim path/to/bench.yaml # Save the simulated config to a new file pytestlab bench sim path/to/bench.yaml --output-path bench.sim.yaml For more details on simulation, see the Simulation Guide .","title":"sim"},{"location":"user_guide/cli/#simulation-profile-tools-pytestlab-sim-profile","text":"Commands for recording, editing, and managing simulation profiles.","title":"Simulation Profile Tools (pytestlab sim-profile)"},{"location":"user_guide/cli/#record","text":"Interactively record a simulation profile by proxying commands to a real instrument and saving the responses. pytestlab sim-profile record keysight/EDU36311A --address \"TCPIP0::...\"","title":"record"},{"location":"user_guide/cli/#edit","text":"Opens the user-specific simulation profile for the specified instrument in your default text editor. pytestlab sim-profile edit keysight/EDU36311A","title":"edit"},{"location":"user_guide/cli/#reset","text":"Deletes the user-specific simulation profile, reverting to the default profile. pytestlab sim-profile reset keysight/EDU36311A","title":"reset"},{"location":"user_guide/cli/#diff","text":"Shows the differences between the user-specific simulation profile and the default profile. pytestlab sim-profile diff keysight/EDU36311A","title":"diff"},{"location":"user_guide/cli/#other-useful-commands","text":"pytestlab --version Print the installed version of PyTestLab. pytestlab profile list List all available instrument profiles. pytestlab bench validate Validate your bench configuration before running experiments.","title":"Other Useful Commands"},{"location":"user_guide/cli/#tips","text":"Use pytestlab --help and pytestlab <subcommand> --help for detailed usage and options. The CLI is ideal for quick validation, automation, and scripting in CI/CD pipelines. For advanced scripting, combine CLI commands with Python scripts using the PyTestLab API. For more information, see the User Guide and the Simulation Guide .","title":"Tips"},{"location":"user_guide/connecting/","text":"Connecting to Instruments PyTestLab provides a unified and straightforward way to connect to both real and simulated instruments. Using AutoInstrument The pytestlab.AutoInstrument factory is the primary way to create a single instrument instance. You need to provide a configuration source, which can be a profile key (e.g., \"keysight/DSOX1204G\" ) or a path to a YAML file. Asynchronous Connection Creating an instrument instance with AutoInstrument.from_config() does not establish the connection. You must always await the connect_backend() method on the created instrument object. Connecting to a Real Instrument To connect to a physical instrument, you typically need its VISA address. import asyncio import pytestlab async def main(): # Create an instrument instance from a profile and specify its address dmm = await pytestlab.AutoInstrument.from_config( \"keysight/34470A\", address_override=\"USB0::0x0957::0x1B07::MY56430012::INSTR\" ) # Establish the connection await dmm.connect_backend() print(f\"Connected to: {await dmm.id()}\") # ... perform operations ... await dmm.close() asyncio.run(main()) Connecting to a Simulated Instrument To create a simulated instrument for development or testing, set the simulate=True flag. No address is needed. import asyncio import pytestlab async def main(): scope_sim = await pytestlab.AutoInstrument.from_config(\"keysight/DSOX1204G\", simulate=True) await scope_sim.connect_backend() print(f\"Connected to simulated instrument: {await scope_sim.id()}\") await scope_sim.close() asyncio.run(main()) Simulation mode is ideal for development, CI, and testing when hardware is unavailable. Using a Bench For managing multiple instruments, the pytestlab.Bench class is the recommended approach. It handles the connection and cleanup for all instruments defined in your bench.yaml file automatically. import asyncio import pytestlab async def main(): async with await pytestlab.Bench.open(\"bench.yaml\") as bench: print(f\"Bench loaded: {bench.config.bench_name}\") # Access instruments by alias, e.g.: await bench.psu.channel(1).set(voltage=3.3, current_limit=0.5).on() voltage = await bench.dmm.measure_voltage_dc() print(f\"Measured: {voltage.values:.4f} V\") # All instruments are closed automatically here asyncio.run(main()) See the Working with Benches guide for more details. Troubleshooting Connections VISA Not Found: Ensure you have installed a VISA library (NI-VISA, Keysight IO Libraries, etc.) and that it is accessible in your system's PATH. Address Errors: Double-check your instrument's VISA address. Use pytestlab profile list and pytestlab bench ls to inspect available profiles and bench configurations. Simulation: If you encounter persistent connection issues, try running in simulation mode to isolate hardware vs. software problems. Next Steps Getting Started Guide Async vs. Sync Programming Simulation Guide Bench Descriptors","title":"Connecting to Instruments"},{"location":"user_guide/connecting/#connecting-to-instruments","text":"PyTestLab provides a unified and straightforward way to connect to both real and simulated instruments.","title":"Connecting to Instruments"},{"location":"user_guide/connecting/#using-autoinstrument","text":"The pytestlab.AutoInstrument factory is the primary way to create a single instrument instance. You need to provide a configuration source, which can be a profile key (e.g., \"keysight/DSOX1204G\" ) or a path to a YAML file. Asynchronous Connection Creating an instrument instance with AutoInstrument.from_config() does not establish the connection. You must always await the connect_backend() method on the created instrument object.","title":"Using AutoInstrument"},{"location":"user_guide/connecting/#connecting-to-a-real-instrument","text":"To connect to a physical instrument, you typically need its VISA address. import asyncio import pytestlab async def main(): # Create an instrument instance from a profile and specify its address dmm = await pytestlab.AutoInstrument.from_config( \"keysight/34470A\", address_override=\"USB0::0x0957::0x1B07::MY56430012::INSTR\" ) # Establish the connection await dmm.connect_backend() print(f\"Connected to: {await dmm.id()}\") # ... perform operations ... await dmm.close() asyncio.run(main())","title":"Connecting to a Real Instrument"},{"location":"user_guide/connecting/#connecting-to-a-simulated-instrument","text":"To create a simulated instrument for development or testing, set the simulate=True flag. No address is needed. import asyncio import pytestlab async def main(): scope_sim = await pytestlab.AutoInstrument.from_config(\"keysight/DSOX1204G\", simulate=True) await scope_sim.connect_backend() print(f\"Connected to simulated instrument: {await scope_sim.id()}\") await scope_sim.close() asyncio.run(main()) Simulation mode is ideal for development, CI, and testing when hardware is unavailable.","title":"Connecting to a Simulated Instrument"},{"location":"user_guide/connecting/#using-a-bench","text":"For managing multiple instruments, the pytestlab.Bench class is the recommended approach. It handles the connection and cleanup for all instruments defined in your bench.yaml file automatically. import asyncio import pytestlab async def main(): async with await pytestlab.Bench.open(\"bench.yaml\") as bench: print(f\"Bench loaded: {bench.config.bench_name}\") # Access instruments by alias, e.g.: await bench.psu.channel(1).set(voltage=3.3, current_limit=0.5).on() voltage = await bench.dmm.measure_voltage_dc() print(f\"Measured: {voltage.values:.4f} V\") # All instruments are closed automatically here asyncio.run(main()) See the Working with Benches guide for more details.","title":"Using a Bench"},{"location":"user_guide/connecting/#troubleshooting-connections","text":"VISA Not Found: Ensure you have installed a VISA library (NI-VISA, Keysight IO Libraries, etc.) and that it is accessible in your system's PATH. Address Errors: Double-check your instrument's VISA address. Use pytestlab profile list and pytestlab bench ls to inspect available profiles and bench configurations. Simulation: If you encounter persistent connection issues, try running in simulation mode to isolate hardware vs. software problems.","title":"Troubleshooting Connections"},{"location":"user_guide/connecting/#next-steps","text":"Getting Started Guide Async vs. Sync Programming Simulation Guide Bench Descriptors","title":"Next Steps"},{"location":"user_guide/errors/","text":"Error Handling PyTestLab provides robust error handling through a set of custom exception types. Understanding these exceptions and best practices for handling them will help you write reliable, safe, and maintainable test scripts. Common Exceptions Here are the most important exception types you may encounter: InstrumentConnectionError Raised when PyTestLab fails to connect to an instrument. Causes include an incorrect address, network issues, or the instrument being offline. InstrumentCommunicationError Raised when an error occurs during communication with an instrument after a connection is established. Examples: timeouts, malformed commands, or unexpected responses. InstrumentParameterError Raised when an invalid parameter is passed to an instrument method. For example, setting a voltage outside the allowed range. InstrumentConfigurationError Raised when there is an error in an instrument's profile or bench configuration file. This can happen if required fields are missing or the file does not conform to the expected schema. SafetyLimitError Raised when an operation would violate a safety limit defined in your bench.yaml file. This prevents accidental damage to equipment or DUTs. InstrumentNotFoundError Raised when you try to access an instrument alias that is not defined in your bench configuration. Best Practices Catch Specific Exceptions Always catch the most specific exception possible. This allows you to handle different error types appropriately. import pytestlab from pytestlab.errors import ( InstrumentConnectionError, InstrumentParameterError, SafetyLimitError, ) try: async with await pytestlab.Bench.open(\"bench.yaml\") as bench: # This might raise InstrumentParameterError if 6.0 is out of range, # or SafetyLimitError if it exceeds a safety limit. await bench.psu.set_voltage(1, 6.0) except InstrumentConnectionError as e: print(f\"Failed to connect: {e}\") except InstrumentParameterError as e: print(f\"Invalid parameter: {e}\") except SafetyLimitError as e: print(f\"Safety violation: {e}\") except Exception as e: print(f\"Unexpected error: {e}\") Use async with for Cleanup The Bench and MeasurementSession classes are asynchronous context managers. Using them with async with ensures all instruments are closed and cleanup hooks are run, even if an error occurs. async def safe_operation(): try: async with await pytestlab.Bench.open(\"bench.yaml\") as bench: # ... your code ... pass except Exception as e: print(f\"Operation failed: {e}\") # Instruments are closed automatically here Debugging Tips Check addresses: If you get a connection error, verify the instrument address in your config. Consult datasheets: If you get a parameter error, check the instrument's manual for valid ranges. Enable logging: PyTestLab uses Python's logging module. Increase the log level for more detail. Validate configs: Use the CLI ( pytestlab profile validate or pytestlab bench validate ) to catch configuration errors early. Use simulation: Develop and debug with simulated instruments to avoid hardware risks. Further Reading API Exception Reference Simulation Guide Bench Descriptors & Safety Limits","title":"Error Handling"},{"location":"user_guide/errors/#error-handling","text":"PyTestLab provides robust error handling through a set of custom exception types. Understanding these exceptions and best practices for handling them will help you write reliable, safe, and maintainable test scripts.","title":"Error Handling"},{"location":"user_guide/errors/#common-exceptions","text":"Here are the most important exception types you may encounter: InstrumentConnectionError Raised when PyTestLab fails to connect to an instrument. Causes include an incorrect address, network issues, or the instrument being offline. InstrumentCommunicationError Raised when an error occurs during communication with an instrument after a connection is established. Examples: timeouts, malformed commands, or unexpected responses. InstrumentParameterError Raised when an invalid parameter is passed to an instrument method. For example, setting a voltage outside the allowed range. InstrumentConfigurationError Raised when there is an error in an instrument's profile or bench configuration file. This can happen if required fields are missing or the file does not conform to the expected schema. SafetyLimitError Raised when an operation would violate a safety limit defined in your bench.yaml file. This prevents accidental damage to equipment or DUTs. InstrumentNotFoundError Raised when you try to access an instrument alias that is not defined in your bench configuration.","title":"Common Exceptions"},{"location":"user_guide/errors/#best-practices","text":"","title":"Best Practices"},{"location":"user_guide/errors/#catch-specific-exceptions","text":"Always catch the most specific exception possible. This allows you to handle different error types appropriately. import pytestlab from pytestlab.errors import ( InstrumentConnectionError, InstrumentParameterError, SafetyLimitError, ) try: async with await pytestlab.Bench.open(\"bench.yaml\") as bench: # This might raise InstrumentParameterError if 6.0 is out of range, # or SafetyLimitError if it exceeds a safety limit. await bench.psu.set_voltage(1, 6.0) except InstrumentConnectionError as e: print(f\"Failed to connect: {e}\") except InstrumentParameterError as e: print(f\"Invalid parameter: {e}\") except SafetyLimitError as e: print(f\"Safety violation: {e}\") except Exception as e: print(f\"Unexpected error: {e}\")","title":"Catch Specific Exceptions"},{"location":"user_guide/errors/#use-async-with-for-cleanup","text":"The Bench and MeasurementSession classes are asynchronous context managers. Using them with async with ensures all instruments are closed and cleanup hooks are run, even if an error occurs. async def safe_operation(): try: async with await pytestlab.Bench.open(\"bench.yaml\") as bench: # ... your code ... pass except Exception as e: print(f\"Operation failed: {e}\") # Instruments are closed automatically here","title":"Use async with for Cleanup"},{"location":"user_guide/errors/#debugging-tips","text":"Check addresses: If you get a connection error, verify the instrument address in your config. Consult datasheets: If you get a parameter error, check the instrument's manual for valid ranges. Enable logging: PyTestLab uses Python's logging module. Increase the log level for more detail. Validate configs: Use the CLI ( pytestlab profile validate or pytestlab bench validate ) to catch configuration errors early. Use simulation: Develop and debug with simulated instruments to avoid hardware risks.","title":"Debugging Tips"},{"location":"user_guide/errors/#further-reading","text":"API Exception Reference Simulation Guide Bench Descriptors & Safety Limits","title":"Further Reading"},{"location":"user_guide/getting_started/","text":"Getting Started with PyTestLab Welcome to PyTestLab! This guide will walk you through the essential first steps to get up and running with the toolbox. The best way to get started is with our interactive 10-Minute Tour . This Jupyter Notebook will guide you through: Connecting to a simulated instrument. Using the asynchronous, facade-based API for instrument control. Performing a simple measurement. Storing results in a database. \u27a1\ufe0f Start the 10-Minute Tour 1. Installation Before you begin, make sure you have PyTestLab installed. If not, see the Installation Guide . pip install pytestlab For full functionality (plotting, uncertainty, etc.), use: pip install pytestlab[full] 2. Your First Instrument (Simulated) PyTestLab is async-first. All instrument operations are asynchronous and use Python's async/await syntax. Here's how to connect to a simulated oscilloscope and acquire data: import asyncio from pytestlab.instruments import AutoInstrument async def main(): # Create a simulated oscilloscope scope = await AutoInstrument.from_config(\"keysight/DSOX1204G\", simulate=True) await scope.connect_backend() # Configure channel and trigger await scope.channel(1).setup(scale=0.5, offset=0).enable() await scope.trigger.setup_edge(source=\"CH1\", level=0.25) # Acquire waveform data result = await scope.read_channels(1) print(\"Acquired waveform data:\") print(result.values.head()) # .values is a Polars DataFrame await scope.close() asyncio.run(main()) 3. Next Steps Explore the 10-Minute Tour for a hands-on walkthrough. Learn about Async vs. Sync programming in PyTestLab. See how to Connect to real instruments . Browse the Profile Gallery for supported devices. Read about Simulation Mode for hardware-free development. 4. Need Help? Check the User Guide for more topics. Join the community or open an issue on GitHub if you get stuck. Happy testing and measuring!","title":"Getting Started"},{"location":"user_guide/getting_started/#getting-started-with-pytestlab","text":"Welcome to PyTestLab! This guide will walk you through the essential first steps to get up and running with the toolbox. The best way to get started is with our interactive 10-Minute Tour . This Jupyter Notebook will guide you through: Connecting to a simulated instrument. Using the asynchronous, facade-based API for instrument control. Performing a simple measurement. Storing results in a database. \u27a1\ufe0f Start the 10-Minute Tour","title":"Getting Started with PyTestLab"},{"location":"user_guide/getting_started/#1-installation","text":"Before you begin, make sure you have PyTestLab installed. If not, see the Installation Guide . pip install pytestlab For full functionality (plotting, uncertainty, etc.), use: pip install pytestlab[full]","title":"1. Installation"},{"location":"user_guide/getting_started/#2-your-first-instrument-simulated","text":"PyTestLab is async-first. All instrument operations are asynchronous and use Python's async/await syntax. Here's how to connect to a simulated oscilloscope and acquire data: import asyncio from pytestlab.instruments import AutoInstrument async def main(): # Create a simulated oscilloscope scope = await AutoInstrument.from_config(\"keysight/DSOX1204G\", simulate=True) await scope.connect_backend() # Configure channel and trigger await scope.channel(1).setup(scale=0.5, offset=0).enable() await scope.trigger.setup_edge(source=\"CH1\", level=0.25) # Acquire waveform data result = await scope.read_channels(1) print(\"Acquired waveform data:\") print(result.values.head()) # .values is a Polars DataFrame await scope.close() asyncio.run(main())","title":"2. Your First Instrument (Simulated)"},{"location":"user_guide/getting_started/#3-next-steps","text":"Explore the 10-Minute Tour for a hands-on walkthrough. Learn about Async vs. Sync programming in PyTestLab. See how to Connect to real instruments . Browse the Profile Gallery for supported devices. Read about Simulation Mode for hardware-free development.","title":"3. Next Steps"},{"location":"user_guide/getting_started/#4-need-help","text":"Check the User Guide for more topics. Join the community or open an issue on GitHub if you get stuck. Happy testing and measuring!","title":"4. Need Help?"},{"location":"user_guide/simulation/","text":"Simulation Mode PyTestLab features a powerful, YAML-driven simulation backend ( SimBackendV2 ) that provides realistic and deterministic behavior for your instruments. How Simulation Works The behavior of a simulated instrument is defined in the simulation section of its profile YAML file. This section maps SCPI commands (using exact matches or regex patterns) to specific responses or state changes. Example: Profile with Simulation Logic ```yaml title=\"pytestlab/profiles/pytestlab/virtual_instrument.yaml\" manufacturer: PyTestLab model: Virtual-Instrument-1 device_type: virtual_instrument simulation: initial_state: voltage: 0.0 current: 0.0 counter: 0 scpi: # Simple query with a static response \"*IDN?\": \"PyTestLab,Virtual-Instrument-1,0,1.0\" # Command that changes state using regex capture group ($1) \"SET:VOLT ([-+]?[0-9]*\\\\.?[0-9]+)\": set: voltage: \"py:float(g1)\" # Use a python expression to cast # Query that retrieves a value from the state \"MEAS:VOLT?\": get: \"voltage\" # Command with state manipulation \"COUNT:INC\": inc: counter: 1 # Query with a dynamic Python lambda expression \"DYNAMIC:RAND?\": response: \"lambda: str(random.randint(1, 100))\" ``` Enabling Simulation There are several ways to enable simulation mode: Globally in bench.yaml : Set simulate: true at the top level of your bench file. Per-instrument in bench.yaml : Add simulate: true to a specific instrument's definition. In AutoInstrument : Pass simulate=True when creating an instrument instance. python import pytestlab scope = await pytestlab.AutoInstrument.from_config(\"keysight/DSOX1204G\", simulate=True) Recording a Simulation Profile You can automatically generate a simulation profile by recording the interaction with a real instrument. This is useful for creating a high-fidelity simulation of a specific instrument's behavior. Step-by-Step Guide Connect to the real instrument you want to profile. Run the sim-profile record command , providing the profile key and VISA address. bash pytestlab sim-profile record keysight/EDU36311A --address \"TCPIP0::...\" Interact with the instrument in the interactive REPL that appears. All commands and responses will be recorded. You can also point the command to a Python script to run automatically. Stop the recording by pressing Ctrl+D or typing exit() . The recorded YAML profile will be saved to your user configuration directory (e.g., ~/.config/pytestlab/recorded_sim_profiles/ ). See the CLI Reference for more sim-profile commands like edit , reset , and diff . Advanced Simulation Features Stateful Simulation: The simulation backend can maintain internal state (e.g., voltages, counters) and update it in response to commands. Python Expressions: Use py: or lambda: in responses to compute dynamic values. Regex Matching: SCPI command patterns can use regular expressions for flexible matching and parameter extraction. Deterministic Testing: Simulation ensures repeatable results for CI/CD and development. When to Use Simulation Development: Write and test your automation scripts without hardware. Continuous Integration: Run your test suite in CI pipelines without requiring lab instruments. Education: Teach instrument automation concepts without needing physical devices. Prototyping: Quickly prototype new measurement flows and experiment logic. Limitations Simulation is only as accurate as the profile and recorded logic. For high-fidelity simulation, record real instrument sessions. Not all edge cases or error conditions may be covered by default profiles. Further Reading Creating Profiles Working with Benches Command-Line Interface Reference","title":"Simulation Mode"},{"location":"user_guide/simulation/#simulation-mode","text":"PyTestLab features a powerful, YAML-driven simulation backend ( SimBackendV2 ) that provides realistic and deterministic behavior for your instruments.","title":"Simulation Mode"},{"location":"user_guide/simulation/#how-simulation-works","text":"The behavior of a simulated instrument is defined in the simulation section of its profile YAML file. This section maps SCPI commands (using exact matches or regex patterns) to specific responses or state changes.","title":"How Simulation Works"},{"location":"user_guide/simulation/#example-profile-with-simulation-logic","text":"```yaml title=\"pytestlab/profiles/pytestlab/virtual_instrument.yaml\" manufacturer: PyTestLab model: Virtual-Instrument-1 device_type: virtual_instrument simulation: initial_state: voltage: 0.0 current: 0.0 counter: 0 scpi: # Simple query with a static response \"*IDN?\": \"PyTestLab,Virtual-Instrument-1,0,1.0\" # Command that changes state using regex capture group ($1) \"SET:VOLT ([-+]?[0-9]*\\\\.?[0-9]+)\": set: voltage: \"py:float(g1)\" # Use a python expression to cast # Query that retrieves a value from the state \"MEAS:VOLT?\": get: \"voltage\" # Command with state manipulation \"COUNT:INC\": inc: counter: 1 # Query with a dynamic Python lambda expression \"DYNAMIC:RAND?\": response: \"lambda: str(random.randint(1, 100))\" ```","title":"Example: Profile with Simulation Logic"},{"location":"user_guide/simulation/#enabling-simulation","text":"There are several ways to enable simulation mode: Globally in bench.yaml : Set simulate: true at the top level of your bench file. Per-instrument in bench.yaml : Add simulate: true to a specific instrument's definition. In AutoInstrument : Pass simulate=True when creating an instrument instance. python import pytestlab scope = await pytestlab.AutoInstrument.from_config(\"keysight/DSOX1204G\", simulate=True)","title":"Enabling Simulation"},{"location":"user_guide/simulation/#recording-a-simulation-profile","text":"You can automatically generate a simulation profile by recording the interaction with a real instrument. This is useful for creating a high-fidelity simulation of a specific instrument's behavior.","title":"Recording a Simulation Profile"},{"location":"user_guide/simulation/#step-by-step-guide","text":"Connect to the real instrument you want to profile. Run the sim-profile record command , providing the profile key and VISA address. bash pytestlab sim-profile record keysight/EDU36311A --address \"TCPIP0::...\" Interact with the instrument in the interactive REPL that appears. All commands and responses will be recorded. You can also point the command to a Python script to run automatically. Stop the recording by pressing Ctrl+D or typing exit() . The recorded YAML profile will be saved to your user configuration directory (e.g., ~/.config/pytestlab/recorded_sim_profiles/ ). See the CLI Reference for more sim-profile commands like edit , reset , and diff .","title":"Step-by-Step Guide"},{"location":"user_guide/simulation/#advanced-simulation-features","text":"Stateful Simulation: The simulation backend can maintain internal state (e.g., voltages, counters) and update it in response to commands. Python Expressions: Use py: or lambda: in responses to compute dynamic values. Regex Matching: SCPI command patterns can use regular expressions for flexible matching and parameter extraction. Deterministic Testing: Simulation ensures repeatable results for CI/CD and development.","title":"Advanced Simulation Features"},{"location":"user_guide/simulation/#when-to-use-simulation","text":"Development: Write and test your automation scripts without hardware. Continuous Integration: Run your test suite in CI pipelines without requiring lab instruments. Education: Teach instrument automation concepts without needing physical devices. Prototyping: Quickly prototype new measurement flows and experiment logic.","title":"When to Use Simulation"},{"location":"user_guide/simulation/#limitations","text":"Simulation is only as accurate as the profile and recorded logic. For high-fidelity simulation, record real instrument sessions. Not all edge cases or error conditions may be covered by default profiles.","title":"Limitations"},{"location":"user_guide/simulation/#further-reading","text":"Creating Profiles Working with Benches Command-Line Interface Reference","title":"Further Reading"},{"location":"user_guide/uncertainty/","text":"Handling Uncertainty PyTestLab provides first-class support for measurement uncertainty, enabling you to propagate and quantify errors throughout your data analysis workflow. This is essential for scientific rigor and for meeting compliance requirements in regulated environments. Why Uncertainty Matters Every measurement has an associated uncertainty, arising from instrument limitations, environmental factors, and other sources of error. Properly tracking and propagating these uncertainties is crucial for: Assessing the reliability of your results Comparing measurements from different instruments or labs Meeting the requirements of standards such as ISO/IEC 17025 How PyTestLab Handles Uncertainty PyTestLab integrates with the uncertainties Python package to represent and propagate measurement errors automatically. Instrument Profiles and Accuracy Instrument profiles in PyTestLab can specify accuracy specifications directly in their YAML configuration, typically as a combination of percentage of reading, percentage of range, and absolute offset. These are parsed and used to compute the standard uncertainty for each measurement. Example excerpt from a DMM profile: accuracy: dc_voltage: percentage: 0.025 # \u00b10.025% of reading absolute: 0.0005 # \u00b10.0005 V Automatic Uncertainty Propagation When you perform a measurement using a PyTestLab instrument driver, the returned value is a UFloat object (from the uncertainties package) if accuracy data is available. This object contains both the nominal value and its standard deviation. import pytestlab # Assume 'dmm' is an initialized instrument with accuracy specs result = await dmm.measure_voltage_dc() print(result.values) # e.g., 5.0012+/-0.0025 # The value is a UFloat, so you can do math and propagate errors: resistor = 1000.0 # Ohms, assumed exact current = result.values / resistor print(f\"Current: {current}\") # Uncertainty is propagated automatically Working with UFloat Objects Nominal value: result.values.nominal_value Standard deviation: result.values.std_dev String representation: str(result.values) (e.g., 5.0012+/-0.0025 ) Math operations: All standard math operations propagate uncertainty. For more, see the uncertainties documentation . Custom Uncertainty Models If your instrument or measurement requires a custom uncertainty model (e.g., temperature dependence, non-Gaussian errors), you can: Extend the instrument profile with additional fields Post-process the returned UFloat objects with your own calculations Use the uncertainties.ufloat constructor to wrap your own values Best Practices Always check your instrument profile: Ensure accuracy specs are present and correct. Use the returned UFloat objects: Don\u2019t discard uncertainty information in your analysis. Propagate uncertainty through all calculations: This is automatic with uncertainties , but be careful when converting to plain floats. Document your uncertainty sources: For compliance and reproducibility. Further Reading uncertainties package documentation PyTestLab Configuration Models 10-Minute Tour: Uncertainty Example","title":"Handling Uncertainty"},{"location":"user_guide/uncertainty/#handling-uncertainty","text":"PyTestLab provides first-class support for measurement uncertainty, enabling you to propagate and quantify errors throughout your data analysis workflow. This is essential for scientific rigor and for meeting compliance requirements in regulated environments.","title":"Handling Uncertainty"},{"location":"user_guide/uncertainty/#why-uncertainty-matters","text":"Every measurement has an associated uncertainty, arising from instrument limitations, environmental factors, and other sources of error. Properly tracking and propagating these uncertainties is crucial for: Assessing the reliability of your results Comparing measurements from different instruments or labs Meeting the requirements of standards such as ISO/IEC 17025","title":"Why Uncertainty Matters"},{"location":"user_guide/uncertainty/#how-pytestlab-handles-uncertainty","text":"PyTestLab integrates with the uncertainties Python package to represent and propagate measurement errors automatically.","title":"How PyTestLab Handles Uncertainty"},{"location":"user_guide/uncertainty/#instrument-profiles-and-accuracy","text":"Instrument profiles in PyTestLab can specify accuracy specifications directly in their YAML configuration, typically as a combination of percentage of reading, percentage of range, and absolute offset. These are parsed and used to compute the standard uncertainty for each measurement. Example excerpt from a DMM profile: accuracy: dc_voltage: percentage: 0.025 # \u00b10.025% of reading absolute: 0.0005 # \u00b10.0005 V","title":"Instrument Profiles and Accuracy"},{"location":"user_guide/uncertainty/#automatic-uncertainty-propagation","text":"When you perform a measurement using a PyTestLab instrument driver, the returned value is a UFloat object (from the uncertainties package) if accuracy data is available. This object contains both the nominal value and its standard deviation. import pytestlab # Assume 'dmm' is an initialized instrument with accuracy specs result = await dmm.measure_voltage_dc() print(result.values) # e.g., 5.0012+/-0.0025 # The value is a UFloat, so you can do math and propagate errors: resistor = 1000.0 # Ohms, assumed exact current = result.values / resistor print(f\"Current: {current}\") # Uncertainty is propagated automatically","title":"Automatic Uncertainty Propagation"},{"location":"user_guide/uncertainty/#working-with-ufloat-objects","text":"Nominal value: result.values.nominal_value Standard deviation: result.values.std_dev String representation: str(result.values) (e.g., 5.0012+/-0.0025 ) Math operations: All standard math operations propagate uncertainty. For more, see the uncertainties documentation .","title":"Working with UFloat Objects"},{"location":"user_guide/uncertainty/#custom-uncertainty-models","text":"If your instrument or measurement requires a custom uncertainty model (e.g., temperature dependence, non-Gaussian errors), you can: Extend the instrument profile with additional fields Post-process the returned UFloat objects with your own calculations Use the uncertainties.ufloat constructor to wrap your own values","title":"Custom Uncertainty Models"},{"location":"user_guide/uncertainty/#best-practices","text":"Always check your instrument profile: Ensure accuracy specs are present and correct. Use the returned UFloat objects: Don\u2019t discard uncertainty information in your analysis. Propagate uncertainty through all calculations: This is automatic with uncertainties , but be careful when converting to plain floats. Document your uncertainty sources: For compliance and reproducibility.","title":"Best Practices"},{"location":"user_guide/uncertainty/#further-reading","text":"uncertainties package documentation PyTestLab Configuration Models 10-Minute Tour: Uncertainty Example","title":"Further Reading"}],"index":{"fieldVectors":[["title/",[0,5.777]],["text/",[]],["title/404/",[1,6.049]],["text/404/",[2,7.151,3,7.015,4,6.21,5,10.464,6,4.532]],["title/changelog/",[7,5.378]],["text/changelog/",[0,3.777,3,3.054,7,5.321,8,4.194,9,4.757,10,5.5,11,5.925,12,2.139,13,3.775,14,2.572,15,3.327,16,4.194,17,4.194,18,2.815,19,4.194,20,5.295,21,3.532,22,3.635,23,4.508,24,4.39,25,3.517,26,3.113,27,4.194,28,4.194,29,5.984,30,5.984,31,4.194,32,5.033,33,4.194,34,3.777,35,2.776,36,7.218,37,3.409,38,3.46,39,4.323,40,4.554,41,3.737,42,2.521,43,2.607,44,1.629,45,4.352,46,3.113,47,4.323,48,3.443,49,3.777,50,2.495,51,4.194,52,6.345,53,1.253,54,4.261,55,4.194,56,2.577,57,4.194,58,2.377,59,2.47,60,3.82,61,2.637,62,2.314,63,4.194,64,3.635,65,4.194,66,4.194,67,4.259,68,3.635,69,2.999,70,5.321,71,5.5,72,3.777,73,3.415,74,4.194,75,3.777,76,2.958,77,2.905,78,2.219,79,2.422,80,5.984,81,4.194,82,3.635,83,1.87,84,3.517,85,3.177,86,2.857,87,3.327,88,1.592,89,3.737,90,3.596,91,3.177,92,1.461,93,3.113,94,1.063,95,2.901,96,3.415,97,1.743,98,2.139,99,1.761,100,1.325,101,3.248,102,1.961,103,2.549,104,4.194,105,3.635,106,4.194,107,4.194,108,0.539,109,3.054,110,2.67,111,1.692,112,2.521,113,2.637,114,1.577,115,2.446,116,1.485,117,2.901,118,2.949,119,1.903,120,2.949,121,3.517]],["title/changelog/#changelog",[7,5.378]],["text/changelog/#changelog",[7,7.609,8,9.073,9,5.639,10,9.272,11,5.576,12,4.627,13,5.399,14,3.678,15,7.198,16,9.073,17,9.073,18,6.091]],["title/changelog/#unreleased",[19,6.413]],["text/changelog/#unreleased",[]],["title/changelog/#added",[20,4.437]],["text/changelog/#added",[11,6.848,21,4.327,22,6.738,23,5.734,24,6.736,25,6.518,26,5.77,27,7.773,28,7.773,29,7.331,30,7.331,31,7.773,32,6.166,33,7.773,34,7.001,35,5.145,36,9.183,37,3.106,38,3.151,39,5.296,40,5.793,41,4.578,42,4.674,43,4.831,44,3.018,45,3.964,46,5.77,47,5.296,48,4.218]],["title/changelog/#changed",[9,3.986]],["text/changelog/#changed",[0,7.368,3,5.957,23,4.818,29,7.716,32,6.49,38,3.317,49,7.368,50,4.868,51,8.181,52,10.05,53,1.615,54,4.554,55,8.181,56,5.027,57,8.181,58,4.637,59,4.818,60,4.084,61,5.145,62,4.515,63,8.181,64,7.091,65,8.181,66,8.181,67,5.492,68,7.091,69,5.851]],["title/changelog/#fixed",[70,5.378]],["text/changelog/#fixed",[11,5.658,13,5.478,30,8.684,40,5.478,45,4.695,71,7.981,72,8.293,73,7.499,74,9.207,75,8.293,76,3.559]],["title/changelog/#015-2024-06-01",[77,0.869,78,0.801,79,1.323,80,2.16,81,2.291,82,1.986]],["text/changelog/#015-2024-06-01",[]],["title/changelog/#added_1",[20,4.437]],["text/changelog/#added_1",[21,4.709,37,3.379,38,3.429,39,5.762,45,5.231,47,5.762,48,4.59,60,5.12,76,3.269,83,3.771,84,7.093,85,6.408,86,5.762,87,6.71,88,3.21,89,4.982,90,5.813,91,6.408,92,2.946,93,6.278]],["title/changelog/#changed_1",[9,3.986]],["text/changelog/#changed_1",[36,8.62,41,5.383,53,1.805,54,5.088,67,6.136,94,1.269,95,6.323,96,7.444,97,3.8,98,4.661,99,3.839,100,2.888]],["title/changelog/#fixed_1",[70,5.378]],["text/changelog/#fixed_1",[37,3.819,71,8.287,94,1.328,101,7.404,102,4.469,103,5.81]],["title/changelog/#010-2024-04-15",[77,1.479,78,0.801,80,2.16,104,2.291,105,1.986]],["text/changelog/#010-2024-04-15",[]],["title/changelog/#added_2",[20,4.437]],["text/changelog/#added_2",[14,3.429,37,3.379,38,3.429,54,4.709,76,3.269,89,4.982,94,1.175,106,8.458,107,8.458,108,1.087,109,6.159,110,5.384,111,3.412,112,5.086,113,5.319,114,3.181,115,4.932,116,2.995,117,5.852,118,5.947,119,3.837,120,5.947,121,7.093]],["title/contributing/",[122,5.777]],["text/contributing/",[2,2.256,9,3.063,10,4.272,11,3.029,12,1.55,13,4.255,15,2.411,23,1.79,26,5.834,34,2.737,35,4.115,41,1.79,50,2.933,56,4.395,58,2.794,62,1.677,64,4.272,68,4.272,71,2.634,73,4.014,87,2.411,92,2.932,100,1.557,108,1.139,122,5.6,123,4.648,124,3.039,125,5.438,126,4.71,127,3.039,128,2.737,129,3.039,130,2.768,131,2.737,132,4.115,133,3.817,134,2.354,135,2.137,136,1.389,137,3.039,138,4.648,139,3.039,140,2.071,141,3.817,142,4.272,143,2.737,144,3.039,145,1.935,146,5.863,147,3.039,148,6.592,149,4.928,150,3.41,151,6.745,152,2.475,153,3.039,154,3.039,155,2.549,156,1.046,157,3.734,158,2.354,159,2.256,160,2.303,161,1.935,162,2.475,163,5.6,164,0.498,165,2.549,166,2.103,167,1.127,168,2.475,169,2.737,170,2.04,171,2.903,172,2.549,173,2.303,174,1.128,175,3.039,176,3.589,177,6.236,178,9.034,179,5.863,180,1.55,181,6.745,182,1.847,183,3.039,184,2.737,185,4.928,186,4.133,187,2.448,188,4.969,189,3.029,190,2.737,191,4.163,192,4.014,193,3.039,194,3.148,195,1.827,196,4.648,197,4.648,198,3.039,199,4.648,200,3.91,201,4.928,202,2.213,203,3.1,204,4.648,205,4.815,206,2.137,207,2.933,208,3.039,209,3.039,210,3.039,211,3.039,212,2.737,213,2.161,214,1.476,215,3.91,216,2.737,217,3.039,218,2.475,219,2.411,220,1.677,221,2.549,222,3.039,223,3.039,224,2.737,225,2.61,226,1.573,227,2.174,228,3.039,229,1.868,230,4.648,231,4.648,232,1.677,233,2.737,234,1.371,235,2.256,236,3.039,237,4.614,238,1.238,239,3.039,240,3.039,241,3.039,242,3.039,243,2.737,244,1.739,245,2.012,246,3.039,247,1.649,248,3.039,249,4.928,250,2.411,251,3.039,252,3.039,253,2.303]],["title/contributing/#contributing-to-pytestlab",[108,0.606,122,4.248]],["text/contributing/#contributing-to-pytestlab",[10,7.332,11,5.198,50,5.033,62,4.668,64,7.332,108,1.087,122,9.238,123,7.977,124,8.458,125,5.852,126,6.408,127,8.458,128,7.618,129,8.458,130,4.751,131,7.618,132,5.599,133,6.551,134,6.551,135,5.947,136,1.272,137,8.458]],["title/contributing/#code-of-conduct",[136,0.709,138,4.448]],["text/contributing/#code-of-conduct",[15,7.25,108,1.174,125,6.323,130,5.133,136,1.375,138,8.62,139,9.139,140,6.227,141,7.079,142,7.922,143,8.232,144,9.139]],["title/contributing/#getting-started",[50,2.806,145,3.002]],["text/contributing/#getting-started",[13,4.23,56,6.626,87,5.639,108,1.182,132,4.706,146,8.675,147,7.109,148,7.713,149,9.198,150,4.918,151,8.675,152,5.79,153,7.109,154,7.109,155,5.961,156,2.446,157,5.386,158,5.506,159,5.276,160,5.386,161,4.525,162,5.79,163,9.184,164,1.164,165,5.961,166,4.918,167,1.121,168,5.79,169,6.403,170,4.772,171,4.187,172,5.961,173,5.386,174,2.639,175,7.109,176,5.176,177,7.297,178,8.285,179,6.705]],["title/contributing/#development-workflow",[132,3.122,133,3.652]],["text/contributing/#development-workflow",[9,5.553,12,3.467,26,5.046,35,4.5,58,3.854,92,2.368,126,5.151,136,1.023,146,6.412,148,5.701,151,8.427,177,7.088,178,9.916,180,3.467,181,9.412,182,4.132,183,6.799,184,6.124,185,8.934,186,7.493,187,3.519,188,5.371,189,4.178,190,6.124,191,5.614,192,5.537,193,6.799,194,3.442,195,4.088,196,6.412,197,6.412,198,6.799,199,6.412,200,5.393,201,8.934,202,4.951,203,4.276,204,6.412,205,5.266,206,4.78,207,4.045]],["title/contributing/#code-style-quality",[68,2.673,136,0.464,208,3.083,254,2.388]],["text/contributing/#code-style-quality",[13,6.362,68,6.823,92,3.724,100,3.101,108,1.011,125,5.446,136,1.184,141,6.096,167,1.241,177,6.244,178,10.082,179,9.255,194,4.968,196,7.424,197,7.424,199,7.424,200,6.244,209,7.871,210,7.871,211,7.871,212,7.09,213,4.302,214,3.824]],["title/contributing/#documentation",[11,3.941]],["text/contributing/#documentation",[26,8.538,34,7.67,41,5.016,58,4.827,92,2.966,136,1.281,150,5.892,189,5.233,215,6.756,216,7.67,217,8.516,218,6.936,219,6.756,220,4.7,221,7.141,222,8.516,223,8.516,224,7.67,225,4.51]],["title/contributing/#tests",[188,3.452]],["text/contributing/#tests",[23,5.193,35,5.836,171,5.193,176,6.42,188,6.263,191,4.67,192,7.181,215,6.994,226,4.563,227,6.305,228,8.816,229,5.418,230,8.315,231,8.315]],["title/contributing/#submitting-a-pull-request",[204,3.517,205,2.888,230,3.517]],["text/contributing/#submitting-a-pull-request",[2,6.544,73,7.181,136,1.326,157,6.68,181,8.315,187,3.472,207,5.246,231,8.315,232,4.866,233,7.941,234,3.977,235,6.544,236,8.816,237,6.544,238,3.592,239,8.816,240,8.816]],["title/contributing/#need-help",[125,3.263,225,2.498]],["text/contributing/#need-help",[10,6.91,35,5.277,64,6.91,71,6.91,73,6.492,92,2.777,108,1.024,123,7.518,125,5.515,126,6.039,142,6.91,148,8.294,167,1.257,203,5.013,205,6.174,237,7.341,241,7.971,242,7.971,243,7.18,244,4.56,245,5.277,246,7.971,247,4.326,248,7.971,249,9.89,250,6.324,251,7.971,252,7.971,253,6.039]],["title/installation/",[56,3.941]],["text/installation/",[13,2.665,18,4.476,37,1.79,38,3.228,50,2.665,53,0.885,56,7.275,59,6.195,60,2.236,62,2.472,76,2.577,92,2.773,93,3.325,94,1.31,102,3.117,108,1.444,109,4.855,130,2.516,132,4.413,145,2.852,158,3.47,159,3.325,160,3.394,161,4.244,162,3.648,163,7.172,164,0.733,165,3.757,166,3.099,167,1.051,168,3.648,169,4.035,170,3.007,171,2.638,172,3.757,173,7.143,176,4.855,182,2.723,192,3.648,195,2.693,225,3.531,232,2.472,237,3.325,247,2.431,255,2.587,256,3.099,257,3.47,258,4.48,259,2.817,260,4.48,261,1.677,262,1.997,263,4.035,264,3.262,265,2.069,266,3.554,267,8.173,268,5.91,269,2.665,270,3.394,271,2.888,272,4.035,273,4.48,274,4.035,275,2.206,276,4.035,277,4.48,278,4.48,279,3.648,280,7.51,281,4.48,282,5.779,283,2.875,284,2.665,285,4.48,286,4.035,287,3.757,288,3.007,289,4.035,290,2.612,291,3.47,292,3.052,293,3.394,294,2.852,295,3.15]],["title/installation/#installation",[56,3.941]],["text/installation/#installation",[108,1.228,161,6.086,255,5.521,256,6.614,257,7.404,258,9.56]],["title/installation/#standard-installation",[56,2.898,259,2.966]],["text/installation/#standard-installation",[56,6.355,92,2.987,108,1.329,158,6.641,159,6.364,160,6.496,161,5.458,162,6.983,163,10.002,164,1.404,165,7.19,166,5.932,167,1.352,168,6.983,169,7.723,173,6.496,260,8.574]],["title/installation/#core-package",[93,3.5,109,3.434]],["text/installation/#core-package",[56,5.92,108,1.238,109,7.015,173,7.299,261,3.607]],["title/installation/#full-installation",[56,2.898,176,3.434]],["text/installation/#full-installation",[13,5.399,56,5.576,108,1.166,132,6.006,170,6.091,171,5.344,172,7.609,173,6.874,176,6.607,262,4.046,263,8.172,264,6.607,265,4.19]],["title/installation/#visa-backend-support",[38,1.512,59,2.196,60,1.861]],["text/installation/#visa-backend-support",[38,3.857,56,6.975,59,6.685,92,3.314,94,1.321,108,1.222,130,4.209,167,1.181,173,5.677,192,6.103,195,4.505,225,3.968,266,5.944,267,9.061,268,7.759,269,4.458,270,5.677,271,4.83,272,6.749,273,7.493,274,6.749,275,3.689,276,6.749,277,7.493,278,7.493,279,6.103]],["title/installation/#upgrading",[280,6.049]],["text/installation/#upgrading",[18,6.321,56,5.786,108,1.405,173,7.133,280,10.309,281,9.415]],["title/installation/#verifying-your-installation",[56,2.898,282,4.088]],["text/installation/#verifying-your-installation",[18,5.919,56,6.906,76,4.065,94,1.225,108,1.444,182,5.358,247,4.784,282,7.642,283,4.535,284,5.246,285,8.816]],["title/installation/#troubleshooting",[286,5.777]],["text/installation/#troubleshooting",[37,3.523,56,6.462,59,6.194,94,1.225,102,4.122,132,5.836,225,4.67,232,4.866,237,6.544,267,9.115,287,7.394,288,5.919,289,7.941,290,5.141]],["title/installation/#next-steps",[291,3.652,292,3.213]],["text/installation/#next-steps",[50,5.56,53,1.845,62,5.157,94,1.298,102,4.369,145,5.949,293,7.08,294,5.949,295,6.57]],["title/api/backends/",[38,2.6]],["text/api/backends/",[0,0.387,3,0.313,6,0.568,9,0.267,11,0.264,12,0.424,14,0.769,21,0.239,23,0.253,25,0.36,37,2.341,38,3.949,40,0.93,41,0.253,42,0.258,44,1.711,45,0.219,47,0.566,53,1.849,54,0.673,58,0.243,59,2.595,60,1.252,61,0.523,62,0.237,76,1.914,77,0.952,79,0.48,83,0.986,84,0.36,85,0.915,88,2.79,89,0.253,92,0.77,94,1.399,97,2.059,98,0.797,99,2.672,100,1.392,102,3.079,103,0.261,108,0.985,110,0.529,116,0.152,120,0.302,130,1.995,132,0.284,136,1.093,145,0.529,150,1.736,152,0.984,156,0.96,164,1.175,165,0.36,167,1.595,174,3.247,180,0.424,187,0.169,188,0.231,189,0.264,191,0.44,194,0.421,195,0.5,203,0.76,205,0.332,207,0.495,214,0.209,216,0.387,220,0.667,224,0.387,225,0.227,227,0.594,229,0.96,232,1.047,234,1.132,238,3.267,245,1.034,247,0.656,255,0.248,257,0.332,261,0.71,262,2.423,264,0.313,265,0.876,268,2.636,269,0.255,270,0.63,271,0.536,283,0.358,284,0.255,288,0.811,290,1.627,296,0.307,297,0.28,298,0.302,299,0.909,300,0.288,301,0.429,302,0.387,303,0.332,304,0.475,305,0.341,306,0.429,307,0.429,308,4.27,309,0.558,310,0.273,311,0.387,312,0.273,313,0.297,314,0.429,315,0.341,316,0.823,317,1.065,318,0.72,319,2.814,320,0.292,321,0.587,322,0.429,323,0.387,324,0.429,325,0.429,326,0.429,327,2.508,328,3.941,329,4.705,330,1.563,331,0.88,332,1.542,333,0.332,334,1.469,335,2.626,336,0.307,337,0.72,338,1.194,339,1.219,340,0.821,341,1.994,342,1.926,343,1.25,344,0.984,345,0.831,346,1.789,347,2.297,348,1.354,349,1.021,350,0.617,351,1.99,352,0.984,353,0.429,354,2.613,355,2.615,356,3.106,357,0.584,358,3.448,359,1.243,360,3.488,361,1.593,362,0.864,363,0.429,364,2.273,365,2.273,366,0.313,367,0.297,368,0.387,369,0.216,370,0.495,371,0.831,372,0.406,373,1.972,374,2.497,375,1.714,376,0.261,377,0.749,378,0.429,379,3.437,380,0.415,381,0.831,382,2.864,383,1.444,384,1.359,385,1.61,386,0.36,387,1.713,388,1.354,389,1.801,390,0.536,391,1.466,392,0.292,393,0.341,394,0.262,395,0.387,396,3.537,397,4.467,398,3.836,399,1.117,400,1.027,401,0.831,402,1.789,403,1.379,404,1.088,405,2.051,406,4.116,407,0.897,408,1.901,409,0.831,410,4.518,411,0.742,412,1.047,413,0.273,414,0.831,415,0.302,416,1.096,417,0.387,418,0.831,419,0.429,420,1.255,421,1.713,422,0.214,423,0.284,424,0.332,425,0.831,426,0.831,427,0.387,428,0.88,429,2.733,430,0.784,431,0.429,432,0.433,433,2.102,434,0.433,435,0.831,436,0.429,437,0.239,438,1.504,439,0.387,440,2.626,441,0.429,442,0.429,443,2.87,444,1.088,445,1.013,446,3.079,447,2.928,448,0.307,449,0.341,450,2.175,451,1.207,452,0.157,453,0.697,454,0.72,455,0.841,456,1.047,457,0.409,458,1.452,459,1.59,460,0.831,461,2.626,462,2.273,463,1.013,464,0.429,465,2.696,466,1.273,467,0.429,468,0.216,469,0.621,470,1.99,471,1.165,472,0.644,473,0.677,474,1.354,475,0.429,476,0.302,477,0.429,478,0.319,479,2.043,480,0.277,481,0.307,482,1.789,483,0.958,484,1.59,485,1.088,486,1.469,487,0.88,488,0.784,489,1.139,490,1.047,491,1.013,492,1.24,493,1.047,494,1.013,495,1.013,496,0.958,497,1.013,498,0.897,499,0.429,500,0.429,501,0.429,502,0.35,503,0.332,504,0.284,505,2.508,506,2.419,507,0.429,508,0.372,509,0.35,510,0.429,511,0.429,512,0.429,513,0.36,514,0.429,515,1.139,516,0.831,517,0.831,518,0.429,519,0.429,520,0.831,521,0.387,522,0.429,523,0.28,524,0.429,525,0.429,526,0.224,527,0.429,528,0.429,529,0.429,530,1.641,531,0.429,532,1.776,533,0.429,534,0.405,535,0.63,536,1.474,537,0.35,538,0.35,539,1.104,540,1.179,541,0.784,542,0.429,543,1.563,544,0.429,545,1.088,546,0.849,547,0.387,548,0.811,549,2.368,550,3.199,551,2.754,552,0.292,553,0.784,554,0.831,555,0.784,556,0.749,557,1.675,558,0.94,559,1.02,560,1.965,561,1.354,562,1.992,563,0.463,564,1.255,565,2.776,566,0.455,567,0.831,568,0.387,569,0.307,570,0.372,571,0.372,572,0.332,573,1.208,574,0.831,575,1.273,576,0.429,577,0.35,578,0.302,579,0.36,580,1.896,581,0.429,582,0.387,583,0.341,584,0.749,585,0.831,586,0.325,587,0.302,588,0.261,589,0.387,590,0.429,591,0.387,592,0.302,593,0.372,594,0.429,595,1.717,596,1.049,597,0.319,598,0.936,599,0.429,600,0.319,601,0.258,602,0.288,603,0.25,604,0.36,605,0.292,606,0.319,607,0.239,608,0.387,609,0.341,610,0.429,611,0.222,612,0.233]],["title/api/backends/#instrument-backends",[38,1.912,94,0.655]],["text/api/backends/#instrument-backends",[3,6.287,11,5.306,37,3.449,38,4.21,60,4.31,92,3.007,94,1.199,108,1.109,130,4.849,207,5.137,214,4.194,271,5.565,296,6.175,297,5.638,298,6.07,299,4.979,300,5.796,301,8.633]],["title/api/backends/#overview",[302,5.777]],["text/api/backends/#overview",[14,3.113,37,3.86,38,4.286,41,4.522,59,4.522,61,4.828,76,2.968,92,3.365,94,1.468,102,3.589,110,6.15,130,4.312,156,2.642,195,4.616,238,3.128,303,5.946,304,5.527,305,6.09,306,7.677,307,7.677,308,5.154,309,5.154,310,4.887,311,6.915,312,4.887,313,5.311,314,7.677,315,6.09,316,5.23,317,4.312]],["title/api/backends/#available-backends",[38,1.912,284,2.806]],["text/api/backends/#available-backends",[]],["title/api/backends/#asyncvisabackend",[318,5.559]],["text/api/backends/#asyncvisabackend",[25,7.5,38,3.626,59,5.267,92,3.115,94,1.242,174,3.319,268,6.638,319,5.267,320,6.093,321,4.345,322,8.943,323,8.055,324,8.943,325,8.943,326,8.943]],["title/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend",[318,5.559]],["text/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend",[38,3.546,47,4.485,79,3.802,92,2.293,94,1.454,108,0.846,130,3.698,136,0.99,164,1.078,167,1.379,191,3.487,245,4.358,262,3.9,268,6.492,270,4.988,288,4.42,299,3.157,319,3.878,327,4.988,328,5.785,329,6.906,330,8.746,331,4.794,332,4.046,333,5.099,334,6.774,335,6.939,336,4.708,337,5.707,338,1.11,339,1.068,340,3.46,341,2.007,342,1.725,343,1.956,344,5.362,345,6.583,346,6.209,347,2.198,348,5.707,349,3.041,350,4.887,351,5.223,352,5.362,353,6.583]],["title/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend-attributes",[354,2.796]],["text/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend-attributes",[]],["title/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.address",[328,3.777]],["text/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.address",[]],["title/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.instrument",[94,0.891]],["text/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.instrument",[]],["title/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.rm",[344,5.223]],["text/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.rm",[]],["title/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend-functions",[261,2.402]],["text/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend-functions",[]],["title/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close",[356,3.48]],["text/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close",[38,3.361,53,1.637,94,1.151,102,4.737,108,1.065,136,1.247,164,1.357,167,1.307,319,5.967,327,6.28,338,1.397,339,1.345,341,1.816,347,2.083,356,5.938,357,7.124,358,7.146,359,1.758]],["title/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect",[102,2.998]],["text/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect",[38,1.823,53,1.32,59,5.204,94,1.462,97,3.317,99,3.966,100,2.521,102,4.415,108,0.578,136,0.676,156,1.547,164,0.736,167,1.615,174,3.673,191,2.381,229,2.763,232,2.481,268,4.962,319,3.937,327,3.406,328,5.204,331,3.274,332,2.763,334,3.482,335,6.33,338,0.758,339,1.085,341,2.037,343,1.336,344,3.662,346,8.333,347,2.22,348,3.897,351,3.567,356,4.33,359,1.692,360,7.459,361,2.998,362,3.215,363,4.496,364,6.499,365,6.499,366,3.274,367,3.11,368,4.049,369,2.26,370,2.675,371,6.684,372,2.199,373,2.521,374,5.61,375,1.82,376,2.732,377,6.021,378,4.496,379,5.932,380,2.244,381,6.684,382,5.064,383,2.327,384,2.763,385,3.274]],["title/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect",[358,4.188]],["text/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect",[38,2.601,53,1.697,59,6.1,94,1.439,97,4.03,99,4.072,108,0.824,136,0.965,164,1.05,167,1.011,174,4.126,268,4.761,319,5.063,327,4.86,328,5.063,335,5.088,338,1.081,339,1.041,341,2.035,347,2.436,351,5.088,356,3.481,358,7.053,359,1.36,360,7.056,361,2.876,364,5.224,365,5.224,373,2.716,374,6.044,375,1.961,384,3.942,385,4.671,386,5.379]],["title/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout",[387,4.967]],["text/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout",[38,3.113,53,1.516,94,1.342,108,0.986,130,5.426,136,1.155,145,6.15,150,6.684,156,2.642,164,1.257,167,1.666,327,5.816,338,1.294,339,1.246,341,1.731,343,2.281,348,6.655,379,7.097,387,5.946,388,8.374,389,2.643,390,4.949,391,4.035,392,5.23,393,6.09,394,2.417,395,6.915]],["title/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query",[396,3.201]],["text/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query",[38,2.094,40,3.074,53,1.461,54,2.876,59,3.043,88,2.808,94,1.387,97,3.076,99,3.63,102,3.459,108,0.664,136,0.777,150,3.574,164,0.846,167,1.362,174,3.857,229,3.175,238,3.845,262,3.299,268,3.834,317,4.155,319,4.357,327,3.914,328,4.357,332,3.175,335,4.098,338,0.871,339,1.201,341,1.918,342,2.473,347,2.172,351,4.098,358,3.374,359,1.096,360,3.519,361,2.317,364,4.207,365,4.207,373,2.982,374,5.202,375,1.687,382,5.605,383,2.674,384,3.175,385,3.762,389,2.581,396,5.342,397,5.735,398,6.694,399,5.291,400,2.485,401,7.398,402,6.978,403,2.33,404,4.653,405,4.014]],["title/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw",[406,4.859]],["text/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw",[38,1.856,40,2.724,53,1.338,54,2.549,59,2.697,88,3.061,94,1.322,97,2.817,99,3.388,102,3.168,108,0.588,136,0.689,150,3.167,164,0.75,167,1.625,174,3.826,225,2.425,229,2.813,238,2.761,262,3.021,265,3.725,268,3.398,319,3.991,321,2.224,327,3.469,328,3.991,331,3.334,332,2.813,334,3.546,335,3.632,338,0.772,339,1.1,341,1.848,342,1.775,347,2.24,351,3.632,358,2.99,359,0.971,360,3.119,361,2.053,364,3.729,365,3.729,373,2.817,374,4.764,375,1.545,382,6.754,383,2.37,384,2.813,385,3.334,389,2.438,396,3.382,397,5.418,398,5.248,399,4.846,400,2.276,402,7.607,404,4.124,405,3.677,406,6.754,407,5.987,408,6.754,409,6.775,410,4.118,411,2.813,412,5.873,413,2.914,414,6.775,415,3.219,416,3.359,417,4.124,418,6.775,419,4.578,420,3.031]],["title/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout",[421,4.967]],["text/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout",[9,3.198,38,2.086,40,3.061,53,1.86,58,2.916,59,4.344,77,1.953,94,1.385,97,3.066,99,3.622,108,0.661,130,4.143,136,0.774,150,5.103,156,3.241,164,0.842,167,1.723,174,3.496,194,2.605,232,2.839,268,3.819,319,4.344,327,3.898,328,4.344,329,6.623,335,4.081,338,0.867,339,1.197,341,1.959,343,2.191,347,1.853,348,4.46,351,4.081,352,4.19,359,1.091,360,5.025,361,2.307,364,4.19,365,4.19,373,1.626,375,1.682,379,6.966,380,2.568,382,5.588,383,2.663,384,3.162,385,3.746,388,6.394,390,3.316,420,3.406,421,3.985,422,2.568,423,3.406,424,3.985,425,7.376,426,7.376,427,4.634,428,3.746,429,2.839,430,4.852,431,5.145,432,2.683,433,3.876,434,3.847]],["title/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write",[410,3.898]],["text/api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write",[38,2.13,40,3.126,47,3.579,53,1.478,54,2.924,59,3.094,88,3.966,94,1.494,97,3.112,99,3.664,102,3.5,108,0.675,136,0.79,150,3.634,164,0.86,167,1.584,174,3.878,194,2.66,229,3.228,232,2.899,268,3.899,288,3.527,319,4.41,327,3.98,328,4.41,332,3.228,334,4.069,335,4.167,338,0.886,339,1.215,341,1.927,342,1.962,347,2.389,351,4.167,352,4.278,358,3.431,359,1.114,360,3.579,361,2.356,364,4.278,365,4.278,373,3.005,374,5.264,375,1.708,382,5.672,383,2.719,384,3.228,385,3.825,397,5.779,404,4.731,405,4.063,410,6.681,428,3.825,432,2.739,435,7.487,436,5.253,437,2.924]],["title/api/backends/#asynclambbackend",[438,5.088]],["text/api/backends/#asynclambbackend",[38,3.626,53,1.766,60,4.464,94,1.473,130,5.023,245,5.92,288,6.004,308,7.12,337,7.752,439,8.055,440,7.095,441,8.943,442,8.943]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend",[438,5.088]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend",[14,2.448,21,2.188,38,2.448,44,3.204,60,1.962,77,2.791,79,2.269,94,1.146,100,2.813,102,4.163,108,0.505,130,4.13,136,0.591,152,4.917,164,0.643,167,1.301,187,1.548,234,3.722,245,3.997,262,4.869,308,6.31,319,2.314,328,5.95,329,6.609,338,0.662,339,0.638,340,2.065,341,1.811,342,2.861,343,1.794,347,2.46,349,4.112,375,0.896,379,4.053,400,1.32,438,3.117,440,7.063,443,8.757,444,5.438,445,5.063,446,8.757,447,8.025,448,2.81,449,3.117,450,7.152,451,5.668,452,1.44,453,5.063,454,5.234,455,2.677,456,6.373,457,2.973,458,1.723,459,3.295,460,3.929,461,3.117,462,3.2,463,3.295,464,3.929,465,3.2,466,3.2,467,3.929,468,1.975,469,2.019,470,3.117,471,2.415]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend-attributes",[354,2.796]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend-attributes",[]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.base_url",[459,5.378]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.base_url",[]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.instrument_address",[461,5.088]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.instrument_address",[]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.model_name",[446,5.559]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.model_name",[]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.serial_number",[447,4.967]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.serial_number",[]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend-functions",[261,2.402]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend-functions",[]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close",[356,3.48]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close",[38,3.6,53,1.753,94,1.233,108,1.141,136,1.336,164,1.454,167,1.4,308,5.961,338,1.497,339,1.441,341,1.893,347,2.231,356,4.818,358,5.799,359,1.883]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect",[102,2.998]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect",[38,3.056,53,1.488,94,1.579,102,4.465,108,0.969,136,1.134,164,1.234,167,1.505,232,5.27,262,3.361,308,7.399,338,1.271,339,1.223,341,1.879,347,1.894,359,1.599,375,1.719,461,5.98,470,5.98,471,4.632,472,7.397,473,7.778,474,6.534,475,7.538,476,5.3,477,7.538,478,5.595]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect",[358,4.188]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect",[37,3.29,38,3.339,53,1.626,89,4.85,94,1.144,108,1.058,136,1.239,164,1.348,167,1.298,205,6.378,308,5.528,338,1.388,339,1.336,341,1.809,347,2.069,358,6.59,370,4.9,375,1.878,438,6.533,461,6.533,470,6.533,471,5.06,479,6.707,480,5.308,481,5.889]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout",[387,4.967]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout",[38,3.525,53,1.717,94,1.207,108,1.117,136,1.308,164,1.423,167,1.644,308,5.837,338,1.466,339,1.411,341,1.869,343,3.098,387,6.733,389,2.378,462,7.081,463,7.291]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query",[396,3.201]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query",[38,2.194,53,1.51,88,2.054,94,1.062,97,2.25,99,3.212,108,0.695,136,0.814,164,0.886,167,1.398,174,4.026,238,4.142,262,2.413,308,5.954,338,0.912,339,0.878,341,1.891,342,2.324,347,1.36,359,1.622,361,2.427,373,2.416,375,2.198,379,3.634,383,2.801,389,1.481,396,5.075,397,5.39,398,4.192,400,1.818,403,2.441,405,4.15,420,3.583,440,4.294,450,4.692,459,4.539,461,6.067,462,4.408,465,7.223,466,4.408,470,4.294,474,4.692,479,6.228,482,2.027,483,4.294,484,6.413,485,4.875,486,5.923,487,3.941,488,5.105,489,7.213,490,6.629,491,4.539,492,7.035,493,4.692,494,4.539,495,4.539,496,4.294,497,4.539,498,4.017]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw",[406,4.859]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw",[38,2.284,53,1.553,88,2.138,94,1.092,97,2.342,99,3.303,108,0.724,136,0.847,164,0.922,167,1.546,174,4.072,238,4.204,262,2.511,308,6.083,338,0.949,339,0.914,341,1.916,342,1.476,347,1.415,359,1.668,361,2.526,373,2.485,375,2.237,379,3.781,383,2.915,389,1.541,397,5.507,398,4.362,400,1.892,405,4.267,406,7.817,408,4.267,420,3.728,440,4.468,450,4.882,459,4.723,461,6.239,462,4.587,465,7.38,466,4.587,470,4.468,474,4.882,479,6.405,482,2.109,483,4.468,484,4.723,485,5.073,486,4.362,487,4.101,491,4.723,492,4.468,494,4.723,495,4.723,496,4.468,497,4.723,498,4.181,499,5.632,500,5.632]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout",[421,4.967]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout",[38,3.151,53,1.535,77,4.035,94,1.08,108,0.999,136,1.169,156,2.675,164,1.273,167,1.535,308,5.218,329,7.475,338,1.31,339,1.262,341,1.997,343,2.309,347,1.953,350,5.77,375,1.773,379,5.218,421,6.02,438,6.166,462,8.659,463,6.518,470,6.166,482,2.911,501,7.773]],["title/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write",[410,3.898]],["text/api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write",[38,2.336,53,1.578,88,2.187,94,1.11,97,2.396,99,3.356,108,0.74,136,0.867,164,0.943,167,1.446,174,4.097,238,4.036,308,6.158,338,0.971,339,0.935,341,1.929,342,1.51,347,1.448,359,1.695,361,2.584,373,2.525,375,2.259,379,3.869,383,2.982,397,5.575,405,4.336,410,6.323,420,3.815,440,4.571,450,4.995,459,4.832,461,6.339,462,4.693,465,7.47,466,4.693,470,4.571,474,4.995,479,6.508,482,2.158,483,4.571,484,6.701,485,5.19,486,6.189,487,4.196,488,5.435,489,5.435,490,4.995,491,4.832,494,4.832,495,4.832,496,4.571,497,4.832,498,4.277]],["title/api/backends/#simbackendv2",[85,4.859]],["text/api/backends/#simbackendv2",[14,3.574,37,4.49,38,3.574,76,4.065,83,3.931,84,7.394,94,1.225,132,5.836,188,4.745,234,3.977,391,4.633,502,7.181,503,6.829,504,5.836]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2",[85,4.859]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2",[37,2.261,38,2.294,44,3.816,85,4.287,94,0.786,108,0.727,120,3.978,136,0.851,164,0.926,167,1.794,207,3.367,224,5.096,247,3.07,261,2.119,265,2.613,283,3.403,290,3.299,329,6.387,338,0.954,339,0.918,340,2.973,341,2.148,342,2.575,343,2.344,347,2.597,362,4.046,471,3.477,505,4.287,506,8.518,507,5.658,508,4.904,509,4.608,510,5.658,511,5.658,512,5.658,513,4.745,514,5.658,515,5.336,516,5.658,517,7.889,518,5.658,519,5.658,520,7.889,521,5.096,522,5.658,523,3.695,524,5.658,525,5.658,526,2.951,527,5.658,528,5.658,529,5.658,530,4.2,531,5.658,532,3.602]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2-attributes",[354,2.796]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2-attributes",[]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.DEFAULT_TIMEOUT_MS",[515,6.049]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.DEFAULT_TIMEOUT_MS",[]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.USER_OVERRIDE_ROOT",[533,6.413]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.USER_OVERRIDE_ROOT",[]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.model",[44,2.491]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.model",[]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.profile_path",[506,5.559]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.profile_path",[]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.timeout_ms",[329,4.509]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.timeout_ms",[]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2-functions",[261,2.402]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2-functions",[]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close",[356,3.48]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close",[38,3.6,53,1.753,94,1.233,108,1.141,136,1.336,164,1.454,167,1.4,338,1.497,339,1.441,341,1.893,347,2.231,356,4.818,358,5.799,359,1.883,505,6.727]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect",[102,2.998]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect",[37,3.983,38,3.274,44,3.136,53,1.594,94,1.122,102,5.281,108,1.038,136,1.215,164,1.322,167,1.571,338,1.361,339,1.311,341,1.787,347,2.029,482,3.024,505,6.118,530,5.994,532,5.14,535,7.553,536,9.403,537,6.576,538,6.576]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect",[358,4.188]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect",[38,3.383,44,3.241,53,1.648,94,1.159,102,4.756,108,1.072,136,1.255,164,1.366,167,1.315,338,1.407,339,1.354,341,1.823,347,2.097,356,5.52,358,6.644,482,3.125,505,6.322,530,6.194,532,5.312,536,9.595]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout",[387,4.967]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout",[38,3.6,53,1.753,94,1.233,108,1.141,136,1.336,164,1.454,167,1.4,329,6.243,338,1.497,339,1.441,341,1.893,343,2.638,387,6.877,389,2.429,505,6.727]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query",[396,3.201]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query",[6,3.234,38,2.787,44,2.669,53,1.357,94,0.955,98,4.589,108,0.883,136,1.034,164,1.125,167,1.581,238,4.088,317,5.054,338,1.159,339,1.116,341,1.798,342,2.358,347,2.261,359,1.458,389,2.744,396,5.314,397,6.098,398,7.771,400,2.309,403,3.1,412,5.958,482,2.574,493,7.8,505,5.208,530,5.102,532,6.387,539,4.492,540,4.272,541,6.483,542,6.874]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw",[406,4.859]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw",[38,3.191,53,1.554,94,1.093,108,1.011,136,1.184,164,1.289,167,1.547,338,1.327,339,1.277,341,1.759,342,2.063,347,2.466,359,1.669,372,3.849,389,2.684,396,3.929,397,5.964,398,7.6,400,2.644,406,5.963,408,7.434,505,5.963,543,11.193,544,7.871]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout",[421,4.967]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout",[38,3.549,53,1.729,94,1.216,108,1.125,136,1.317,164,1.433,167,1.38,329,7.878,338,1.476,339,1.421,341,1.877,343,2.601,347,2.2,421,6.781,505,6.633]],["title/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write",[410,3.898]],["text/api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write",[38,3.211,44,3.076,53,1.564,94,1.1,98,5.024,108,1.018,136,1.191,164,1.297,167,1.249,338,1.335,339,1.286,341,1.922,342,2.076,347,1.99,397,6.517,403,3.573,410,6.818,482,2.966,505,6.001,530,5.879,532,6.271,539,4.918,541,7.471]],["title/api/backends/#recordingbackend",[545,5.777]],["text/api/backends/#recordingbackend",[37,3.625,38,4.337,76,3.507,88,3.444,92,3.16,220,5.007,238,3.697,482,3.398,539,4.529,546,6.379,547,8.172,548,6.091]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend",[545,5.777]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend",[37,3.067,38,4.635,76,2.968,94,1.066,108,0.986,136,1.155,164,1.257,167,1.21,338,1.294,339,1.246,340,4.035,341,2.092,347,2.656,411,4.718,429,4.237,548,5.154,549,5.946,550,9.522,551,9.993,552,5.23,553,7.241,554,7.677]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend-attributes",[354,2.796]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend-attributes",[]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.backend",[38,2.6]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.backend",[]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.base_profile",[551,5.777]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.base_profile",[]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.log",[429,3.539]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.log",[]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.output_path",[550,5.777]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.output_path",[]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.start_time",[553,6.049]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.start_time",[]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend-functions",[261,2.402]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend-functions",[]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__",[555,6.049]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__",[38,4.642,94,1.167,108,1.079,136,1.264,164,1.375,338,1.416,339,1.363,341,1.831,354,4.454,389,2.298,455,4.529,546,7.182,549,6.507,555,7.924,556,9.2,557,6.365]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close",[356,3.48]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close",[37,3.73,38,4.666,53,1.436,76,3.609,94,1.01,108,0.935,136,1.094,164,1.191,332,4.47,338,1.226,339,1.181,341,2.016,356,6.351,359,1.543,410,5.674,433,3.823,482,2.724,540,4.521,545,6.552,549,5.634,557,5.511,558,4.374,559,4.751,560,4.597,561,6.306,562,8.409]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile",[562,5.777]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile",[6,2.773,12,3.006,37,3.709,38,1.544,61,2.396,76,4.127,83,3.619,88,3.523,94,0.529,97,1.584,99,2.476,100,2.279,108,0.489,136,0.573,164,0.624,165,3.195,167,1.526,174,2.188,180,1.943,203,3.707,216,3.431,220,3.253,227,4.216,234,2.659,238,2.938,257,2.95,265,1.759,290,5.119,332,2.341,338,0.642,339,0.618,341,1.793,361,1.708,375,2.435,389,1.042,394,1.199,396,1.902,406,2.886,410,5.335,428,2.774,429,3.98,430,3.593,433,5.512,469,3.028,471,2.341,482,3.625,530,2.828,539,1.902,548,2.557,549,2.95,550,7.907,551,3.431,562,6.495,563,3.282,564,5.811,565,8.796,566,3.226,567,5.895,568,3.431,569,2.724,570,3.302,571,3.302,572,2.95,573,7.211,574,5.895,575,6.611,576,3.809,577,3.103,578,2.678,579,3.195,580,8.778,581,3.809,582,3.431,583,3.022,584,5.31,585,5.895,586,2.886,587,2.678,588,2.315,589,3.431,590,3.809,591,3.431,592,2.678,593,3.302,594,3.809]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query",[396,3.201]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query",[38,4.341,53,1.89,60,3.122,88,3.891,94,1.329,100,1.976,108,0.804,136,0.941,164,1.024,167,1.332,238,4.675,338,1.054,339,1.015,341,1.919,342,1.639,359,1.326,373,1.976,389,2.618,396,5.727,403,3.811,416,3.1,429,5.282,458,3.705,540,3.887,549,4.843,557,6.402,558,3.76,559,4.084,560,4.571,561,5.421,595,4.746,596,4.198,597,4.642,598,4.843]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw",[406,4.859]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw",[38,4.371,53,1.909,60,3.186,88,3.923,94,1.343,100,2.016,108,0.82,136,0.96,164,1.045,167,1.35,238,4.62,338,1.076,339,1.036,341,1.932,342,1.672,359,1.353,373,2.016,389,2.645,396,4.276,403,2.878,406,8.41,416,3.164,429,5.337,458,3.756,540,3.966,549,4.943,557,4.835,558,3.837,559,4.168,560,4.609,561,5.532,595,4.812,596,4.284,598,4.943]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read",[391,3.37]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read",[38,3.978,94,1.485,100,2.487,108,1.011,136,1.184,164,1.289,167,1.685,238,4.561,338,1.327,339,1.277,341,1.916,342,2.063,389,2.153,391,6.053,403,3.55,429,5.901,549,6.096,596,5.284]],["title/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write",[410,3.898]],["text/api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write",[38,4.417,53,1.939,60,3.286,88,4.251,94,1.364,100,2.08,108,0.846,136,0.99,164,1.078,167,1.379,338,1.11,339,1.068,341,1.953,342,1.725,359,1.396,373,2.08,389,2.393,403,2.969,410,7.054,416,3.264,429,5.421,458,3.835,540,4.092,549,5.099,557,4.988,558,3.958,559,4.299,560,4.667,561,5.707,595,4.913,596,4.42,598,5.099]],["title/api/backends/#backend-selection-logic",[38,1.512,103,2.266,316,2.54]],["text/api/backends/#backend-selection-logic",[14,3.317,37,4.015,38,4.41,45,4.172,83,3.648,94,1.136,108,1.051,116,2.897,136,1.23,174,3.036,180,4.172,195,4.919,316,5.573,321,3.974,328,4.818,599,8.181,600,6.072,601,4.919,602,5.492,603,4.771,604,6.86,605,5.573,606,6.072,607,4.554,608,7.368]],["title/api/backends/#extending-backends",[38,1.912,264,3.434]],["text/api/backends/#extending-backends",[23,4.818,37,4.015,38,3.317,42,4.919,53,1.615,60,4.084,62,4.515,136,1.23,164,1.339,189,5.027,203,5.145,247,5.453,255,4.725,269,4.868,270,6.198,271,5.273,309,5.492,356,4.439,362,5.851,396,4.084,410,4.972,416,4.056,609,6.49,610,8.181,611,4.234,612,4.439]],["title/api/common/",[613,3.263,614,3.741]],["text/api/common/",[6,1.04,11,1.358,14,4.044,92,0.77,97,2.058,108,0.636,120,2.657,167,0.348,194,1.913,292,2.575,299,5.76,342,2.574,347,0.95,349,1.745,354,5.452,355,6.573,423,1.463,424,2.927,434,2.582,476,1.554,504,1.463,603,3.416,613,3.425,614,2.998,615,2.21,616,6.225,617,3.927,618,1.853,619,2.21,620,2.226,621,2.468,622,3.169,623,3.078,624,2.322,625,3.078,626,3.169,627,3.404,628,3.276,629,3.404,630,1.609,631,2.084,632,2.21,633,2.401,634,5.147,635,1.753,636,3.276,637,1.991,638,2.998,639,1.991,640,1.991,641,3.779,642,2.863,643,3.276,644,4.538,645,2.703,646,2.21,647,1.674,648,3.078,649,2.927,650,3.404,651,3.169,652,1.991,653,3.404,654,3.779,655,3.404,656,3.404,657,2.21,658,2.401,659,2.401,660,3.169,661,2.401,662,3.169,663,3.404,664,2.998,665,3.169,666,3.169,667,2.703,668,2.436,669,1.8,670,2.084,671,1.674,672,1.674,673,2.863,674,1.8,675,1.991,676,1.554,677,2.084,678,1.853,679,1.853,680,1.991,681,1.853,682,1.463,683,2.21,684,2.21,685,3.169,686,3.605,687,1.991,688,3.169]],["title/api/common/#common-utilities",[613,3.263,614,3.741]],["text/api/common/#common-utilities",[11,5.658,92,3.207,108,1.183,120,6.473,194,4.662,504,6.095,614,7.304,615,9.207,616,5.596,617,7.304,618,7.721]],["title/api/common/#enums",[616,3.898]],["text/api/common/#enums",[]],["title/api/common/#pytestlab.common.enums",[616,3.898]],["text/api/common/#pytestlab.common.enums",[]],["title/api/common/#pytestlab.common.enums.__all__",[619,6.413]],["text/api/common/#pytestlab.common.enums.__all__",[]],["title/api/common/#pytestlab.common.enums.AcquisitionType",[623,5.223]],["text/api/common/#pytestlab.common.enums.AcquisitionType",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.enums.AcquisitionType.AVERAGE",[630,4.67]],["text/api/common/#pytestlab.common.enums.AcquisitionType.AVERAGE",[]],["title/api/common/#pytestlab.common.enums.AcquisitionType.HIGH_RES",[632,6.413]],["text/api/common/#pytestlab.common.enums.AcquisitionType.HIGH_RES",[]],["title/api/common/#pytestlab.common.enums.AcquisitionType.NORMAL",[634,4.306]],["text/api/common/#pytestlab.common.enums.AcquisitionType.NORMAL",[]],["title/api/common/#pytestlab.common.enums.AcquisitionType.PEAK",[636,5.559]],["text/api/common/#pytestlab.common.enums.AcquisitionType.PEAK",[]],["title/api/common/#pytestlab.common.enums.ArbAdvanceMode",[637,5.777]],["text/api/common/#pytestlab.common.enums.ArbAdvanceMode",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.enums.ArbAdvanceMode.SRATE",[638,5.088]],["text/api/common/#pytestlab.common.enums.ArbAdvanceMode.SRATE",[]],["title/api/common/#pytestlab.common.enums.ArbAdvanceMode.TRIGGER",[603,3.74]],["text/api/common/#pytestlab.common.enums.ArbAdvanceMode.TRIGGER",[]],["title/api/common/#pytestlab.common.enums.ArbFilterType",[639,5.777]],["text/api/common/#pytestlab.common.enums.ArbFilterType",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.enums.ArbFilterType.NORMAL",[634,4.306]],["text/api/common/#pytestlab.common.enums.ArbFilterType.NORMAL",[]],["title/api/common/#pytestlab.common.enums.ArbFilterType.OFF",[]],["text/api/common/#pytestlab.common.enums.ArbFilterType.OFF",[]],["title/api/common/#pytestlab.common.enums.ArbFilterType.STEP",[292,4.369]],["text/api/common/#pytestlab.common.enums.ArbFilterType.STEP",[]],["title/api/common/#pytestlab.common.enums.BurstMode",[640,5.777]],["text/api/common/#pytestlab.common.enums.BurstMode",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.enums.BurstMode.GATED",[641,6.413]],["text/api/common/#pytestlab.common.enums.BurstMode.GATED",[]],["title/api/common/#pytestlab.common.enums.BurstMode.TRIGGERED",[603,3.74]],["text/api/common/#pytestlab.common.enums.BurstMode.TRIGGERED",[]],["title/api/common/#pytestlab.common.enums.ModulationSource",[629,5.777]],["text/api/common/#pytestlab.common.enums.ModulationSource",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.enums.ModulationSource.CH1",[642,4.859]],["text/api/common/#pytestlab.common.enums.ModulationSource.CH1",[]],["title/api/common/#pytestlab.common.enums.ModulationSource.CH2",[643,5.559]],["text/api/common/#pytestlab.common.enums.ModulationSource.CH2",[]],["title/api/common/#pytestlab.common.enums.ModulationSource.EXTERNAL",[644,4.967]],["text/api/common/#pytestlab.common.enums.ModulationSource.EXTERNAL",[]],["title/api/common/#pytestlab.common.enums.ModulationSource.INTERNAL",[645,4.587]],["text/api/common/#pytestlab.common.enums.ModulationSource.INTERNAL",[]],["title/api/common/#pytestlab.common.enums.OutputLoadImpedance",[624,3.941]],["text/api/common/#pytestlab.common.enums.OutputLoadImpedance",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.enums.OutputLoadImpedance.DEFAULT",[349,2.962]],["text/api/common/#pytestlab.common.enums.OutputLoadImpedance.DEFAULT",[]],["title/api/common/#pytestlab.common.enums.OutputLoadImpedance.FIFTY_OHM",[646,6.413]],["text/api/common/#pytestlab.common.enums.OutputLoadImpedance.FIFTY_OHM",[]],["title/api/common/#pytestlab.common.enums.OutputLoadImpedance.INFINITY",[648,5.223]],["text/api/common/#pytestlab.common.enums.OutputLoadImpedance.INFINITY",[]],["title/api/common/#pytestlab.common.enums.OutputLoadImpedance.MAXIMUM",[649,4.967]],["text/api/common/#pytestlab.common.enums.OutputLoadImpedance.MAXIMUM",[]],["title/api/common/#pytestlab.common.enums.OutputLoadImpedance.MINIMUM",[650,5.777]],["text/api/common/#pytestlab.common.enums.OutputLoadImpedance.MINIMUM",[]],["title/api/common/#pytestlab.common.enums.OutputPolarity",[625,5.223]],["text/api/common/#pytestlab.common.enums.OutputPolarity",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.enums.OutputPolarity.INVERTED",[651,5.378]],["text/api/common/#pytestlab.common.enums.OutputPolarity.INVERTED",[]],["title/api/common/#pytestlab.common.enums.OutputPolarity.NORMAL",[634,4.306]],["text/api/common/#pytestlab.common.enums.OutputPolarity.NORMAL",[]],["title/api/common/#pytestlab.common.enums.SCPIOnOff",[620,3.777]],["text/api/common/#pytestlab.common.enums.SCPIOnOff",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.enums.SCPIOnOff.OFF",[]],["text/api/common/#pytestlab.common.enums.SCPIOnOff.OFF",[]],["title/api/common/#pytestlab.common.enums.SCPIOnOff.ON",[]],["text/api/common/#pytestlab.common.enums.SCPIOnOff.ON",[]],["title/api/common/#pytestlab.common.enums.SweepSpacing",[652,5.777]],["text/api/common/#pytestlab.common.enums.SweepSpacing",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.enums.SweepSpacing.LINEAR",[653,5.777]],["text/api/common/#pytestlab.common.enums.SweepSpacing.LINEAR",[]],["title/api/common/#pytestlab.common.enums.SweepSpacing.LOGARITHMIC",[654,6.413]],["text/api/common/#pytestlab.common.enums.SweepSpacing.LOGARITHMIC",[]],["title/api/common/#pytestlab.common.enums.SyncMode",[628,5.559]],["text/api/common/#pytestlab.common.enums.SyncMode",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.enums.SyncMode.CARRIER",[655,5.777]],["text/api/common/#pytestlab.common.enums.SyncMode.CARRIER",[]],["title/api/common/#pytestlab.common.enums.SyncMode.MARKER",[656,5.777]],["text/api/common/#pytestlab.common.enums.SyncMode.MARKER",[]],["title/api/common/#pytestlab.common.enums.SyncMode.NORMAL",[634,4.306]],["text/api/common/#pytestlab.common.enums.SyncMode.NORMAL",[]],["title/api/common/#pytestlab.common.enums.TriggerSlope",[622,5.378]],["text/api/common/#pytestlab.common.enums.TriggerSlope",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.enums.TriggerSlope.ALTERNATING",[657,6.413]],["text/api/common/#pytestlab.common.enums.TriggerSlope.ALTERNATING",[]],["title/api/common/#pytestlab.common.enums.TriggerSlope.EITHER",[]],["text/api/common/#pytestlab.common.enums.TriggerSlope.EITHER",[]],["title/api/common/#pytestlab.common.enums.TriggerSlope.NEGATIVE",[660,5.378]],["text/api/common/#pytestlab.common.enums.TriggerSlope.NEGATIVE",[]],["title/api/common/#pytestlab.common.enums.TriggerSlope.POSITIVE",[423,4.245]],["text/api/common/#pytestlab.common.enums.TriggerSlope.POSITIVE",[]],["title/api/common/#pytestlab.common.enums.TriggerSource",[627,5.777]],["text/api/common/#pytestlab.common.enums.TriggerSource",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.enums.TriggerSource.BUS",[662,5.378]],["text/api/common/#pytestlab.common.enums.TriggerSource.BUS",[]],["title/api/common/#pytestlab.common.enums.TriggerSource.EXTERNAL",[644,4.967]],["text/api/common/#pytestlab.common.enums.TriggerSource.EXTERNAL",[]],["title/api/common/#pytestlab.common.enums.TriggerSource.IMMEDIATE",[424,4.967]],["text/api/common/#pytestlab.common.enums.TriggerSource.IMMEDIATE",[]],["title/api/common/#pytestlab.common.enums.TriggerSource.TIMER",[663,5.777]],["text/api/common/#pytestlab.common.enums.TriggerSource.TIMER",[]],["title/api/common/#pytestlab.common.enums.VoltageUnit",[626,5.378]],["text/api/common/#pytestlab.common.enums.VoltageUnit",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.enums.VoltageUnit.DBM",[664,5.088]],["text/api/common/#pytestlab.common.enums.VoltageUnit.DBM",[]],["title/api/common/#pytestlab.common.enums.VoltageUnit.VPP",[665,5.378]],["text/api/common/#pytestlab.common.enums.VoltageUnit.VPP",[]],["title/api/common/#pytestlab.common.enums.VoltageUnit.VRMS",[666,5.378]],["text/api/common/#pytestlab.common.enums.VoltageUnit.VRMS",[]],["title/api/common/#pytestlab.common.enums.WaveformType",[621,4.188]],["text/api/common/#pytestlab.common.enums.WaveformType",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.enums.WaveformType.ARB",[667,4.587]],["text/api/common/#pytestlab.common.enums.WaveformType.ARB",[]],["title/api/common/#pytestlab.common.enums.WaveformType.DC",[668,4.134]],["text/api/common/#pytestlab.common.enums.WaveformType.DC",[]],["title/api/common/#pytestlab.common.enums.WaveformType.NOISE",[669,5.223]],["text/api/common/#pytestlab.common.enums.WaveformType.NOISE",[]],["title/api/common/#pytestlab.common.enums.WaveformType.PULSE",[671,4.859]],["text/api/common/#pytestlab.common.enums.WaveformType.PULSE",[]],["title/api/common/#pytestlab.common.enums.WaveformType.RAMP",[673,4.859]],["text/api/common/#pytestlab.common.enums.WaveformType.RAMP",[]],["title/api/common/#pytestlab.common.enums.WaveformType.SINE",[674,5.223]],["text/api/common/#pytestlab.common.enums.WaveformType.SINE",[]],["title/api/common/#pytestlab.common.enums.WaveformType.SQUARE",[676,4.509]],["text/api/common/#pytestlab.common.enums.WaveformType.SQUARE",[]],["title/api/common/#health-checks",[194,2.388,617,3.741]],["text/api/common/#health-checks",[]],["title/api/common/#pytestlab.common.health",[617,5.088]],["text/api/common/#pytestlab.common.health",[]],["title/api/common/#pytestlab.common.health.HealthReport",[678,5.378]],["text/api/common/#pytestlab.common.health.HealthReport",[14,3.998,679,8.27]],["title/api/common/#pytestlab.common.health.HealthReport.backend_status",[680,5.777]],["text/api/common/#pytestlab.common.health.HealthReport.backend_status",[]],["title/api/common/#pytestlab.common.health.HealthReport.errors",[97,2.666]],["text/api/common/#pytestlab.common.health.HealthReport.errors",[]],["title/api/common/#pytestlab.common.health.HealthReport.instrument_idn",[681,5.378]],["text/api/common/#pytestlab.common.health.HealthReport.instrument_idn",[]],["title/api/common/#pytestlab.common.health.HealthReport.model_config",[682,4.245]],["text/api/common/#pytestlab.common.health.HealthReport.model_config",[]],["title/api/common/#pytestlab.common.health.HealthReport.status",[476,4.509]],["text/api/common/#pytestlab.common.health.HealthReport.status",[]],["title/api/common/#pytestlab.common.health.HealthReport.supported_features",[687,5.777]],["text/api/common/#pytestlab.common.health.HealthReport.supported_features",[]],["title/api/common/#pytestlab.common.health.HealthReport.warnings",[434,3.345]],["text/api/common/#pytestlab.common.health.HealthReport.warnings",[]],["title/api/common/#pytestlab.common.health.HealthStatus",[685,5.378]],["text/api/common/#pytestlab.common.health.HealthStatus",[14,3.967,342,2.564,616,5.947]],["title/api/common/#pytestlab.common.health.HealthStatus.ERROR",[97,2.666]],["text/api/common/#pytestlab.common.health.HealthStatus.ERROR",[]],["title/api/common/#pytestlab.common.health.HealthStatus.OK",[688,5.378]],["text/api/common/#pytestlab.common.health.HealthStatus.OK",[]],["title/api/common/#pytestlab.common.health.HealthStatus.UNKNOWN",[686,4.67]],["text/api/common/#pytestlab.common.health.HealthStatus.UNKNOWN",[]],["title/api/common/#pytestlab.common.health.HealthStatus.WARNING",[434,3.345]],["text/api/common/#pytestlab.common.health.HealthStatus.WARNING",[]],["title/api/config/",[116,2.271]],["text/api/config/",[6,2.713,7,0.678,11,0.497,12,0.412,14,2.443,18,0.543,20,0.56,26,0.6,35,0.535,37,0.323,40,0.481,41,0.476,42,0.486,43,2.014,44,2.52,45,1.101,46,0.6,48,0.439,50,0.481,58,0.458,59,0.476,61,0.509,62,0.446,69,1.089,70,0.678,76,1.252,77,2.984,78,0.755,82,0.701,83,0.962,86,0.551,90,0.458,92,0.95,94,1.052,97,0.336,98,0.412,100,1.17,102,0.378,103,0.492,108,0.932,111,1.307,113,1.715,116,2.443,117,1.054,119,0.367,136,0.41,141,0.626,156,0.938,158,1.18,164,0.53,166,1.054,167,1.562,170,0.543,171,0.476,174,1.674,180,0.777,187,3.921,194,0.41,214,1.799,220,1.191,221,0.678,226,0.788,234,0.687,238,0.33,247,0.439,255,0.467,259,1.357,261,1.213,262,0.962,283,1.176,284,1.284,297,0.995,298,0.569,299,5.199,304,0.871,312,2.062,317,0.454,320,0.551,321,2.191,328,0.897,338,0.364,339,0.35,341,1.236,347,2.407,349,1.496,350,0.6,354,5.224,355,6.074,360,0.551,366,1.109,370,0.481,373,1.425,389,0.886,391,2.37,394,0.255,400,0.916,413,1.374,415,0.569,422,2.059,423,2.144,424,0.626,447,0.626,452,0.296,453,0.678,456,0.701,457,1.595,469,1.109,480,0.982,481,0.578,487,1.572,498,0.6,504,1.008,526,0.422,532,0.515,560,0.361,563,0.45,588,0.926,592,0.569,597,0.6,603,1.259,604,0.678,605,6.816,607,0.45,611,1.117,612,1.171,614,0.642,630,0.589,644,0.626,649,1.18,660,3.106,662,0.678,664,1.712,668,0.982,676,0.569,679,1.81,682,3.633,683,5.489,684,5.189,689,1.444,690,0.642,691,0.678,692,2.443,693,1.523,694,1.437,695,0.678,696,0.809,697,0.809,698,0.809,699,0.809,700,5.962,701,5.283,702,0.659,703,1.437,704,1.437,705,1.077,706,0.936,707,3.494,708,0.528,709,0.879,710,3.345,711,2.454,712,2.946,713,1.208,714,0.659,715,1.523,716,1.982,717,3.22,718,2.317,719,1.602,720,1.523,721,1.154,722,1.536,723,2.345,724,1.089,725,0.678,726,0.809,727,0.589,728,1.437,729,0.809,730,1.908,731,0.809,732,1.712,733,1.154,734,0.378,735,2.158,736,0.809,737,0.347,738,0.729,739,0.589,740,1.471,741,1.437,742,1.805,743,0.643,744,0.729,745,0.771,746,0.879,747,0.701,748,2.287,749,2.963,750,0.879,751,2.907,752,1.038,753,2.364,754,0.701,755,2.062,756,0.589,757,0.543,758,0.6,759,1.054,760,0.763,761,0.995,762,0.589,763,0.982,764,1.372,765,0.809,766,0.678,767,0.879,768,0.809,769,1.961,770,0.879,771,0.701,772,1.437,773,0.701,774,0.879,775,0.701,776,2.241,777,1.277,778,0.439,779,0.521,780,0.809,781,0.701,782,0.879,783,0.56,784,0.535,785,0.809,786,0.809,787,0.809,788,0.809,789,1.437,790,0.729,791,0.701,792,0.879,793,0.701,794,0.486,795,0.678,796,0.809,797,0.809,798,0.809,799,0.729,800,1.24,801,1.154,802,0.879,803,0.729,804,0.729,805,0.678,806,1.235,807,0.729,808,0.701,809,1.32,810,1.32,811,0.701,812,0.701,813,0.613,814,0.729,815,0.879,816,0.729,817,1.32,818,1.544,819,0.763,820,0.763,821,0.701,822,0.729,823,0.701,824,0.729,825,0.809,826,0.729,827,0.626,828,0.763,829,0.678,830,0.879,831,0.701,832,0.729,833,0.763,834,0.729,835,0.701,836,0.763,837,0.701,838,0.879,839,0.809,840,0.763,841,0.729,842,1.437,843,0.613,844,0.509,845,1.712,846,1.635,847,2.604,848,1.437,849,3.336,850,1.546,851,2.918,852,0.678,853,1.602,854,0.997,855,2.158,856,0.458,857,0.879,858,0.497,859,1.18,860,0.729,861,1.208,862,4.864,863,2.697,864,1.277,865,1.023,866,0.729,867,0.659,868,0.729,869,0.678,870,0.642,871,4.51,872,1.858,873,0.809,874,4.125,875,0.729,876,0.701,877,0.809,878,0.729,879,0.659,880,1.871,881,0.613,882,0.745,883,2.036,884,0.642,885,0.729,886,0.467,887,0.678,888,0.535]],["title/api/config/#configuration-models",[44,1.831,116,1.67]],["text/api/config/#configuration-models",[12,4.434,42,5.227,43,5.404,44,4.05,45,5.318,46,6.453,76,3.36,92,3.028,94,1.448,108,1.117,116,3.693,504,5.755,689,4.604,690,6.897,691,7.291]],["title/api/config/#bench-configuration",[45,2.405,116,1.67]],["text/api/config/#bench-configuration",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended",[694,6.049]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended",[14,3.998,679,8.27]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended-attributes",[354,2.796]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended-attributes",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.automation",[86,4.369]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.automation",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.backend_defaults",[604,5.378]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.backend_defaults",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.bench_name",[695,5.378]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.bench_name",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.changelog",[7,5.378]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.changelog",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.continue_on_automation_error",[696,6.413]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.continue_on_automation_error",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.custom_validations",[697,6.413]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.custom_validations",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.description",[187,2.526]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.description",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.experiment",[119,2.91]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.experiment",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.instruments",[94,0.891]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.instruments",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.last_modified",[698,6.413]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.last_modified",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.measurement_plan",[699,6.413]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.measurement_plan",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.model_config",[682,4.245]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.model_config",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.simulate",[37,2.562]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.simulate",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.traceability",[702,5.223]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.traceability",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.version",[18,4.306]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.version",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended-functions",[261,2.402]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended-functions",[]],["title/api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments",[703,6.049]],["text/api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments",[94,1.533,108,1.087,136,1.272,164,1.385,167,1.333,338,1.426,339,1.373,341,1.978,373,2.673,389,2.314,422,4.222,689,4.48,692,2.995,693,8.458,694,7.977,703,7.977,704,7.977,705,4.222,706,5.198]],["title/api/config/#instrument-configuration-models",[44,1.448,94,0.518,116,1.32]],["text/api/config/#instrument-configuration-models",[44,4.05,76,3.36,83,3.876,94,1.448,100,2.747,116,3.079,141,6.733,255,5.021,262,3.876,297,6.81,605,5.923,607,4.84,689,4.604,706,5.342,707,5.534,708,5.678]],["title/api/config/#base-instrument-model",[14,1.512,44,1.448,94,0.518]],["text/api/config/#base-instrument-model",[]],["title/api/config/#pytestlab.config.instrument_config.InstrumentConfig",[710,4.134]],["text/api/config/#pytestlab.config.instrument_config.InstrumentConfig",[14,3.998,679,8.27]],["title/api/config/#pytestlab.config.instrument_config.InstrumentConfig-attributes",[354,2.796]],["text/api/config/#pytestlab.config.instrument_config.InstrumentConfig-attributes",[]],["title/api/config/#pytestlab.config.instrument_config.InstrumentConfig.address",[328,3.777]],["text/api/config/#pytestlab.config.instrument_config.InstrumentConfig.address",[]],["title/api/config/#pytestlab.config.instrument_config.InstrumentConfig.device_type",[707,4.083]],["text/api/config/#pytestlab.config.instrument_config.InstrumentConfig.device_type",[]],["title/api/config/#pytestlab.config.instrument_config.InstrumentConfig.manufacturer",[713,5.088]],["text/api/config/#pytestlab.config.instrument_config.InstrumentConfig.manufacturer",[]],["title/api/config/#pytestlab.config.instrument_config.InstrumentConfig.measurement_accuracy",[714,5.223]],["text/api/config/#pytestlab.config.instrument_config.InstrumentConfig.measurement_accuracy",[]],["title/api/config/#pytestlab.config.instrument_config.InstrumentConfig.model",[44,2.491]],["text/api/config/#pytestlab.config.instrument_config.InstrumentConfig.model",[]],["title/api/config/#pytestlab.config.instrument_config.InstrumentConfig.model_config",[682,4.245]],["text/api/config/#pytestlab.config.instrument_config.InstrumentConfig.model_config",[]],["title/api/config/#pytestlab.config.instrument_config.InstrumentConfig.serial_number",[447,4.967]],["text/api/config/#pytestlab.config.instrument_config.InstrumentConfig.serial_number",[]],["title/api/config/#power-supply",[718,2.649,719,3.5]],["text/api/config/#power-supply",[]],["title/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig",[721,4.859]],["text/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig",[14,3.846,43,5.897,44,3.684,116,3.359,710,6.116,718,5.329,719,7.042]],["title/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig-attributes",[354,2.796]],["text/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig-attributes",[]],["title/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.channels",[722,1.899]],["text/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.channels",[]],["title/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.device_type",[707,4.083]],["text/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.device_type",[]],["title/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.line_regulation",[726,6.413]],["text/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.line_regulation",[]],["title/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.load_regulation",[729,6.413]],["text/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.load_regulation",[]],["title/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.model_config",[682,4.245]],["text/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.model_config",[]],["title/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.over_current_protection",[731,6.413]],["text/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.over_current_protection",[]],["title/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.over_voltage_protection",[736,6.413]],["text/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.over_voltage_protection",[]],["title/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.total_power",[738,5.777]],["text/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.total_power",[]],["title/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig-functions",[261,2.402]],["text/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig-functions",[]],["title/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique",[741,6.049]],["text/api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique",[108,1.018,136,1.191,156,2.726,164,1.297,167,1.249,338,1.335,339,1.286,341,2.011,373,2.503,389,2.167,422,3.954,453,6.643,692,2.805,704,7.471,705,3.954,720,7.921,721,6.001,722,3.174,741,7.471,742,7.426,743,4.16,744,7.135,745,4.988]],["title/api/config/#oscilloscope",[111,2.587]],["text/api/config/#oscilloscope",[]],["title/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig",[747,5.559]],["text/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig",[14,3.998,710,6.357]],["title/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig-attributes",[354,2.796]],["text/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig-attributes",[]],["title/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.bandwidth",[748,5.378]],["text/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.bandwidth",[]],["title/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.channels",[722,1.899]],["text/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.channels",[]],["title/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.device_type",[707,4.083]],["text/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.device_type",[]],["title/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.fft",[752,4.369]],["text/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.fft",[]],["title/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.franalysis",[754,5.559]],["text/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.franalysis",[]],["title/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.function_generator",[757,4.306]],["text/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.function_generator",[]],["title/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.memory",[759,4.437]],["text/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.memory",[]],["title/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.model_config",[682,4.245]],["text/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.model_config",[]],["title/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.sampling_rate",[762,4.67]],["text/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.sampling_rate",[]],["title/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.timebase_settings",[765,6.413]],["text/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.timebase_settings",[]],["title/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.trigger",[603,3.74]],["text/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.trigger",[]],["title/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.waveform_update_rate",[768,6.413]],["text/api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.waveform_update_rate",[]],["title/api/config/#waveform-generator",[220,2.603,769,2.498]],["text/api/config/#waveform-generator",[]],["title/api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig",[771,5.559]],["text/api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig",[14,3.998,710,6.357]],["title/api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig-attributes",[354,2.796]],["text/api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig-attributes",[]],["title/api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.channels",[722,1.899]],["text/api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.channels",[]],["title/api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.device_type",[707,4.083]],["text/api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.device_type",[]],["title/api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.model_config",[682,4.245]],["text/api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.model_config",[]],["title/api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.waveforms",[769,3.397]],["text/api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.waveforms",[]],["title/api/config/#multimeter",[113,4.033]],["text/api/config/#multimeter",[]],["title/api/config/#pytestlab.config.multimeter_config.MultimeterConfig",[775,5.559]],["text/api/config/#pytestlab.config.multimeter_config.MultimeterConfig",[14,3.733,43,5.723,44,3.575,83,4.105,113,5.79,116,3.26,298,6.473,710,5.935,711,5.478,730,5.423,776,6.37]],["title/api/config/#pytestlab.config.multimeter_config.MultimeterConfig-attributes",[354,2.796]],["text/api/config/#pytestlab.config.multimeter_config.MultimeterConfig-attributes",[]],["title/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.autorange",[777,5.378]],["text/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.autorange",[]],["title/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.default_measurement_function",[780,6.413]],["text/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.default_measurement_function",[]],["title/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.device_type",[707,4.083]],["text/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.device_type",[]],["title/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.limits",[48,3.48]],["text/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.limits",[]],["title/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.math_functions",[785,6.413]],["text/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.math_functions",[]],["title/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.measurement_functions",[786,6.413]],["text/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.measurement_functions",[]],["title/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.model_config",[682,4.245]],["text/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.model_config",[]],["title/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.sampling_rates_rps",[787,6.413]],["text/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.sampling_rates_rps",[]],["title/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.trigger_source",[788,6.413]],["text/api/config/#pytestlab.config.multimeter_config.MultimeterConfig.trigger_source",[]],["title/api/config/#dc-active-load",[166,2.58,668,2.404,730,2.196]],["text/api/config/#dc-active-load",[]],["title/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig",[793,5.559]],["text/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig",[14,3.705,43,5.681,44,3.549,83,4.075,116,3.236,166,6.323,668,5.892,710,5.892,711,5.438,730,5.383,776,6.323,794,5.495]],["title/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig-attributes",[354,2.796]],["text/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig-attributes",[]],["title/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.device_type",[707,4.083]],["text/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.device_type",[]],["title/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.environmental",[795,5.378]],["text/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.environmental",[]],["title/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.features",[35,4.245]],["text/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.features",[]],["title/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.general_specifications",[796,6.413]],["text/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.general_specifications",[]],["title/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.model_config",[682,4.245]],["text/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.model_config",[]],["title/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.operating_modes",[797,6.413]],["text/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.operating_modes",[]],["title/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.other_characteristics_typical",[798,6.413]],["text/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.other_characteristics_typical",[]],["title/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.protection",[735,6.413]],["text/api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.protection",[]],["title/api/config/#vector-network-analyzer-vna",[498,2.289,799,2.777,800,2.511,801,2.336]],["text/api/config/#vector-network-analyzer-vna",[]],["title/api/config/#pytestlab.config.vna_config.VNAConfig",[803,5.777]],["text/api/config/#pytestlab.config.vna_config.VNAConfig",[14,3.998,710,6.357]],["title/api/config/#pytestlab.config.vna_config.VNAConfig-attributes",[354,2.796]],["text/api/config/#pytestlab.config.vna_config.VNAConfig-attributes",[]],["title/api/config/#pytestlab.config.vna_config.VNAConfig.device_type",[707,4.083]],["text/api/config/#pytestlab.config.vna_config.VNAConfig.device_type",[]],["title/api/config/#pytestlab.config.vna_config.VNAConfig.if_bandwidth",[804,5.777]],["text/api/config/#pytestlab.config.vna_config.VNAConfig.if_bandwidth",[]],["title/api/config/#pytestlab.config.vna_config.VNAConfig.model_config",[682,4.245]],["text/api/config/#pytestlab.config.vna_config.VNAConfig.model_config",[]],["title/api/config/#pytestlab.config.vna_config.VNAConfig.num_points",[805,5.378]],["text/api/config/#pytestlab.config.vna_config.VNAConfig.num_points",[]],["title/api/config/#pytestlab.config.vna_config.VNAConfig.power_level",[807,5.777]],["text/api/config/#pytestlab.config.vna_config.VNAConfig.power_level",[]],["title/api/config/#pytestlab.config.vna_config.VNAConfig.s_parameters",[808,5.559]],["text/api/config/#pytestlab.config.vna_config.VNAConfig.s_parameters",[]],["title/api/config/#pytestlab.config.vna_config.VNAConfig.start_frequency",[811,5.559]],["text/api/config/#pytestlab.config.vna_config.VNAConfig.start_frequency",[]],["title/api/config/#pytestlab.config.vna_config.VNAConfig.stop_frequency",[812,5.559]],["text/api/config/#pytestlab.config.vna_config.VNAConfig.stop_frequency",[]],["title/api/config/#spectrum-analyzer",[800,3.841,814,4.248]],["text/api/config/#spectrum-analyzer",[]],["title/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig",[816,5.777]],["text/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig",[14,3.998,710,6.357]],["title/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig-attributes",[354,2.796]],["text/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig-attributes",[]],["title/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.attenuation",[817,5.559]],["text/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.attenuation",[]],["title/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.device_type",[707,4.083]],["text/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.device_type",[]],["title/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.frequency_center",[821,5.559]],["text/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.frequency_center",[]],["title/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.frequency_span",[823,5.559]],["text/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.frequency_span",[]],["title/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.model_config",[682,4.245]],["text/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.model_config",[]],["title/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.reference_level",[825,6.413]],["text/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.reference_level",[]],["title/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.resolution_bandwidth",[826,5.777]],["text/api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.resolution_bandwidth",[]],["title/api/config/#power-meter",[718,2.649,829,3.955]],["text/api/config/#power-meter",[]],["title/api/config/#pytestlab.config.power_meter_config.PowerMeterConfig",[831,5.559]],["text/api/config/#pytestlab.config.power_meter_config.PowerMeterConfig",[14,3.998,710,6.357]],["title/api/config/#pytestlab.config.power_meter_config.PowerMeterConfig-attributes",[354,2.796]],["text/api/config/#pytestlab.config.power_meter_config.PowerMeterConfig-attributes",[]],["title/api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.averaging_count",[832,5.777]],["text/api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.averaging_count",[]],["title/api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.device_type",[707,4.083]],["text/api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.device_type",[]],["title/api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.frequency_compensation_value",[834,5.777]],["text/api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.frequency_compensation_value",[]],["title/api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.model_config",[682,4.245]],["text/api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.model_config",[]],["title/api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.power_units",[837,5.559]],["text/api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.power_units",[]],["title/api/config/#virtual-instrument",[94,0.655,158,3.652]],["text/api/config/#virtual-instrument",[]],["title/api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig",[839,6.413]],["text/api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig",[14,3.846,43,5.897,44,3.684,94,1.318,116,3.359,158,7.348,710,6.116]],["title/api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig-attributes",[354,2.796]],["text/api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig-attributes",[]],["title/api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig.device_type",[707,4.083]],["text/api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig.device_type",[]],["title/api/config/#accuracy-specification",[214,2.291,717,3.122]],["text/api/config/#accuracy-specification",[44,4.172,92,3.183,94,1.269,171,5.383,312,5.818,504,6.05,605,6.227,689,4.841,717,6.05,841,8.232,842,8.62]],["title/api/config/#pytestlab.config.accuracy.AccuracySpec",[842,6.049]],["text/api/config/#pytestlab.config.accuracy.AccuracySpec",[14,3.295,167,1.71,170,5.456,174,3.017,214,3.948,259,5.111,312,5.174,321,3.948,391,4.271,679,6.816,705,4.057,716,3.311,717,5.38,776,5.623,843,6.157,844,5.111,845,6.448,846,6.157,847,5.714,848,7.665,849,7.32,850,5.673,851,7.32,852,6.816,853,6.033,854,3.754]],["title/api/config/#pytestlab.config.accuracy.AccuracySpec-attributes",[354,2.796]],["text/api/config/#pytestlab.config.accuracy.AccuracySpec-attributes",[]],["title/api/config/#pytestlab.config.accuracy.AccuracySpec.model_config",[682,4.245]],["text/api/config/#pytestlab.config.accuracy.AccuracySpec.model_config",[]],["title/api/config/#pytestlab.config.accuracy.AccuracySpec.offset_value",[851,5.777]],["text/api/config/#pytestlab.config.accuracy.AccuracySpec.offset_value",[]],["title/api/config/#pytestlab.config.accuracy.AccuracySpec.percent_reading",[849,5.777]],["text/api/config/#pytestlab.config.accuracy.AccuracySpec.percent_reading",[]],["title/api/config/#pytestlab.config.accuracy.AccuracySpec-functions",[261,2.402]],["text/api/config/#pytestlab.config.accuracy.AccuracySpec-functions",[]],["title/api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev",[861,5.088]],["text/api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev",[20,2.505,69,4.053,77,4.17,90,2.053,92,1.261,94,0.97,97,1.506,98,1.847,103,2.201,108,0.465,136,0.545,164,0.593,167,1.879,187,1.426,194,1.834,214,1.759,234,1.633,259,3.564,262,2.527,312,4.445,338,0.61,339,0.588,341,1.853,347,2.284,370,2.155,373,2.873,389,1.91,391,4.505,394,1.14,400,2.653,413,4.445,415,2.546,422,4.28,423,5.675,457,1.783,480,2.334,481,2.59,560,1.615,588,3.444,592,2.546,605,2.467,611,3.614,612,3.075,660,7.624,676,2.546,692,1.282,716,1.476,717,3.752,776,3.921,818,4.053,845,4.496,846,4.294,847,6.028,848,3.416,849,7.114,850,3.212,851,6.289,853,4.207,854,2.617,855,3.621,859,2.805,861,2.873,862,9.834,863,6.243,864,4.753,865,3.805,866,3.262,867,2.949,868,3.262,869,3.037,870,2.873,871,9.834,872,5.381,873,3.621,874,9.501,875,3.262,876,3.139,877,3.621,878,3.262,879,2.949]],["title/api/config/#configuration-loader",[116,1.67,880,4.088]],["text/api/config/#configuration-loader",[61,5.833,76,3.585,108,1.192,116,3.285,234,4.184,614,7.358,730,5.463,880,8.04,881,7.027,882,4.536]],["title/api/config/#pytestlab.config.loader.ConfigLoader",[883,6.049]],["text/api/config/#pytestlab.config.loader.ConfigLoader",[11,5.094,26,6.153,41,4.882,62,4.575,76,3.916,92,2.887,94,1.151,108,1.065,136,1.247,180,5.167,221,6.952,247,4.498,299,3.975,320,5.647,612,4.498,692,2.935,882,4.054,883,9.556,884,6.576,885,7.466,886,4.787,887,6.952,888,5.487]],["title/api/errors/",[97,2.666]],["text/api/errors/",[3,1.601,4,2.425,11,1.351,14,2.9,40,1.308,45,1.121,62,2.076,67,1.476,77,0.834,78,0.769,88,3.195,92,0.766,94,1.586,97,4.524,98,1.919,99,4.242,100,0.695,102,2.729,108,1.238,116,1.746,118,4.105,130,2.113,135,1.546,136,1.076,140,1.498,164,1.171,167,1.489,174,2.655,188,1.183,213,5.056,247,1.193,261,2.679,338,1.206,339,1.161,340,5.153,341,1.854,347,2.538,354,4.46,355,5.169,359,0.466,361,0.986,373,2.261,374,3.467,375,2.304,383,2.552,393,1.744,394,2.748,399,1.572,405,1.193,410,1.336,422,1.097,432,4.692,433,2.591,452,3.383,455,2.186,539,2.461,611,1.138,618,1.844,712,1.436,853,1.632,854,1.015,889,1.98,890,1.744,891,1.744,892,1.98,893,1.417,894,6.249,895,8.232,896,2.799,897,4.848,898,3.653,899,1.906,900,1.246,901,4.651,902,1.98,903,2.198,904,1.601,905,1.455,906,1.295,907,1.666,908,1.744]],["title/api/errors/#exceptions",[99,2.694]],["text/api/errors/#exceptions",[3,6.42,11,5.418,67,5.919,92,3.071,99,4.417,100,2.786,108,1.133,188,4.745,393,6.994,410,5.358,618,7.394,889,7.941,890,6.994,891,6.994,892,7.941,893,5.683]],["title/api/errors/#exception-reference",[40,2.806,99,1.981]],["text/api/errors/#exception-reference",[]],["title/api/errors/#pytestlab.errors.InstrumentConnectionError",[374,4.509]],["text/api/errors/#pytestlab.errors.InstrumentConnectionError",[14,3.056,94,1.658,97,3.97,99,4.011,102,4.901,108,0.969,136,1.134,164,1.234,213,4.985,338,1.271,339,1.223,340,5.509,341,1.879,347,1.894,373,2.382,375,2.178,383,4.943,539,3.763,894,7.088]],["title/api/errors/#pytestlab.errors.InstrumentConnectionError-attributes",[354,2.796]],["text/api/errors/#pytestlab.errors.InstrumentConnectionError-attributes",[]],["title/api/errors/#pytestlab.errors.InstrumentConnectionError.instrument",[94,0.891]],["text/api/errors/#pytestlab.errors.InstrumentConnectionError.instrument",[]],["title/api/errors/#pytestlab.errors.InstrumentConnectionError.message",[213,2.812]],["text/api/errors/#pytestlab.errors.InstrumentConnectionError.message",[]],["title/api/errors/#pytestlab.errors.InstrumentConnectionError-functions",[261,2.402]],["text/api/errors/#pytestlab.errors.InstrumentConnectionError-functions",[]],["title/api/errors/#pytestlab.errors.InstrumentCommunicationError",[405,3.48]],["text/api/errors/#pytestlab.errors.InstrumentCommunicationError",[14,2.899,88,4.348,94,1.554,97,4.251,99,3.878,108,0.919,130,5.185,136,1.075,164,1.171,167,1.455,213,4.738,338,1.205,339,1.16,340,4.852,341,1.937,347,2.32,373,2.259,375,2.332,399,5.113,539,4.608,894,5.307,895,10.192]],["title/api/errors/#pytestlab.errors.InstrumentCommunicationError-attributes",[354,2.796]],["text/api/errors/#pytestlab.errors.InstrumentCommunicationError-attributes",[]],["title/api/errors/#pytestlab.errors.InstrumentCommunicationError.command",[88,2.434]],["text/api/errors/#pytestlab.errors.InstrumentCommunicationError.command",[]],["title/api/errors/#pytestlab.errors.InstrumentCommunicationError.instrument",[94,0.891]],["text/api/errors/#pytestlab.errors.InstrumentCommunicationError.instrument",[]],["title/api/errors/#pytestlab.errors.InstrumentCommunicationError.message",[213,2.812]],["text/api/errors/#pytestlab.errors.InstrumentCommunicationError.message",[]],["title/api/errors/#pytestlab.errors.InstrumentCommunicationError-functions",[261,2.402]],["text/api/errors/#pytestlab.errors.InstrumentCommunicationError-functions",[]],["title/api/errors/#pytestlab.errors.InstrumentParameterError",[896,3.075]],["text/api/errors/#pytestlab.errors.InstrumentParameterError",[14,2.628,94,1.202,97,2.694,99,2.722,108,0.833,136,0.975,140,4.415,164,1.061,167,1.639,213,4.56,338,1.093,339,1.052,340,4.549,341,1.942,347,2.613,373,2.048,375,2.372,394,3.584,422,3.235,452,4.237,853,4.81,854,2.993,894,4.81,895,10.516,897,6.516,898,4.819,899,5.618]],["title/api/errors/#pytestlab.errors.InstrumentParameterError-attributes",[354,2.796]],["text/api/errors/#pytestlab.errors.InstrumentParameterError-attributes",[]],["title/api/errors/#pytestlab.errors.InstrumentParameterError.message",[213,2.812]],["text/api/errors/#pytestlab.errors.InstrumentParameterError.message",[]],["title/api/errors/#pytestlab.errors.InstrumentParameterError.parameter",[452,2.35]],["text/api/errors/#pytestlab.errors.InstrumentParameterError.parameter",[]],["title/api/errors/#pytestlab.errors.InstrumentParameterError.valid_range",[897,3.856]],["text/api/errors/#pytestlab.errors.InstrumentParameterError.valid_range",[]],["title/api/errors/#pytestlab.errors.InstrumentParameterError.value",[394,2.019]],["text/api/errors/#pytestlab.errors.InstrumentParameterError.value",[]],["title/api/errors/#pytestlab.errors.InstrumentParameterError-functions",[261,2.402]],["text/api/errors/#pytestlab.errors.InstrumentParameterError-functions",[]],["title/api/errors/#pytestlab.errors.InstrumentConfigurationError",[900,3.635]],["text/api/errors/#pytestlab.errors.InstrumentConfigurationError",[14,3.075,94,1.66,97,3.985,99,4.027,108,0.975,116,3.722,136,1.141,164,1.242,213,4.994,338,1.278,339,1.231,340,5.524,341,1.884,347,1.906,373,2.396,375,2.186,894,7.116,898,5.337]],["title/api/errors/#pytestlab.errors.InstrumentConfigurationError-attributes",[354,2.796]],["text/api/errors/#pytestlab.errors.InstrumentConfigurationError-attributes",[]],["title/api/errors/#pytestlab.errors.InstrumentConfigurationError.instrument",[94,0.891]],["text/api/errors/#pytestlab.errors.InstrumentConfigurationError.instrument",[]],["title/api/errors/#pytestlab.errors.InstrumentConfigurationError.message",[213,2.812]],["text/api/errors/#pytestlab.errors.InstrumentConfigurationError.message",[]],["title/api/errors/#pytestlab.errors.InstrumentConfigurationError-functions",[261,2.402]],["text/api/errors/#pytestlab.errors.InstrumentConfigurationError-functions",[]],["title/api/errors/#pytestlab.errors.DatabaseError",[901,6.049]],["text/api/errors/#pytestlab.errors.DatabaseError",[14,3.094,97,4.602,99,4.042,108,0.98,118,7.412,136,1.148,164,1.249,213,5.004,338,1.286,339,1.238,340,5.54,341,1.889,347,1.917,373,2.411,375,2.195,432,6.17,894,7.143]],["title/api/errors/#pytestlab.errors.DatabaseError-attributes",[354,2.796]],["text/api/errors/#pytestlab.errors.DatabaseError-attributes",[]],["title/api/errors/#pytestlab.errors.DatabaseError.message",[213,2.812]],["text/api/errors/#pytestlab.errors.DatabaseError.message",[]],["title/api/errors/#pytestlab.errors.DatabaseError.operation",[432,3.345]],["text/api/errors/#pytestlab.errors.DatabaseError.operation",[]],["title/api/errors/#pytestlab.errors.DatabaseError-functions",[261,2.402]],["text/api/errors/#pytestlab.errors.DatabaseError-functions",[]],["title/api/errors/#pytestlab.errors.InstrumentNotFoundError",[902,5.777]],["text/api/errors/#pytestlab.errors.InstrumentNotFoundError",[4,6.639,14,3.452,94,1.43,97,4.282,99,3.577,108,1.094,136,1.281,164,1.394,338,1.436,339,1.382,340,5.412,341,1.526,375,1.942,455,4.566,894,6.321,903,8.516,904,6.201]],["title/api/errors/#pytestlab.errors.InstrumentNotFoundError-functions",[261,2.402]],["text/api/errors/#pytestlab.errors.InstrumentNotFoundError-functions",[]],["title/api/errors/#usage-example",[611,2.441,905,3.122]],["text/api/errors/#usage-example",[45,3.584,62,5.039,77,2.668,78,2.458,94,0.976,97,4.626,98,4.656,99,4.26,102,3.286,108,0.903,118,4.942,135,4.942,167,1.439,174,4.233,247,3.814,359,1.491,361,3.152,373,2.221,374,6.42,375,2.313,383,3.638,432,3.665,433,5.33,452,2.575,712,4.59,896,4.863,898,3.913,901,8.612,906,4.14,907,5.325,908,5.576]],["title/api/experiments/",[118,2.622,119,1.692,167,0.588]],["text/api/experiments/",[6,0.603,11,0.335,12,2.018,13,0.897,20,1.194,21,0.713,23,1.795,26,0.206,41,0.164,42,0.629,53,0.108,54,1.299,60,0.399,67,0.187,77,2.762,78,1.478,79,1.662,89,0.471,92,1.174,94,0.423,97,0.116,98,1.468,99,0.633,100,2.226,101,0.62,103,0.169,105,0.906,108,0.78,109,0.203,116,0.193,118,0.563,119,3.488,120,1.06,125,0.192,136,1.012,145,0.347,156,0.594,164,0.908,167,1.681,170,0.366,171,1.017,174,0.794,176,0.397,180,1.19,182,0.169,187,1.988,188,0.563,189,1.873,191,1.236,194,0.405,202,1.699,221,0.233,225,0.914,226,2.772,232,0.154,234,0.778,235,0.951,244,0.159,245,0.184,253,0.211,255,1.235,259,0.503,261,2.077,262,1.283,265,2.947,283,3.376,284,0.166,290,2.142,297,0.356,299,0.723,312,0.177,313,0.554,317,0.587,320,1.319,332,0.171,333,0.81,338,0.935,339,1.232,340,0.421,341,1.92,342,1.846,343,0.749,347,1.584,349,1.951,354,2.335,355,1.844,356,0.434,357,0.196,361,0.359,366,0.397,367,0.192,369,0.274,370,0.324,372,3.292,373,1.25,375,1.327,376,0.331,380,1.259,383,0.663,389,2.535,390,0.516,392,0.189,394,3.261,400,1.419,411,1.19,413,0.347,415,0.383,422,1.349,423,0.184,432,0.145,433,1.688,434,0.9,437,0.713,449,0.221,451,3.001,452,3.034,455,3.298,457,1.053,458,2.016,468,0.758,469,0.537,480,1.248,486,0.81,487,0.203,490,0.472,504,0.184,523,2.493,526,3.403,546,1.503,547,0.251,558,1.164,559,1.88,560,2.845,566,2.58,569,0.39,572,0.215,578,0.563,579,0.233,587,3.623,595,1.416,596,0.86,598,0.215,606,0.206,607,0.446,611,0.78,612,0.296,614,0.221,644,0.215,645,0.748,647,0.606,686,0.583,689,0.914,690,0.221,706,1.549,708,0.182,716,2.942,733,1.308,734,2.549,737,2.38,739,0.761,740,0.371,745,1.181,751,0.674,752,1.59,755,0.713,758,0.594,761,1.991,762,2.096,763,2.886,806,3.007,818,0.199,843,0.413,844,0.948,846,0.211,847,0.383,850,0.593,854,3.139,859,0.422,865,0.187,869,0.233,870,0.829,872,0.545,882,0.947,884,0.221,885,0.251,886,1.561,887,0.233,888,0.692,898,0.155,904,1.557,905,0.692,909,0.302,910,2.584,911,1.614,912,2.262,913,2.201,914,1.102,915,2.59,916,4.286,917,2.806,918,2.697,919,3.888,920,3.102,921,0.81,922,0.221,923,0.666,924,0.206,925,0.233,926,1.248,927,1.266,928,1.647,929,0.233,930,0.635,931,0.491,932,0.514,933,3.831,934,0.852,935,0.583,936,0.278,937,0.422,938,0.971,939,0.514,940,2.093,941,0.432,942,0.906,943,1.851,944,0.278,945,0.906,946,0.514,947,0.457,948,1.422,949,0.852,950,3.372,951,0.986,952,1.9,953,0.992,954,0.652,955,0.492,956,0.692,957,1.168,958,0.278,959,2.414,960,0.694,961,0.227,962,0.278,963,0.278,964,0.545,965,0.457,966,0.761,967,0.278,968,0.251,969,0.422,970,0.514,971,0.251,972,0.606,973,1.043,974,1.098,975,0.278,976,0.278,977,1.044,978,2.689,979,0.278,980,2.37,981,0.278,982,0.278,983,0.514,984,0.211,985,0.721,986,1.678,987,0.572,988,0.227,989,0.203,990,0.251,991,0.514,992,1.406,993,0.514,994,0.635,995,0.545,996,0.545,997,0.545,998,0.491,999,0.324,1000,0.877,1001,0.251,1002,0.278,1003,0.545,1004,0.278,1005,0.545,1006,0.371,1007,0.278,1008,0.545,1009,0.278,1010,3.048,1011,2.593,1012,0.472,1013,0.635,1014,0.472,1015,0.671,1016,0.8,1017,0.877,1018,0.227,1019,0.514,1020,0.251,1021,0.211,1022,0.986,1023,0.942,1024,0.721,1025,0.671,1026,0.278,1027,0.251,1028,2.258,1029,0.278,1030,2.745,1031,0.278,1032,0.233,1033,0.278,1034,0.721,1035,1.628,1036,0.278,1037,0.694,1038,0.81,1039,0.514,1040,0.397,1041,0.251,1042,0.251,1043,3.372,1044,0.8,1045,0.472,1046,0.278,1047,0.278,1048,0.278,1049,0.278,1050,0.278,1051,0.721,1052,2.495,1053,1.281,1054,2.138,1055,1.932,1056,0.491,1057,1.369,1058,0.278,1059,0.278,1060,0.278,1061,0.514,1062,0.545,1063,0.592,1064,0.545,1065,0.755,1066,2.185,1067,0.755,1068,2.435,1069,0.755,1070,1.555,1071,3.659,1072,4.342,1073,2.937,1074,0.278,1075,2.302,1076,2.563,1077,2.461,1078,0.545,1079,0.545,1080,0.545,1081,0.545,1082,2.076,1083,0.422,1084,0.472,1085,0.933,1086,0.942,1087,1.228,1088,2.897,1089,0.377,1090,0.371,1091,0.8,1092,0.81,1093,0.491,1094,0.491,1095,1.9,1096,0.514,1097,1.726,1098,0.545,1099,0.413,1100,1.422,1101,0.472,1102,1.623,1103,2.308,1104,1.496,1105,2.482,1106,1.855,1107,0.278,1108,0.514,1109,5.073,1110,1.678,1111,1.078,1112,2.022,1113,1.361,1114,2.006,1115,0.472,1116,2.435,1117,0.545,1118,0.721,1119,1.926,1120,1.358,1121,0.62,1122,2.549,1123,1.422,1124,0.514,1125,0.514,1126,0.514,1127,0.514,1128,0.472,1129,0.942,1130,0.545,1131,0.545,1132,1.628,1133,1.628,1134,1.508,1135,0.545,1136,0.545]],["title/api/experiments/#experiments-sweeps",[119,1.692,254,2.888,806,2.133]],["text/api/experiments/#experiments-sweeps",[11,5.658,89,5.423,108,1.183,109,6.704,119,4.177,299,4.415,504,6.095,560,4.105,614,7.304,716,3.751,806,5.267]],["title/api/experiments/#database-results",[118,2.622,254,2.888,560,1.663]],["text/api/experiments/#database-results",[]],["title/api/experiments/#pytestlab.experiments.database.Database",[118,4.509]],["text/api/experiments/#pytestlab.experiments.database.Database",[]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult",[910,4.188]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult",[20,2.853,67,2.769,92,1.437,94,1.264,100,3.146,103,2.507,108,0.53,119,1.871,136,0.62,164,0.675,167,1.689,180,2.103,187,1.624,189,3.85,225,2.184,226,4.709,234,1.86,262,3.773,265,1.905,283,1.779,299,1.978,338,0.695,339,0.669,340,2.167,341,1.92,342,2.808,347,2.407,349,1.905,354,3.303,390,4.039,392,2.81,394,3.134,400,2.842,411,3.85,455,1.829,526,3.267,560,2.793,578,2.9,595,4.752,606,3.061,716,3.707,740,2.81,752,4.268,762,6.161,763,2.659,843,3.125,847,2.9,882,2.017,886,2.382,904,3.003,911,5.854,912,7.39,913,8.557,914,2.902,915,4.508,916,4.462,917,4.884,918,4.334,919,4.84,920,3.85,921,4.852,922,3.272,923,2.625,924,3.061,925,3.459,926,2.659,927,3.4,928,2.693,929,3.459]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult-attributes",[354,2.796]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult-attributes",[]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.envelope",[913,5.223]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.envelope",[]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.instrument",[94,0.891]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.instrument",[]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.measurement_type",[911,4.437]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.measurement_type",[]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.nominal",[930,5.088]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.nominal",[]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.sampling_rate",[762,4.67]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.sampling_rate",[]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.sigma",[846,4.859]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.sigma",[]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.timestamp",[912,4.76]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.timestamp",[]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.units",[226,3.319]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.units",[]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.values",[394,2.019]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.values",[]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult-functions",[261,2.402]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult-functions",[]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__",[932,6.049]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__",[60,3.357,77,2.553,100,2.803,108,0.864,119,3.051,136,1.012,164,1.101,167,1.398,283,4.281,338,1.134,339,1.092,341,2.059,343,1.998,347,1.69,372,4.338,373,2.125,375,1.534,394,3.671,560,2.999,566,3.68,886,5.123,915,5.906,919,5.075,928,5.793,932,6.343,933,8.373,934,8.596,935,6.46,936,6.725,937,5.209,938,5.095]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__",[939,6.049]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__",[23,3.817,77,2.46,100,2.735,108,0.833,119,2.94,136,0.975,164,1.061,167,1.536,283,2.795,338,1.093,339,1.052,341,2.073,343,1.925,354,3.774,372,4.766,373,2.048,375,1.478,389,2.845,394,3.687,487,4.719,560,2.89,566,4.736,886,4.999,915,3.856,916,5.098,917,4.178,918,3.708,919,4.952,920,3.983,933,9.176,939,6.113,940,5.02,941,5.141]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__",[942,5.559]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__",[60,3.321,100,2.783,108,0.855,119,3.019,136,1.001,164,1.089,167,1.388,283,2.87,338,1.122,339,1.08,341,2.085,354,3.841,372,4.829,373,2.102,375,1.518,389,2.701,394,3.706,560,2.967,566,4.82,733,6.673,886,5.087,915,3.959,916,3.919,917,4.289,918,3.806,919,5.039,920,4.089,938,5.041,942,5.768,943,9.09,944,6.654]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__",[945,5.559]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__",[77,2.729,78,2.515,100,2.272,108,0.924,119,3.262,136,1.082,164,1.177,167,1.616,283,3.101,338,1.212,339,1.167,341,2.057,343,2.136,349,3.321,372,5.014,389,2.962,394,3.528,457,3.54,560,3.206,566,5.07,686,5.236,745,3.641,915,4.278,916,4.235,917,4.635,918,4.114,919,5.301,920,4.419,940,5.569,945,6.233,946,6.782]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__",[947,5.378]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__",[42,4.947,78,2.103,92,2.866,94,1.143,100,3.187,108,0.773,119,2.728,136,0.904,164,0.984,167,0.948,188,4.428,226,5.467,283,3.548,320,5.605,333,6.372,338,1.014,339,0.976,341,2.091,342,2.156,372,2.94,375,2.139,376,3.654,389,2.759,394,3.433,560,2.681,910,3.927,911,4.16,912,6.107,915,3.577,919,3.44,947,5.042,948,7.76,949,6.701,950,5.884,951,7.76,952,6.701,953,4.657,954,4.897,955,3.695,956,3.98,957,6.372,958,6.012]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__",[953,4.967]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__",[54,3.221,78,1.301,79,4.101,92,2.015,98,2.951,100,2.905,108,0.478,119,1.687,136,0.559,164,0.609,167,1.673,187,2.279,188,3.114,226,5.135,234,1.677,283,4.279,317,3.25,320,5.459,333,4.481,338,0.627,339,0.604,341,2.149,342,1.861,343,1.105,372,4.495,375,2.263,389,2.903,394,3.664,400,1.249,560,3.166,566,4.384,612,3.139,716,2.357,745,2.929,915,2.213,916,2.19,917,2.397,918,2.127,919,3.31,920,2.285,928,2.429,948,7.557,949,3.029,950,6.574,951,5.457,952,7.07,953,2.88,954,3.029,955,3.555,956,3.83,957,6.206,959,4.852,960,5.015,961,3.029,962,3.719,963,3.719,964,5.786,965,4.852,966,4.213,967,3.719,968,3.349,969,2.88,970,3.507,971,3.349,972,2.817,973,2.573]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.add",[189,3.941]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.add",[20,5.924,21,2.35,23,4.526,60,2.108,89,2.487,92,2.221,100,3.055,108,0.543,119,1.915,136,0.635,164,0.691,167,1.667,170,4.281,180,3.252,189,5.94,283,4.169,312,2.688,338,0.712,339,0.685,341,2.065,347,1.061,366,4.644,372,4.496,373,2.015,375,0.963,394,3.817,400,1.418,433,3.351,434,3.326,449,3.349,547,3.803,560,1.883,566,4.685,579,3.541,596,5.159,598,3.27,644,3.27,734,1.974,844,2.655,865,2.834,904,4.644,915,4.572,916,5.043,917,4.111,918,5.259,919,5.53,920,2.594,926,2.722,938,3.199,950,4.561,974,4.644,975,4.222,976,4.222,977,5.194,978,5.451,979,4.222,980,4.484,981,4.222,982,4.222,983,3.982,984,3.199,985,3.803]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.clear",[235,4.76]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.clear",[77,4.326,100,2.789,108,0.689,119,2.434,136,0.807,156,2.615,164,0.879,167,1.597,235,7.126,283,2.314,338,0.905,339,0.871,341,2.067,347,1.348,349,4.68,369,3.821,372,4.695,375,1.224,394,3.589,400,1.803,433,2.82,434,2.798,560,2.393,566,4.83,578,5.344,686,5.535,904,5.535,915,3.193,916,4.477,917,6.532,918,5.797,919,6.02,920,4.671,950,3.838,972,4.065,986,6.589,987,6.312,988,4.37,989,3.907]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.get",[]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.get",[23,3.524,77,2.271,100,2.591,108,0.769,119,2.715,136,0.9,145,5.22,164,0.98,167,1.586,244,3.423,283,2.581,313,4.14,338,1.009,339,0.971,341,2.035,343,2.436,372,4.575,373,1.891,375,1.365,389,2.753,394,3.627,413,5.22,560,2.668,566,4.487,607,4.565,706,3.677,844,3.763,854,2.764,915,3.56,916,5.51,917,3.857,918,3.423,919,4.691,920,3.677,933,9.411,940,6.351,941,4.747,986,7.108,990,5.389]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all",[991,6.049]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all",[108,1.051,119,3.711,136,1.23,164,1.339,167,1.29,338,1.379,339,1.328,341,1.801,389,2.976,394,2.575,560,3.648,904,7.318,914,3.133,915,4.868,916,4.818,917,5.273,918,4.68,919,5.749,920,5.027,921,6.336,986,8.712,991,7.716]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.items",[928,4.188]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.items",[108,1.102,119,3.89,136,1.29,164,1.404,338,1.445,339,1.392,341,1.853,389,3.038,526,5.393,560,3.823,928,7.53,974,7.53,992,6.983]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.keys",[927,3.48]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.keys",[108,1.102,119,3.89,136,1.29,164,1.404,338,1.445,339,1.392,341,1.853,389,3.038,526,5.393,560,3.823,927,6.256,974,7.53,992,6.983]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft",[993,6.049]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft",[23,3.681,78,2.186,94,0.868,100,1.299,108,0.528,119,1.865,136,0.618,156,2.601,164,0.673,167,1.655,180,3.187,182,2.498,187,1.619,202,4.551,226,4.372,232,2.269,255,4.366,265,4.733,338,0.693,339,0.667,341,2.056,347,1.033,372,2.01,373,1.975,375,0.938,389,2.068,394,3.425,411,5.191,422,2.052,560,2.786,716,2.546,740,2.801,745,2.081,751,5.445,752,6.982,755,5.058,762,6.967,763,2.65,869,3.447,870,6.701,910,6.248,911,4.324,912,3.051,915,2.446,916,2.421,919,4.832,920,2.526,937,3.184,938,3.114,949,3.348,950,6.041,954,3.348,959,6.34,993,3.877,994,5.133,995,6.249,996,6.249,997,6.249,998,5.629,999,3.718,1000,5.241,1001,3.703,1002,4.111,1003,6.249,1004,4.111,1005,6.249,1006,4.258,1007,4.111,1008,6.249,1009,4.111]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.save",[587,4.509]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.save",[12,5.343,77,2.009,92,2.299,100,2.086,108,0.427,119,1.507,136,0.5,164,0.544,167,1.381,265,4.542,283,3.547,290,6.358,338,0.56,339,0.539,341,1.906,342,0.871,347,0.835,372,4.022,373,1.05,375,1.998,376,2.019,380,2.643,394,3.298,433,4.321,434,3.926,560,1.481,566,3.612,587,8.127,607,1.85,716,2.689,872,4.497,915,3.927,916,5.414,917,5.301,918,4.704,919,5.889,920,4.056,930,4.2,938,2.517,950,7.21,959,8.003,977,5.376,978,4.202,980,4.641,1010,10.778,1011,8.279,1012,4.589,1013,4.2,1014,4.589,1015,5.535,1016,6.6,1017,6.314,1018,2.706,1019,3.134,1020,2.993,1021,2.517]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values",[985,5.777]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values",[108,1.038,119,3.663,136,1.215,156,3.43,164,1.322,167,1.273,338,1.361,339,1.311,341,1.787,347,2.029,394,3.405,560,3.6,904,7.26,914,3.093,915,4.805,916,4.756,917,5.205,918,4.619,919,5.703,920,4.962,921,6.254,985,7.273,986,8.642]],["title/api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict",[992,5.223]],["text/api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict",[92,2.672,108,0.699,119,4.033,136,0.818,164,0.89,167,1.666,283,3.308,313,5.307,338,0.916,339,0.882,341,2.021,342,1.424,349,2.511,367,3.761,372,4.347,380,3.829,389,2.641,394,3.752,526,5.511,560,4.305,566,4.198,886,4.43,910,6.306,915,3.235,916,5.687,917,3.504,918,3.11,919,4.388,920,3.341,927,4.163,950,3.888,952,4.427,972,4.118,978,6.482,992,4.427,1022,7.235,1023,6.909,1024,8.007,1025,4.559,1026,5.436,1027,4.896]],["title/api/experiments/#experiments-sweeps_1",[119,1.692,254,2.888,806,2.133]],["text/api/experiments/#experiments-sweeps_1",[]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment",[119,2.91]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment",[12,3.008,54,3.284,108,0.758,119,4.539,136,0.887,164,0.966,167,1.28,187,3.657,234,3.663,245,3.905,253,4.469,261,2.209,265,4.845,283,2.544,299,2.828,338,0.994,339,0.957,340,3.1,341,1.991,342,2.966,347,1.482,355,3.228,390,3.802,433,3.1,452,2.975,455,4.117,526,4.235,587,4.147,645,5.807,716,2.403,818,4.219,916,5.892,920,4.99,940,4.569,969,4.569,970,5.563,980,5.709,1011,5.313,1013,4.679,1028,6.529,1029,5.899,1030,4.804,1031,5.899,1032,4.947,1033,5.899,1034,5.313,1035,5.563,1036,5.899,1037,5.113,1038,4.569,1039,5.563]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment-attributes",[354,2.796]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment-attributes",[]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment.data",[265,2.962]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment.data",[]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment.description",[187,2.526]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment.description",[]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment.name",[455,2.843]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment.name",[]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment.notes",[1028,4.509]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment.notes",[]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment.parameters",[452,2.35]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment.parameters",[]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment-functions",[261,2.402]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment-functions",[]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__",[942,5.559]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__",[108,1.031,119,4.505,136,1.207,164,1.314,167,1.265,265,3.705,297,6.485,338,1.352,339,1.302,341,1.78,342,2.102,526,4.184,733,7.523,940,8.728,942,6.954,943,8.555,992,6.534,1030,8.087,1040,7.231,1041,7.226]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment.__len__",[945,5.559]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment.__len__",[108,1.102,119,4.692,136,1.29,164,1.404,167,1.352,265,3.96,338,1.445,339,1.392,341,1.853,343,2.547,389,3.038,457,5.092,945,7.432,946,8.087,1030,8.423]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment.__str__",[953,4.967]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment.__str__",[42,4.835,54,5.132,79,5.743,108,0.747,119,5.021,136,0.875,164,0.952,167,0.917,171,4.736,187,2.291,265,4.986,284,3.461,317,4.517,338,0.98,339,0.944,341,1.983,342,2.415,375,2.381,389,2.521,394,1.831,433,4.226,452,2.946,914,2.228,916,3.426,920,3.574,940,7.139,952,6.55,953,4.505,956,3.85,1028,5.654,1030,8.099,1037,6.971,1038,7.139,1042,5.239,1043,4.888,1044,9.217,1045,5.042,1046,5.816,1047,5.816,1048,5.816,1049,5.816,1050,5.816]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter",[1051,5.777]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter",[23,5.152,100,3.104,108,0.846,119,4.748,136,0.99,164,1.078,167,1.379,187,2.593,189,5.375,226,5.797,262,2.935,338,1.11,339,1.068,341,1.568,342,3.079,347,1.654,349,3.041,452,4.252,455,5.067,458,2.886,926,5.638,1028,7.875,1039,6.209,1051,5.93]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial",[1023,5.777]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial",[13,3.111,20,3.617,23,4.805,54,1.821,92,1.139,97,1.36,98,1.668,99,3.654,100,1.652,101,4.049,108,0.42,119,3.701,136,0.492,164,0.535,167,1.286,171,3.079,174,3.631,187,2.059,189,4.014,194,1.656,225,2.769,234,2.358,265,4.519,283,3.519,320,2.228,338,0.551,339,0.531,341,1.559,342,1.712,347,0.822,349,1.51,357,2.299,361,2.929,372,2.557,373,2.749,375,1.702,380,1.632,383,4.223,394,2.987,422,4.343,452,3.584,458,1.434,469,2.686,486,4.049,526,4.537,558,3.143,566,1.789,689,3.459,690,2.594,716,3.04,910,6.196,914,2.502,916,6.527,920,5.831,926,4.81,928,2.136,935,2.381,960,2.835,978,5.194,980,6.422,983,3.084,992,4.258,1022,4.931,1023,2.946,1025,4.384,1030,6.645,1045,2.835,1051,2.946,1052,9.043,1053,7.461,1054,9.783,1055,2.195,1056,4.709,1057,5.919,1058,3.27,1059,3.27,1060,3.27]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials",[1061,6.049]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials",[108,1.094,119,4.672,136,1.281,164,1.394,167,1.342,176,7.499,265,3.933,338,1.436,339,1.382,341,1.846,347,2.14,433,5.818,916,6.066,1030,8.388,1061,8.032]],["title/api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet",[1034,5.777]],["text/api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet",[12,5.882,100,2.16,108,0.878,119,4.068,136,1.028,164,1.119,167,1.078,171,5.281,187,2.692,265,4.141,290,5.229,338,1.152,339,1.109,341,1.607,342,2.622,347,1.718,375,1.559,433,3.592,452,2.504,458,2.997,587,7.755,645,6.413,916,5.281,980,6.304,1011,9.934,1019,6.447,1034,6.157,1035,10.402,1062,8.966]],["title/api/experiments/#pytestlab.experiments.sweep",[806,3.669]],["text/api/experiments/#pytestlab.experiments.sweep",[]],["title/api/experiments/#pytestlab.experiments.sweep-attributes",[354,2.796]],["text/api/experiments/#pytestlab.experiments.sweep-attributes",[]],["title/api/experiments/#pytestlab.experiments.sweep.R",[569,4.587]],["text/api/experiments/#pytestlab.experiments.sweep.R",[]],["title/api/experiments/#pytestlab.experiments.sweep.T",[1064,6.413]],["text/api/experiments/#pytestlab.experiments.sweep.T",[]],["title/api/experiments/#pytestlab.experiments.sweep.grid_sweep_impl",[1065,6.049]],["text/api/experiments/#pytestlab.experiments.sweep.grid_sweep_impl",[]],["title/api/experiments/#pytestlab.experiments.sweep.gwass_impl",[1067,6.049]],["text/api/experiments/#pytestlab.experiments.sweep.gwass_impl",[]],["title/api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep_impl",[1069,6.049]],["text/api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep_impl",[]],["title/api/experiments/#pytestlab.experiments.sweep-classes",[299,3.075]],["text/api/experiments/#pytestlab.experiments.sweep-classes",[]],["title/api/experiments/#pytestlab.experiments.sweep.ParameterSpace",[1071,4.859]],["text/api/experiments/#pytestlab.experiments.sweep.ParameterSpace",[6,2.545,13,3.998,21,3.011,77,2.053,79,4.415,89,2.01,100,2.123,101,2.644,108,0.439,119,1.549,125,2.362,136,0.513,164,0.559,167,1.519,171,2.01,187,1.344,234,1.54,255,3.124,261,2.026,262,3.953,283,4.473,299,1.637,338,0.575,339,0.554,340,1.794,341,1.727,342,2.525,347,2.094,349,3.103,372,2.645,373,1.079,389,1.48,394,1.703,400,3.415,422,1.704,432,1.78,451,4.866,452,3.922,455,4.955,457,2.663,458,1.497,468,2.719,523,6.292,526,5.409,559,3.533,689,1.808,706,3.324,708,2.229,745,2.739,758,2.534,806,3.844,843,2.586,854,5.202,882,3.286,914,2.072,927,1.852,966,3.939,978,2.173,1055,3.632,1072,6.34,1073,5.674,1074,3.413,1075,4.388,1076,5.132,1077,4.928,1078,5.409,1079,5.409,1080,5.409,1081,5.409,1082,3.186,1083,4.19,1084,4.689,1085,3.939,1086,3.075]],["title/api/experiments/#pytestlab.experiments.sweep.ParameterSpace-attributes",[354,2.796]],["text/api/experiments/#pytestlab.experiments.sweep.ParameterSpace-attributes",[]],["title/api/experiments/#pytestlab.experiments.sweep.ParameterSpace.constraint",[1072,4.587]],["text/api/experiments/#pytestlab.experiments.sweep.ParameterSpace.constraint",[]],["title/api/experiments/#pytestlab.experiments.sweep.ParameterSpace.names",[455,2.843]],["text/api/experiments/#pytestlab.experiments.sweep.ParameterSpace.names",[]],["title/api/experiments/#pytestlab.experiments.sweep.ParameterSpace.ranges",[854,2.962]],["text/api/experiments/#pytestlab.experiments.sweep.ParameterSpace.ranges",[]],["title/api/experiments/#pytestlab.experiments.sweep.ParameterSpace-functions",[261,2.402]],["text/api/experiments/#pytestlab.experiments.sweep.ParameterSpace-functions",[]],["title/api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session",[1087,5.223]],["text/api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session",[108,0.72,116,2.776,119,2.544,136,0.843,164,0.918,167,1.236,180,3.998,187,3.088,261,2.936,262,3.496,338,0.945,339,0.91,347,1.97,349,2.59,389,2.473,394,3.243,451,3.569,452,3.91,455,4.008,458,2.458,596,5.263,689,4.152,806,3.208,847,3.942,854,3.621,888,3.712,928,3.662,1043,4.765,1055,3.764,1057,7.171,1071,7.416,1072,7.835,1073,8.132,1075,6.393,1076,3.764,1077,3.614,1086,5.05,1087,4.567,1088,6.33,1089,3.879,1090,5.341,1091,9.039,1092,4.343,1093,7.061,1094,7.061]],["title/api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters",[1095,5.223]],["text/api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters",[108,0.833,119,2.94,136,0.975,164,1.061,167,1.022,187,2.552,255,3.743,283,4.486,338,1.093,339,1.052,341,2.04,373,2.048,389,2.845,422,3.235,451,6.204,452,3.81,455,5.047,523,6.792,806,3.708,854,5.258,888,5.73,1055,4.351,1071,4.91,1072,4.635,1075,4.232,1076,5.811,1077,5.58,1086,7.796,1087,5.278,1088,3.983,1095,7.049]],["title/api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid",[1096,6.049]],["text/api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid",[6,4.347,100,2.549,108,0.751,119,2.651,136,0.879,164,0.957,167,1.272,187,3.177,194,4.085,225,3.095,283,4.663,338,0.985,339,0.948,341,1.786,342,2.114,372,2.858,389,2.726,394,2.54,400,3.348,452,3.83,455,2.591,458,2.562,468,5.009,469,4.145,526,5.638,806,3.343,882,4.873,914,3.09,978,3.72,1072,7.126,1085,5.875,1096,5.511,1097,10.811,1098,8.068,1099,6.112,1100,8.715,1101,5.065]],["title/api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function",[1102,5.378]],["text/api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function",[98,4.905,100,1.703,108,0.692,119,2.445,136,0.811,164,0.882,167,1.661,187,3.003,202,3.924,261,4.144,332,3.312,338,0.908,339,1.237,341,1.724,349,2.489,370,4.536,389,2.882,394,1.697,400,1.81,415,5.361,423,3.567,452,3.969,455,3.922,458,2.363,526,3.976,546,7.409,559,6.282,572,4.174,689,2.854,716,3.106,758,5.659,806,3.083,888,3.567,898,3,905,3.567,978,3.431,1043,5.377,1072,6.327,1085,3.924,1088,5.437,1095,4.389,1100,8.344,1101,4.671,1102,4.519,1103,5.609,1104,4.671,1105,6.209,1106,3.474,1107,5.389]],["title/api/experiments/#pytestlab.experiments.sweep.Sweep",[806,3.669]],["text/api/experiments/#pytestlab.experiments.sweep.Sweep",[11,5.457,26,6.591,41,5.23,92,3.093,108,1.141,119,4.028,136,1.336,221,7.446,299,4.258,320,6.049,806,6.041,884,7.044,885,7.998,886,5.128,887,7.446]],["title/api/experiments/#pytestlab.experiments.sweep-functions",[261,2.402]],["text/api/experiments/#pytestlab.experiments.sweep-functions",[]],["title/api/experiments/#pytestlab.experiments.sweep.f_evaluate",[1108,6.049]],["text/api/experiments/#pytestlab.experiments.sweep.f_evaluate",[108,1.141,119,4.028,136,1.336,164,1.454,167,1.4,338,1.497,339,1.441,375,2.409,389,2.429,523,5.799,559,5.799,806,5.08,1043,6.418,1108,8.375]],["title/api/experiments/#pytestlab.experiments.sweep.grid_sweep",[1066,5.559]],["text/api/experiments/#pytestlab.experiments.sweep.grid_sweep",[77,3.262,78,2.243,136,0.965,167,1.633,187,3.385,261,2.402,283,3.707,339,1.041,347,1.612,349,3.97,380,3.202,389,2.351,451,4.083,452,3.149,455,2.844,480,5.541,523,4.189,526,3.345,559,4.189,560,2.86,611,3.32,706,5.282,716,3.95,734,4.019,737,3.687,761,5.614,806,4.918,844,4.034,1000,5.379,1055,4.306,1066,5.56,1071,4.86,1073,4.761,1075,4.189,1076,5.771,1077,5.541,1082,5.063,1106,5.541,1109,5.224,1110,7.451,1111,4.587,1112,8.404,1113,6.044,1114,4.761,1115,5.56]],["title/api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session",[451,1.963,452,1.13,1055,2.07,1088,1.895]],["text/api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session",[53,1.753,94,1.233,105,7.697,136,1.336,167,1.4,339,1.441,389,2.429,437,4.943,560,3.959,716,4.303,734,4.151,737,3.809,761,5.799,1066,7.697,1088,5.457]],["title/api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint",[1072,4.587]],["text/api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint",[13,1.745,53,0.579,54,1.632,77,3.576,78,2.121,94,0.407,98,2.441,100,0.926,105,5.258,108,0.377,119,1.33,136,1.16,164,0.48,167,1.813,180,1.495,191,3.708,202,4.417,225,1.553,255,1.693,259,1.844,261,2.622,283,2.064,338,0.494,339,1.573,347,1.203,356,1.591,372,1.434,373,0.926,380,1.464,389,2.769,422,1.464,437,2.665,451,4.911,452,2.826,455,2.689,458,3.629,480,3.086,523,1.915,526,1.529,546,2.062,558,2.878,559,1.915,560,3.893,595,2.689,611,1.518,706,2.942,716,3.948,733,2.221,734,4.405,737,4.042,761,5.948,806,4.413,844,1.844,850,2.713,854,3.563,905,1.941,923,1.867,1000,2.459,1043,5.535,1055,3.214,1065,4.515,1066,7.569,1071,6.271,1072,5.007,1073,3.553,1075,3.126,1076,3.214,1077,3.086,1082,4.123,1087,2.388,1088,5.086,1092,2.271,1095,3.899,1102,4.014,1103,4.499,1104,4.149,1105,5.702,1106,3.086,1109,8.244,1110,6.069,1111,2.097,1112,5.258,1113,3.366,1114,4.502,1115,2.542,1116,6.306,1117,1.998,1118,2.641,1119,5.463,1120,4.311,1121,2.271]],["title/api/experiments/#pytestlab.experiments.sweep.gwass",[1068,5.777]],["text/api/experiments/#pytestlab.experiments.sweep.gwass",[21,3.481,77,3.633,78,2.955,92,2.178,136,0.941,167,1.616,187,3.328,261,3.164,283,2.697,339,1.015,347,1.571,349,4.42,380,3.122,389,2.312,451,3.981,452,3.096,455,2.773,457,3.079,523,4.084,526,3.261,559,4.084,560,2.788,611,3.237,706,3.843,716,3.9,734,3.951,737,3.625,739,4.554,763,4.031,859,4.843,886,3.612,973,4.326,1055,4.198,1068,7.611,1071,4.738,1073,4.642,1075,4.084,1076,5.673,1077,5.447,1082,3.683,1106,5.447,1109,5.093,1110,5.421,1111,4.472,1114,4.642,1122,9.027,1123,5.898,1124,5.898,1125,5.898,1126,5.898,1127,5.898,1128,5.421,1129,5.633]],["title/api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint",[1072,4.587]],["text/api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint",[21,1.692,54,1.692,77,3.721,78,2.501,92,1.059,98,2.513,100,0.96,108,0.391,119,1.379,136,1.076,164,0.498,167,1.823,180,1.55,191,3.293,202,3.589,255,1.755,259,1.911,261,2.678,283,1.311,338,0.512,339,1.549,347,1.238,356,1.649,372,1.486,373,0.96,380,1.517,389,2.744,422,1.517,437,1.692,451,4.552,452,2.62,455,2.756,457,1.496,458,3.69,486,3.817,523,1.985,526,1.585,546,2.137,558,2.963,559,1.985,560,2.772,595,2.768,611,1.573,706,1.868,716,3.762,733,2.303,734,4.317,737,4.206,739,2.213,761,3.219,763,1.959,806,1.739,850,2.794,854,3.63,859,2.354,886,1.755,905,2.012,923,1.935,973,2.103,1043,5.612,1055,2.04,1067,4.648,1068,8.317,1071,6.377,1072,5.114,1073,3.658,1075,3.219,1076,3.309,1077,3.177,1082,3.662,1087,2.475,1088,4.395,1092,2.354,1095,4.014,1102,4.133,1103,4.584,1104,4.272,1105,5.824,1106,3.177,1109,8.329,1110,2.634,1111,2.174,1114,4.614,1116,6.441,1117,2.071,1118,2.737,1119,5.6,1120,4.439,1121,2.354,1122,8.709,1123,6.745,1124,2.866,1125,2.866,1126,2.866,1127,2.866,1128,2.634,1129,2.737,1130,4.928,1131,4.928]],["title/api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep",[1070,5.777]],["text/api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep",[77,3.251,78,2.232,136,0.96,167,1.629,187,3.374,261,2.39,283,3.695,339,1.036,347,1.604,349,3.956,380,3.186,389,2.343,451,4.062,452,3.138,455,2.829,457,3.142,480,4.114,523,4.168,526,3.328,559,4.168,560,2.845,611,3.303,647,4.835,706,3.922,716,3.94,734,4.005,737,3.675,739,4.647,763,6.663,806,4.901,844,4.013,973,4.415,1055,4.284,1070,5.748,1071,4.835,1073,4.737,1075,4.168,1076,5.751,1077,5.522,1082,3.759,1106,5.522,1109,5.197,1111,4.564,1112,5.532,1113,6.023,1114,4.737,1132,8.079,1133,8.079]],["title/api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function",[261,1.766,1072,3.373]],["text/api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function",[54,1.532,77,3.841,78,2.608,79,2.624,98,2.317,100,0.869,108,0.353,119,1.248,136,1.013,164,0.45,167,1.812,180,1.403,191,3.073,202,3.308,225,2.406,255,1.589,259,1.73,261,2.523,283,1.959,338,0.464,339,1.494,343,2.001,347,1.141,356,1.493,372,2.838,373,0.869,380,1.373,389,2.66,422,1.373,437,1.532,451,4.288,452,2.941,455,2.573,457,1.355,458,3.52,480,3.74,490,3.938,523,1.797,526,1.435,546,1.934,558,2.731,559,1.797,560,2.587,595,2.552,611,1.424,647,2.084,706,1.691,716,3.618,733,2.084,734,4.152,737,3.81,739,2.003,745,3.411,763,6.723,806,4.593,844,1.73,854,4.252,905,1.821,923,1.751,973,1.903,978,2.892,1043,5.397,1055,1.847,1069,4.285,1070,6.068,1071,6.083,1072,4.818,1073,3.372,1075,2.967,1076,3.05,1077,2.928,1082,3.417,1087,2.241,1088,4.14,1092,2.131,1095,3.7,1102,3.81,1103,4.348,1104,3.938,1105,5.486,1106,2.928,1109,8.091,1111,1.967,1112,5.03,1113,3.194,1114,4.307,1116,6.068,1117,1.874,1118,2.478,1119,5.226,1120,4.092,1121,2.131,1129,4.092,1132,7.033,1133,7.033,1134,8.028,1135,4.543,1136,4.543]],["title/api/instruments/",[94,0.891]],["text/api/instruments/",[1,0.126,3,0.065,4,0.669,6,1.419,9,0.271,11,0.028,12,0.947,13,0.502,14,1.03,15,0.071,18,0.264,20,0.123,21,0.959,23,0.232,24,0.183,32,0.036,35,0.204,37,0.742,38,1.398,40,0.08,41,0.053,42,0.262,43,0.218,44,1.232,47,0.031,48,0.841,50,0.209,53,1.543,54,0.266,58,0.199,59,0.355,60,0.575,61,0.167,62,0.074,67,0.149,69,0.22,70,0.038,72,0.04,76,0.356,77,1.434,78,2.044,79,0.103,82,0.078,83,0.428,85,0.068,86,0.031,88,1.083,89,0.026,90,0.478,92,0.945,93,0.099,94,1.177,95,0.584,96,0.037,97,1.494,98,0.41,99,1.092,100,1.798,101,0.104,102,0.449,103,0.265,108,0.809,109,0.065,110,0.562,111,1.623,112,0.67,113,0.379,114,1.279,115,0.842,116,1.825,117,0.36,119,0.081,120,0.156,121,0.222,126,0.034,130,0.75,135,0.063,136,0.978,140,0.181,141,0.104,142,0.039,145,0.251,150,0.611,152,0.181,156,1.784,157,0.034,159,0.132,160,0.034,161,0.057,162,0.216,164,1.142,166,0.302,167,1.559,168,0.423,170,0.321,171,0.257,174,1.579,176,0.065,177,0.071,180,0.307,182,0.054,184,0.04,186,0.366,187,1.28,188,0.475,189,0.268,191,0.14,194,0.749,195,0.054,200,0.176,202,0.033,203,0.167,205,0.104,206,0.336,207,0.106,213,1.586,214,1.028,215,0.176,220,1.22,225,0.297,226,1.798,227,0.159,229,0.216,232,0.217,234,0.896,235,0.324,238,1.981,243,0.04,244,0.659,245,0.289,247,0.073,250,1.826,253,0.068,254,0.53,255,0.555,256,0.153,257,0.069,259,0.301,261,1.372,262,1.654,264,0.193,265,1.393,266,0.071,269,0.358,270,0.266,271,0.199,275,0.215,279,0.181,283,1.242,284,0.284,288,0.03,290,1.14,291,0.104,292,0.151,293,0.034,294,0.612,295,0.186,296,0.096,297,0.201,298,0.063,299,1.19,300,0.486,303,0.561,304,0.887,305,0.106,308,0.459,309,0.119,310,0.709,312,0.224,313,0.183,315,0.21,316,0.466,317,0.851,318,0.078,319,0.026,320,0.181,321,1.148,323,0.04,328,0.474,329,0.336,331,0.161,332,0.37,333,0.104,336,0.877,337,0.039,338,1.008,339,0.995,340,0.565,341,1.935,342,1.762,343,1.841,344,0.251,347,1.899,349,1.489,350,0.597,352,0.622,354,1.472,355,1.708,356,0.214,358,0.116,359,1.654,360,0.061,361,0.977,362,0.342,366,0.287,367,0.243,368,0.04,369,2.607,370,0.478,372,0.875,373,1.803,374,0.094,375,1.936,376,0.856,379,1.04,380,1.134,383,0.747,384,0.42,386,0.259,387,0.035,388,0.078,389,1.785,390,0.362,391,1.336,392,0.091,394,2.04,395,0.04,396,0.992,397,1.286,398,0.104,399,0.127,400,2.241,403,1.011,405,0.935,407,0.416,408,0.298,410,0.081,411,1.221,413,0.409,415,0.247,416,1.289,417,0.04,420,0.344,421,0.035,422,0.721,423,1.072,424,0.138,427,0.04,428,0.193,429,0.594,432,0.716,433,0.585,434,1.264,437,0.662,438,0.106,439,0.04,440,0.036,443,0.486,444,0.04,445,0.038,446,0.039,447,0.498,448,0.159,449,0.245,451,0.487,452,1.505,453,0.075,454,0.078,455,0.808,456,0.154,457,1.734,458,1.177,465,0.109,466,0.037,468,1.173,469,1.245,471,0.59,472,0.37,473,0.145,476,0.914,478,0.132,479,0.073,480,0.254,481,0.032,482,1.498,484,0.186,486,0.035,487,0.065,491,0.038,492,0.21,493,0.039,494,0.038,495,0.075,496,0.036,497,0.038,498,0.066,504,0.03,506,0.039,508,0.078,509,0.145,513,0.902,523,0.312,526,0.79,530,0.099,532,0.587,534,0.084,535,0.168,539,0.96,552,0.239,556,0.081,557,0.394,558,0.67,559,0.116,560,0.497,563,1.034,564,0.506,565,0.038,566,0.924,569,0.372,570,0.078,571,0.078,572,0.069,575,0.145,577,0.216,578,0.307,579,0.038,582,0.04,583,0.245,584,0.04,586,0.33,588,0.161,591,0.616,592,0.277,593,0.078,595,1.694,596,0.236,597,0.626,598,0.069,600,0.066,601,0.624,602,0.149,603,1.805,605,0.031,606,0.447,607,0.824,608,0.239,609,0.379,611,0.396,612,0.214,613,0.272,616,0.391,617,0.379,620,1.152,621,1.382,622,0.436,623,0.216,624,0.887,625,0.355,626,0.149,627,0.04,628,0.23,629,0.081,630,0.973,631,0.042,634,0.54,635,0.379,636,0.522,637,0.04,638,0.21,639,0.04,640,0.04,642,0.201,643,0.154,644,0.205,645,0.251,647,0.234,648,0.286,649,0.172,650,0.081,651,0.112,652,0.04,653,0.278,655,0.04,656,0.04,660,0.075,662,0.186,663,0.16,664,0.21,665,0.222,666,0.222,667,0.929,668,0.718,669,0.59,670,0.042,671,0.579,672,0.487,673,0.549,674,0.491,675,0.081,676,0.621,677,0.042,678,0.401,680,0.2,681,0.112,682,0.089,685,0.607,686,0.256,687,0.239,688,0.222,689,0.341,691,0.112,692,2.581,705,2.203,706,0.345,707,0.057,708,0.339,710,0.441,712,0.285,714,0.423,715,0.045,716,1.425,717,0.662,718,1.005,719,0.099,721,0.168,722,2.9,724,1.232,727,0.193,730,1.014,732,0.071,733,0.101,734,1.788,737,2,739,0.224,740,1.032,742,0.204,743,2.023,745,1.196,747,0.304,748,0.607,751,0.644,752,1.671,753,0.039,754,0.341,755,1.752,756,0.378,757,0.897,759,0.473,760,0.126,761,1.125,762,0.557,763,0.544,764,0.121,766,0.471,769,1.422,771,0.154,773,0.039,775,0.267,776,0.924,777,0.149,778,1.113,779,0.976,781,0.267,783,0.445,784,0.662,789,0.168,790,0.239,791,0.078,793,0.486,794,0.715,799,0.04,800,0.181,801,0.135,803,0.04,804,0.239,805,0.607,806,0.391,807,0.239,808,0.078,809,0.192,810,0.116,811,0.078,812,0.078,813,0.266,814,0.04,816,0.04,817,0.414,818,0.659,821,0.078,822,0.16,823,0.116,824,0.579,826,0.04,827,0.949,828,0.25,829,0.186,831,0.078,832,0.316,834,0.04,835,0.414,836,0.209,837,0.23,843,0.135,844,0.379,845,0.071,846,0.518,847,0.277,850,1.014,852,0.075,853,0.292,854,1.253,856,2.05,858,0.445,859,0.069,860,0.081,861,0.141,863,0.317,865,0.236,867,0.073,868,0.04,869,0.038,870,0.346,872,0.239,876,0.078,878,0.04,879,0.073,880,0.039,881,0.068,882,0.706,884,0.312,886,0.371,887,0.075,888,0.175,890,0.036,891,0.036,893,0.058,894,0.099,896,1.711,897,0.759,898,0.996,899,0.078,900,1.033,904,0.065,905,0.03,906,0.105,907,0.101,908,0.036,910,0.628,911,0.556,912,0.567,913,0.998,914,1.549,915,0.334,916,0.33,917,0.308,918,0.985,919,1.156,920,0.268,921,0.272,922,0.245,923,0.804,924,0.292,925,0.112,926,0.335,927,0.645,928,0.201,929,0.112,930,0.279,931,0.04,933,0.412,934,0.251,935,0.348,937,0.921,938,0.101,941,0.141,943,0.141,947,0.075,949,0.073,950,0.22,953,0.069,954,0.073,955,0.028,956,0.453,957,0.272,959,0.075,960,0.078,961,0.073,965,0.186,966,0.527,972,0.168,973,0.213,974,0.033,977,0.109,978,0.357,980,0.593,984,0.135,987,0.342,988,0.181,989,0.287,990,0.081,994,0.584,998,0.121,999,0.901,1006,1.219,1012,0.078,1013,0.106,1014,0.116,1015,0.112,1017,0.149,1018,0.073,1021,0.298,1025,0.075,1027,0.04,1028,0.336,1032,0.075,1037,0.039,1040,0.728,1042,0.081,1043,1.833,1045,0.039,1052,0.154,1055,0.09,1057,0.574,1073,0.197,1076,0.264,1077,0.388,1082,0.52,1083,0.435,1084,0.116,1085,0.065,1089,0.691,1090,0.81,1099,0.425,1103,0.944,1105,0.073,1106,0.441,1113,0.423,1114,0.165,1115,0.078,1117,0.121,1121,0.104,1128,0.039,1137,0.084,1138,0.399,1139,0.425,1140,0.557,1141,0.222,1142,0.145,1143,0.509,1144,0.192,1145,0.045,1146,0.961,1147,1.614,1148,0.239,1149,0.265,1150,0.081,1151,0.071,1152,0.239,1153,0.33,1154,0.906,1155,0.643,1156,0.286,1157,0.09,1158,0.265,1159,0.151,1160,0.25,1161,0.081,1162,0.09,1163,0.579,1164,0.176,1165,0.222,1166,0.351,1167,0.961,1168,0.09,1169,0.045,1170,0.09,1171,0.59,1172,0.121,1173,0.081,1174,0.121,1175,0.308,1176,0.222,1177,0.351,1178,0.09,1179,0.134,1180,0.045,1181,0.134,1182,0.216,1183,0.278,1184,0.045,1185,0.389,1186,0.643,1187,0.081,1188,0.09,1189,0.478,1190,0.134,1191,0.045,1192,0.308,1193,0.134,1194,0.045,1195,0.222,1196,0.045,1197,0.09,1198,0.308,1199,0.134,1200,0.09,1201,0.045,1202,0.134,1203,0.239,1204,0.134,1205,0.121,1206,0.121,1207,0.134,1208,0.045,1209,0.265,1210,0.09,1211,0.126,1212,0.045,1213,0.045,1214,0.045,1215,0.134,1216,0.045,1217,0.222,1218,0.351,1219,1.175,1220,0.045,1221,0.149,1222,0.178,1223,0.045,1224,0.045,1225,0.134,1226,0.178,1227,0.2,1228,0.294,1229,0.796,1230,0.36,1231,0.402,1232,0.298,1233,0.09,1234,0.451,1235,0.234,1236,0.09,1237,0.075,1238,0.579,1239,0.09,1240,0.126,1241,0.115,1242,0.134,1243,0.045,1244,0.308,1245,0.126,1246,0.371,1247,0.126,1248,0.045,1249,0.045,1250,0.239,1251,0.045,1252,0.045,1253,0.045,1254,0.134,1255,0.045,1256,0.222,1257,0.084,1258,0.265,1259,0.09,1260,0.178,1261,0.138,1262,0.126,1263,0.09,1264,0.045,1265,0.09,1266,0.134,1267,0.351,1268,0.084,1269,0.078,1270,0.126,1271,0.09,1272,0.457,1273,0.178,1274,0.045,1275,0.557,1276,0.135,1277,0.575,1278,0.251,1279,0.181,1280,1.842,1281,0.201,1282,0.518,1283,0.762,1284,0.251,1285,0.121,1286,0.573,1287,1.701,1288,0.209,1289,0.178,1290,0.192,1291,0.09,1292,0.045,1293,0.23,1294,0.045,1295,0.098,1296,0.045,1297,0.209,1298,0.036,1299,0.112,1300,0.251,1301,0.134,1302,0.245,1303,0.045,1304,0.084,1305,0.126,1306,0.09,1307,0.045,1308,0.084,1309,0.084,1310,0.09,1311,1.171,1312,0.09,1313,0.09,1314,0.286,1315,0.084,1316,0.09,1317,0.216,1318,0.09,1319,0.229,1320,0.25,1321,0.574,1322,0.278,1323,0.154,1324,0.341,1325,0.168,1326,0.414,1327,0.489,1328,0.178,1329,0.084,1330,0.178,1331,0.222,1332,0.09,1333,0.394,1334,0.134,1335,0.134,1336,0.09,1337,0.045,1338,0.134,1339,0.084,1340,0.084,1341,0.134,1342,0.259,1343,0.09,1344,0.168,1345,0.09,1346,0.09,1347,0.134,1348,0.134,1349,0.09,1350,0.045,1351,0.411,1352,0.09,1353,0.045,1354,0.126,1355,0.134,1356,0.084,1357,0.045,1358,0.045,1359,0.355,1360,0.331,1361,0.25,1362,0.186,1363,0.286,1364,1.196,1365,0.045,1366,0.154,1367,0.145,1368,0.045,1369,0.045,1370,0.316,1371,0.239,1372,0.168,1373,0.045,1374,0.168,1375,1.698,1376,1.28,1377,1.374,1378,0.045,1379,1.366,1380,0.126,1381,0.251,1382,0.316,1383,0.09,1384,0.084,1385,0.451,1386,0.643,1387,0.09,1388,0.09,1389,0.542,1390,0.304,1391,0.466,1392,0.126,1393,0.09,1394,0.09,1395,0.09,1396,0.09,1397,0.04,1398,0.045,1399,0.045,1400,0.09,1401,0.16,1402,0.178,1403,1.071,1404,0.491,1405,1.182,1406,0.09,1407,0.756,1408,0.09,1409,0.168,1410,0.084,1411,0.394,1412,0.321,1413,0.045,1414,0.045,1415,0.355,1416,0.134,1417,0.134,1418,0.045,1419,0.09,1420,0.045,1421,0.084,1422,0.121,1423,0.134,1424,0.134,1425,0.409,1426,0.121,1427,0.154,1428,0.178,1429,0.178,1430,0.069,1431,0.084,1432,0.084,1433,0.478,1434,0.045,1435,0.084,1436,0.168,1437,0.084,1438,0.222,1439,0.222,1440,0.331,1441,0.331,1442,1.404,1443,0.25,1444,0.09,1445,0.134,1446,0.16,1447,0.045,1448,0.084,1449,0.09,1450,0.084,1451,0.134,1452,0.09,1453,0.09,1454,0.045,1455,0.045,1456,0.04,1457,0.084,1458,0.16,1459,0.168,1460,0.09,1461,0.084,1462,0.688,1463,0.606,1464,0.084,1465,0.216,1466,0.178,1467,0.045,1468,0.192,1469,0.168,1470,0.154,1471,0.09,1472,0.265,1473,0.045,1474,0.045,1475,0.045,1476,0.078,1477,0.121,1478,0.09,1479,0.078,1480,0.773,1481,0.866,1482,0.045,1483,0.045,1484,0.121,1485,0.045,1486,0.045,1487,0.234,1488,0.265,1489,0.278,1490,0.071,1491,0.239,1492,0.25,1493,0.33,1494,0.134,1495,0.121,1496,0.154,1497,0.308,1498,0.178,1499,0.078,1500,0.09,1501,0.16,1502,0.134,1503,0.134,1504,0.045,1505,0.222,1506,0.154,1507,0.178,1508,0.186,1509,0.09,1510,0.121,1511,1.051,1512,0.134,1513,0.09,1514,0.045,1515,0.045,1516,0.308,1517,0.045,1518,0.222,1519,0.134,1520,0.036,1521,0.09,1522,0.09,1523,0.045,1524,0.045,1525,0.168,1526,0.134,1527,0.16,1528,0.16,1529,0.16,1530,0.09,1531,0.045,1532,0.16,1533,0.16,1534,0.16,1535,0.045,1536,0.084,1537,0.222,1538,0.222,1539,0.09,1540,0.09,1541,0.265,1542,0.09,1543,0.134,1544,0.09,1545,0.134,1546,0.134,1547,0.09,1548,0.09,1549,0.045,1550,0.09,1551,0.034,1552,0.145,1553,0.308,1554,0.09,1555,0.222,1556,0.084,1557,0.045,1558,0.045,1559,0.134,1560,0.045,1561,0.09,1562,0.045,1563,0.09,1564,0.134,1565,0.09,1566,0.045,1567,0.084,1568,0.121,1569,0.168,1570,0.168,1571,0.16,1572,0.121,1573,0.134,1574,0.411,1575,0.084,1576,0.084,1577,0.671,1578,0.134,1579,0.134,1580,0.121,1581,0.355,1582,0.121,1583,0.045,1584,0.272,1585,0.351,1586,0.16,1587,0.341,1588,0.09,1589,0.186,1590,0.084,1591,0.938,1592,0.084,1593,0.731,1594,0.731,1595,0.178,1596,0.084,1597,0.669,1598,0.394,1599,0.43,1600,0.134,1601,0.084,1602,0.793,1603,0.09,1604,0.084,1605,0.084,1606,0.972,1607,0.126,1608,0.316,1609,0.134,1610,0.134,1611,0.09,1612,0.2,1613,0.084,1614,0.045,1615,0.265,1616,0.192,1617,0.094,1618,0.04,1619,0.045,1620,0.045,1621,0.078,1622,0.045,1623,0.045,1624,0.045,1625,0.452,1626,0.126,1627,1.121,1628,1.141,1629,0.084,1630,0.168,1631,0.09,1632,0.154,1633,0.084,1634,0.126,1635,0.084,1636,0.09,1637,0.641,1638,0.081,1639,0.134,1640,0.178,1641,0.045,1642,0.09,1643,0.331,1644,0.09,1645,0.168,1646,0.16,1647,0.078,1648,0.045,1649,0.084,1650,0.09,1651,0.126,1652,0.084,1653,0.2,1654,0.06,1655,0.045,1656,0.209,1657,0.038,1658,0.045,1659,0.084,1660,0.2,1661,0.084,1662,0.16,1663,0.09,1664,0.121,1665,0.045,1666,0.134,1667,0.084,1668,0.542,1669,0.134,1670,0.084,1671,0.351,1672,0.09,1673,0.134,1674,0.09,1675,0.084,1676,0.09,1677,0.09,1678,0.084,1679,0.134,1680,0.522,1681,0.084,1682,0.121,1683,1.286,1684,0.084,1685,0.084,1686,1.05,1687,0.265,1688,0.09,1689,0.09,1690,0.239,1691,0.239,1692,0.09,1693,0.09,1694,0.09,1695,0.045,1696,0.045,1697,0.073,1698,0.178,1699,0.09,1700,0.414,1701,0.121,1702,0.084,1703,0.084,1704,0.045,1705,0.222,1706,0.341,1707,0.239,1708,0.346,1709,0.084,1710,0.267,1711,0.186,1712,0.084,1713,0.25,1714,0.084,1715,0.267,1716,0.316,1717,0.239,1718,0.121,1719,0.045,1720,0.045,1721,0.084,1722,0.049,1723,0.145,1724,0.366,1725,0.045,1726,0.09,1727,0.09,1728,0.09,1729,0.09,1730,0.222,1731,0.078,1732,0.078,1733,0.045,1734,0.134,1735,0.045,1736,0.045,1737,0.045,1738,0.045,1739,0.045,1740,0.205,1741,0.168,1742,0.081,1743,0.045,1744,0.04,1745,0.045,1746,0.126,1747,1.251,1748,0.787,1749,0.265,1750,0.209,1751,0.049,1752,0.126,1753,0.049,1754,0.09,1755,0.049,1756,0.097,1757,0.411,1758,0.097,1759,0.049,1760,0.097,1761,0.049,1762,0.049,1763,0.126,1764,0.278,1765,0.278,1766,0.121,1767,0.25,1768,0.09,1769,0.186,1770,0.045,1771,0.45,1772,0.045,1773,0.045,1774,0.25,1775,0.134,1776,0.946,1777,0.154,1778,0.084,1779,0.522,1780,0.121,1781,0.192,1782,0.084,1783,1.444,1784,1.354,1785,0.272,1786,0.121,1787,0.121,1788,0.272,1789,0.298,1790,0.245,1791,0.084,1792,0.084,1793,0.265,1794,0.084,1795,0.216,1796,0.084,1797,0.084,1798,0.126,1799,0.16,1800,0.23,1801,0.16,1802,0.045,1803,0.112,1804,0.278,1805,0.084,1806,0.149,1807,0.045,1808,0.084,1809,0.045,1810,0.718,1811,0.222,1812,0.186,1813,0.038,1814,0.084,1815,0.645,1816,1.115,1817,0.265,1818,0.084,1819,0.265,1820,0.084,1821,0.222,1822,0.513,1823,1.053,1824,0.168,1825,0.126,1826,0.239,1827,0.913,1828,0.09,1829,0.084,1830,0.209,1831,0.084,1832,0.126,1833,0.084,1834,0.126,1835,0.176,1836,0.192,1837,0.084,1838,0.9,1839,0.616,1840,0.76,1841,0.134,1842,0.291,1843,0.451,1844,0.121,1845,0.121,1846,0.084,1847,0.078,1848,0.331,1849,1.429,1850,0.084,1851,0.178,1852,0.134,1853,0.134,1854,0.134,1855,0.045,1856,0.04,1857,0.178,1858,0.09,1859,0.09,1860,0.222,1861,0.25,1862,0.178,1863,0.168,1864,0.25,1865,0.25,1866,0.25,1867,0.25,1868,0.084,1869,0.084,1870,0.084,1871,0.045,1872,0.09,1873,0.239,1874,0.331,1875,0.331,1876,0.25,1877,0.084,1878,0.084,1879,0.308,1880,0.045,1881,0.09,1882,0.045,1883,0.045,1884,0.045,1885,0.168,1886,0.084,1887,0.168,1888,0.168,1889,0.116,1890,0.222,1891,0.178,1892,0.038,1893,0.245,1894,0.178,1895,0.045,1896,0.045,1897,0.09,1898,0.045,1899,0.045,1900,0.126,1901,0.09,1902,0.084,1903,0.355,1904,0.45,1905,0.084,1906,0.222,1907,0.178,1908,0.134,1909,0.126,1910,0.045,1911,0.045,1912,0.045,1913,0.045,1914,0.045,1915,0.084,1916,0.121,1917,1.227,1918,0.53,1919,0.186,1920,0.045,1921,0.154,1922,0.126,1923,0.126,1924,0.084,1925,0.084,1926,0.045,1927,0.084,1928,0.084,1929,0.351,1930,0.121,1931,0.121,1932,0.121,1933,0.09,1934,0.09,1935,0.178,1936,0.121,1937,0.178,1938,0.09,1939,0.09,1940,0.121,1941,0.355,1942,0.09,1943,0.121,1944,0.121,1945,0.121,1946,0.084,1947,0.134,1948,0.045,1949,0.134,1950,0.045,1951,0.416,1952,0.045,1953,0.134,1954,0.045,1955,0.045,1956,0.084,1957,0.084,1958,0.134,1959,0.045,1960,0.084,1961,0.084,1962,0.084,1963,0.084,1964,0.084,1965,0.045,1966,0.045,1967,0.121,1968,0.084,1969,0.084,1970,0.084,1971,0.084,1972,0.084,1973,0.045,1974,0.045,1975,0.084,1976,0.084,1977,0.09,1978,0.04,1979,0.045,1980,0.084,1981,0.084,1982,0.084,1983,0.084,1984,0.084,1985,0.084,1986,0.045,1987,0.045,1988,0.09,1989,0.09,1990,0.045,1991,0.134,1992,0.134,1993,0.09,1994,0.259,1995,0.045,1996,0.045,1997,0.09,1998,0.084,1999,0.308,2000,0.827,2001,0.09,2002,0.084,2003,0.222,2004,0.134,2005,0.505,2006,0.084,2007,0.178,2008,0.134,2009,0.222,2010,0.222,2011,0.09,2012,0.178,2013,0.084,2014,0.724,2015,0.09,2016,0.178,2017,0.134,2018,0.045,2019,0.045,2020,0.084,2021,0.084,2022,0.178,2023,0.084,2024,0.178,2025,0.134,2026,0.081,2027,0.478,2028,0.222,2029,0.045,2030,0.134,2031,0.308,2032,0.09,2033,0.045,2034,0.222,2035,0.081,2036,0.134,2037,0.09,2038,0.09,2039,0.134,2040,0.116,2041,0.09,2042,0.134,2043,0.084,2044,0.045,2045,0.134,2046,0.084,2047,0.084,2048,0.084,2049,0.084,2050,0.331,2051,0.084,2052,0.084,2053,0.178,2054,0.084,2055,0.084,2056,0.084,2057,0.045,2058,0.09,2059,0.084,2060,0.084,2061,0.16,2062,0.154,2063,0.084,2064,0.084,2065,0.084,2066,0.084,2067,0.084,2068,0.101,2069,0.045,2070,0.084,2071,0.168,2072,0.234,2073,0.394,2074,0.154,2075,0.568,2076,0.168,2077,0.209,2078,0.209,2079,0.045,2080,0.121,2081,0.371,2082,0.09,2083,0.134,2084,0.09,2085,0.045,2086,0.134,2087,0.178,2088,0.134,2089,0.134,2090,0.09,2091,0.045,2092,0.045,2093,0.351,2094,0.09,2095,0.308,2096,0.084,2097,0.04,2098,0.16,2099,0.09,2100,0.09,2101,0.045,2102,0.04,2103,0.121,2104,0.134,2105,0.178,2106,0.045,2107,0.09,2108,0.178,2109,0.308,2110,0.045,2111,0.09,2112,0.134,2113,0.09,2114,0.134,2115,0.045,2116,0.045,2117,0.134,2118,0.045,2119,0.09,2120,0.09,2121,0.045,2122,0.168,2123,0.045,2124,0.045,2125,0.071,2126,0.09,2127,0.09,2128,0.192,2129,0.045,2130,0.116,2131,0.045,2132,0.045,2133,0.045,2134,0.2,2135,0.045,2136,0.045,2137,0.045,2138,0.045,2139,0.045,2140,0.045,2141,0.451,2142,0.267,2143,0.505,2144,0.655,2145,0.542,2146,0.084,2147,0.045,2148,0.084,2149,0.084,2150,0.084,2151,0.045,2152,0.084,2153,0.09,2154,0.045,2155,0.045,2156,0.178,2157,0.178,2158,0.084,2159,0.134,2160,0.09,2161,0.411,2162,0.084,2163,0.084,2164,0.09,2165,0.121,2166,0.084,2167,0.09,2168,0.084,2169,0.084,2170,0.09,2171,0.468,2172,0.21,2173,0.084,2174,0.134,2175,0.084,2176,0.084,2177,0.09,2178,0.33,2179,0.33,2180,0.33,2181,0.09,2182,0.33,2183,0.2,2184,0.304,2185,0.341,2186,0.222,2187,0.084,2188,0.084,2189,0.308,2190,0.084,2191,0.09,2192,0.045,2193,0.084,2194,0.09,2195,0.084,2196,0.084,2197,0.134,2198,0.09,2199,0.222,2200,0.168,2201,0.25,2202,0.25,2203,0.222,2204,0.045,2205,0.045,2206,0.126,2207,0.084,2208,0.045,2209,0.045,2210,0.084,2211,0.126,2212,0.084,2213,0.045,2214,0.04,2215,0.038,2216,0.09,2217,0.09,2218,0.09,2219,0.09,2220,0.045,2221,0.186,2222,0.126,2223,0.45,2224,0.045,2225,0.084,2226,0.084,2227,0.045,2228,0.045,2229,0.178,2230,0.045,2231,0.045,2232,0.045,2233,0.045,2234,0.084,2235,0.126,2236,0.035,2237,0.045,2238,0.045,2239,0.045,2240,0.04,2241,0.134,2242,0.09,2243,0.134,2244,0.134,2245,0.045,2246,0.045,2247,0.134,2248,0.084,2249,0.09,2250,0.09,2251,0.045,2252,0.192,2253,0.084,2254,0.09,2255,0.045,2256,0.045,2257,0.045,2258,0.045,2259,0.126,2260,0.045,2261,0.045,2262,0.081,2263,0.265,2264,0.09,2265,0.045,2266,0.045,2267,0.045,2268,0.121,2269,0.045,2270,0.045,2271,0.033,2272,0.033,2273,0.045]],["title/api/instruments/#instrument-drivers",[94,0.655,110,3.002]],["text/api/instruments/#instrument-drivers",[11,5.342,32,6.897,37,3.473,38,3.525,41,5.12,53,1.717,54,4.84,60,4.34,94,1.207,108,1.117,110,6.638,207,5.173,234,3.921,299,4.169,448,6.218,504,5.755,588,5.284,1137,8.2]],["title/api/instruments/#core-instrument-classes",[94,0.518,109,2.715,299,1.788]],["text/api/instruments/#core-instrument-classes",[]],["title/api/instruments/#pytestlab.instruments.AutoInstrument",[1138,3.74]],["text/api/instruments/#pytestlab.instruments.AutoInstrument",[]],["title/api/instruments/#pytestlab.instruments.AutoInstrument-classes",[299,3.075]],["text/api/instruments/#pytestlab.instruments.AutoInstrument-classes",[]],["title/api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument",[1138,3.74]],["text/api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument",[12,3.605,14,3.715,21,3.935,37,2.824,38,2.866,59,4.163,94,1.586,98,3.605,100,2.896,101,5.475,110,4.5,116,3.81,130,3.97,164,1.157,174,2.624,180,5.186,220,3.901,234,3.188,265,3.265,269,4.206,299,4.394,304,4.044,310,4.5,316,4.816,321,3.434,380,3.528,415,4.97,416,3.504,706,4.344,724,5.055,783,4.89,865,4.745,1139,5.355,1140,5.757,1141,5.928,1142,5.757,1143,3.901,1144,6.127,1145,7.068]],["title/api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument-functions",[]],["title/api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config",[1143,3.539]],["text/api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config",[4,2.674,6,1.161,12,2.738,13,0.56,14,0.712,21,1.723,37,2.715,38,3.082,42,1.056,44,1.942,47,0.641,53,0.186,54,0.524,59,3.359,60,0.47,61,1.104,76,2.323,77,1.386,78,1.277,79,0.544,83,1.628,85,1.33,92,1.742,93,0.699,94,1.123,97,0.391,99,0.737,100,2.402,102,1.707,103,0.572,108,0.469,110,1.571,116,2.753,117,0.651,130,3.535,136,0.142,150,3.18,152,0.767,156,1.428,159,2.297,161,0.599,164,0.679,167,1.64,174,0.349,180,1.578,187,0.972,191,0.93,194,0.477,195,1.056,214,1.503,215,1.957,234,1.396,235,0.699,245,0.623,255,1.425,256,2.141,259,0.592,261,0.352,262,2.922,265,0.811,271,0.607,279,1.43,290,4.533,292,2.487,299,0.842,308,4.712,316,1.196,317,2.33,318,1.522,321,0.457,328,4.578,329,3.232,332,1.516,336,0.673,338,0.159,339,0.285,340,0.495,342,2.037,343,1.085,347,2.067,349,3.027,350,1.303,355,1.35,359,0.774,361,1.106,362,2.611,366,1.797,372,2.248,373,1.802,375,1.963,376,1.067,379,3.829,380,2.496,386,3.062,388,1.522,389,1.56,410,0.572,413,0.599,415,1.735,416,1.534,420,1.633,423,0.623,427,0.848,429,1.362,433,4.46,434,0.916,438,1.957,439,0.848,440,0.747,443,2.682,444,0.848,446,0.816,447,5.263,448,0.673,449,0.747,452,0.345,455,0.417,456,2.682,457,1.215,458,1.601,468,1.835,469,1.876,472,0.729,473,1.43,480,0.607,506,0.816,513,5.496,526,2.163,534,1.656,535,1.869,557,4.067,558,2.195,566,2.27,583,0.747,584,0.848,601,0.566,602,2.451,606,4.461,607,0.977,608,3.289,609,0.747,686,0.685,692,2.628,705,2.847,706,2.244,707,1.118,710,0.607,724,1.256,730,2.443,745,0.477,778,0.953,779,1.132,783,1.215,794,0.566,850,1.754,887,1.472,898,1.723,899,0.816,900,2.351,906,0.554,914,0.672,922,1.957,923,2.641,924,1.303,934,0.767,938,1.869,956,1.633,972,0.713,988,0.767,999,1.045,1021,0.713,1028,1.735,1032,1.472,1040,3.021,1089,0.651,1090,2.108,1099,0.713,1138,1.024,1139,1.33,1140,4.073,1141,0.789,1142,0.767,1143,0.519,1146,8.226,1147,6.573,1148,3.289,1149,3.651,1150,1.581,1151,1.393,1152,2.108,1153,2.344,1154,4.716,1155,2.659,1156,2.52,1157,1.756,1158,4.149,1159,1.681,1160,2.918,1161,1.581,1162,1.756,1163,3.737,1164,1.393,1165,2.595,1166,5.001,1167,8.36,1168,1.756,1169,0.941,1170,1.756,1171,0.767,1172,0.848,1173,1.581,1174,0.848,1175,4.596,1176,3.651,1177,5.001,1178,1.756,1179,2.467,1180,0.941,1181,2.467,1182,2.009,1183,0.848,1184,0.941,1185,0.767,1186,7.019,1187,1.581,1188,1.756,1189,6.011,1190,2.467,1191,0.941,1192,4.596,1193,2.467,1194,0.941,1195,3.651,1196,0.941,1197,1.756,1198,4.596,1199,2.467,1200,1.756,1201,0.941,1202,2.467,1203,1.581,1204,2.467,1205,0.848,1206,0.848,1207,2.467,1208,0.941,1209,4.149,1210,1.756,1211,1.656,1212,0.941,1213,0.941,1214,0.941,1215,2.467,1216,0.941,1217,3.651,1218,5.001,1219,0.515,1220,0.941,1221,0.789,1222,3.094,1223,0.941,1224,0.941,1225,2.467,1226,3.094,1227,0.848,1228,0.789]],["title/api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type",[1144,5.559]],["text/api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type",[14,2.717,21,4.927,92,2.335,94,1.563,100,3.463,108,0.58,110,4.267,111,2.704,136,0.679,164,0.739,167,1.26,174,2.488,187,3.149,214,4.3,299,3.214,317,4.971,321,3.256,338,0.761,339,0.732,342,1.756,349,3.096,355,3.668,366,3.286,370,5.896,373,2.527,375,1.029,389,2.187,415,4.713,416,3.323,423,4.437,452,1.653,458,4.146,595,4.971,601,5.322,609,5.317,686,3.286,853,4.975,900,4.532,923,6.308,926,4.321,1089,3.122,1090,4.566,1138,3.909,1139,5.078,1144,3.911,1182,3.675,1227,4.064,1228,8.31,1229,10.336,1230,4.637,1231,5.191,1232,5.078,1233,6.702,1234,7.542]],["title/api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn",[1172,5.777]],["text/api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn",[1,4.965,4,3.987,6,1.13,12,3.824,18,3.534,53,1.221,54,1.337,72,2.163,83,3.559,92,2.612,94,0.731,97,2.571,98,2.684,99,3.353,100,1.281,108,0.676,116,3.742,136,0.61,150,4.279,152,5.038,164,0.393,167,1.464,174,2.963,187,2.073,194,1.216,203,2.55,214,1.167,238,2.816,265,1.873,275,1.997,284,2.413,290,4.03,313,2.806,321,1.97,338,0.405,339,0.39,342,1.811,359,1.116,361,2.361,362,2.9,368,2.163,370,1.429,372,1.983,373,2.76,375,2.171,379,1.612,383,3.201,389,2.051,391,2.766,410,1.46,416,2.01,433,1.262,443,7.57,452,0.88,453,3.401,458,1.053,465,4.287,466,1.956,476,1.689,479,3.303,491,2.014,492,4.907,494,2.014,495,3.401,496,1.905,497,2.014,498,1.783,513,7.034,526,3.226,569,1.718,582,2.163,583,1.905,591,9.192,691,2.014,692,2.19,724,6.951,730,2.389,794,2.438,882,2.574,898,2.258,900,3.917,906,1.414,935,2.953,956,2.685,989,2.953,1040,4.504,1082,1.414,1089,1.661,1090,1.636,1099,3.072,1138,2.365,1154,9.488,1163,6.225,1171,6.501,1172,2.163,1183,4.741,1203,3.653,1205,2.163,1206,2.163,1235,3.072,1236,4.055,1237,3.401,1238,6.753,1239,4.055,1240,3.825,1241,2.614,1242,5.264,1243,2.402,1244,7.982,1245,3.825,1246,7.072,1247,3.825,1248,2.402,1249,2.402,1250,4.741,1251,2.402,1252,2.402,1253,2.402,1254,5.264,1255,2.402,1256,6.911,1257,2.265]],["title/api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local",[1174,5.777]],["text/api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local",[4,4.973,12,5.524,18,3.214,53,0.945,54,1.632,61,3.01,76,3.199,78,1.674,83,4.201,93,3.553,94,0.842,97,1.99,99,2.548,100,1.917,108,0.9,116,3.337,136,0.441,150,5.726,164,0.48,167,1.436,174,2.863,177,3.797,187,2.389,194,2.424,203,1.844,227,3.423,234,2.159,262,2.705,265,2.211,275,2.357,290,5.903,291,2.271,321,2.325,338,0.494,339,0.476,342,2.288,347,1.759,349,1.354,359,0.622,361,1.315,362,4.338,372,1.434,373,2.615,375,1.597,389,1.659,391,2.516,416,2.373,449,6.12,452,1.074,458,1.286,484,6.47,492,3.797,513,6.47,526,3.163,566,1.604,569,2.097,634,3.214,692,1.695,708,1.915,724,7.82,730,4.875,783,3.312,794,1.763,850,2.713,882,2.341,900,3.968,906,1.727,956,1.941,1013,3.797,1017,4.014,1040,5.618,1089,2.029,1090,1.998,1138,2.791,1141,5.871,1142,2.388,1155,2.135,1163,6.306,1174,2.641,1183,5.463,1203,4.311,1205,2.641,1206,2.641,1241,3.086,1245,2.765,1246,5.721,1247,2.765,1257,2.765,1258,7.714,1259,4.787,1260,7.001,1261,4.698,1262,4.515,1263,4.787,1264,2.932,1265,4.787,1266,6.066,1267,9.107]],["title/api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument",[1268,6.049]],["text/api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument",[23,5.564,61,3.834,67,4.093,92,3.119,94,1.647,100,3.504,108,1.151,110,5.287,136,0.599,164,0.652,167,0.961,174,2.263,187,2.401,234,2.75,264,4.439,270,4.619,284,2.368,299,4.987,300,4.093,315,3.157,317,3.424,321,2.962,338,0.671,339,0.646,342,1.598,347,1,367,5.127,373,2.625,375,1.69,376,4.504,380,3.043,416,3.022,433,3.204,452,1.458,455,2.703,458,1.745,472,7.616,530,2.954,609,7.104,724,4.36,882,2.982,886,3.521,900,4.708,977,3.241,1089,2.753,1090,5.659,1138,3.555,1139,4.619,1143,3.365,1144,5.285,1182,3.241,1227,6.675,1229,9.567,1234,9.274,1268,3.753,1269,5.285,1270,5.75,1271,6.097,1272,4.965,1273,8.306,1274,3.98]],["title/api/instruments/#pytestlab.instruments.AutoInstrument-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.AutoInstrument-functions",[]],["title/api/instruments/#pytestlab.instruments.Instrument",[94,0.891]],["text/api/instruments/#pytestlab.instruments.Instrument",[9,2.412,14,2.958,21,4.061,37,1.55,38,4.185,43,3.717,44,3.183,88,2.27,92,1.352,94,1.532,97,1.613,98,1.979,100,3.39,108,0.499,109,2.826,110,2.47,111,1.566,112,2.333,116,2.903,130,4.098,136,0.584,164,0.635,167,1.396,174,1.44,187,2.355,194,3.028,206,2.728,214,1.885,220,3.3,234,2.697,238,1.581,259,2.44,261,1.453,269,2.309,271,2.501,283,1.674,297,2.534,298,2.728,299,4.245,319,2.286,320,2.644,321,1.885,336,6.689,338,0.654,339,0.63,340,2.039,341,1.889,342,1.017,347,0.975,349,1.792,354,1.692,355,4.844,372,1.898,373,1.226,375,1.364,376,4.982,380,1.937,396,1.937,399,2.775,429,3.3,452,1.422,458,1.701,471,2.385,526,2.024,530,2.88,552,4.074,558,2.333,595,4.098,607,2.16,609,4.744,692,3.733,710,3.855,882,1.898,886,2.241,899,3.364,900,2.199,923,3.807,926,3.855,1232,4.53,1275,7.617,1276,2.94,1277,4.277,1278,4.87,1279,3.16,1280,2.551,1281,2.94,1282,4.53,1283,5.787,1284,3.16]],["title/api/instruments/#pytestlab.instruments.Instrument-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.Instrument-attributes",[]],["title/api/instruments/#pytestlab.instruments.Instrument.config",[692,2.271]],["text/api/instruments/#pytestlab.instruments.Instrument.config",[]],["title/api/instruments/#pytestlab.instruments.Instrument-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.Instrument-functions",[]],["title/api/instruments/#pytestlab.instruments.Instrument.clear_status",[1285,5.777]],["text/api/instruments/#pytestlab.instruments.Instrument.clear_status",[6,3.546,53,1.488,94,1.326,97,4.358,108,0.969,136,1.134,164,1.234,167,1.188,235,7.781,338,1.271,339,1.223,341,1.879,347,1.894,359,1.599,472,8.119,476,7.37,482,2.823,601,5.742,1090,7.508,1280,2.636,1285,6.79,1286,8.791,1287,2.75,1288,7.11]],["title/api/instruments/#pytestlab.instruments.Instrument.close",[356,3.48]],["text/api/instruments/#pytestlab.instruments.Instrument.close",[9,3.906,38,3.89,44,3.293,53,1.241,92,2.189,94,1.569,97,3.525,99,3.561,102,4.802,108,0.808,136,0.945,164,1.029,167,1.337,174,3.147,245,5.613,336,4.495,338,1.059,339,1.02,341,2.059,347,1.579,356,6.233,359,1.333,361,2.818,375,2.189,376,3.82,420,4.16,471,5.211,480,4.051,558,3.779,692,3.003,1277,4.495,1280,3.356,1282,4.762,1289,10.272]],["title/api/instruments/#pytestlab.instruments.Instrument.connect_backend",[1159,4.369]],["text/api/instruments/#pytestlab.instruments.Instrument.connect_backend",[38,4.51,44,2.727,53,0.949,94,1.545,97,3.45,99,3.833,102,5.271,103,4.268,108,0.618,130,3.945,136,0.723,164,0.787,167,1.107,174,3.387,187,1.893,194,2.434,203,4.417,213,2.108,245,4.649,284,2.861,332,4.316,336,3.438,338,0.81,339,0.78,341,1.994,347,1.208,358,5.96,359,1.489,361,3.15,373,2.622,374,5.834,375,2.081,376,2.922,383,5.024,416,3.482,420,3.182,471,2.954,535,5.321,556,6.326,558,4.223,692,2.487,722,2.079,1140,5.72,1159,3.275,1277,5.934,1280,2.902,1282,3.642,1283,7.701,1290,6.088,1291,7.023]],["title/api/instruments/#pytestlab.instruments.Instrument.from_config",[1143,3.539]],["text/api/instruments/#pytestlab.instruments.Instrument.from_config",[9,3.906,38,4.348,53,1.895,58,3.562,60,3.137,94,1.427,98,3.205,100,2.679,108,0.808,136,0.945,140,4.282,164,1.029,167,1.742,182,3.82,225,4.491,338,1.059,339,1.02,372,3.074,373,2.679,376,3.82,380,3.137,416,3.116,468,3.16,469,3.229,478,4.665,486,4.868,592,4.419,598,4.868,600,4.665,692,3.003,710,6.186,900,3.562,935,4.577,1089,4.348,1090,5.777,1138,3.665,1140,6.906,1143,5.669,1147,4.868,1155,4.577,1165,5.271,1292,6.285,1293,5.448,1294,6.285,1295,4.577,1296,6.285,1297,5.928,1298,4.986,1299,5.271]],["title/api/instruments/#pytestlab.instruments.Instrument.get_all_errors",[1300,5.223]],["text/api/instruments/#pytestlab.instruments.Instrument.get_all_errors",[4,3.099,53,0.949,77,1.825,94,1.153,97,5.041,99,2.019,108,0.618,130,3.945,136,1.46,164,0.787,167,1.107,174,2.607,213,3.079,229,2.954,235,5.213,243,4.33,279,3.916,338,0.81,339,0.78,341,1.924,342,1.84,343,2.086,359,1.02,361,2.156,369,2.417,375,2.081,384,2.954,389,2.27,391,5.328,405,2.609,434,2.507,482,3.796,523,4.587,532,3.06,596,3.228,601,4.223,647,3.642,734,3.284,745,2.434,813,3.642,854,2.22,921,5.44,943,3.814,999,2.861,1121,3.724,1221,5.89,1235,3.642,1280,3.546,1286,8.78,1300,3.916,1301,8.298,1302,3.814,1303,4.808,1304,4.534,1305,6.624,1306,7.023,1307,4.808,1308,4.534]],["title/api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout",[1309,6.049]],["text/api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout",[38,4.298,53,1.525,94,1.347,108,0.993,130,5.955,136,1.162,145,6.174,164,1.265,167,1.218,338,1.302,339,1.254,341,1.9,343,2.295,359,1.638,375,1.762,379,7.848,387,5.983,389,2.113,454,6.696,482,2.893,1235,5.852,1277,5.525,1280,2.702,1309,7.286]],["title/api/instruments/#pytestlab.instruments.Instrument.get_error",[1302,5.088]],["text/api/instruments/#pytestlab.instruments.Instrument.get_error",[13,3.307,44,2.158,53,1.097,77,2.109,78,1.944,88,2.109,94,1.354,97,4.774,99,2.334,108,0.714,117,5.39,136,1.601,164,0.91,167,1.618,174,2.892,213,4.501,235,5.783,238,4.336,338,0.937,339,0.902,341,1.84,342,1.456,343,2.314,359,1.179,361,2.492,373,2.462,375,2.052,384,3.415,389,1.52,391,4.094,396,2.774,403,4.058,405,3.015,422,2.774,434,2.898,482,2.917,523,3.629,601,4.684,692,1.968,794,3.341,941,4.409,1280,2.725,1286,6.533,1302,4.409,1310,7.791,1311,2.423,1312,7.791,1313,7.791,1314,4.526]],["title/api/instruments/#pytestlab.instruments.Instrument.get_scpi_version",[1315,6.049]],["text/api/instruments/#pytestlab.instruments.Instrument.get_scpi_version",[18,7.399,53,1.488,94,1.531,108,0.969,117,5.215,136,1.134,164,1.234,167,1.188,238,4.271,250,5.98,259,6.006,338,1.271,339,1.223,341,1.879,342,1.975,359,1.599,375,1.719,389,2.062,396,4.767,403,3.4,482,2.823,539,5.233,1280,2.636,1311,3.287,1315,7.11,1316,9.55]],["title/api/instruments/#pytestlab.instruments.Instrument.health_check",[1317,5.223]],["text/api/instruments/#pytestlab.instruments.Instrument.health_check",[14,2.785,21,2.596,53,1.61,94,1.249,97,4.516,99,2.885,100,1.474,108,0.599,121,5.76,136,1.226,164,0.764,167,1.925,174,2.549,194,4.554,232,3.791,250,9.081,264,3.396,270,5.204,332,4.221,338,0.786,339,0.757,341,1.461,342,1.222,359,1.908,361,3.08,370,2.775,375,1.567,383,2.414,389,1.276,390,3.006,396,2.328,420,3.087,434,4.691,476,6.324,508,4.043,566,2.552,596,3.131,617,6.468,678,7.543,681,3.911,685,7.543,688,3.911,742,3.087,924,3.462,994,4.174,1185,3.798,1221,3.911,1286,3.911,1300,3.798,1317,3.798,1318,4.664,1319,5.098,1320,7.69,1321,5.449]],["title/api/instruments/#pytestlab.instruments.Instrument.id",[742,4.245]],["text/api/instruments/#pytestlab.instruments.Instrument.id",[53,1.544,94,1.551,102,3.657,108,1.005,136,1.176,164,1.281,167,1.233,317,5.49,338,1.319,339,1.269,341,1.911,342,2.05,359,1.659,375,1.784,389,2.14,396,4.879,455,4.727,482,2.929,742,5.178,1280,2.736,1311,3.41,1319,7.914,1322,8.804]],["title/api/instruments/#pytestlab.instruments.Instrument.lock_panel",[1323,5.559]],["text/api/instruments/#pytestlab.instruments.Instrument.lock_panel",[6,3.402,53,1.428,94,1.507,108,0.929,117,6.435,136,1.088,150,6.435,164,1.184,167,1.466,338,1.219,339,1.174,341,1.945,347,1.817,352,9.52,359,1.972,375,1.649,468,3.636,482,2.708,778,3.924,1280,2.529,1287,3.393,1323,6.269,1324,8.912,1325,8.772,1326,8.912,1327,4.396]],["title/api/instruments/#pytestlab.instruments.Instrument.requires",[255,3.704]],["text/api/instruments/#pytestlab.instruments.Instrument.requires",[14,3.282,44,3.597,94,1.504,108,0.754,116,3.28,136,0.883,164,0.961,167,1.46,255,6.773,284,3.493,338,0.99,339,1.503,341,1.988,342,1.538,373,2.558,375,1.339,376,3.568,380,2.931,389,2.534,416,4.95,458,3.549,558,3.53,559,6.52,595,4.546,607,4.506,692,3.834,900,4.588,1089,4.062,1090,4,1103,5.402,1105,6.592,1114,7.774,1165,4.923]],["title/api/instruments/#pytestlab.instruments.Instrument.reset",[987,4.587]],["text/api/instruments/#pytestlab.instruments.Instrument.reset",[53,1.554,94,1.6,108,1.011,136,1.184,156,3.679,164,1.289,167,1.241,338,1.327,339,1.277,341,1.916,347,1.978,349,4.938,359,1.669,482,2.947,987,8.005,1280,2.753,1287,2.871,1328,11.193]],["title/api/instruments/#pytestlab.instruments.Instrument.run_self_test",[1329,6.049]],["text/api/instruments/#pytestlab.instruments.Instrument.run_self_test",[4,2.574,6,1.878,42,5.002,44,2.373,53,0.788,77,2.32,88,2.32,94,1.156,97,4.092,99,2.567,108,0.513,136,1.481,162,6.776,164,0.654,167,1.17,174,2.268,188,5.298,191,3.237,200,6.6,213,2.679,214,1.939,238,1.627,250,5.891,259,2.511,338,0.673,339,0.648,341,2.086,342,1.046,343,1.186,359,1.575,361,1.79,366,2.907,370,4.418,373,1.931,375,2.157,383,3.843,384,2.453,389,2.276,391,2.098,396,4.153,403,1.801,405,4.029,422,1.993,468,2.007,469,2.051,482,3.542,560,2.725,601,3.675,645,4.371,692,2.164,734,1.867,872,4.164,876,3.461,956,4.046,1028,2.807,1113,2.807,1280,3.308,1286,6.227,1300,4.978,1311,1.741,1329,3.765,1330,7.425,1331,6.227,1332,6.111,1333,10.409,1334,7.425,1335,7.425,1336,6.111,1337,3.992,1338,7.425]],["title/api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout",[1339,6.049]],["text/api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout",[38,4.298,53,1.525,94,1.347,108,0.993,130,5.955,136,1.162,156,3.648,164,1.265,167,1.218,329,7.454,338,1.302,339,1.254,341,1.9,343,2.295,347,1.941,359,1.638,375,1.762,379,7.117,421,5.983,454,6.696,482,2.893,1277,5.525,1280,2.702,1339,7.286]],["title/api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete",[1340,6.049]],["text/api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete",[6,1.665,38,2.789,44,1.374,53,0.699,77,1.343,78,1.947,88,2.96,92,2.396,94,1.251,99,1.487,103,2.151,108,0.455,130,3.126,136,0.532,140,2.411,156,2.367,164,0.579,167,1.702,170,4.619,174,2.066,202,2.577,213,1.552,225,1.875,238,3.178,255,2.044,262,1.578,270,2.681,312,2.253,313,2.449,315,2.808,331,4.053,337,3.068,338,0.597,339,0.574,341,1.877,342,0.927,347,0.889,354,1.543,359,1.18,361,1.587,370,3.312,373,1.118,375,1.569,379,7.612,383,1.832,386,2.968,389,2.134,396,4.495,398,5.328,400,1.189,403,2.511,405,3.02,410,2.151,416,4.204,432,3.588,434,1.846,452,2.52,468,1.779,476,2.488,478,4.132,481,2.531,482,3.176,586,5.212,592,3.914,689,1.875,691,2.968,692,1.253,734,1.655,872,2.411,923,2.253,924,2.627,1028,2.488,1043,2.151,1082,2.085,1106,2.282,1117,2.411,1250,5.014,1277,4.92,1279,2.883,1280,2.966,1287,1.291,1311,3.401,1340,3.338,1341,5.566,1342,5.769,1343,5.566,1344,5.25,1345,5.566,1346,5.566,1347,6.879,1348,6.879,1349,5.566,1350,3.539,1351,9.467,1352,5.566,1353,3.539,1354,3.338,1355,6.879,1356,3.338,1357,3.539,1358,3.539]],["title/api/instruments/#supported-instrument-types",[60,1.861,94,0.518,100,1.178]],["text/api/instruments/#supported-instrument-types",[]],["title/api/instruments/#oscilloscope",[111,2.587]],["text/api/instruments/#oscilloscope",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope",[111,2.587]],["text/api/instruments/#pytestlab.instruments.Oscilloscope",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope-classes",[299,3.075]],["text/api/instruments/#pytestlab.instruments.Oscilloscope-classes",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult",[1359,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult",[14,1.856,20,3.167,67,3.074,94,1.12,100,1.447,103,2.783,108,0.588,111,1.847,119,2.077,136,0.689,164,0.75,167,1.733,189,4.164,225,2.425,226,4.174,234,2.065,262,3.975,299,2.195,309,3.074,338,0.772,339,0.743,340,2.406,341,1.971,342,2.701,347,2.503,349,2.115,354,2.954,390,4.368,391,2.406,392,3.119,394,2.995,400,2.71,411,4.956,526,3.533,560,3.021,578,3.219,595,5.007,606,3.398,722,1.355,737,1.964,740,3.119,752,4.616,762,6.491,763,2.951,847,3.219,882,2.239,886,2.644,910,2.99,911,5.58,912,7.063,913,8.804,914,2.595,915,4.031,916,3.991,917,4.368,918,3.876,919,5.1,920,4.164,921,5.248,922,3.632,923,2.914,924,3.398,925,3.839,926,2.951,927,3.677,928,2.99,929,3.839]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult",[1360,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult",[14,1.877,20,3.203,67,3.108,94,1.128,100,1.463,103,2.814,108,0.595,111,1.868,119,2.1,136,0.696,164,0.758,167,1.738,189,4.198,225,2.452,226,4.202,234,2.088,262,3.996,265,2.138,299,2.22,338,0.78,339,0.751,340,2.433,341,1.976,342,2.711,347,2.513,349,2.138,354,2.978,390,4.403,392,3.154,394,3.009,400,2.727,411,4.198,526,3.562,560,3.046,578,3.255,595,5.034,606,3.436,740,3.154,752,5.531,762,6.526,763,2.984,847,3.255,882,2.264,886,2.674,910,3.023,911,5.616,912,7.095,913,8.83,914,2.616,915,4.065,916,4.023,917,4.403,918,3.908,919,5.127,920,4.198,921,5.291,922,3.672,923,2.947,924,3.436,925,3.882,926,2.984,927,3.707,928,3.023,929,3.882]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult",[1361,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult",[14,1.87,20,3.191,67,3.096,94,1.125,100,1.457,103,2.803,108,0.593,119,2.092,136,0.694,164,0.755,167,1.737,189,4.186,225,2.443,226,4.192,234,2.08,238,1.879,262,3.989,265,2.13,299,2.211,338,0.777,339,0.749,340,2.424,341,1.974,342,2.708,347,2.51,349,2.13,354,2.97,390,4.391,392,3.142,394,3.005,400,2.721,411,4.186,526,3.553,560,3.038,578,3.243,595,5.025,606,3.423,740,3.142,752,4.641,755,2.568,756,3.358,762,6.514,763,2.973,847,3.243,882,2.256,886,2.664,910,3.012,911,5.604,912,7.084,913,8.821,914,2.609,915,4.053,916,4.012,917,4.391,918,3.897,919,5.118,920,4.186,921,5.276,922,3.659,923,2.936,924,3.423,925,3.868,926,2.973,927,3.697,928,3.012,929,3.868]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope",[111,2.587]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope",[14,3.929,21,4.022,35,3.911,37,3.872,38,3.296,43,2.375,59,3.48,60,2.95,76,2.284,86,2.603,94,1.003,95,4.088,98,4.146,100,1.207,108,0.491,111,4.146,116,2.879,117,2.644,136,0.889,156,2.486,164,0.626,167,1.386,171,2.251,174,1.418,187,1.505,189,2.348,214,2.871,220,2.109,234,1.723,238,1.557,261,1.431,262,1.704,269,3.516,271,2.463,299,3.898,304,2.186,310,2.432,321,1.856,338,0.644,339,0.62,340,3.105,341,1.576,347,0.96,354,1.666,360,4.026,367,2.644,370,2.274,380,3.607,391,2.008,416,1.894,458,2.591,468,4.672,469,3.036,482,2.213,592,2.687,595,4.058,603,4.741,665,3.204,666,3.204,692,3.545,705,4.058,716,2.408,722,1.131,747,8.401,752,2.603,753,3.312,755,2.127,756,2.782,769,3.826,778,4.412,853,4.386,872,2.603,880,3.312,881,2.895,882,1.869,888,3.911,894,2.836,927,2.073,994,2.322,999,2.274,1018,3.112,1147,6.809,1261,2.96,1327,3.591,1362,3.204,1363,3.112,1364,5.989,1365,3.821,1366,3.312,1367,3.112,1368,3.821,1369,3.821,1370,3.442,1371,5.322,1372,5.573,1373,3.821]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope-attributes",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.acquisition",[1364,4.369]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.acquisition",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.config",[692,2.271]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.config",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.trigger",[603,3.74]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.trigger",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope-functions",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale",[1374,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale",[53,1.445,88,3.556,94,1.016,108,0.94,111,4.546,136,1.101,164,1.198,167,1.477,338,1.233,339,1.188,341,1.679,347,1.839,359,1.552,399,6.702,416,4.645,451,6.939,539,4.678,611,4.85,1287,2.669,1374,9.75,1375,7.119,1376,7.796,1377,2.411,1378,7.317]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel",[722,1.899]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel",[14,2.991,77,1.953,78,3.294,94,0.715,95,5.103,100,1.626,108,0.661,111,3.479,136,0.774,164,0.842,167,1.359,187,3.396,213,2.256,214,3.583,234,3.327,244,2.943,269,4.389,338,0.867,339,0.835,341,1.86,343,2.191,373,2.725,380,3.682,389,2.728,394,1.62,416,3.657,452,2.702,457,4.909,458,2.256,552,5.025,607,4.106,692,3.335,722,3.519,745,3.735,844,4.639,854,2.376,896,4.135,897,3.093,898,4.106,1327,4.483,1377,1.695,1379,8.478,1380,6.957,1381,6.007,1382,8.981,1383,7.376]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft",[1384,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft",[6,2.664,44,1.032,53,0.525,78,1.544,94,1.216,100,0.84,108,0.341,111,2.284,116,2.335,136,0.4,164,0.723,167,1.244,168,5.37,206,3.104,213,2.482,214,3.835,226,5.42,244,1.52,261,1.653,262,2.525,283,1.904,300,4.427,317,1.493,338,0.448,339,0.431,341,1.899,342,1.728,343,0.789,347,2.2,359,1.774,373,2.084,375,1.997,394,2.303,400,1.902,413,1.692,452,2.416,457,2.788,468,1.336,469,2.268,482,0.995,539,1.327,607,2.457,620,2.6,692,3.607,722,2.592,745,2.235,752,8.028,755,2.457,824,7.886,854,1.227,856,4.963,870,3.502,882,2.159,896,2.715,897,3.404,900,1.506,994,4.008,1021,3.344,1043,6.191,1219,3.608,1272,5.37,1280,0.929,1287,3.051,1375,5.718,1376,6.877,1377,0.875,1384,2.506,1385,7.889,1386,10.187,1387,2.657,1388,2.657,1389,5.939,1390,3.826,1391,1.81,1392,2.506,1393,4.414,1394,4.414,1395,4.414,1396,4.414,1397,2.393,1398,2.657,1399,2.657,1400,4.414]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger",[1401,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger",[4,1.528,13,3.101,53,0.468,60,1.183,78,2.145,88,0.899,92,2.136,94,0.557,98,1.208,99,0.995,100,1.267,103,2.437,108,0.304,111,2.103,116,0.839,136,0.356,141,1.835,156,2.729,162,3.266,164,1.784,167,1.554,174,1.488,194,2.03,213,3.007,244,2.294,262,2.324,300,1.591,304,5.29,310,3.318,313,1.639,317,1.331,338,0.399,339,0.385,341,1.822,342,1.797,343,1.191,347,1.723,349,3.851,359,1.454,361,1.063,370,1.41,373,2.353,375,1.902,394,2.625,400,0.796,422,2.002,423,3.45,434,1.236,452,2.728,457,1.974,482,0.887,539,1.183,566,1.297,603,6.545,622,5.142,634,1.591,642,1.795,644,4.749,692,2.953,705,4.922,722,3.248,727,4.465,734,1.875,743,1.001,745,3.105,783,1.639,854,1.852,882,1.961,896,3.288,897,3.687,898,2.232,941,1.88,956,1.569,1021,1.795,1028,2.819,1043,5.992,1219,2.852,1272,1.93,1280,1.402,1287,2.237,1363,1.93,1377,0.781,1392,3.782,1401,2.134,1402,5.212,1403,8.88,1404,4.245,1405,2.553,1406,4.01,1407,4.465,1408,4.01,1409,3.782,1410,2.235,1411,8.686,1412,3.266,1413,2.37,1414,2.37,1415,1.759,1416,5.212,1417,2.37,1418,2.37,1419,4.01,1420,2.37,1421,2.235,1422,2.134,1423,5.212,1424,5.212,1425,1.725,1426,2.134]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel",[1427,5.559]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel",[6,4.49,53,0.911,78,2.383,94,0.641,100,1.457,108,0.593,111,3.268,136,0.694,164,0.755,167,1.41,213,2.987,244,2.639,283,4.575,338,0.777,339,0.749,341,1.603,343,3.319,347,1.159,349,3.146,359,0.978,369,4.497,372,3.962,373,2.153,375,1.052,394,2.55,452,1.69,457,4.699,458,2.987,468,4.072,469,3.5,532,4.337,566,2.524,607,3.793,620,4.012,692,2.412,722,3.518,743,2.876,745,3.449,844,4.284,854,2.13,896,3.266,897,2.773,914,3.102,924,3.423,1287,1.682,1376,6.826,1377,2.244,1379,6.426,1427,3.998,1428,8.946,1429,8.946,1430,3.572,1431,4.35,1432,4.35,1433,5.404,1434,4.612]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display",[1435,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display",[6,4.657,53,1.321,94,0.929,108,0.86,111,2.699,136,1.006,164,1.095,167,1.054,338,1.128,339,1.086,341,1.774,347,1.681,359,1.419,369,5.505,375,2.016,394,2.783,468,3.363,469,4.541,482,2.505,620,5.206,752,7.817,778,5.372,779,6.382,1043,5.372,1280,2.34,1287,2.44,1376,8.046,1377,2.204,1391,4.557,1433,7.012,1435,6.309,1436,8.337]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep",[1437,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep",[6,1.345,13,1.701,24,3.243,44,1.82,50,1.701,53,0.564,77,1.085,78,2.662,88,1.779,94,0.651,100,0.903,108,0.367,111,1.153,116,1.012,136,0.43,164,0.468,167,1.756,180,1.458,187,1.126,194,1.447,213,2.613,220,1.577,225,1.514,226,1.479,232,2.587,238,3.101,244,2.682,261,1.755,262,1.274,265,2.752,317,1.605,333,2.214,338,0.482,339,0.464,341,1.966,342,1.228,343,1.77,347,1.497,359,2.038,373,2.179,375,1.97,380,1.427,389,1.63,394,2.719,396,1.427,400,2.316,413,3.794,417,2.574,452,2.183,468,1.437,476,2.01,539,1.427,560,2.657,563,1.591,586,3.552,592,2.01,593,2.478,613,1.977,692,3.193,722,2.421,730,3.51,745,3.491,751,1.842,754,6.597,755,5.349,756,5.542,757,3.147,761,5.889,779,1.842,794,1.719,806,4.354,813,2.165,818,2.044,850,4.635,854,2.165,870,4.728,882,1.398,896,2.857,897,3.583,900,1.62,911,1.977,916,2.761,920,1.756,935,2.081,957,3.631,984,2.165,994,2.849,999,2.789,1013,2.267,1025,2.397,1055,3.147,1082,1.683,1171,3.818,1287,3.289,1311,1.246,1314,2.328,1342,3.931,1361,7.178,1377,0.942,1391,3.194,1425,2.081,1437,2.696,1438,6.894,1439,6.894,1440,4.421,1441,4.421,1442,3.842,1443,5.621,1444,2.858,1445,4.688,1446,2.574,1447,2.858,1448,2.696,1449,4.688,1450,2.696,1451,5.959,1452,4.688,1453,4.688,1454,2.858]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config",[1143,3.539]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config",[23,4.665,94,1.1,100,2.503,108,1.018,111,4.326,136,1.191,164,1.297,167,1.553,338,1.335,339,1.286,340,4.163,389,2.167,416,3.927,468,3.982,469,4.069,595,5.533,692,3.797,747,6.866,1089,5.48,1090,6.712,1143,4.371,1147,8.305,1455,7.921,1456,7.135]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display",[1457,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display",[6,4.561,53,1.267,94,0.891,108,0.824,111,2.588,136,0.965,164,1.05,167,1.011,174,3.191,261,3.878,321,4.176,338,1.081,339,1.041,341,1.738,347,1.612,359,1.36,369,5.429,375,1.961,394,2.706,468,3.224,469,4.416,482,2.402,620,5.063,757,4.306,769,4.553,778,5.261,779,6.25,879,7.001,1043,5.224,1280,2.243,1287,2.34,1376,7.95,1377,2.113,1391,4.37,1407,6.259,1433,6.819,1436,8.107,1457,6.05]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis",[1458,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis",[53,1.107,78,2.742,94,0.779,108,0.72,111,3.647,136,0.843,145,4.991,164,0.918,167,1.425,213,2.458,244,3.208,283,3.899,338,0.945,339,0.91,341,1.846,342,2.054,343,1.666,359,1.663,373,1.772,375,1.788,389,2.473,394,1.765,400,1.884,452,2.054,457,2.761,692,2.776,722,3.544,745,3.969,854,2.59,856,5.124,896,2.689,897,3.371,917,5.054,919,4.485,937,8.657,999,4.665,1043,4.765,1083,6.072,1311,3.418,1375,5.903,1377,1.847,1412,6.385,1458,5.05,1459,7.394,1460,7.84]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation",[1461,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation",[13,2.656,53,0.881,78,3.928,94,0.62,97,1.856,99,1.875,100,2.101,108,0.574,111,3.206,136,0.671,145,4.233,164,0.731,167,1.656,174,2.949,187,2.619,213,1.957,229,2.743,232,2.463,238,1.819,244,2.554,317,2.507,321,3.86,338,0.752,339,0.724,341,1.687,342,2.467,343,2.616,359,0.947,361,2.002,373,2.101,375,2.008,389,2.797,394,2.501,400,1.5,403,2.013,407,3.313,413,2.841,422,2.228,434,2.328,452,2.911,457,3.912,692,2.354,722,3.36,745,3.366,794,2.684,817,8.863,853,4.935,854,2.062,896,2.14,897,2.684,935,3.25,1082,5.185,1280,1.561,1311,1.946,1377,1.471,1412,3.635,1461,4.21,1462,9.464,1463,6.984,1464,4.21,1465,5.415,1466,8.804,1467,4.464]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate",[1468,5.559]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate",[53,1.453,94,1.022,108,0.946,111,4.182,136,1.107,164,1.205,167,1.16,338,1.241,339,1.195,341,1.686,342,1.929,359,1.561,389,2.836,400,3.67,437,4.098,638,5.839,734,4.398,740,7.442,751,6.063,763,7.042,917,4.745,919,4.211,1311,3.209,1377,2.425,1463,7.462,1468,6.38,1469,8.871]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis",[1470,5.559]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis",[53,1.328,94,0.934,108,0.864,111,4.005,136,1.012,145,5.647,164,1.101,167,1.06,283,4.281,338,1.134,339,1.092,341,1.779,342,2.325,359,1.881,389,2.715,400,2.259,411,6.486,423,6.571,766,7.439,917,5.718,919,5.075,937,8.727,966,6.46,999,5.278,1311,3.868,1375,6.483,1377,2.216,1459,8.367,1470,5.83,1471,8.871]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check",[1317,5.223]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check",[6,2.863,14,1.948,21,1.64,35,4.028,37,1.177,38,2.467,53,0.582,59,1.735,60,3.038,94,0.975,97,4.508,99,2.949,100,0.931,102,2.247,108,0.379,111,3.12,116,1.043,121,5.103,136,0.915,156,1.653,164,0.482,167,1.566,174,2.606,187,1.16,188,1.585,194,4.43,214,1.431,250,9.459,261,1.103,264,2.145,308,1.978,338,0.497,339,0.478,341,1.848,342,1.259,359,1.291,361,2.155,375,1.601,376,1.79,383,2.487,386,2.47,389,1.665,390,3.098,396,1.471,420,1.95,434,5.061,469,3.126,476,7.545,509,2.399,558,4.65,566,3.842,572,2.282,596,3.226,601,2.889,617,6.135,678,6.486,680,6.966,681,2.47,685,8.139,686,4.431,687,7.472,688,5.888,692,2.938,742,1.95,752,4.783,754,6.086,757,4.713,888,1.95,994,2.92,999,2.859,1128,2.554,1155,2.145,1277,4.352,1282,3.64,1300,2.399,1308,2.778,1317,2.399,1319,2.187,1320,5.739,1321,3.812,1322,2.653,1470,2.554,1472,8.295,1473,2.946,1474,2.946,1475,2.946,1476,2.554]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel",[1323,5.559]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel",[6,5.029,53,1.372,94,1.401,100,2.196,108,0.893,111,2.804,117,4.808,136,1.045,164,1.138,167,1.096,187,2.737,338,1.172,339,1.128,341,1.625,347,1.746,349,3.21,352,9.67,359,1.474,375,1.585,394,2.854,452,2.546,458,3.047,468,5.071,469,4.657,620,5.339,1287,2.535,1323,6.025,1324,7.857,1326,9.266,1377,2.29,1433,7.191]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage",[1477,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage",[4,2.426,44,1.461,53,0.743,77,2.216,78,2.042,94,0.994,108,0.484,111,1.518,116,1.333,136,0.566,164,0.616,167,1.376,213,1.65,226,1.948,244,2.153,338,0.634,339,0.611,341,1.963,342,0.986,343,2.126,344,7.11,347,0.946,359,0.798,373,1.189,375,2.272,380,2.915,389,2.527,391,4.238,394,2.253,400,3.103,452,1.379,457,1.853,458,2.56,482,3.459,560,1.678,607,3.251,666,6.763,676,4.106,692,3.091,714,5.828,716,3.286,717,5.338,722,3.452,724,4.176,737,3.745,745,2.957,776,6.668,846,6.11,854,1.738,858,2.313,861,2.986,863,2.74,896,1.805,897,2.263,910,5.267,911,2.604,918,3.341,927,3.169,989,2.74,990,5.26,999,3.475,1052,5.062,1106,2.426,1231,2.915,1280,3.231,1311,1.641,1377,1.24,1426,3.39,1463,4.633,1477,3.39,1478,5.84,1479,3.262,1480,7.321,1481,8.007,1482,3.763,1483,3.763]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak",[1484,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak",[4,2.433,44,1.466,53,0.745,77,2.222,78,2.047,94,0.996,108,0.485,111,1.523,116,1.337,136,0.568,164,0.618,167,1.378,213,1.655,226,1.954,244,2.16,338,0.636,339,0.613,341,1.964,342,0.989,343,2.13,347,0.949,359,0.801,373,1.193,375,2.274,380,2.922,389,2.53,391,4.245,394,2.257,400,3.107,452,1.383,457,1.859,458,2.566,482,3.463,560,1.683,607,3.259,636,9.069,665,6.774,692,3.096,714,5.839,716,3.291,717,5.347,722,3.453,724,4.186,737,3.75,745,2.964,776,6.675,846,6.12,854,1.743,858,2.32,861,2.995,863,2.749,896,1.81,897,2.27,910,5.275,911,2.612,918,3.349,927,3.176,989,2.749,999,3.483,1052,5.074,1106,2.433,1231,2.924,1280,3.235,1311,1.646,1377,1.244,1426,3.4,1463,4.644,1479,3.272,1480,7.331,1481,8.017,1484,3.4,1485,3.775,1486,3.775]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels",[1487,4.859]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels",[6,2.685,13,0.892,23,0.883,44,1.044,50,0.892,53,0.296,77,1.02,78,2.323,88,1.02,92,1.988,94,0.619,98,0.764,100,2.098,108,0.193,111,0.605,136,0.225,156,1.533,164,0.44,167,1.611,174,1.654,187,1.439,205,2.082,213,2.25,220,2.459,226,0.776,229,0.921,232,1.483,234,2.01,244,0.857,255,0.866,262,2.288,265,3.78,279,1.221,283,3.306,297,0.979,315,2.132,321,2.165,338,0.253,339,0.243,341,1.914,342,1.168,343,2.431,347,1.765,349,2.058,359,2.092,366,1.957,372,2.51,373,2.098,375,1.602,389,1,391,3.49,394,2.211,400,1.497,403,0.676,407,3.308,408,1.135,411,4.316,416,1.333,420,0.992,423,0.992,434,1.402,437,1.496,451,0.954,452,1.633,457,3.625,458,1.179,468,1.351,469,0.77,480,1.733,482,2.138,523,4.337,526,0.782,532,0.954,566,1.471,586,2.769,595,2.053,603,3.619,607,2.481,612,1.459,623,2.189,630,4.836,692,1.578,705,2.225,706,1.652,722,3.069,734,1.709,737,1.153,743,0.633,745,2.256,761,4.587,762,1.091,766,5.205,769,3.287,783,1.86,806,2.091,813,1.135,844,2.299,850,2.909,854,0.692,858,1.652,896,2.976,897,0.901,898,2.035,911,1.037,914,1.03,915,2.175,916,2.153,919,2.549,920,0.921,923,1.711,937,1.161,950,1.072,956,0.992,960,2.33,973,1.037,978,2.327,980,1.89,984,1.135,999,2.652,1014,1.299,1113,2.57,1117,1.021,1153,2.769,1155,1.957,1160,2.535,1164,1.189,1219,0.82,1270,1.413,1276,1.135,1280,1.996,1285,1.35,1287,2.896,1288,4.203,1311,0.653,1342,2.254,1351,1.413,1359,5.59,1363,2.977,1364,5.576,1375,2.387,1377,0.494,1379,3.535,1405,0.954,1409,2.535,1425,2.661,1468,1.299,1469,2.535,1470,1.299,1487,3.888,1488,5.132,1489,4.014,1490,2.132,1491,4.014,1492,2.535,1493,3.065,1494,3.655,1495,1.35,1496,1.299,1497,6.206,1498,4.456,1499,1.299,1500,2.688,1501,2.421,1502,3.655,1503,3.655,1504,1.499,1505,5.132,1506,1.299,1507,4.456,1508,3.065,1509,2.688,1510,1.35,1511,1.091,1512,3.655,1513,2.688,1514,1.499,1515,1.499,1516,6.206,1517,1.499,1518,5.132,1519,3.655,1520,1.189,1521,2.688,1522,2.688,1523,1.499,1524,1.499,1525,1.413,1526,3.655,1527,1.35,1528,1.35,1529,1.35,1530,2.688,1531,1.499,1532,1.35,1533,1.35,1534,1.35,1535,1.499]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data",[1536,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data",[21,1.68,44,2.402,53,0.596,78,2.164,92,2.155,94,0.859,97,1.254,100,1.955,108,0.63,111,1.217,120,2.121,136,0.454,164,0.494,167,1.609,168,7.198,174,1.819,187,1.93,213,1.323,226,2.536,229,3.011,244,1.726,256,2.087,261,2.316,262,2.758,265,4.082,321,2.38,332,1.854,338,0.509,339,0.49,341,1.706,342,1.621,343,1.838,347,1.554,349,1.393,359,0.64,373,1.955,375,1.624,380,2.446,389,2.418,394,2.899,407,2.24,411,4.376,415,2.121,434,1.573,437,3.964,452,1.795,457,3.046,458,1.323,482,1.13,532,1.921,560,2.185,578,2.121,607,2.728,653,7.961,692,2.773,722,3.351,737,1.294,745,2.481,751,3.158,752,6.818,755,3.964,756,5.185,769,3.276,850,1.71,854,1.393,858,1.854,870,6.212,896,1.447,897,1.814,911,3.39,916,2.886,919,2.803,920,3.011,950,3.504,994,2.978,998,5.572,999,2.915,1025,2.53,1045,2.615,1106,3.158,1153,2.286,1231,2.337,1280,1.714,1359,2.718,1360,8.336,1377,0.994,1487,2.286,1493,2.53,1536,2.846,1537,7.121,1538,7.035,1539,4.899,1540,4.899,1541,8.388,1542,4.899,1543,6.186,1544,4.899,1545,6.186,1546,6.186,1547,4.899,1548,4.899,1549,3.017,1550,4.899,1551,2.286]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot",[1370,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot",[13,3.382,44,2.207,50,3.382,53,1.122,78,1.988,94,0.789,108,0.73,111,3.673,136,0.855,164,0.931,167,1.632,184,5.119,203,3.575,265,3.655,338,0.958,339,0.922,341,1.632,342,1.489,343,3.075,359,1.205,373,1.796,380,3.951,389,2.491,408,5.996,493,4.927,692,2.013,850,5.161,898,3.164,999,4.709,1370,9.654,1376,6.512,1377,1.873,1415,4.219,1493,4.766,1552,6.446,1553,10.997,1554,7.914,1555,10.352,1556,5.361,1557,5.684,1558,5.684,1559,9.105,1560,5.684,1561,7.914,1562,5.684,1563,7.914,1564,9.105,1565,7.914,1566,5.684]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time",[1567,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time",[53,1.42,94,0.999,100,2.272,108,0.924,111,4.136,136,1.082,156,3.188,164,1.177,167,1.133,187,2.832,207,4.278,338,1.212,339,1.167,341,1.661,347,1.807,350,6.878,359,1.525,375,1.64,400,3.444,411,7.268,452,2.634,458,3.153,739,7.886,766,6.03,854,3.321,1287,2.623,1364,7.378,1377,2.369,1567,6.782]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit",[1568,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit",[48,5.364,53,1.133,78,2.786,94,0.797,108,0.737,111,2.314,136,0.863,156,2.741,164,0.939,167,1.442,174,2.956,176,5.8,213,2.515,244,3.281,321,3.869,338,0.967,339,0.931,341,1.772,342,2.398,343,2.718,347,1.441,359,1.216,373,1.812,375,1.308,394,1.806,400,3.074,452,2.101,457,4.505,458,3.492,607,4.434,692,2.82,722,3.513,745,4.033,748,9.572,854,2.649,896,2.75,897,3.449,914,3.504,1287,2.092,1377,1.89,1412,4.672,1568,5.166,1569,7.512,1570,7.512]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis",[1571,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis",[53,1.083,78,2.699,94,0.762,108,0.705,111,3.603,136,0.825,156,3.335,164,0.898,167,1.408,213,2.404,244,3.137,338,0.924,339,0.89,341,1.899,343,1.629,347,1.378,359,1.894,373,1.733,375,1.76,394,1.726,400,2.593,452,2.009,457,2.7,692,2.733,722,3.568,745,3.908,854,2.533,856,6.171,896,2.629,897,3.297,937,8.208,1043,6.441,1083,5.978,1287,2.815,1375,7.11,1377,1.807,1405,6.171,1412,6.286,1425,3.993,1571,4.939]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation",[1572,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation",[53,0.894,60,2.261,78,3.94,88,1.719,94,0.629,100,2.124,108,0.582,111,3.233,136,0.681,156,3.259,164,0.741,167,1.493,174,2.494,187,1.783,213,2.947,244,2.591,283,2.899,313,3.133,321,3.265,338,0.763,339,0.735,341,1.778,343,3.052,347,1.138,359,0.96,373,2.124,375,1.828,394,2.791,452,3.248,457,2.23,482,1.696,539,2.261,692,2.838,722,3.51,745,3.403,853,4.988,854,2.091,896,3.222,897,4.041,1082,5.222,1084,3.925,1280,1.584,1287,1.652,1375,7.614,1377,1.492,1412,3.688,1462,8.938,1464,4.271,1465,3.688,1572,4.079,1573,8.014,1574,8.363,1575,4.271]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate",[1576,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate",[53,1.205,94,0.847,108,0.784,111,3.813,136,0.918,156,2.859,164,0.999,167,1.31,213,2.675,283,2.631,300,5.579,338,1.028,339,0.99,341,1.489,342,2.782,347,1.533,359,1.294,373,1.928,375,1.391,394,3.194,437,3.396,451,6.016,452,2.235,458,3.643,539,3.045,613,4.221,638,4.84,740,8.044,763,6.541,882,4.064,896,2.925,897,3.668,898,3.396,1077,6.092,1219,3.338,1272,6.768,1287,2.225,1377,2.01,1576,5.754,1577,6.051,1578,9.45,1579,9.45]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis",[1501,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis",[53,1.254,94,0.882,108,0.816,111,3.891,136,0.955,156,2.938,164,1.039,167,1.001,338,1.07,339,1.03,341,1.849,347,1.595,350,7.656,359,2.045,375,1.947,400,2.868,411,6.338,423,7.497,603,4.978,766,7.159,937,8.917,966,6.216,1043,6.269,1287,3.114,1375,7.617,1377,2.092,1425,4.623,1501,5.719]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp",[1580,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp",[44,2.491,53,1.267,94,0.891,108,0.824,111,2.588,116,2.271,136,0.965,156,2.958,164,1.05,167,1.011,220,6.135,254,8.365,261,2.402,338,1.081,339,1.041,341,1.936,347,2.16,359,1.36,373,2.027,375,1.463,400,3.257,455,2.844,458,3.769,692,3.433,757,6.509,769,5.72,900,3.636,1287,2.34,1377,2.113,1391,4.37,1405,6.172,1407,4.671,1442,7.166,1577,6.259,1580,5.777,1581,4.761]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq",[1582,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq",[44,2.416,53,1.229,94,0.864,108,0.8,111,2.51,116,2.203,136,0.936,156,2.898,164,1.019,167,1.328,220,6.081,261,2.33,338,1.049,339,1.01,341,1.916,347,2.116,359,1.32,373,1.966,375,1.419,400,3.207,413,3.961,455,2.759,458,3.692,692,3.381,751,5.429,755,6.134,757,6.409,769,5.661,882,3.043,900,3.527,988,5.068,1006,7.507,1287,2.27,1377,2.05,1391,4.239,1407,4.531,1577,6.133,1581,6.251,1582,5.605,1583,6.222]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func",[1584,4.967]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func",[44,2.207,53,1.122,60,2.837,94,0.789,100,2.501,108,0.73,111,2.293,116,2.013,136,0.855,156,2.723,164,0.931,167,1.248,194,2.878,213,2.492,220,5.025,261,3.876,283,2.451,338,0.958,339,0.922,341,1.921,347,1.989,359,1.205,373,2.501,375,1.296,394,3.259,452,2.082,458,3.47,539,2.837,616,5.534,621,5.946,692,3.666,757,6.61,769,5.677,896,2.725,897,3.417,900,3.222,1021,4.306,1103,3.314,1287,2.073,1377,1.873,1391,3.872,1407,4.139,1577,5.763,1584,4.402,1585,10.997,1586,7.129,1587,6.86,1588,7.914]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset",[1589,5.378]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset",[44,2.428,53,1.235,94,0.869,108,0.804,111,2.523,116,2.214,136,0.941,156,2.908,164,1.024,167,0.986,220,6.09,261,2.342,338,1.054,339,1.015,341,1.919,347,2.123,359,1.326,373,1.976,375,1.426,400,3.215,455,2.773,458,3.705,692,3.389,737,4.397,757,6.426,769,5.671,856,6.772,900,3.544,1287,2.281,1377,2.06,1391,4.26,1405,6.093,1407,4.554,1577,6.153,1581,4.642,1589,5.244]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc",[1590,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc",[44,2.626,53,1.335,94,0.939,108,0.869,111,2.728,116,2.394,136,1.017,156,3.063,164,1.107,167,1.066,220,5.493,261,2.532,338,1.14,339,1.097,341,1.97,347,2.237,359,1.888,373,2.137,400,2.272,621,4.416,668,7.084,692,3.153,757,5.977,769,4.715,856,6.396,900,3.833,1043,5.411,1377,2.228,1391,4.607,1405,5.667,1584,5.237,1589,5.671,1590,6.378,1591,8.614]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise",[1592,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise",[44,2.049,53,1.042,94,0.733,108,0.678,111,2.128,116,1.868,136,0.793,156,2.584,164,0.864,167,0.832,220,4.826,261,1.975,303,6.772,310,5.566,338,0.889,339,0.856,341,1.93,347,1.887,359,2.02,373,1.667,375,1.713,400,2.937,452,3.49,621,3.445,669,9.12,692,2.659,737,3.221,757,5.041,769,3.977,856,5.931,900,2.99,1043,6.36,1287,2.739,1297,8.985,1377,1.738,1391,3.594,1405,4.78,1407,5.468,1442,6.141,1584,4.086,1589,4.424,1591,7.759,1592,4.975,1593,8.258,1594,8.258,1595,9.527]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse",[1596,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse",[44,1.746,53,0.888,92,1.566,94,0.624,108,0.578,111,1.814,116,1.592,136,0.676,156,2.3,164,0.736,167,0.709,213,1.971,220,4.404,255,2.596,261,2.503,262,2.005,303,6.18,310,5.08,315,3.567,338,0.758,339,0.73,341,1.887,347,2.22,350,6.558,359,2.003,369,4.442,373,2.112,375,2.015,400,2.968,434,3.486,595,4.482,621,2.936,671,7.977,692,2.367,737,4.245,757,4.488,769,3.54,850,2.548,896,2.156,900,2.548,1043,6.399,1287,3.223,1377,1.481,1391,3.063,1405,5.624,1407,6.434,1491,4.049,1495,4.049,1496,3.897,1584,3.482,1591,7.196,1593,7.659,1594,7.659,1596,4.24,1597,8.13,1598,10.529,1599,7.187,1600,7.979]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp",[1601,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp",[44,1.818,53,0.924,77,3.101,94,0.65,108,0.602,111,1.889,116,1.658,136,0.704,156,2.37,164,0.766,167,1.288,220,4.51,261,2.579,303,6.329,310,5.202,338,0.789,339,1.118,341,1.909,343,2.427,347,1.731,359,2.037,369,4.53,373,1.479,375,2.055,389,1.281,400,2.745,457,3.391,621,3.057,673,7.609,692,2.439,737,4.308,751,4.44,755,4.549,757,4.624,769,3.648,900,2.653,973,5.653,1006,6.139,1043,6.474,1076,3.143,1077,3.018,1287,3.287,1377,1.542,1391,3.189,1405,5.736,1407,6.561,1584,3.626,1591,7.339,1593,7.811,1594,7.811,1601,4.415,1602,8.236,1603,6.887]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin",[1604,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin",[44,2.197,53,1.117,94,0.786,108,0.727,111,2.283,116,2.004,136,0.851,156,2.715,164,0.926,167,0.892,220,5.013,254,7.611,261,2.119,338,0.954,339,0.918,341,1.968,347,1.982,359,2.084,373,1.788,400,3.052,621,3.695,674,9.268,692,2.794,751,5.086,755,4.392,757,5.296,769,4.178,856,6.067,900,3.207,1006,6.695,1043,6.505,1377,1.864,1391,3.855,1405,6.256,1442,5.086,1580,5.096,1582,5.096,1584,4.382,1589,4.745,1591,9.124,1604,5.336]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square",[1605,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square",[44,1.668,53,0.848,78,2.716,92,1.496,94,0.596,108,0.552,111,1.733,116,1.521,136,0.646,156,2.223,164,0.703,167,1.224,220,4.285,261,2.419,262,1.915,303,6.014,310,4.943,315,3.407,338,0.724,339,1.048,341,1.862,343,2.307,347,2.17,359,1.964,369,4.342,373,1.357,375,1.97,389,1.175,400,2.608,434,3.369,457,3.18,595,4.361,621,2.805,647,3.254,676,6.841,692,2.287,737,4.174,751,4.164,755,4.323,757,4.337,769,3.421,850,2.434,900,2.434,1006,5.884,1043,6.313,1076,2.883,1077,2.768,1287,3.15,1377,1.415,1391,2.926,1405,5.498,1407,6.289,1491,3.868,1495,3.868,1496,3.723,1584,3.326,1591,7.034,1593,7.486,1594,7.486,1605,4.051,1606,8.24,1607,6.092,1608,5.818,1609,7.764,1610,7.764,1611,6.46,1612,3.868]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen",[1613,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen",[6,4.28,53,1.38,94,0.971,108,0.898,111,4.08,136,1.051,164,1.144,167,1.102,220,5.021,338,1.178,339,1.134,341,1.63,347,1.756,359,1.482,369,5.386,375,1.594,394,2.864,458,3.989,468,5.085,469,4.674,620,5.358,757,4.692,769,4.818,778,5.813,779,6.906,1287,2.549,1377,2.303,1391,4.762,1407,5.089,1433,7.217,1613,6.592,1614,6.989]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble",[1489,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble",[13,4.495,40,3.166,54,2.962,100,3.637,111,3.048,174,2.804,187,2.095,265,4.665,297,3.474,304,4.322,321,3.67,342,1.98,343,1.581,354,2.32,394,2.766,400,3.525,407,3.949,408,4.031,411,6.207,448,3.805,457,2.619,603,3.102,630,3.874,634,3.572,737,4.333,761,6.853,763,3.43,769,4.001,822,6.805,827,4.121,856,3.015,868,4.792,950,3.805,966,3.874,978,3.387,999,3.166,1083,4.121,1117,5.147,1164,4.221,1363,4.333,1364,3.625,1375,3.474,1389,6.805,1448,5.018,1465,4.333,1489,6.805,1525,8.286,1527,4.792,1528,4.792,1529,4.792,1532,4.792,1533,4.792,1534,4.792,1575,5.018,1616,4.612,1617,3.741,1618,4.792,1619,5.32,1620,5.32,1621,4.612,1622,5.32,1623,5.32,1624,5.32]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble-attributes",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.format",[13,3.816]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.format",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.points",[761,4.188]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.points",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.type",[100,2.027]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.type",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.xinc",[1533,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.xinc",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.xorg",[1534,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.xorg",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.xref",[1532,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.xref",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.yinc",[1528,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.yinc",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.yorg",[1529,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.yorg",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.yref",[1527,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.yref",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.Preamble-functions",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade",[1372,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade",[69,5.172,89,4.26,94,1.004,95,5.004,100,2.285,108,0.929,111,4.378,117,5.004,136,1.088,156,2.489,164,1.184,171,4.26,174,2.684,187,2.848,234,3.262,269,4.303,293,5.479,321,3.513,338,1.219,339,1.174,340,3.801,341,1.667,354,3.153,355,3.957,411,4.444,575,5.89,588,4.396,630,5.266,634,4.855,691,6.065,705,3.61,740,4.927,759,5.004,763,4.662,1363,5.89,1364,6.336,1586,6.514,1625,6.539,1626,6.821,1627,5.479,1628,5.716]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade-functions",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments",[1629,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments",[53,1.35,94,0.949,108,0.878,111,2.758,136,1.028,164,1.119,167,1.078,213,2.997,255,5.779,338,1.152,339,1.109,341,1.904,347,1.718,359,2.122,373,2.16,437,3.806,705,4.995,756,4.978,800,8.149,813,6.793,896,3.278,927,4.866,1287,2.494,1331,7.519,1377,2.252,1425,4.978,1625,6.304,1627,8.866,1628,5.51,1629,6.447,1630,8.457,1631,8.966,1632,5.926]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points",[1633,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points",[53,1.544,94,1.086,108,1.005,111,3.156,136,1.176,164,1.281,167,1.233,271,6.301,291,7.57,338,1.319,339,1.269,341,1.752,343,2.904,359,1.659,389,2.14,437,5.935,761,6.963,769,5.177,1185,7.961,1311,3.41,1377,2.577,1628,4.807,1633,7.377,1634,9.219]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup",[1635,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup",[53,1.28,77,2.46,78,3.027,94,0.9,108,0.833,111,2.615,136,0.975,164,1.061,167,1.536,283,2.795,317,4.862,338,1.093,339,1.052,341,1.551,342,2.922,359,1.374,389,2.666,403,3.904,437,5.425,476,6.086,526,4.514,745,3.281,794,5.204,850,3.673,1040,6.303,1311,2.826,1314,7.049,1377,2.135,1628,3.983,1630,8.164,1635,6.113,1636,8.655,1637,8.722,1638,7.796,1639,9.745,1640,10.4,1641,6.481]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count",[1510,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count",[53,1.544,94,1.086,100,3.089,108,1.005,111,3.156,136,1.176,164,1.281,167,1.233,338,1.319,339,1.269,341,1.752,343,2.904,359,1.659,389,2.14,437,4.354,630,8.133,882,4.78,1113,6.872,1311,3.41,1364,6.659,1377,2.577,1510,7.045,1511,7.763,1628,4.807]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode",[1632,5.559]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode",[53,1.365,94,0.96,108,0.888,111,2.788,136,1.04,164,1.132,167,1.089,238,3.68,338,1.165,339,1.122,341,1.803,342,2.367,359,1.466,375,1.576,389,3.028,403,3.117,407,5.13,434,3.604,437,3.848,539,3.45,705,3.45,928,4.514,1156,5.629,1219,4.942,1230,4.782,1280,2.417,1311,3.014,1377,2.277,1415,5.13,1627,6.842,1628,5.55,1632,5.991,1642,9.031,1643,10.061,1644,9.031,1645,8.518,1646,6.225,1647,5.991,1648,6.912]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate",[1649,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate",[53,1.564,94,1.1,108,1.018,111,3.196,136,1.191,164,1.297,167,1.249,338,1.335,339,1.286,341,1.766,359,1.68,389,2.167,400,3.31,437,4.41,638,6.284,734,4.606,740,6.712,763,6.351,1311,3.454,1364,6.712,1377,2.61,1468,8.54,1628,4.868,1649,7.471,1650,9.851]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type",[1506,5.559]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type",[14,2.747,50,2.724,53,0.904,54,2.549,88,1.738,94,1.322,100,2.549,103,2.783,108,0.588,111,1.847,136,0.689,164,0.75,167,1.798,174,3.309,186,6.764,194,2.318,225,3.588,238,4.059,312,2.914,317,2.572,321,4.331,338,0.772,339,0.743,341,1.446,342,1.775,359,0.971,375,1.044,389,2.725,394,1.441,403,2.065,407,5.029,413,2.914,434,2.388,437,2.549,455,3.576,539,4.45,593,3.969,612,2.484,613,3.167,616,4.118,623,3.729,630,4.934,634,5.985,635,5.375,651,3.839,708,5.267,734,3.168,852,5.682,891,3.632,928,2.99,972,3.469,974,3.334,1156,5.518,1185,5.518,1219,3.707,1230,4.687,1280,1.601,1311,1.996,1364,4.616,1377,1.508,1415,3.398,1506,3.969,1587,5.873,1628,4.164,1637,3.839,1643,8.408,1645,6.39,1647,3.969,1651,6.39,1652,4.318,1653,7.265,1654,3.074,1655,4.578,1656,6.39,1657,3.839,1658,4.578]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index",[1659,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index",[14,3.947,53,1.535,78,3.405,94,1.08,108,0.999,111,3.136,136,1.169,164,1.273,167,1.225,316,6.633,338,1.31,339,1.262,341,1.745,343,2.892,359,1.648,389,2.126,437,4.327,734,4.552,759,6.736,933,8.434,1311,3.389,1377,2.561,1627,8.054,1628,4.777,1659,7.331]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count",[1660,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count",[53,1.554,94,1.093,108,1.011,111,3.175,116,3.475,136,1.184,164,1.289,167,1.241,338,1.327,339,1.277,341,1.759,343,2.915,359,1.669,389,2.153,437,4.382,457,4.831,705,4.898,734,4.588,1311,3.432,1377,2.593,1511,5.731,1627,8.726,1628,4.837,1660,7.09]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count",[1661,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count",[48,4.322,53,1.133,94,0.797,100,1.812,108,0.737,111,2.314,136,0.863,156,3.401,164,0.939,167,1.738,191,4.218,213,2.515,275,3.922,294,3.651,338,0.967,339,0.931,341,1.862,343,1.704,347,1.441,359,2.096,373,1.812,375,2.087,437,3.193,452,2.101,455,2.543,482,2.148,623,4.672,630,8.312,705,3.976,850,5.186,896,2.75,1280,2.006,1287,2.092,1364,3.908,1377,1.89,1425,4.177,1506,4.972,1511,8.503,1628,5.623,1661,5.41,1662,7.174,1663,7.965,1664,5.166,1665,5.736,1666,9.15]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode",[1667,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode",[53,1.223,94,0.86,108,0.796,111,2.498,136,0.931,156,2.13,164,1.014,167,1.323,213,2.715,283,2.67,300,5.635,316,5.718,338,1.044,339,1.005,341,1.83,342,2.199,347,1.556,359,1.78,373,1.956,375,1.914,394,1.949,411,5.158,437,3.447,452,2.268,482,2.318,588,5.101,686,4.508,705,5.792,759,5.807,896,2.969,897,3.723,927,3.36,1219,3.388,1272,6.836,1280,2.165,1287,2.258,1364,6.955,1377,2.04,1425,4.508,1627,6.359,1628,5.852,1646,7.56,1667,5.84,1668,8.577,1669,9.522]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type",[1670,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type",[53,1.138,94,0.8,100,2.898,108,0.74,111,3.7,136,0.867,156,1.983,164,0.943,167,1.259,213,3.503,316,5.444,338,0.971,339,0.935,341,1.865,342,1.51,347,1.448,359,1.945,373,2.525,375,1.822,394,2.515,403,2.599,437,4.448,452,2.927,455,2.555,482,2.158,616,3.502,623,6.508,630,6.679,705,3.989,896,3.831,1021,4.366,1156,4.693,1219,4.372,1280,2.015,1287,2.102,1311,2.513,1364,7.088,1377,1.898,1425,4.196,1476,4.995,1587,4.995,1627,6.054,1628,6.087,1646,5.19,1651,5.435,1670,5.435,1671,11.038,1672,7.99,1673,9.172,1674,7.99]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index",[1675,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index",[53,1.321,78,3.463,94,0.929,108,0.86,111,2.699,136,1.006,164,1.095,166,6.116,167,1.773,294,4.258,316,6.022,338,1.128,339,1.086,341,1.888,343,2.626,347,1.681,359,2.234,375,1.526,437,3.724,759,6.116,933,9.102,1287,2.44,1377,2.204,1425,4.871,1627,7.979,1628,5.432,1660,8.917,1664,6.025,1675,6.309,1676,8.839,1677,8.839]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count",[1678,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count",[48,4.281,53,1.117,94,1.262,108,0.727,111,2.283,116,2.794,136,0.851,156,2.715,164,0.926,167,1.731,194,3.994,213,2.481,275,3.884,294,3.602,338,0.954,339,0.918,341,1.852,343,1.681,347,1.422,349,3.644,359,2.084,373,1.788,375,1.799,437,3.15,452,2.073,457,3.884,482,2.119,705,2.824,759,5.458,776,5.458,850,5.148,896,2.713,1280,1.979,1287,2.064,1364,6.188,1377,1.864,1425,4.12,1511,8.481,1627,8.732,1628,5.582,1632,4.904,1664,5.096,1678,5.336,1679,9.083]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade",[1382,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade",[69,4.759,77,3.343,78,2.327,79,3.843,88,2.525,94,0.924,95,6.094,108,0.855,111,4.24,136,1.001,164,1.089,187,2.62,188,3.581,234,3.001,269,3.959,305,5.278,338,1.122,339,1.08,340,3.497,341,1.77,343,1.977,354,2.901,355,3.641,359,1.411,432,3.47,457,3.276,539,3.321,575,5.419,611,3.444,612,3.611,613,4.603,722,3.111,778,3.611,844,4.185,856,3.771,886,3.843,893,4.289,1152,4.533,1290,5.768,1327,4.044,1375,4.345,1381,5.419,1625,6.943,1628,5.413,1680,7.635,1681,6.275,1682,5.993,1683,5.353]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade-functions",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable",[779,4.134]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable",[53,1.626,94,1.144,108,1.058,111,3.322,136,1.239,164,1.348,167,1.298,338,1.388,339,1.336,341,2.091,359,1.746,389,2.253,469,4.23,722,2.987,779,7.033,1376,7.217,1427,7.138,1628,5.06,1683,5.005]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable",[778,3.48]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable",[6,3.874,53,1.626,94,1.144,108,1.058,111,3.322,136,1.239,164,1.348,167,1.298,338,1.388,339,1.336,341,2.091,359,1.746,389,2.253,722,2.987,778,5.92,1376,7.217,1427,7.138,1628,5.06,1683,5.005]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak",[1684,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak",[53,1.584,94,1.114,108,1.031,111,3.237,136,1.207,164,1.314,167,1.265,338,1.352,339,1.302,341,1.933,359,1.701,389,2.195,636,9.769,716,4.046,722,2.94,737,4.26,910,5.239,994,6.035,1484,7.226,1628,4.93,1683,4.876,1684,7.567]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms",[1685,6.049]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms",[53,1.605,94,1.129,108,1.044,111,3.279,136,1.222,164,1.331,167,1.281,338,1.37,339,1.319,341,1.944,344,8.152,359,1.724,389,2.223,716,4.078,722,2.963,737,4.294,910,5.308,994,6.084,1477,7.32,1628,4.994,1683,4.94,1685,7.665]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup",[1152,4.369]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup",[9,2.871,48,3.7,53,0.554,77,2.233,78,2.058,94,0.39,100,2.562,108,0.361,111,1.132,116,1.635,136,0.422,156,2.79,164,0.46,167,1.075,174,2.531,187,1.819,262,4.456,296,3.303,321,3.313,332,2.838,338,0.473,339,0.456,341,1.959,342,1.787,343,1.372,347,2.826,349,3.744,355,2.527,359,1.817,375,1.053,389,1.61,400,3.007,416,3.381,423,6.939,452,2.156,458,1.231,480,2.977,482,1.051,566,1.536,668,2.977,722,1.742,733,3.499,748,5.719,817,5.911,818,3.303,822,4.16,844,2.905,856,5.859,886,2.667,914,1.769,935,3.363,988,3.761,1082,4.016,1106,2.977,1152,1.912,1219,2.527,1280,0.982,1287,1.024,1375,6.392,1377,0.925,1382,4.16,1389,8.063,1405,4.341,1458,4.16,1462,6.142,1465,3.761,1492,6.432,1568,2.528,1569,4.356,1570,4.356,1571,4.16,1572,2.528,1574,7.109,1628,5.501,1683,5.441,1686,9.426,1687,7.537,1688,4.618,1689,4.618,1690,4.16,1691,4.16,1692,4.618,1693,4.618,1694,4.618,1695,2.807]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade",[1371,5.777]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade",[69,5.359,88,2.844,92,2.61,94,1.041,95,5.184,108,0.963,111,4.217,117,5.184,136,1.127,156,2.578,157,5.677,164,1.227,187,2.951,234,3.38,269,4.458,300,5.03,305,5.944,338,1.263,339,1.216,340,3.938,341,1.705,354,3.267,355,4.1,432,3.907,539,3.74,575,6.103,603,6.096,613,5.184,1290,6.495,1381,6.103,1404,6.103,1586,6.749,1625,6.689,1628,5.846,1696,7.493]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade-functions",[]],["title/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge",[1697,5.223]],["text/api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge",[13,3.041,53,0.628,78,1.112,88,1.206,94,0.89,98,1.621,99,2.146,100,2.541,108,0.408,111,1.282,116,1.81,136,0.478,156,1.094,164,1.859,167,1.602,174,2.985,187,2.013,207,1.891,213,2.24,214,2.483,259,3.214,262,2.279,304,5.544,321,3.907,333,2.462,338,0.536,339,0.516,341,1.618,342,2.251,343,1.518,347,1.61,349,3.968,355,2.796,359,1.084,361,2.292,373,1.615,375,1.166,389,1.753,394,1.609,400,1.717,413,2.023,416,3.177,422,2.551,423,4.859,452,2.348,457,1.565,458,1.394,482,1.19,566,1.739,603,6.62,622,6.745,642,4.855,643,4.43,660,4.286,668,3.294,705,4.687,722,2.173,727,3.721,743,2.158,745,2.587,790,4.603,882,1.555,896,2.45,898,2.845,972,2.408,1155,2.315,1219,4.401,1230,2.199,1280,1.112,1287,1.159,1371,4.603,1377,1.047,1401,4.603,1403,8.133,1404,7.354,1405,3.253,1410,2.998,1415,3.793,1628,3.938,1637,4.286,1686,9.922,1690,4.603,1691,4.603,1697,2.589,1698,7.341,1699,5.11]],["title/api/instruments/#power-supply",[718,2.649,719,3.5]],["text/api/instruments/#power-supply",[]],["title/api/instruments/#pytestlab.instruments.PowerSupply",[112,3.856]],["text/api/instruments/#pytestlab.instruments.PowerSupply",[]],["title/api/instruments/#pytestlab.instruments.PowerSupply-classes",[299,3.075]],["text/api/instruments/#pytestlab.instruments.PowerSupply-classes",[]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig",[1700,5.559]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig",[12,1.885,21,3.206,24,2.557,43,2.298,44,1.436,77,3.286,78,3.207,92,1.288,94,0.513,100,3.129,101,2.863,108,0.475,112,2.223,116,2.039,136,0.556,164,0.605,167,1.719,174,2.138,187,2.268,234,1.667,265,2.66,299,2.761,317,3.974,321,2.798,338,0.623,339,0.6,340,1.943,341,1.716,342,2.268,343,2.373,347,0.929,354,1.612,369,5.901,372,2.816,373,1.82,375,1.313,389,1.011,390,2.383,394,3.434,396,1.845,400,3.494,403,1.667,422,2.875,452,1.354,458,1.621,560,1.648,563,2.058,566,3.151,620,5.401,634,2.482,712,2.414,716,2.882,722,3.079,730,2.177,734,4.756,737,4.364,818,2.644,844,2.325,898,3.206,914,2.206,918,5.665,1219,2.023,1616,3.204,1700,4.992,1701,3.33,1702,3.486,1703,3.486,1704,3.697,1705,8.657]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig-attributes",[]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.current",[734,2.998]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.current",[]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.state",[369,3.224]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.state",[]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.voltage",[737,2.751]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.voltage",[]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig-functions",[]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__",[947,5.378]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__",[94,1.159,108,1.072,112,5.017,136,1.255,164,1.366,167,1.315,338,1.407,339,1.354,341,2.048,342,2.187,369,5.114,375,1.903,389,2.283,569,7.275,734,4.756,737,4.364,947,6.998,1700,7.234]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade",[1706,5.559]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade",[14,2.669,69,4.708,77,3.32,78,3.435,79,3.802,88,2.499,94,0.914,95,6.051,108,0.846,112,5.906,136,0.99,156,2.265,164,1.078,187,2.593,188,3.543,234,2.969,269,3.917,305,5.223,338,1.11,339,1.068,340,3.46,341,1.76,343,1.956,354,2.871,355,3.602,359,1.396,432,3.433,457,3.241,539,3.286,575,5.362,611,3.407,612,3.572,613,4.555,712,6.835,722,3.098,737,2.824,844,4.14,886,3.802,893,4.244,1290,5.707,1327,4.001,1381,5.362,1680,7.582,1681,6.209,1682,5.93,1683,5.316,1707,5.099,1708,6.939]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade-functions",[]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current",[1709,6.049]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current",[53,1.605,94,1.129,108,1.044,112,4.887,136,1.222,164,1.331,167,1.578,338,1.37,339,1.319,341,1.944,359,1.724,389,2.223,391,5.26,400,2.73,716,4.078,722,2.963,734,4.68,918,4.649,1683,4.94,1708,6.448,1709,7.665,1710,7.045]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state",[1711,5.378]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state",[6,4.446,53,1.205,77,2.315,78,2.134,88,3.154,94,1.313,108,0.784,112,3.668,136,0.918,164,0.999,167,0.962,187,3.273,194,4.207,338,1.028,339,0.99,341,1.903,359,1.294,369,4.751,373,2.986,375,1.895,384,5.807,389,2.996,403,2.752,468,4.177,469,4.855,563,5.91,564,4.038,566,3.338,722,2.798,778,4.509,896,4.531,1099,6.296,1219,3.338,1311,2.66,1683,5.05,1708,6.592,1711,5.116,1712,5.754,1713,9.57]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage",[1714,6.049]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage",[53,1.605,94,1.129,108,1.044,112,4.887,136,1.222,164,1.331,167,1.578,338,1.37,339,1.319,341,1.944,359,1.724,389,2.223,391,5.26,400,2.73,716,4.078,722,2.963,737,4.294,918,4.649,1683,4.94,1708,6.448,1714,7.665,1715,7.045]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off",[]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off",[53,1.637,94,1.151,108,1.065,112,4.984,136,1.247,164,1.357,167,1.307,338,1.397,339,1.345,341,2.095,359,1.758,389,2.268,469,4.258,563,6.092,722,2.999,779,6.531,1683,5.038,1708,6.576]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on",[]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on",[6,3.9,53,1.637,94,1.151,108,1.065,112,4.984,136,1.247,164,1.357,167,1.307,338,1.397,339,1.345,341,2.095,359,1.758,389,2.268,563,6.092,722,2.999,778,5.498,1683,5.038,1708,6.576]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set",[156,2.207]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set",[48,5.375,53,1.138,94,0.8,100,2.525,108,0.74,112,3.465,136,0.867,156,3.156,164,0.943,167,0.908,187,3.147,262,4.416,338,0.971,339,0.935,341,2.017,347,2.705,349,3.69,355,4.372,359,1.695,389,2.509,400,3.328,416,3.961,452,2.111,458,2.526,722,2.365,734,4.631,737,4.902,907,4.366,1377,1.898,1405,5.086,1683,4.856,1691,7.197,1706,6.926,1707,8.058,1708,6.339,1716,7.197,1717,7.197,1718,5.19]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply",[112,3.856]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply",[9,2.679,14,3.154,21,3.605,35,2.853,38,3.95,43,2.679,44,3.021,60,2.151,69,3.082,88,1.636,90,2.443,94,1.404,100,2.459,108,0.554,116,2.755,119,1.955,130,2.421,136,0.648,156,2.228,164,0.706,167,1.364,187,1.697,189,2.648,194,2.182,206,3.03,214,3.146,220,2.378,226,2.23,234,2.921,261,1.614,269,2.564,295,3.03,299,3.731,304,2.465,310,2.743,320,2.936,336,6.187,338,0.726,339,0.699,340,2.265,341,1.942,347,1.083,354,1.879,355,3.544,372,2.108,373,1.362,375,1.477,376,5.258,380,3.884,389,1.179,391,2.265,416,3.211,458,1.889,471,2.648,480,2.778,539,2.151,558,2.591,564,2.853,595,3.638,692,3.766,710,4.175,712,4.23,716,1.756,718,3.638,719,4.807,721,5.895,722,2.303,734,2.015,737,1.849,882,2.108,900,2.443,923,2.743,926,2.778,927,2.338,961,3.51,999,2.564,1230,2.981,1232,3.265,1275,5.275,1277,3.082,1278,3.51,1280,2.265,1281,3.265,1282,4.907,1283,6.172,1284,3.51,1327,2.619,1362,3.614,1366,3.736,1367,3.51,1381,3.51,1706,3.736,1719,4.309,1720,4.309,1721,4.065]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply-attributes",[]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.SCPI_MAP",[564,4.245]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.SCPI_MAP",[]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.config",[692,2.271]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.config",[]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.model_config",[682,4.245]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.model_config",[]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply-functions",[]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel",[722,1.899]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel",[14,3.159,77,2.109,78,3.41,94,0.772,95,6.746,100,2.462,108,0.714,112,3.341,136,0.836,164,0.91,167,1.418,187,3.543,214,3.785,244,3.179,338,0.937,339,0.902,341,1.907,343,2.673,373,2.843,375,1.267,380,3.889,389,2.808,452,2.036,457,5.055,458,2.436,552,5.308,607,4.337,692,3.453,722,3.518,745,3.944,854,2.567,896,4.314,898,4.337,1377,1.831,1379,8.443,1706,8.899,1724,6.533]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display",[1376,4.587]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display",[6,4.249,53,1.365,94,0.96,100,2.184,108,0.888,112,4.156,136,1.04,164,1.132,167,1.089,187,2.722,338,1.165,339,1.122,341,1.619,347,1.737,359,1.466,369,5.362,375,1.576,394,2.843,452,2.532,458,3.03,468,4.54,469,4.64,601,5.43,620,5.319,778,4.901,779,5.822,1287,2.521,1325,8.518,1326,7.829,1376,7.916,1377,2.277,1390,9.247,1433,7.165,1725,6.912]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config",[1143,3.539]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config",[94,1.183,100,2.691,108,1.094,112,6.657,136,1.281,164,1.394,167,1.342,338,1.436,339,1.382,389,2.329,595,5.785,692,3.921,721,6.452,1089,5.892,1090,7.016,1143,4.7]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration",[1701,5.777]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration",[14,2.527,53,0.809,78,3.173,92,2.628,94,0.569,108,0.526,112,2.464,116,3.213,136,0.616,164,0.671,167,1.653,187,1.614,215,4.945,265,2.879,297,4.071,338,0.691,339,0.665,341,1.835,342,1.074,343,2.505,359,1.6,367,4.313,369,5.147,375,0.934,380,3.112,389,2.614,391,3.276,394,1.962,396,3.766,400,2.094,403,1.848,416,3.09,434,2.137,457,3.715,526,4.397,560,3.76,563,4.201,564,4.126,689,3.996,692,2.207,712,4.071,721,3.104,722,3.264,734,4.242,737,3.237,745,2.074,843,4.723,854,1.892,904,4.539,918,3.566,927,3.383,933,3.25,943,5.986,1040,4.539,1276,4.723,1280,1.433,1311,1.786,1377,2.486,1680,7.864,1700,8.611,1701,3.69,1710,3.552,1712,3.864,1713,5.879,1715,3.552,1726,6.234,1727,6.234,1728,6.234,1729,6.234]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id",[742,4.245]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id",[53,1.498,94,1.582,100,2.396,108,0.975,112,4.56,136,1.141,164,1.242,167,1.195,187,2.987,317,6.204,338,1.278,339,1.231,341,1.884,342,2.894,359,1.608,389,2.875,396,4.786,564,5.02,742,5.02,1311,3.307,1319,5.629,1322,9.948]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output",[563,3.57]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output",[6,3.812,14,2.384,53,0.75,77,1.441,78,2.834,88,2.232,94,0.527,100,2.77,108,0.488,112,2.284,135,2.67,136,0.571,140,2.587,164,0.622,167,1.524,187,2.316,194,1.923,232,2.096,244,2.173,283,4.602,300,2.55,338,0.64,339,0.616,341,1.571,342,0.995,343,3.26,347,0.954,349,1.754,359,0.805,369,4.074,372,3.52,373,2.77,375,1.641,394,1.851,422,4.045,452,1.391,457,4.761,458,1.665,468,2.956,469,3.021,563,4.88,564,2.514,566,2.078,612,3.191,620,3.464,692,2.083,706,3.614,722,3.502,743,2.483,745,1.923,778,4.397,779,5.224,844,3.699,854,1.754,896,3.451,898,4.007,914,2.252,922,3.013,923,5.159,924,2.819,956,2.514,1014,5.098,1113,4.135,1230,2.628,1287,1.385,1295,2.765,1377,1.938,1379,5.709,1431,3.582,1432,3.582,1433,4.665,1730,8.766,1731,3.292,1732,3.292,1733,3.798,1734,7.197,1735,3.798]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current",[1710,5.559]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current",[4,2.206,14,2.198,53,0.676,77,2.555,78,2.678,88,2.058,90,3.073,94,0.753,100,1.082,108,0.44,112,2.058,116,2.384,136,0.515,164,0.56,167,1.466,187,2.651,214,2.634,244,1.958,259,3.409,338,0.577,339,0.556,341,1.945,342,0.897,343,1.61,347,0.86,359,0.726,373,2.127,375,2.2,380,2.706,389,2.783,391,4.664,394,2.119,400,3.547,416,2.687,452,1.254,457,4.108,458,1.501,482,3.125,560,1.526,563,3.018,564,2.266,689,2.871,692,3.143,714,5.482,716,3.929,717,5.875,722,3.437,734,3.579,745,2.745,776,6.434,846,5.8,854,1.581,861,2.715,863,2.492,896,3.227,898,3.018,918,5.517,927,2.942,989,2.492,999,3.226,1099,4.107,1106,2.206,1231,2.651,1280,2.918,1311,1.492,1377,1.128,1463,4.301,1480,6.42,1481,7.694,1710,6.636,1724,4.546,1736,3.423,1737,3.423]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage",[1715,5.559]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage",[4,2.206,14,2.198,53,0.676,77,2.555,78,2.678,88,2.058,90,3.073,94,0.753,100,1.082,108,0.44,112,2.058,116,2.384,136,0.515,164,0.56,167,1.466,187,2.651,214,2.634,244,1.958,259,3.409,338,0.577,339,0.556,341,1.945,342,0.897,343,1.61,347,0.86,359,0.726,373,2.127,375,2.2,380,2.706,389,2.783,391,4.664,394,2.119,400,3.547,416,2.687,452,1.254,457,4.108,458,1.501,482,3.125,560,1.526,563,3.018,564,2.266,689,2.871,692,3.143,714,5.482,716,3.929,717,5.875,722,3.437,737,3.284,745,2.745,776,6.434,846,5.8,854,1.581,861,2.715,863,2.492,896,3.227,898,3.018,918,5.517,927,2.942,989,2.492,999,3.226,1099,4.107,1106,2.206,1231,2.651,1280,2.918,1311,1.492,1377,1.128,1463,4.301,1480,6.42,1481,7.694,1715,6.636,1724,4.546,1738,3.423,1739,3.423]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset",[987,4.587]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset",[53,1.615,94,1.511,108,1.051,112,4.919,136,1.23,156,3.458,164,1.339,167,1.29,338,1.379,339,1.328,341,1.95,347,2.056,349,4.642,359,1.735,564,5.415,987,8.115,1139,7.614,1287,2.984]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current",[1718,5.777]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current",[14,3.349,48,4.934,53,0.942,77,1.811,78,3.536,88,2.651,94,0.663,100,2.207,108,0.613,112,2.869,116,2.473,136,0.718,156,2.403,164,0.781,167,1.525,187,2.751,214,3.393,244,2.729,338,0.804,339,0.774,341,1.92,343,2.075,347,1.199,359,1.012,373,2.61,375,1.884,400,2.346,413,3.037,452,1.748,455,2.115,457,4.765,458,2.092,564,3.158,611,2.469,692,3.427,722,3.597,734,5.323,745,3.536,854,3.816,896,3.961,898,3.888,1287,1.74,1377,1.572,1581,3.541,1717,6.291,1718,4.297,1724,5.857,1740,5.409,1741,6.587,1742,6.291,1743,4.771]],["title/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage",[907,4.859]],["text/api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage",[14,2.747,48,2.484,53,0.904,77,1.738,78,3.328,88,3.061,94,0.636,100,2.141,108,0.588,112,2.753,116,3.157,136,0.689,156,2.331,164,0.75,167,1.57,187,2.668,206,3.219,214,3.291,244,2.619,338,0.772,339,0.743,341,1.897,343,2.013,347,1.15,359,0.971,373,2.549,375,1.84,399,3.274,400,2.276,452,1.677,455,2.03,457,4.905,458,2.007,539,2.285,563,3.772,564,3.031,689,2.425,692,3.369,722,3.581,737,4.894,745,3.43,854,4.117,882,3.314,896,3.867,898,3.772,907,3.469,1240,4.318,1262,4.318,1287,1.67,1377,1.508,1405,4.313,1581,3.398,1716,6.103,1724,5.682,1740,5.248,1741,6.39,1744,4.124,1745,4.578]],["title/api/instruments/#waveform-generator",[220,2.603,769,2.498]],["text/api/instruments/#waveform-generator",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator",[114,2.412]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator-attributes",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WAVEFORM_PARAM_COMMANDS",[1746,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WAVEFORM_PARAM_COMMANDS",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator-classes",[299,3.075]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator-classes",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo",[1763,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo",[4,4.093,12,5.652,92,2.211,94,0.882,100,3.401,170,4.262,187,2.5,227,4.541,238,2.587,265,2.932,283,4.16,290,3.702,297,4.146,299,3.044,309,4.262,323,5.719,342,1.664,343,2.865,354,2.768,375,1.448,396,4.262,408,7.307,455,2.815,526,3.311,560,2.831,565,5.324,607,4.753,611,3.286,667,4.541,739,6.216,759,6.673,843,6.468,888,4.203,905,4.203,999,3.778,1018,5.171,1040,4.623,1764,5.719,1765,5.719,1766,5.719,1767,9.097,1768,8.537,1769,5.324,1770,6.349,1771,7.4,1772,6.349,1773,6.349]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo-attributes",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo.bytes_free",[1765,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo.bytes_free",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo.bytes_used",[1764,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo.bytes_used",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo.files",[12,3.271]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo.files",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo-functions",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade",[1774,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade",[94,1.207,108,1.117,114,3.922,136,1.308,164,1.423,338,1.466,339,1.411,340,4.569,341,2.002,343,2.583,1680,9.039,1683,5.284,1775,10.428,1776,6.331]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade-functions",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable",[779,4.134]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable",[53,1.681,94,1.183,108,1.094,114,3.203,136,1.281,164,1.394,167,1.342,338,1.436,339,1.382,341,2.111,359,1.806,389,2.329,620,5.016,779,5.489,1377,2.806,1683,5.176,1776,6.201,1777,7.382]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable",[778,3.48]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable",[53,1.681,94,1.183,108,1.094,114,3.203,136,1.281,164,1.394,167,1.342,338,1.436,339,1.382,341,2.111,359,1.806,389,2.329,620,5.016,778,4.621,1377,2.806,1683,5.176,1776,6.201,1777,7.382]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance",[1778,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance",[53,1.626,94,1.144,108,1.058,114,3.097,136,1.239,164,1.348,167,1.298,338,1.388,339,1.336,341,2.091,342,2.158,359,1.746,389,2.253,400,2.766,624,5.06,914,3.154,1377,2.713,1683,5.005,1776,5.996,1778,7.767,1779,8.747,1780,7.417]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit",[1781,5.559]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit",[53,1.659,94,1.167,108,1.079,114,3.16,136,1.264,164,1.375,167,1.324,226,5.287,338,1.416,339,1.363,341,2.103,359,1.782,389,2.298,626,7.045,1377,2.768,1683,5.106,1776,6.117,1781,8.854]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary",[1782,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary",[53,1.241,77,3.218,94,0.873,108,0.808,114,2.364,136,0.945,164,1.029,167,0.991,262,2.802,338,1.059,339,1.02,341,2.179,342,1.647,347,2.131,359,2.344,389,1.719,400,3.451,621,4.105,667,4.495,856,4.806,1377,2.071,1442,5.466,1683,6.716,1757,7.997,1776,8.047,1782,5.928,1783,7.111,1784,6.537,1785,4.868,1786,5.661,1787,5.661,1788,4.868,1789,4.762,1790,4.986]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc",[1791,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc",[53,1.574,94,1.107,108,1.024,114,2.998,136,1.199,164,1.305,167,1.257,338,1.344,339,1.294,341,2.141,359,2.098,389,2.181,400,2.678,621,5.206,668,5.139,856,5.606,1377,2.626,1683,6.011,1776,7.202,1785,6.174,1789,6.039,1791,7.518]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse",[1792,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse",[53,1.078,77,3.871,78,1.91,94,0.758,108,0.702,114,2.054,136,0.821,164,0.894,167,1.405,262,4.314,338,0.92,339,0.886,341,2.073,347,2.79,359,2.052,389,1.494,400,3.653,566,2.988,621,3.566,624,3.355,647,4.136,649,4.229,671,4.136,755,4.96,856,4.361,1377,1.799,1442,4.96,1597,7.069,1599,8.714,1606,8.091,1683,5.88,1749,9.674,1776,7.045,1784,6.07,1785,4.229,1788,4.229,1789,4.136,1790,4.331,1792,5.15,1793,10.582]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp",[1794,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp",[53,1.26,77,3.67,94,0.886,108,0.82,114,2.4,136,0.96,164,1.045,167,1.006,262,2.845,338,1.076,339,1.036,341,2.162,347,2.153,359,2.286,389,1.746,400,3.622,621,4.168,647,4.835,673,4.835,755,4.769,856,4.855,1377,2.102,1442,5.522,1602,7.671,1683,6.552,1776,7.851,1784,6.588,1785,4.943,1788,4.943,1789,4.835,1790,5.062,1794,6.019,1795,5.197]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine",[1796,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine",[53,1.3,77,3.32,94,0.914,108,0.846,114,2.476,136,0.99,164,1.078,167,1.038,262,2.935,338,1.11,339,1.068,341,2.171,347,2.198,359,2.31,389,1.801,400,3.516,621,4.299,674,5.362,755,4.869,856,4.958,1377,2.169,1442,5.638,1683,6.621,1776,7.933,1784,6.692,1785,5.099,1788,5.099,1789,4.988,1790,5.223,1795,5.362,1796,6.209]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square",[1797,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square",[53,1.26,77,3.67,94,0.886,108,0.82,114,2.4,136,0.96,164,1.045,167,1.006,262,2.845,338,1.076,339,1.036,341,2.162,347,2.153,359,2.286,389,1.746,400,3.622,621,4.168,647,4.835,676,4.487,755,4.769,856,4.855,1377,2.102,1442,5.522,1606,7.671,1683,6.552,1776,7.851,1784,6.588,1785,4.943,1788,4.943,1789,4.835,1790,5.062,1795,5.197,1797,6.019]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult",[1798,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult",[6,2.244,24,3.301,78,1.669,88,1.811,100,3.557,116,3.427,166,3.301,174,1.771,186,4.001,187,1.879,207,2.839,226,4.276,234,2.152,261,2.615,262,4.508,265,2.203,288,3.203,296,3.412,299,2.288,321,2.318,342,2.165,343,1.417,347,2.076,354,2.08,369,3.511,390,3.075,396,2.382,400,3.509,452,1.748,455,2.115,457,2.349,468,2.398,469,2.451,487,3.474,532,3.037,539,3.486,563,2.656,648,3.886,664,3.785,665,4.001,666,4.001,667,3.412,668,3.075,671,3.615,673,5.291,675,4.297,676,3.354,722,2.446,730,2.81,734,5.108,737,3.544,740,3.25,751,3.075,755,3.888,763,3.075,769,3.699,850,2.704,856,4.683,859,5.409,914,1.827,927,2.589,1099,5.291,1235,3.615,1405,3.037,1442,4.502,1602,5.54,1606,3.785,1607,4.5,1608,4.297,1654,3.203,1703,4.5,1779,4.136,1784,4.758,1799,4.297,1800,4.136,1801,4.297,1802,4.771,1803,4.001,1804,4.297,1805,4.5,1806,4.001]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult-attributes",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.amplitude",[1442,4.134]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.amplitude",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.channel",[722,1.899]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.channel",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.duty_cycle",[1606,5.088]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.duty_cycle",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.frequency",[755,3.57]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.frequency",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.function",[261,2.402]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.function",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.load_impedance",[1800,5.559]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.load_impedance",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.offset",[856,3.635]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.offset",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.output_state",[1799,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.output_state",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.phase",[1784,4.369]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.phase",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.symmetry",[1602,5.088]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.symmetry",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.voltage_unit",[1801,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.voltage_unit",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult-functions",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator",[114,2.412]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator",[14,3.228,21,4.433,43,2.784,77,3.579,88,1.7,94,1.106,97,1.862,100,1.416,108,0.576,114,2.995,116,2.82,136,0.674,140,3.052,156,1.541,161,2.852,164,0.733,167,1.694,194,2.268,220,3.679,234,2.021,245,2.965,269,2.665,275,2.206,279,3.648,283,3.434,300,3.007,304,2.563,310,2.852,338,0.755,339,0.727,340,4.184,341,2.036,347,1.126,349,2.069,355,3.648,367,3.099,370,2.665,372,2.191,373,1.416,375,1.521,415,3.15,429,2.472,434,4.152,468,2.252,469,2.301,482,1.677,539,2.236,558,2.693,592,3.15,595,4.472,601,2.693,612,2.431,692,3.806,722,3.238,745,2.268,769,2.373,771,6.902,773,3.883,882,2.191,886,2.587,890,3.554,894,3.325,977,3.648,1147,6.167,1155,4.855,1280,2.785,1295,3.262,1327,2.723,1356,4.225,1511,5.798,1662,4.035,1731,3.883,1807,4.48,1808,4.225,1809,4.48,1810,3.099,1811,9.429,1812,3.757,1813,3.757]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator-attributes",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel_count",[1812,5.378]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel_count",[14,3.817,60,4.7,94,1.308,116,3.334,389,2.576,457,4.636,563,5.242,722,2.787]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.config",[692,2.271]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.config",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.model_config",[682,4.245]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.model_config",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator-functions",[]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings",[1814,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings",[53,0.872,60,2.205,94,0.613,108,0.567,114,1.661,136,0.664,164,0.723,167,1.245,213,1.936,261,1.654,283,1.905,338,0.744,339,0.717,341,1.919,342,2.745,343,1.312,347,1.11,349,3.646,359,1.399,361,3.541,373,1.395,375,1.801,394,3.297,397,4.009,400,2.652,452,1.618,482,1.654,526,2.303,539,2.205,621,6.84,624,6.042,667,3.158,668,4.252,669,5.372,671,4.997,673,4.997,674,3.597,676,4.638,722,2.337,743,2.785,755,4.395,769,2.339,856,4.475,896,2.118,914,3.589,956,2.923,1006,3.009,1042,5.941,1043,4.799,1106,5.09,1280,1.545,1287,1.611,1377,1.455,1442,5.09,1805,4.165,1810,3.055,1814,4.165,1815,8.26,1816,1.915,1817,9.832,1818,4.165,1819,9.832,1820,4.165,1821,9.372,1822,5.301,1823,2.104,1824,4.165,1825,4.165,1826,3.978,1827,2.252]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel",[722,1.899]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel",[14,3.219,78,2.777,94,0.793,95,6.826,100,2.509,108,0.734,114,2.148,136,0.859,164,0.935,167,1.251,174,2.947,187,3.595,214,3.857,317,4.459,321,3.857,338,0.963,339,0.927,341,1.636,342,2.392,343,2.931,373,2.509,380,3.963,389,2.936,452,2.092,457,4.858,458,2.503,552,5.409,607,4.42,642,6.015,722,3.376,724,5.678,896,3.807,898,4.42,914,3.496,1377,1.881,1379,7.827,1774,9.78,1816,3.443,1828,7.939]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms",[1829,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms",[53,1.471,94,1.034,108,0.957,114,2.802,136,1.12,164,1.219,167,1.174,235,7.035,265,3.44,338,1.256,339,1.209,341,2.031,342,1.952,343,2.213,347,1.872,359,2.01,375,2.162,482,2.789,722,3.086,743,4.002,759,5.153,769,3.945,914,2.853,1280,2.605,1287,2.717,1377,2.454,1810,5.153,1816,3.23,1823,3.548,1827,3.798,1829,7.025,1830,8.939]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder",[1831,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder",[12,2.725,44,2.943,53,1.055,77,2.028,88,2.876,92,1.861,94,1.223,99,2.244,108,0.687,114,2.01,136,1.522,164,0.875,167,1.194,174,3.556,213,3.861,227,3.821,290,6.439,338,0.901,339,0.867,341,1.937,342,1.4,347,1.343,359,1.867,361,2.396,373,3.028,375,2.307,383,3.922,397,5.823,405,4.778,429,2.949,452,1.957,578,6.191,692,2.683,872,3.64,896,2.562,934,8.558,989,3.891,1182,4.352,1280,1.869,1287,1.949,1302,4.239,1321,8.026,1767,8.305,1827,2.725,1831,5.039,1832,7.147,1833,5.039,1834,5.039,1835,6.012,1836,6.569]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data",[1837,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data",[6,3.216,53,1.35,94,0.949,108,0.878,114,2.571,136,1.028,164,1.119,167,1.078,262,3.048,283,3.867,338,1.152,339,1.109,341,1.793,342,2.783,343,2.664,347,2.253,359,1.902,400,2.297,468,4.508,469,3.512,722,2.962,914,3.434,915,4.067,919,3.911,1783,8.391,1837,6.447,1838,9.013,1839,9.013,1840,6.157,1841,8.966,1842,9.437,1843,9.437,1844,6.157,1845,6.157]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary",[1844,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary",[13,2.003,44,2.585,53,0.665,77,2.302,78,1.871,88,2.302,94,0.994,97,2.521,99,2.547,100,0.611,108,0.248,114,0.727,136,1.077,156,0.665,164,0.316,167,1.389,174,3.354,213,4.051,244,2.558,245,2.228,255,1.116,262,0.862,265,3.674,283,1.452,331,2.451,338,0.326,339,0.314,341,1.834,342,1.745,343,1,347,0.846,359,1.286,361,2.005,373,3.029,375,2.107,383,1,384,2.069,394,1.408,400,1.502,403,1.518,405,3.613,408,2.55,413,1.23,420,2.228,422,1.68,428,1.407,434,2.79,452,2.914,455,1.492,468,0.972,469,0.993,482,1.261,539,0.965,557,1.464,566,2.447,569,1.382,570,1.675,571,1.675,577,3.642,578,1.359,634,3.002,635,3.547,667,5.119,692,2.535,708,1.262,722,2.119,739,1.407,743,2.259,745,0.979,759,1.337,769,1.783,850,3.437,854,1.555,872,1.317,896,3.814,897,2.024,898,2.489,900,1.096,908,1.533,914,1.289,915,1.15,919,5.17,949,1.574,954,1.574,965,2.823,978,3.406,1113,2.367,1219,1.842,1238,5.997,1280,2.328,1287,0.705,1302,1.533,1304,1.823,1321,2.67,1508,1.621,1771,2.918,1783,7.578,1810,2.329,1812,1.621,1816,0.838,1823,1.604,1827,1.717,1835,1.533,1836,1.675,1838,7.454,1839,5.462,1840,6.832,1842,3.175,1843,6.279,1844,1.741,1846,1.823,1847,1.675,1848,5.046,1849,9.316,1850,1.823,1851,5.35,1852,4.471,1853,4.471,1854,4.471,1855,1.933,1856,1.741,1857,5.35,1858,3.366,1859,3.366,1860,6.065,1861,4.217,1862,5.35,1863,3.175,1864,4.217,1865,5.046,1866,4.217,1867,4.217,1868,1.823,1869,1.823,1870,1.823,1871,1.933,1872,3.366,1873,4.028,1874,5.046,1875,5.046,1876,4.217,1877,1.823,1878,1.823,1879,7.157,1880,1.933,1881,3.366,1882,1.933,1883,1.933,1884,1.933,1885,3.175,1886,1.823,1887,3.175,1888,3.175,1889,1.675]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv",[1845,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv",[44,2.478,53,0.414,77,2.422,78,2.439,88,2.647,94,0.969,97,2.353,99,2,100,0.663,108,0.27,114,0.789,116,0.743,136,1.187,164,0.344,167,1.572,174,3.282,213,3.983,244,2.724,245,1.389,257,1.625,265,3.644,283,1.559,338,0.354,339,0.341,341,1.852,342,1.827,343,1.074,347,0.527,359,1.01,361,2.135,373,2.939,375,2.121,383,1.086,394,1.138,397,5.015,400,1.901,403,0.947,405,3.784,420,1.389,422,1.804,428,1.528,434,2.951,445,1.76,452,2.737,455,1.603,457,1.033,482,0.786,539,2.377,557,2.739,558,2.173,566,3.097,569,1.501,570,1.819,571,1.819,577,1.709,578,1.476,597,1.558,634,3.197,635,3.777,667,4.047,692,2.922,708,1.371,722,1.889,743,2.389,745,2.411,759,1.452,761,2.361,769,1.915,854,1.67,872,1.43,896,3.582,897,1.262,898,2.012,914,1.384,915,1.249,919,5.321,949,1.709,954,1.709,956,2.393,965,3.031,966,2.632,977,1.709,978,3.603,1113,2.542,1219,1.148,1230,2.501,1238,4.289,1280,2.439,1287,0.765,1302,1.665,1321,2.868,1508,1.76,1634,1.979,1662,1.89,1771,4.906,1783,7.618,1810,4.415,1816,0.91,1823,1,1827,1.07,1835,1.665,1836,1.819,1838,7.107,1839,5.747,1840,7.107,1845,1.89,1846,1.979,1847,1.819,1848,5.338,1849,9.748,1850,1.979,1861,4.491,1863,3.409,1864,4.491,1865,3.409,1866,4.491,1867,4.491,1868,1.979,1869,1.979,1870,1.979,1873,3.256,1874,5.338,1875,5.338,1876,4.491,1877,1.979,1878,1.979,1885,3.409,1886,1.979,1887,3.409,1888,3.409,1889,3.133,1890,6.381,1891,5.659,1892,1.76,1893,1.665,1894,5.659,1895,2.099,1896,2.099,1897,3.615,1898,2.099,1899,2.099,1900,3.409,1901,3.615]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst",[1902,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst",[53,1.42,94,0.999,108,0.924,114,2.705,136,1.082,156,2.474,164,1.177,167,1.133,338,1.212,339,1.167,341,2.009,342,1.884,343,2.136,347,1.807,359,1.965,369,5.444,375,2.113,394,2.917,429,3.968,468,3.615,620,5.458,722,3.035,743,3.912,914,2.754,1280,2.515,1287,2.623,1816,3.118,1823,3.426,1827,3.667,1902,6.782,1903,9.235,1904,8.032]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation",[1905,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation",[53,1.211,94,0.851,100,1.937,108,0.788,114,2.306,120,5.862,136,0.922,156,2.109,164,1.004,167,1.493,213,2.688,338,1.033,339,0.995,341,1.906,342,2.185,343,1.821,347,1.54,359,1.768,369,5.111,373,1.937,375,1.902,394,2.983,403,2.765,429,3.383,452,2.246,468,3.082,620,4.911,722,2.805,743,3.52,896,2.94,897,3.686,898,3.413,914,2.348,1219,3.355,1280,2.144,1287,2.236,1816,2.658,1823,2.921,1827,3.126,1903,8.534,1905,5.782,1906,10.167,1907,10.167,1908,9.474,1909,5.782,1910,6.13,1911,6.13,1912,6.13,1913,6.13,1914,6.13]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep",[1915,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep",[53,1.42,94,0.999,108,0.924,114,2.705,136,1.082,156,2.474,164,1.177,167,1.133,338,1.212,339,1.167,341,2.009,342,1.884,343,2.136,347,1.807,359,1.965,369,5.444,375,2.113,394,2.917,429,3.968,468,3.615,620,5.458,722,3.035,743,3.912,806,5.301,914,2.754,1280,2.515,1287,2.623,1816,3.118,1823,3.426,1827,3.667,1903,9.235,1915,6.782]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config",[1143,3.539]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config",[94,1.136,100,2.585,108,1.051,114,4.092,136,1.23,164,1.339,167,1.29,338,1.379,339,1.328,389,2.238,468,4.112,469,4.203,595,5.645,692,3.852,771,7.091,1089,5.66,1090,6.847,1143,4.515,1147,8.426,1377,2.695]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude",[1916,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude",[44,2.291,48,3.201,53,1.165,88,2.239,94,1.128,99,2.478,108,0.758,114,2.219,136,0.887,164,0.966,167,1.464,213,2.586,226,4.203,238,4.076,254,7.192,262,2.63,338,0.994,339,0.957,341,1.943,342,1.546,343,1.752,347,1.482,359,1.722,361,2.645,373,1.864,375,2.393,383,3.053,389,1.614,394,2.556,397,6.08,400,3.12,403,2.661,405,3.201,422,2.945,455,2.615,482,2.209,624,3.625,692,2.089,722,2.749,737,2.53,743,3.921,794,3.547,914,2.259,1280,2.063,1311,2.572,1377,1.943,1442,3.802,1816,2.558,1823,2.81,1916,5.313,1917,7.749,1918,6.289,1919,4.947,1920,5.899]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit",[1921,5.559]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit",[53,1.445,94,1.016,108,0.94,114,2.752,136,1.101,164,1.198,167,1.153,226,5.35,238,4.697,338,1.233,339,1.188,341,1.954,342,1.917,359,1.552,375,2.137,384,4.496,389,2.002,403,3.3,434,4.887,482,2.74,732,5.805,734,3.421,764,6.591,1219,4.004,1280,3.277,1311,3.19,1377,2.411,1804,9.311,1921,6.343,1922,6.901,1923,6.901]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points",[1924,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points",[44,2.148,53,1.092,77,3.406,88,2.1,94,1.079,99,3.262,108,0.711,114,2.081,136,1.464,164,0.906,167,0.872,174,2.883,213,2.426,238,3.965,316,3.769,338,0.933,339,0.898,341,1.956,342,1.45,343,2.666,359,1.647,361,2.481,373,2.454,375,2.338,383,4.02,389,2.455,396,2.762,403,2.495,405,4.214,422,2.762,434,2.885,482,2.072,667,6.418,692,1.959,722,2.657,734,2.587,743,3.279,761,7.275,769,2.93,794,3.327,914,2.119,1103,5.233,1113,3.89,1280,2.716,1302,4.389,1311,2.412,1321,6.161,1377,1.823,1810,3.828,1816,2.399,1823,4.276,1835,4.389,1836,4.796,1924,5.218]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate",[1925,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate",[44,2.28,48,3.186,53,1.159,88,2.228,94,1.124,99,2.466,108,0.754,114,2.208,136,0.883,164,0.961,167,1.46,213,2.574,238,4.068,262,2.618,338,0.99,339,0.953,341,1.877,342,1.538,343,1.744,347,1.475,359,1.245,361,2.633,373,1.855,375,2.389,383,3.039,389,1.606,394,1.848,397,6.068,400,3.112,403,2.648,405,3.186,422,2.931,455,2.603,482,2.198,532,3.737,624,3.608,638,4.657,667,4.199,692,2.079,722,2.742,740,4,743,3.417,763,5.218,769,3.109,794,3.53,914,2.249,1103,3.424,1280,2.053,1311,2.56,1377,1.934,1803,4.923,1810,4.062,1816,2.546,1823,2.797,1824,8.737,1917,7.733,1918,6.269,1925,5.537,1926,5.871]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary",[1927,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary",[53,1.342,78,3.125,94,0.944,108,0.874,114,2.557,116,2.408,136,1.023,164,1.113,167,1.816,238,4.693,338,1.146,339,1.103,341,1.9,342,2.341,343,2.02,359,1.442,375,2.038,389,2.73,403,3.066,482,2.546,722,2.954,743,3.772,850,3.854,914,2.604,1017,5.701,1037,5.893,1106,5.759,1280,2.378,1311,2.964,1377,2.24,1415,5.046,1511,4.951,1816,2.948,1823,3.239,1927,6.412]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config",[1928,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config",[6,1.798,53,0.755,94,0.531,99,2.482,108,0.491,114,1.437,116,1.353,136,0.575,145,2.432,164,0.626,167,0.602,174,3.018,214,1.856,261,2.705,262,3.221,304,3.38,338,0.644,339,0.62,341,2.029,342,1.548,343,1.135,347,1.815,359,2.266,361,2.65,372,1.869,375,1.648,383,3.058,389,1.045,394,2.926,396,2.95,400,2.953,405,3.206,452,1.4,469,1.963,471,3.631,482,1.431,566,3.233,586,2.895,620,2.251,621,5.741,624,3.631,648,4.812,668,2.463,669,3.112,671,2.895,673,2.895,676,2.687,722,2.407,755,2.127,856,2.166,914,2.263,1006,4.026,1028,4.155,1103,2.228,1280,1.336,1377,1.259,1379,8.817,1442,2.463,1602,6.45,1606,6.974,1702,3.604,1711,3.204,1784,5.989,1798,5.573,1799,3.442,1800,3.312,1801,3.442,1816,1.657,1825,5.573,1826,5.322,1916,3.442,1919,3.204,1928,3.604,1929,10.011,1930,3.442,1931,3.442,1932,3.442,1933,5.909,1934,5.909,1935,8.13,1936,3.442,1937,8.13,1938,5.909,1939,5.909,1940,3.442,1941,4.386,1942,5.909,1943,3.442,1944,3.442,1945,3.442]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory",[1946,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory",[44,2.491,53,1.267,88,2.434,94,1.194,99,2.694,108,0.824,114,2.413,136,0.965,164,1.05,167,1.011,213,2.812,238,4.22,265,3.97,338,1.081,339,1.041,341,1.936,342,1.681,343,2.88,359,1.36,361,2.876,373,2.027,375,2.362,384,3.942,389,1.755,403,2.893,405,3.481,422,3.202,482,2.402,692,2.271,722,2.87,743,3.629,759,4.438,761,4.189,872,4.37,914,2.457,1113,4.51,1280,2.243,1311,2.797,1377,2.113,1769,8.13,1810,4.438,1816,2.781,1823,4.095,1830,9.144,1946,6.05,1947,9.695]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency",[1931,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency",[44,2.358,48,3.294,53,1.199,88,2.304,94,1.15,99,2.55,108,0.78,114,2.284,136,0.913,164,0.994,167,1.486,213,2.662,238,4.126,262,2.707,338,1.023,339,0.985,341,1.899,342,1.591,343,1.804,347,1.525,359,1.287,361,2.722,373,1.918,375,2.417,383,3.142,389,1.661,394,1.911,397,6.154,400,3.167,403,2.738,405,3.294,422,3.031,455,2.692,482,2.273,624,3.731,692,2.15,722,2.791,743,3.497,751,3.913,755,3.38,794,3.65,914,2.325,1006,6.899,1280,2.123,1311,2.647,1377,2,1816,2.633,1823,2.892,1917,7.843,1918,6.415,1931,5.468,1948,6.071]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function",[1930,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function",[53,1.507,94,1.06,108,0.98,114,2.87,136,1.148,164,1.249,167,1.203,261,2.857,338,1.286,339,1.238,341,1.984,342,2.522,343,2.267,359,1.618,375,2.195,389,2.087,403,3.442,482,2.857,722,3.121,734,3.567,743,4.063,914,2.922,1103,4.45,1280,2.669,1311,3.327,1816,3.309,1823,3.635,1930,6.873,1949,10.541]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset",[1932,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset",[44,2.346,48,3.278,53,1.193,88,2.293,94,1.147,99,2.538,108,0.776,114,2.272,136,0.909,164,0.989,167,1.482,213,2.649,238,4.117,262,2.694,338,1.018,339,0.981,341,1.896,342,1.583,343,1.795,347,1.518,359,1.281,361,2.709,373,1.909,375,2.413,383,3.127,389,1.653,394,1.902,397,6.142,400,3.159,403,2.725,405,3.278,422,3.016,455,2.679,482,2.262,624,3.713,692,2.139,722,2.783,737,2.592,743,3.485,794,3.633,856,4.679,858,3.713,914,2.314,1280,2.113,1311,2.634,1377,1.99,1816,2.62,1823,2.878,1826,8.469,1917,7.827,1918,6.393,1932,5.442,1950,6.041]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance",[1936,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance",[44,2.075,48,2.899,53,1.055,88,2.028,94,1.052,99,2.244,108,0.687,114,2.01,136,0.804,164,0.875,167,1.51,213,2.343,238,4.403,257,4.138,262,2.382,338,0.901,339,0.867,341,1.813,342,1.4,343,1.587,347,1.343,359,1.133,361,2.396,373,1.688,375,2.307,389,2.621,394,2.772,397,5.823,400,2.546,403,2.41,405,2.899,407,3.966,422,2.667,455,2.369,482,2.001,624,6.457,648,7.172,692,1.892,722,2.607,730,3.147,743,3.2,794,3.213,869,4.481,914,2.902,1219,5.243,1280,1.869,1311,2.33,1377,1.76,1656,8.305,1779,6.569,1816,2.317,1917,7.421,1918,5.869,1936,4.812,1951,3.966,1952,5.343,1953,8.805,1954,5.343,1955,5.343]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity",[1956,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity",[44,2.584,53,1.314,88,2.525,94,1.371,99,2.795,108,0.855,114,2.503,136,1.001,164,1.089,167,1.049,213,2.917,238,4.577,338,1.122,339,1.08,341,1.884,342,1.744,343,1.977,359,1.411,361,2.984,373,2.102,375,2.252,384,4.089,389,2.701,403,3.001,405,3.611,422,3.321,625,8.56,634,4.467,635,5.278,651,5.58,692,2.356,722,2.608,743,2.809,914,2.548,980,6.943,1219,3.641,1311,2.901,1377,2.192,1816,2.885,1951,6.538,1956,6.275,1957,6.275]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state",[1711,5.378]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state",[53,1.445,78,2.559,94,1.016,108,0.94,114,2.752,136,1.101,164,1.198,167,1.153,238,3.818,338,1.233,339,1.188,341,1.954,342,1.917,343,2.174,359,1.552,369,5.665,375,2.137,389,2.002,394,2.304,403,3.3,482,2.74,563,4.074,620,6.089,722,3.06,743,3.956,914,2.802,1280,2.559,1311,3.19,1377,2.411,1711,6.136,1816,3.173,1951,5.431]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase",[1940,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase",[44,2.313,48,3.231,53,1.176,88,2.26,94,1.135,99,2.501,108,0.765,114,2.24,136,0.896,164,0.975,167,1.471,213,2.611,226,4.23,238,4.093,262,2.655,338,1.004,339,0.966,341,1.949,342,1.56,343,1.769,347,1.496,359,1.733,361,2.67,373,1.882,375,2.401,383,3.082,389,1.629,394,1.875,397,6.105,400,3.135,403,2.686,405,3.231,422,2.973,455,2.64,482,2.23,624,3.659,692,2.109,722,2.763,743,3.451,794,3.581,914,2.281,1280,2.083,1311,2.596,1377,1.962,1784,5.568,1816,2.582,1823,2.837,1917,7.78,1918,6.331,1921,5.162,1940,5.364,1958,9.332,1959,5.955]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state",[1960,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state",[53,1.498,78,2.652,94,1.053,97,3.985,108,0.975,114,2.853,136,1.141,164,1.242,167,1.195,238,3.906,338,1.278,339,1.231,341,1.884,359,1.608,369,5.727,375,1.73,389,2.075,394,2.388,403,3.421,482,2.84,620,6.191,1280,2.652,1311,3.307,1324,8.31,1377,2.499,1784,6.531,1960,7.153,1961,7.153]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle",[1945,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle",[53,1.554,94,1.093,108,1.011,114,2.961,136,1.184,164,1.289,167,1.241,238,3.998,338,1.327,339,1.277,341,1.916,342,2.063,343,2.338,359,1.669,375,1.795,389,2.153,400,3.297,403,3.55,672,5.963,722,2.905,743,3.323,914,3.015,1103,4.59,1311,3.432,1377,2.593,1612,7.09,1816,3.413,1823,3.75,1945,7.09]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode",[1962,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode",[53,1.554,94,1.093,108,1.011,114,2.961,136,1.184,164,1.289,167,1.241,238,3.998,338,1.327,339,1.277,341,1.916,342,2.571,343,2.338,359,1.669,375,1.795,389,2.153,403,3.55,672,5.963,722,2.905,743,3.323,914,3.015,1103,4.59,1219,4.307,1311,3.432,1377,2.593,1616,6.823,1816,3.413,1823,3.75,1962,7.424]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period",[1963,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period",[53,1.554,94,1.093,108,1.011,114,2.961,136,1.184,164,1.289,167,1.241,238,3.998,338,1.327,339,1.277,341,1.916,342,2.063,343,2.338,359,1.669,375,1.795,389,2.153,400,3.297,403,3.55,672,5.963,722,2.905,743,3.323,914,3.015,1103,4.59,1311,3.432,1377,2.593,1597,6.244,1816,3.413,1823,3.75,1963,7.424]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both",[1964,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both",[53,1.516,94,1.066,108,0.986,114,2.888,136,1.155,164,1.257,167,1.21,214,3.73,338,1.294,339,1.246,341,1.731,342,2.012,343,2.281,359,1.628,362,5.491,389,2.643,396,4.823,400,2.579,411,4.718,434,5.038,448,5.491,672,5.816,722,2.86,850,4.351,914,2.94,1377,2.529,1404,6.253,1496,6.655,1752,7.241,1964,7.241,1965,7.677,1966,7.677,1967,6.915]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading",[1967,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading",[53,1.544,94,1.086,108,1.005,114,2.942,136,1.176,164,1.281,167,1.233,238,3.982,338,1.319,339,1.269,341,1.911,342,2.05,343,2.324,359,1.659,375,1.784,389,2.14,400,3.284,403,3.528,672,5.926,722,2.894,743,3.302,914,2.996,1103,4.561,1311,3.41,1377,2.577,1750,7.377,1752,7.377,1816,3.392,1823,3.726,1967,7.045]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing",[1968,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing",[53,1.544,94,1.086,108,1.005,114,2.942,136,1.176,164,1.281,167,1.233,238,3.982,338,1.319,339,1.269,341,1.911,342,2.05,343,2.324,359,1.659,375,1.784,389,2.14,400,3.284,403,3.528,672,5.926,722,2.894,743,3.302,914,2.996,1103,4.561,1311,3.41,1377,2.577,1750,7.377,1754,7.822,1816,3.392,1823,3.726,1968,7.377]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width",[1969,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width",[53,1.554,94,1.093,108,1.011,114,2.961,136,1.184,164,1.289,167,1.241,238,3.998,338,1.327,339,1.277,341,1.916,342,2.063,343,2.338,359,1.669,375,1.795,389,2.153,400,3.297,403,3.55,672,5.963,722,2.905,743,3.323,914,3.015,1103,4.59,1311,3.432,1377,2.593,1599,7.09,1816,3.413,1823,3.75,1969,7.424]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry",[1943,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry",[53,1.554,94,1.093,108,1.011,114,2.961,136,1.184,164,1.289,167,1.241,238,3.998,338,1.327,339,1.277,341,1.916,342,2.063,343,2.338,359,1.669,375,1.795,389,2.153,400,3.297,403,3.55,673,5.963,722,2.905,743,3.323,914,3.015,1103,4.59,1311,3.432,1377,2.593,1602,6.244,1816,3.413,1823,3.75,1943,7.09]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name",[1970,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name",[53,1.372,78,3.17,94,0.965,108,0.893,114,2.614,136,1.045,164,1.138,167,1.748,238,4.718,316,4.735,338,1.172,339,1.128,341,1.916,342,2.375,343,2.065,359,1.474,375,2.067,389,1.901,403,3.135,482,2.603,722,2.986,734,3.249,743,3.827,769,3.681,914,2.662,1017,5.829,1103,4.053,1280,2.431,1311,3.03,1377,2.29,1415,5.159,1810,6.271,1816,3.014,1823,3.311,1970,6.555]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle",[1944,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle",[53,1.554,94,1.093,108,1.011,114,2.961,136,1.184,164,1.289,167,1.241,238,3.998,338,1.327,339,1.277,341,1.916,342,2.063,343,2.338,359,1.669,375,1.795,389,2.153,400,3.297,403,3.55,676,5.534,722,2.905,743,3.323,914,3.015,1103,4.59,1311,3.432,1377,2.593,1612,7.09,1816,3.413,1823,3.75,1944,7.09]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period",[1971,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period",[53,1.554,94,1.093,108,1.011,114,2.961,136,1.184,164,1.289,167,1.241,238,3.998,338,1.327,339,1.277,341,1.916,342,2.063,343,2.338,359,1.669,375,1.795,389,2.153,400,3.297,403,3.55,676,5.534,722,2.905,743,3.323,914,3.015,1103,4.59,1311,3.432,1377,2.593,1597,6.244,1816,3.413,1823,3.75,1971,7.424]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode",[1972,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode",[44,2.478,53,1.26,88,2.422,94,1.343,99,2.68,108,0.82,114,2.4,136,0.96,164,1.045,167,1.006,213,2.798,238,4.62,294,6.156,338,1.076,339,1.036,341,1.852,342,1.672,343,1.896,359,1.353,361,2.862,373,2.016,375,2.205,384,3.922,389,2.827,403,2.878,405,3.463,422,3.186,628,9.345,634,4.284,635,5.062,655,5.748,656,5.748,692,2.26,705,4.827,722,2.536,743,2.694,914,2.444,1219,3.492,1311,2.782,1377,2.102,1816,2.767,1951,6.358,1972,6.019,1973,6.381,1974,6.381]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity",[1975,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity",[44,2.543,53,1.293,88,2.486,94,1.361,99,2.751,108,0.842,114,2.463,136,0.985,164,1.072,167,1.032,213,2.871,238,4.556,294,6.236,338,1.104,339,1.063,341,1.872,342,1.716,343,1.946,359,1.389,361,2.937,373,2.069,375,2.234,384,4.024,389,2.68,403,2.954,405,3.554,422,3.269,625,8.506,634,4.397,635,5.195,651,5.492,692,2.319,722,2.58,743,2.765,914,2.508,980,6.888,1219,3.584,1311,2.855,1377,2.158,1816,2.84,1951,6.469,1957,6.177,1975,6.177]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source",[1976,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source",[44,2.584,53,1.314,78,2.327,88,2.525,94,1.223,108,0.855,114,2.503,136,1.001,164,1.79,167,1.049,213,2.917,238,4.282,294,6.69,338,1.122,339,1.08,341,1.884,343,2.617,359,1.411,373,2.102,375,2.009,384,4.089,389,1.82,396,3.321,403,3.001,405,3.611,428,4.845,482,2.492,563,5.497,569,4.759,692,2.356,708,6.864,743,2.809,1012,5.768,1219,3.641,1280,2.327,1311,2.901,1377,2.192,1976,6.275,1977,8.808,1978,5.993,1979,6.654]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state",[1980,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state",[53,1.525,78,2.702,94,1.073,108,0.993,114,2.906,136,1.162,164,1.265,167,1.218,238,3.951,294,6.174,338,1.302,339,1.254,341,1.9,359,1.638,369,5.758,375,1.762,389,2.113,394,2.432,403,3.484,482,2.893,563,5.399,620,6.244,1280,2.702,1311,3.368,1377,2.545,1980,7.286]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state",[1981,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state",[53,1.396,78,2.472,94,0.982,108,0.908,114,2.659,136,1.063,164,1.157,167,1.114,238,4.384,338,1.192,339,1.147,341,1.928,342,1.852,343,2.1,359,1.499,369,5.409,375,2.09,389,1.933,394,2.225,396,3.528,403,3.188,451,4.5,482,2.647,620,5.989,722,3.01,737,3.931,743,3.869,777,5.928,854,3.265,914,2.707,1280,2.472,1311,3.082,1377,2.329,1816,3.065,1823,3.368,1981,6.667]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high",[1982,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high",[44,2.302,48,4.421,53,1.17,88,2.249,94,1.132,99,2.489,108,0.762,114,2.229,136,0.891,164,0.97,167,1.467,213,2.598,238,4.084,262,2.643,310,5.926,338,0.999,339,0.962,341,1.883,342,1.553,343,1.761,347,1.489,359,1.257,361,2.658,373,1.873,375,2.397,383,3.067,389,1.621,394,1.866,397,6.092,400,3.127,403,2.673,405,3.216,422,2.959,455,2.628,482,2.219,624,3.642,692,2.099,722,2.756,737,3.495,743,3.44,794,3.564,858,3.642,867,4.827,914,2.27,957,7.21,1280,2.073,1311,2.584,1377,1.953,1816,2.57,1823,2.824,1917,7.764,1918,6.31,1982,5.59,1983,5.59]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low",[1984,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low",[44,2.302,48,4.421,53,1.17,88,2.249,94,1.132,99,2.489,108,0.762,114,2.229,136,0.891,164,0.97,167,1.467,213,2.598,238,4.084,262,2.643,303,7.21,338,0.999,339,0.962,341,1.883,342,1.553,343,1.761,347,1.489,359,1.257,361,2.658,373,1.873,375,2.397,383,3.067,389,1.621,394,1.866,397,6.092,400,3.127,403,2.673,405,3.216,422,2.959,455,2.628,482,2.219,624,3.642,692,2.099,722,2.756,737,3.495,743,3.44,794,3.564,858,3.642,867,4.827,914,2.27,957,7.21,1280,2.073,1311,2.584,1377,1.953,1816,2.57,1823,2.824,1917,7.764,1918,6.31,1983,5.59,1984,5.59]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state",[1985,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state",[48,5.028,53,1.42,78,2.515,94,0.999,108,0.924,114,2.705,136,1.082,164,1.177,167,1.133,238,3.775,338,1.212,339,1.167,341,1.941,342,1.884,343,2.136,359,1.525,369,5.634,375,2.113,389,1.967,394,2.264,403,3.243,482,2.693,620,6.039,722,3.035,737,3.975,743,3.912,914,2.754,1280,2.515,1311,3.135,1377,2.369,1816,3.118,1823,3.426,1985,6.782]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit",[1919,5.378]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit",[44,2.684,53,1.365,88,2.623,94,1.397,99,2.903,108,0.888,114,2.6,136,1.04,164,1.132,167,1.089,213,3.03,226,5.207,238,4.346,338,1.165,339,1.122,341,1.912,342,1.811,343,2.053,359,1.466,361,3.1,373,2.184,375,2.294,384,4.247,389,1.891,403,3.117,405,3.751,422,3.45,626,7.574,692,2.448,722,2.674,737,4.315,743,2.918,914,2.647,1219,3.782,1311,3.014,1377,2.277,1816,2.997,1823,4.303,1919,5.796]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory",[1766,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory",[12,4.359,13,2.504,44,2.47,53,0.831,77,1.597,78,1.472,88,2.414,92,1.466,94,1.065,97,1.749,99,2.672,100,1.33,108,0.541,114,1.583,136,0.633,164,0.689,167,1.748,174,2.846,213,2.789,227,3.009,238,3.933,283,3.308,290,4.985,304,2.407,338,0.709,339,0.683,341,1.73,342,1.103,343,2.278,359,0.892,361,2.852,373,2.01,375,2.202,383,2.178,384,2.586,389,1.151,397,5.195,403,1.898,405,3.452,422,3.175,428,3.064,429,2.322,434,3.317,455,3.79,471,5.933,569,3.009,596,2.825,692,2.252,734,1.967,745,3.883,794,3.825,850,5.203,928,2.748,941,3.338,1012,3.647,1219,2.302,1280,1.472,1311,1.835,1314,3.427,1637,8.407,1763,5.999,1764,7.699,1765,7.699,1766,3.79,1769,3.529,1771,7.409,1832,3.969,1833,3.969,1834,5.999,1941,3.123,1986,4.208,1987,4.208,1988,6.361,1989,6.361,1990,4.208,1991,7.669,1992,7.669,1993,6.361,1994,3.529,1995,4.208]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform",[1786,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform",[53,1.223,94,0.86,108,0.796,114,2.329,136,0.931,156,2.13,164,1.014,166,4.283,167,1.682,213,3.68,316,4.218,338,1.044,339,1.005,341,1.912,342,2.199,343,1.839,347,1.556,359,1.78,373,2.652,375,2.172,394,1.949,452,3.075,455,3.721,482,2.318,578,4.353,722,2.819,743,3.544,769,5.043,896,4.025,914,2.371,999,3.684,1103,3.611,1280,2.165,1287,2.258,1377,2.04,1783,9.731,1786,5.577,1810,7.063,1816,2.685,1823,2.95,1827,3.157,1996,6.191,1997,8.393]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth",[1998,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth",[53,1.267,77,3.262,94,0.891,108,0.824,114,2.413,136,0.965,156,2.207,164,1.05,167,1.528,304,3.669,312,4.083,338,1.081,339,1.041,341,2.035,342,2.252,343,2.554,347,1.612,359,1.823,372,3.137,375,2.211,400,3.257,429,3.54,434,4.483,722,2.87,743,3.629,760,9.144,854,2.962,914,3.292,1280,2.243,1287,2.34,1740,4.968,1816,2.781,1822,4.306,1823,3.056,1827,3.271,1941,4.761,1998,6.05,1999,11.116,2000,6.38,2001,8.596]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source",[2002,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source",[53,1.211,78,2.144,94,1.158,108,0.788,114,2.306,136,0.922,156,2.109,164,1.935,167,1.314,213,3.655,338,1.033,339,0.995,341,1.966,342,1.606,343,1.821,347,1.54,359,1.768,373,2.635,375,2.319,394,3.201,429,3.383,452,3.054,629,7.51,643,7.227,722,3.148,743,4,850,3.475,896,3.998,898,3.413,914,2.348,1280,2.144,1287,2.236,1812,5.141,1816,2.658,1823,2.921,1827,3.126,1893,4.863,2002,5.782,2003,10.634]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude",[1788,4.967]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude",[53,1.148,77,2.207,78,2.813,92,2.026,94,0.808,108,0.747,114,2.188,136,0.875,156,2.001,164,0.952,167,1.453,226,4.771,338,0.98,339,0.944,341,2.052,342,2.107,343,2.389,347,1.461,359,1.955,372,2.844,375,2.102,394,2.532,400,3.097,455,2.579,482,2.178,539,2.903,624,3.574,692,2.848,722,3.09,734,2.719,737,2.495,743,4.407,745,2.945,914,3.08,1280,2.034,1287,2.122,1377,1.916,1442,7.271,1581,4.317,1788,4.505,1816,2.522,1822,3.905,1823,2.771,1827,2.966,1893,4.614,1919,4.878,2004,9.217,2005,6.744]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit",[2006,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit",[53,1.182,94,0.831,108,0.769,114,2.251,136,0.9,156,2.059,164,0.98,167,1.662,213,2.623,226,5.772,338,1.009,339,0.971,341,1.804,342,1.568,347,1.504,350,7.827,359,1.739,373,1.891,375,1.87,394,1.884,403,2.699,452,2.192,482,2.241,732,4.747,764,7.386,896,2.869,897,3.598,898,3.331,1219,3.274,1280,2.093,1287,2.183,1377,1.971,1804,8.427,1827,3.051,1922,7.734,1923,7.734,2006,5.643,2007,10.065,2008,9.356,2009,10.544,2010,10.544,2011,8.2,2012,10.065]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate",[1787,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate",[53,1.107,77,2.128,78,2.742,92,1.953,94,0.779,108,0.72,114,2.109,136,0.843,156,1.929,164,0.918,167,1.425,338,0.945,339,0.91,341,2.003,342,2.054,343,2.329,347,1.409,359,1.663,372,2.742,375,2.062,394,1.765,400,3.037,455,2.486,482,2.1,532,3.569,539,2.799,558,4.714,624,3.446,638,4.448,667,4.01,692,2.776,722,3.049,740,5.341,743,4.133,745,2.839,762,5.709,763,5.054,769,2.97,914,3.003,1103,3.27,1280,1.961,1287,2.045,1377,1.847,1581,4.162,1757,9.715,1787,5.05,1803,4.702,1810,7.126,1816,2.431,1822,3.764,1823,2.671,1827,2.859,1893,4.448,2000,6.71,2005,8.209]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles",[2013,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles",[53,0.894,78,1.584,94,0.629,100,2.124,108,0.582,114,1.703,136,0.681,156,1.558,164,0.741,167,1.754,213,3.513,304,2.591,312,2.883,317,2.544,338,0.763,339,0.735,341,1.778,342,2.6,343,2.634,347,1.138,359,1.425,372,3.287,373,2.532,375,2.022,394,2.982,403,2.043,423,2.998,429,2.499,434,3.505,452,2.936,566,4.385,624,4.13,648,5.474,649,5.205,650,6.053,722,2.372,743,2.838,896,3.842,898,3.741,914,3.069,1076,3.04,1077,4.332,1219,2.478,1280,1.584,1287,1.652,1446,4.079,1511,3.297,1608,8.531,1816,1.964,1823,2.157,1827,2.309,1904,8.601,1941,3.361,2000,7.365,2013,4.271,2014,11.659,2015,6.72,2016,8.867,2017,8.014,2018,4.528,2019,4.528]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode",[2020,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode",[53,1.453,94,1.022,108,0.946,114,2.768,136,1.107,156,2.533,164,1.205,167,1.16,338,1.241,339,1.195,341,2.023,342,1.929,343,2.187,347,1.849,359,1.995,375,2.145,394,2.961,429,4.062,640,6.629,705,5.635,722,3.069,743,3.971,914,2.819,1280,2.574,1287,2.685,1816,3.192,1823,3.507,1827,3.754,1904,8.153,2020,6.942]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period",[2021,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period",[53,1.396,94,0.982,108,0.908,114,2.659,136,1.063,156,2.432,164,1.157,167,1.114,338,1.192,339,1.147,341,2.047,342,2.401,343,2.1,347,1.776,359,1.943,375,2.09,400,2.375,429,3.901,532,4.5,645,6.554,722,3.01,743,3.869,914,3.51,1280,2.472,1287,2.578,1597,7.27,1816,3.065,1822,4.745,1823,3.368,1827,3.605,1904,7.944,2000,6.802,2021,6.667,2022,10.169]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation",[2023,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation",[53,1.412,94,0.993,108,0.919,114,2.689,136,1.075,156,2.46,164,1.171,167,1.127,338,1.205,339,1.16,341,2.053,342,2.419,343,2.124,347,1.796,359,1.958,375,2.106,400,2.402,429,3.946,722,3.027,743,3.898,751,4.609,845,7.324,914,3.536,1280,2.5,1287,2.608,1816,3.1,1822,4.8,1823,3.406,1827,3.646,1909,8.707,2000,6.852,2023,6.743,2024,10.225]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency",[1795,5.223]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency",[53,1.193,77,2.293,78,2.887,92,2.104,94,0.839,108,0.776,114,2.272,136,0.909,156,2.079,164,0.989,167,1.482,338,1.018,339,0.981,341,2.04,342,2.163,343,2.452,347,1.518,359,1.751,372,2.955,375,2.145,394,1.902,400,3.159,455,2.679,482,2.262,539,3.016,624,3.713,692,2.923,722,3.132,743,4.267,745,3.059,751,3.895,755,6.336,914,3.162,1006,4.116,1280,2.113,1287,2.204,1377,1.99,1581,4.484,1795,4.92,1816,2.62,1822,4.056,1823,2.878,1827,3.081,1893,4.793,2005,6.922,2025,9.403]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function",[1785,4.967]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function",[6,2.402,13,1.371,44,0.895,53,0.455,54,1.283,60,1.955,76,0.891,77,1.486,88,0.874,94,0.709,97,1.628,99,2.834,108,0.296,114,0.867,136,0.347,156,2.524,164,0.377,167,1.567,174,1.895,189,1.416,213,2.64,214,1.119,232,1.272,261,3.215,262,1.027,283,1.689,312,1.467,313,1.594,317,2.199,338,0.388,339,0.374,341,1.855,342,1.578,343,1.163,347,1.513,359,1.659,361,2.7,366,1.678,370,2.33,372,2.945,373,2.132,375,2.188,383,2.027,389,0.63,394,3.258,397,3.103,400,1.315,405,2.125,413,1.467,422,1.15,434,2.663,452,3.439,468,1.158,482,1.466,526,1.202,539,3.006,566,1.261,595,5.388,616,4.755,621,6.964,637,2.075,639,2.075,667,4.825,668,2.524,669,4.158,670,2.173,671,3.868,672,1.746,673,2.966,674,3.189,675,2.075,676,3.59,677,2.173,686,1.678,689,1.22,692,1.387,722,2.172,743,3.304,755,2.842,769,2.074,783,2.709,854,1.064,856,2.894,882,1.127,896,2.887,898,1.283,914,1.5,927,2.771,928,1.505,935,1.678,972,1.746,973,2.709,978,1.467,1057,7.052,1103,1.344,1106,1.485,1164,1.828,1219,1.261,1230,2.709,1280,2.566,1287,1.428,1377,0.759,1442,3.291,1587,5.219,1602,1.828,1606,1.828,1652,2.173,1732,1.997,1740,1.784,1746,3.693,1785,1.784,1788,1.784,1789,1.746,1795,1.876,1810,1.594,1815,8.384,1816,0.999,1818,2.173,1820,2.173,1822,1.547,1823,1.098,1827,1.997,2026,3.527,2027,9.154,2028,6.747,2029,2.304,2030,5.106,2031,7.824,2032,3.915,2033,2.304,2034,6.747,2035,3.527,2036,5.106,2037,3.915,2038,3.915,2039,5.106,2040,1.997]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset",[1789,4.859]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset",[53,1.404,94,0.987,108,0.913,114,2.674,136,1.069,156,2.446,164,1.164,167,1.121,338,1.198,339,1.154,341,2.05,342,2.41,343,2.112,347,1.786,359,1.951,375,2.098,400,2.388,482,2.662,624,4.368,722,3.019,737,3.049,743,3.884,856,6.33,858,4.368,914,3.523,1280,2.486,1287,2.593,1377,2.342,1789,5.386,1816,3.083,1822,4.772,1823,3.387,1827,3.625,2041,9.198]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance",[1780,5.777]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance",[53,1.133,58,3.251,77,2.177,78,2.786,92,1.998,94,0.797,108,0.737,114,2.158,136,0.863,156,1.974,164,0.939,167,1.442,338,0.967,339,0.931,341,2.015,342,2.087,343,2.366,347,1.441,359,1.689,372,2.805,375,2.087,394,1.806,400,3.074,455,2.543,482,2.148,539,2.863,558,4.789,563,5.503,624,3.525,692,2.82,722,3.075,730,5.389,743,4.174,745,2.904,914,3.051,1280,2.006,1287,2.092,1377,1.89,1581,4.258,1779,9.556,1780,5.166,1800,6.904,1816,2.487,1822,3.851,1827,2.925,1893,4.55,1951,4.258,2005,8.29,2042,9.15]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity",[2043,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity",[53,1.453,94,1.022,108,0.946,114,2.768,136,1.107,156,2.533,164,1.205,167,1.16,338,1.241,339,1.195,341,2.023,342,1.929,343,2.187,347,1.849,359,1.995,375,2.145,394,2.961,482,2.756,563,4.098,625,5.995,722,3.069,743,3.971,914,2.819,980,7.937,1280,2.574,1287,2.685,1377,2.425,1816,3.192,1827,3.754,1951,5.463,2043,6.942]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state",[1777,5.559]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state",[53,1.42,94,0.999,108,0.924,114,2.705,136,1.082,156,2.474,164,1.177,167,1.461,338,1.212,339,1.167,341,2.009,342,1.884,343,2.136,347,1.807,359,1.965,369,5.634,375,2.113,394,2.917,482,2.693,563,4.003,620,4.235,722,3.035,743,3.912,914,2.754,1250,6.477,1280,2.515,1287,2.623,1377,3.053,1777,6.233,1816,3.118,1827,3.667,1951,5.337,2044,7.19]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase",[1790,5.088]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase",[53,1.159,77,2.228,78,2.831,92,2.045,94,0.815,108,0.754,114,2.208,136,0.883,156,2.02,164,0.961,167,1.46,226,4.794,338,0.99,339,0.953,341,2.056,342,2.121,343,2.405,347,1.475,359,1.964,372,2.871,375,2.113,394,1.848,400,3.112,455,2.603,482,2.198,539,2.931,624,3.608,692,2.866,722,3.1,734,2.745,743,4.216,745,2.972,914,3.1,1280,2.053,1287,2.142,1377,1.934,1581,4.358,1784,7.816,1790,4.657,1816,2.546,1822,3.941,1823,2.797,1827,2.994,1893,4.657,1921,5.089,2005,6.788,2045,9.263]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference",[2046,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference",[40,5.618,53,1.462,77,2.81,94,1.028,108,0.951,114,2.785,136,1.114,164,1.212,167,1.167,338,1.248,339,1.202,341,2.027,342,1.94,343,2.2,347,1.86,359,2.002,375,2.153,482,2.773,689,3.921,722,3.077,734,3.462,743,3.986,914,2.836,987,5.295,1280,2.589,1287,2.701,1377,2.439,1784,7.082,1816,3.211,1823,3.527,1827,3.776,2046,6.983]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state",[2047,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state",[53,1.498,94,1.053,97,3.985,108,0.975,114,2.853,136,1.141,156,2.61,164,1.242,167,1.195,338,1.278,339,1.231,341,1.98,347,1.906,359,2.033,369,5.727,375,2.186,394,3.018,482,2.84,620,4.467,1280,2.652,1287,2.766,1324,8.31,1377,2.499,1784,6.531,1827,3.868,1961,7.153,2047,7.153]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing",[2048,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing",[53,1.453,94,1.022,108,0.946,114,2.768,136,1.107,156,2.533,164,1.205,167,1.16,338,1.241,339,1.195,341,2.023,342,1.929,343,2.187,347,1.849,359,1.995,375,2.145,394,2.961,482,2.756,652,6.629,722,3.069,743,3.971,806,5.381,914,2.819,1073,8.379,1280,2.574,1287,2.685,1816,3.192,1823,3.507,1827,3.754,2048,6.942]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency",[2049,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency",[50,5.473,53,1.404,94,0.987,108,0.913,114,2.674,136,1.069,156,2.446,164,1.164,167,1.121,338,1.198,339,1.154,341,2.05,342,2.41,343,2.112,347,1.786,359,1.951,375,2.098,400,2.388,482,2.662,722,3.019,743,3.884,751,4.582,755,5.121,806,4.067,914,3.523,1280,2.486,1287,2.593,1816,3.083,1822,4.772,1823,3.387,1827,3.625,2000,6.827,2049,6.705,2050,9.617]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency",[2051,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency",[53,1.404,94,0.987,108,0.913,114,2.674,136,1.069,156,2.446,164,1.164,167,1.121,338,1.198,339,1.154,341,2.05,342,2.41,343,2.112,347,1.786,359,1.951,375,2.098,400,2.388,482,2.662,722,3.019,743,3.884,751,4.582,755,5.121,806,4.067,813,6.969,914,3.523,1280,2.486,1287,2.593,1816,3.083,1822,4.772,1823,3.387,1827,3.625,2000,6.827,2050,9.617,2051,6.705]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time",[2052,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time",[53,1.412,94,0.993,108,0.919,114,2.689,136,1.075,156,2.46,164,1.171,167,1.127,338,1.205,339,1.16,341,2.053,342,2.419,343,2.124,347,1.796,359,1.958,375,2.106,400,2.402,411,5.673,429,3.946,532,4.551,722,3.027,743,3.898,806,5.281,914,3.536,1280,2.5,1287,2.608,1816,3.1,1822,4.8,1823,3.406,1827,3.646,2000,6.852,2052,6.743,2053,10.225]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode",[2054,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode",[53,1.436,94,1.01,108,0.935,114,2.736,136,1.094,156,2.503,164,1.191,167,1.147,294,5.943,338,1.226,339,1.181,341,2.016,342,1.906,343,2.161,347,1.828,359,1.98,375,2.129,394,2.939,482,2.724,563,4.05,628,6.306,705,5.615,722,3.052,743,3.942,914,2.786,1280,2.544,1287,2.653,1377,2.397,1816,3.154,1827,3.71,1951,5.399,2054,6.861]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity",[2055,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity",[53,1.436,94,1.01,108,0.935,114,2.736,136,1.094,156,2.503,164,1.191,167,1.147,294,5.943,338,1.226,339,1.181,341,2.016,342,1.906,343,2.161,347,1.828,359,1.98,375,2.129,394,2.939,482,2.724,563,4.05,625,5.925,722,3.052,743,3.942,914,2.786,980,7.908,1280,2.544,1287,2.653,1377,2.397,1816,3.154,1827,3.71,1951,5.399,2055,6.861]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source",[2056,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source",[53,1.507,94,1.06,108,0.98,114,2.87,136,1.148,156,2.626,164,1.726,167,1.203,294,6.126,338,1.286,339,1.238,341,2.045,343,2.267,347,1.917,359,2.041,375,2.195,482,2.857,563,5.358,1280,2.669,1287,2.783,1377,2.514,1385,9.077,1816,3.309,1827,3.891,2056,7.197,2057,7.63,2058,9.623]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state",[2059,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state",[53,1.525,94,1.073,108,0.993,114,2.906,136,1.162,156,2.658,164,1.265,167,1.218,294,6.174,338,1.302,339,1.254,341,1.993,347,1.941,359,2.057,369,5.758,375,2.212,394,3.053,482,2.893,563,5.399,620,4.55,1280,2.702,1287,2.818,1377,2.545,1827,3.939,2059,7.286]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope",[2060,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope",[53,1.462,94,1.028,108,0.951,114,2.785,136,1.114,156,2.548,164,1.212,167,1.167,338,1.248,339,1.202,341,2.027,342,1.94,343,2.2,347,1.86,359,2.002,375,2.153,394,2.972,429,4.086,603,4.318,622,6.209,722,3.077,743,3.986,914,2.836,1280,2.589,1287,2.701,1403,10.186,1816,3.211,1827,3.776,2060,6.983,2061,6.669]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source",[2062,5.559]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source",[53,1.462,94,1.028,108,0.951,114,2.785,136,1.114,156,2.548,164,1.893,167,1.167,338,1.248,339,1.202,341,2.027,342,1.94,343,2.2,347,1.86,359,2.002,375,2.153,394,2.972,429,4.086,603,4.318,627,6.669,722,3.077,743,3.986,914,2.836,1280,2.589,1287,2.701,1816,3.211,1827,3.776,2061,6.669,2062,6.418]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state",[2063,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state",[53,1.428,94,1.004,108,0.929,114,2.72,136,1.088,156,2.489,164,1.184,167,1.14,338,1.219,339,1.174,341,2.012,342,1.895,343,2.149,347,1.817,359,1.972,369,5.456,375,2.121,394,2.928,451,4.604,482,2.708,620,4.26,722,3.043,737,3.99,743,3.927,777,6.065,854,3.34,914,2.77,1280,2.529,1287,2.638,1377,2.383,1816,3.136,1823,3.446,1827,3.688,2063,6.821]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high",[2064,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high",[48,4.866,53,1.35,92,2.381,94,0.949,108,0.878,114,2.571,136,1.028,156,2.352,164,1.119,167,1.078,310,5.708,338,1.152,339,1.109,341,2.029,342,2.35,343,2.031,347,1.718,359,1.902,375,2.045,394,2.152,400,2.297,482,2.56,539,3.412,624,4.201,722,2.962,737,4.731,743,3.786,858,4.201,914,3.434,1280,2.391,1287,2.494,1377,2.252,1816,2.964,1822,4.589,1823,3.257,1827,3.486,2000,7.427,2064,6.447]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low",[2065,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low",[48,4.866,53,1.35,92,2.381,94,0.949,108,0.878,114,2.571,136,1.028,156,2.352,164,1.119,167,1.078,303,6.945,338,1.152,339,1.109,341,2.029,342,2.35,343,2.031,347,1.718,359,1.902,375,2.045,394,2.152,400,2.297,482,2.56,539,3.412,624,4.201,722,2.962,737,4.731,743,3.786,858,4.201,914,3.434,1280,2.391,1287,2.494,1377,2.252,1816,2.964,1822,4.589,1823,3.257,1827,3.486,2000,7.427,2065,6.447]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state",[2066,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state",[48,5.047,53,1.428,94,1.004,108,0.929,114,2.72,136,1.088,156,2.489,164,1.184,167,1.14,338,1.219,339,1.174,341,2.012,342,1.895,343,2.149,347,1.817,359,1.972,369,5.644,375,2.121,394,2.928,482,2.708,620,4.26,722,3.043,737,3.99,743,3.927,914,2.77,1280,2.529,1287,2.638,1377,2.383,1816,3.136,1823,3.446,1827,3.688,2066,6.821]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit",[1781,5.559]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit",[53,1.445,94,1.016,108,0.94,114,2.752,136,1.101,156,2.518,164,1.198,167,1.153,226,5.832,338,1.233,339,1.188,341,2.02,342,1.917,343,2.174,347,1.839,359,1.987,375,2.137,394,2.95,482,2.74,626,6.136,722,3.06,737,4.02,743,3.956,914,2.802,1280,2.559,1287,2.669,1377,2.411,1781,6.343,1816,3.173,1823,3.486,1827,3.732]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels",[2067,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels",[53,1.445,88,2.777,94,1.302,108,0.94,114,2.752,136,1.101,164,1.198,167,1.477,220,4.038,338,1.233,339,1.188,341,2.066,347,1.839,359,1.987,395,6.591,434,4.887,482,2.74,645,5.233,722,2.774,850,4.147,961,5.959,1279,5.959,1280,3.277,1287,2.669,1377,2.411,1784,7.043,1812,6.136,1827,3.732,2067,6.901,2068,7.832,2069,7.317]],["title/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now",[2070,6.049]],["text/api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now",[53,1.365,88,3.428,94,0.96,108,0.888,114,2.6,136,1.04,164,1.132,167,1.089,214,3.358,220,3.814,262,3.082,338,1.165,339,1.122,341,2.073,342,1.811,343,2.053,347,2.528,359,2.133,375,2.06,424,5.353,429,4.984,603,5.267,662,5.796,722,3.158,743,2.918,914,2.647,1279,7.356,1280,3.159,1287,3.294,1816,2.997,1827,3.525,2061,8.135,2070,6.519,2071,8.518]],["title/api/instruments/#multimeter",[113,4.033]],["text/api/instruments/#multimeter",[]],["title/api/instruments/#pytestlab.instruments.Multimeter",[113,4.033]],["text/api/instruments/#pytestlab.instruments.Multimeter",[]],["title/api/instruments/#pytestlab.instruments.Multimeter-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.Multimeter-attributes",[]],["title/api/instruments/#pytestlab.instruments.Multimeter.logger",[530,4.76]],["text/api/instruments/#pytestlab.instruments.Multimeter.logger",[]],["title/api/instruments/#pytestlab.instruments.Multimeter-classes",[299,3.075]],["text/api/instruments/#pytestlab.instruments.Multimeter-classes",[]],["title/api/instruments/#pytestlab.instruments.Multimeter.Multimeter",[113,4.033]],["text/api/instruments/#pytestlab.instruments.Multimeter.Multimeter",[9,2.825,14,3.601,21,3.752,38,4.028,43,2.825,44,2.617,90,2.576,94,1.467,98,2.318,100,2.538,101,3.52,108,0.584,113,2.858,116,3.145,130,2.553,136,0.684,156,1.564,164,0.744,167,1.4,171,2.677,187,1.79,194,2.301,206,3.196,214,3.274,234,3.622,269,2.704,299,3.851,304,2.6,310,2.893,320,3.096,336,6.353,338,0.766,339,0.738,340,2.388,341,1.968,347,1.142,354,1.982,355,3.687,372,2.223,373,1.436,375,1.537,376,5.398,380,3.364,416,2.253,432,2.37,458,1.993,471,2.793,558,2.733,595,3.785,613,3.144,692,3.821,710,4.344,716,3.272,734,2.125,737,1.95,755,2.53,775,6.961,784,5.88,882,2.223,900,2.576,923,2.893,926,2.93,999,2.704,1232,3.443,1275,5.488,1277,3.25,1278,3.702,1280,2.357,1281,3.443,1282,5.105,1283,6.371,1284,3.702,1327,2.762,1362,3.811,1363,3.702,1366,3.94,1367,3.702,1721,4.287,2072,3.443,2073,3.443]],["title/api/instruments/#pytestlab.instruments.Multimeter.Multimeter-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.Multimeter.Multimeter-attributes",[]],["title/api/instruments/#pytestlab.instruments.Multimeter.Multimeter.config",[692,2.271]],["text/api/instruments/#pytestlab.instruments.Multimeter.Multimeter.config",[]],["title/api/instruments/#pytestlab.instruments.Multimeter.Multimeter-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.Multimeter.Multimeter-functions",[]],["title/api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement",[2074,5.559]],["text/api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement",[3,4.531,53,1.229,62,3.434,88,2.362,92,2.167,94,1.326,108,0.8,113,3.913,116,3.785,136,0.936,164,1.019,167,0.981,261,3.575,262,3.755,295,4.375,338,1.049,339,1.367,341,1.711,342,2.207,347,2.571,359,1.32,375,1.921,394,1.959,397,5.118,451,3.961,455,2.759,471,3.824,480,4.011,603,4.911,716,3.431,781,5.394,784,4.119,827,7.923,854,2.874,1121,6.523,1219,4.608,1280,2.176,1287,2.27,2074,5.394,2075,9.004,2076,7.943,2077,9.004,2078,9.004,2079,6.222]],["title/api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config",[1143,3.539]],["text/api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config",[92,3.047,94,1.215,98,3.357,100,2.08,108,0.846,113,6.177,136,0.99,142,5.707,164,1.078,167,1.801,180,3.357,220,3.633,225,3.487,234,2.969,338,1.11,339,1.068,355,4.786,367,4.555,370,3.917,373,2.08,389,1.801,416,3.264,449,5.223,468,3.31,469,3.382,478,4.887,526,3.433,586,4.988,598,5.099,692,3.858,775,9.072,935,4.794,988,5.362,1089,4.555,1090,5.959,1138,5.101,1139,6.627,1140,5.362,1143,4.827,1147,7.608,1228,5.521]],["title/api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config",[2080,5.777]],["text/api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config",[14,1.299,24,3.557,44,1.244,53,0.632,54,1.783,77,1.952,78,2.253,94,1.024,98,1.633,99,1.345,108,0.412,113,2.014,116,3.44,136,0.482,156,2.537,164,0.524,166,3.557,167,1.768,170,2.15,174,2.391,187,2.025,200,2.541,226,2.661,238,2.095,261,1.925,300,2.15,312,2.039,317,4.535,321,1.556,338,0.54,339,0.52,341,1.154,342,1.932,349,1.479,355,2.814,359,0.679,361,1.436,373,2.035,375,1.173,380,2.567,383,1.658,389,2.017,396,3.681,400,1.727,403,2.319,416,2.549,422,1.599,428,3.744,508,2.777,566,4.035,607,1.783,668,2.065,692,1.134,705,3.216,716,3.29,734,4.403,737,1.374,751,2.065,755,1.783,784,4.881,794,5.183,827,6.677,854,2.975,858,1.968,860,2.885,863,2.332,865,2.15,888,3.404,941,2.541,955,1.968,956,2.12,1006,2.182,1055,2.15,1082,1.887,1155,4.69,1211,3.021,1219,1.753,1231,2.481,1235,3.896,1311,1.397,1314,4.188,1405,3.273,1415,4.781,1430,2.481,1450,3.021,1493,5.402,1499,2.777,1615,5.142,1637,6.183,1668,7.764,1806,2.686,2072,3.896,2073,2.427,2080,2.885,2081,8.881,2082,5.142,2083,6.441,2084,5.142,2085,3.203,2086,6.441,2087,7.373,2088,6.441,2089,6.441,2090,5.142,2091,3.203,2092,3.203,2093,9.416,2094,5.142,2095,9.058,2096,3.021,2097,2.885,2098,2.885]],["title/api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure",[716,2.613]],["text/api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure",[4,2.144,21,1.061,44,1.291,53,0.376,70,1.599,77,0.723,83,0.85,88,1.262,90,3.744,92,2.866,94,0.736,97,1.383,99,1.858,100,1.398,108,0.245,113,1.199,116,2.668,126,1.444,136,0.287,164,0.312,167,1.551,174,2.934,187,1.742,206,2.338,214,3.209,226,2.29,234,3.398,261,3.632,262,2.363,265,1.536,312,1.213,321,3.452,333,1.476,338,0.321,339,1.072,341,1.763,342,1.388,347,1.893,349,2.447,359,1.401,361,1.491,373,1.398,375,1.941,380,2.645,389,2.398,391,3.959,394,2.831,396,1.66,400,2.655,413,1.213,416,2.627,420,1.262,422,0.952,434,1.734,437,1.851,451,4.523,452,0.698,455,1.961,458,0.836,482,1.984,487,1.388,560,2.363,569,3.789,579,1.599,597,2.469,601,3.186,603,1.939,668,2.144,689,1.761,692,1.567,706,1.171,708,2.172,716,4.061,717,3.508,737,1.427,776,3.061,777,2.789,781,2.883,783,2.301,784,2.928,794,1.146,827,6.372,847,4.644,854,4.603,863,1.388,876,1.652,882,1.626,896,1.595,910,4.313,911,1.319,914,0.73,918,3.778,927,1.805,930,5.976,972,1.444,994,3.22,999,1.979,1015,3.71,1021,2.52,1076,2.233,1077,2.852,1085,2.422,1106,1.229,1142,1.552,1155,1.388,1171,1.552,1185,4.315,1219,2.899,1231,4.104,1280,2.485,1287,1.213,1305,1.798,1311,1.45,1331,1.599,1380,1.798,1463,4.203,1480,4.444,1493,1.599,1577,2.422,1617,2.338,2075,7.454,2076,3.137,2077,3.137,2078,3.137,2080,1.717,2099,3.326,2100,3.326,2101,1.906,2102,1.717,2103,1.717,2104,4.424,2105,5.299,2106,1.906,2107,3.326,2108,5.299,2109,7.105,2110,1.906,2111,3.326,2112,4.424,2113,3.326,2114,4.424,2115,1.906,2116,1.906,2117,4.424,2118,1.906,2119,3.326,2120,3.326,2121,1.906]],["title/api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function",[2103,5.777]],["text/api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function",[3,4.139,53,1.122,62,3.137,88,2.157,92,1.98,94,0.789,100,1.796,108,0.73,113,3.575,116,2.803,136,0.855,156,3.133,160,4.306,164,0.931,167,1.435,187,2.238,214,3.845,261,4.404,295,3.996,338,0.958,339,0.922,341,1.632,347,1.428,359,1.205,375,1.296,394,2.492,416,3.923,452,2.082,455,2.52,458,2.492,471,3.493,539,2.837,616,4.81,668,5.102,689,4.192,716,4.481,734,3.7,737,3.395,781,8.535,783,5.475,784,6.518,1280,1.988,1287,2.073,1577,5.763,1690,7.129,2072,5.996,2073,5.996,2103,5.119,2122,7.464,2123,5.684,2124,5.684]],["title/api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source",[2062,5.559]],["text/api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source",[21,4.082,50,4.363,53,1.008,88,2.783,94,0.709,100,1.612,108,0.656,113,3.209,136,0.767,156,2.953,164,1.905,167,1.156,187,2.01,271,4.727,338,0.86,339,0.828,341,1.538,347,1.282,359,1.082,375,1.672,391,3.854,424,5.679,452,1.869,458,2.237,471,3.136,473,5.972,603,6.786,644,5.679,662,7.869,716,2.988,784,7.221,789,8.85,790,8.452,791,6.356,935,5.34,1084,6.356,1155,5.34,1219,2.792,1280,1.785,1287,1.861,1326,6.356,1421,4.813,1422,4.596,1577,5.34,1626,6.916,2040,6.356,2062,4.423,2071,6.916,2125,5.817,2126,7.333,2127,7.333,2128,6.356]],["title/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult",[2081,6.049]],["text/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult",[100,3.497,113,4.347,116,3.777,174,3.352,187,2.722,226,4.674,265,3.192,299,3.314,312,4.4,321,4.388,342,2.636,354,3.014,369,3.475,389,1.891,390,4.455,396,3.45,400,2.322,411,4.247,416,3.426,476,4.86,601,4.156,705,3.45,716,4.51,734,3.231,737,2.965,761,4.514,827,7.792,854,4.646,858,4.247,863,5.033,1616,5.991,2072,5.236,2098,6.225,2129,6.912,2130,5.991,2131,6.912]],["title/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult-attributes",[]],["title/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.measurement_mode",[2098,5.777]],["text/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.measurement_mode",[]],["title/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.range_value",[863,4.67]],["text/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.range_value",[]],["title/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.resolution",[827,4.967]],["text/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.resolution",[]],["title/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.units",[226,3.319]],["text/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.units",[]],["title/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult-functions",[]],["title/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__",[953,4.967]],["text/api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__",[94,1.144,108,1.058,113,5.179,136,1.239,164,1.348,167,1.298,338,1.388,339,1.336,341,2.091,342,2.158,375,2.488,389,2.253,705,4.111,716,3.355,827,7.815,854,3.803,863,5.996,953,6.378,2132,8.235,2133,8.235]],["title/api/instruments/#pytestlab.instruments.Multimeter-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.Multimeter-functions",[]],["title/api/instruments/#dc-active-load",[166,2.58,668,2.404,730,2.196]],["text/api/instruments/#dc-active-load",[]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad",[115,3.74]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad",[]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad-classes",[299,3.075]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad-classes",[]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad",[115,3.74]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad",[14,2.263,35,3.695,38,3.168,42,3.356,43,3.47,44,2.168,60,2.786,90,4.43,94,1.357,108,0.717,110,4.975,115,3.255,116,2.767,136,0.84,141,4.323,156,2.689,164,0.914,166,3.862,167,0.88,182,3.393,188,3.004,234,3.525,275,2.748,295,3.925,298,3.925,299,2.677,336,3.992,338,0.941,339,0.906,340,4.107,341,1.401,347,1.964,394,1.757,432,4.703,539,2.786,595,4.39,668,5.038,692,2.767,705,4.877,716,3.184,718,4.39,730,5.311,733,4.229,734,4.216,737,3.353,778,4.241,779,3.598,783,3.862,793,4.839,818,3.992,894,4.143,1327,5.937,1362,4.681,1808,5.265,2072,4.229,2073,4.229,2134,5.028,2135,5.582,2136,5.582,2137,5.582,2138,5.582,2139,5.582,2140,5.582,2141,5.265,2142,4.839,2143,4.681,2144,4.546,2145,4.428]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad-attributes",[]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.config",[692,2.271]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.config",[]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.current_mode",[2145,5.088]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.current_mode",[]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad-functions",[]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode",[2146,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode",[53,1.488,78,2.636,94,1.047,108,0.969,115,4.396,136,1.134,156,3.286,164,1.234,167,1.505,220,5.27,283,3.251,338,1.271,339,1.223,341,1.712,343,2.239,347,1.894,359,1.599,375,1.719,432,4.98,671,5.711,705,5.676,722,2.827,1219,4.125,1287,2.75,1994,6.322,2128,6.534,2143,8.791,2146,7.11,2147,7.538]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test",[2148,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test",[53,1.544,78,2.736,94,1.086,108,1.005,115,4.561,136,1.176,164,1.281,167,1.233,188,5.26,338,1.319,339,1.269,341,1.752,343,2.324,347,1.965,359,1.659,369,4.914,375,1.784,432,5.097,468,3.932,722,2.894,778,5.785,779,6.301,1287,2.853,2144,8.683,2148,7.377]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input",[2149,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input",[6,4.016,53,1.254,78,3.607,94,0.882,100,2.698,108,0.816,115,3.702,136,0.955,164,1.039,167,1.001,187,2.5,338,1.07,339,1.03,341,1.729,343,2.536,347,1.595,349,4.455,359,1.346,369,5.572,375,1.947,452,2.326,458,2.784,468,4.292,469,4.386,722,3.408,778,5.597,779,6.649,818,7.927,1287,2.316,1327,5.189,1390,5.503,1941,4.713,2142,7.4,2149,5.988]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data",[2150,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data",[53,1.428,78,2.529,94,1.004,108,0.929,115,4.218,136,1.088,164,1.184,167,1.621,238,3.789,265,4.296,283,3.119,338,1.219,339,1.174,341,1.667,343,2.763,359,1.534,375,1.649,389,1.978,400,3.125,429,5.133,457,4.579,607,5.178,722,2.753,761,6.074,805,7.8,966,6.773,1027,6.514,1171,8.373,1311,3.153,1314,5.89,2150,6.821,2151,7.232]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data",[2152,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data",[38,2.51,53,1.223,78,2.165,94,0.86,98,3.157,108,0.796,115,3.611,136,0.931,164,1.014,167,1.734,265,4.715,331,4.508,332,3.805,338,1.044,339,1.005,341,1.707,343,1.839,359,1.313,375,1.412,389,1.694,400,2.08,413,5.343,564,5.556,577,5.043,716,3.42,718,5.349,722,2.485,734,4.452,737,4.085,769,4.445,794,3.723,915,3.684,919,5.448,950,6.81,959,7.039,965,5.192,1171,7.755,1552,6.836,1556,5.84,1625,5.902,1873,5.577,2128,5.367,2152,5.84,2153,8.393,2154,6.191,2155,6.191]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config",[1143,3.539]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config",[6,3.974,21,4.702,37,3.973,42,3.758,69,4.469,94,1.05,98,3.187,100,2.669,108,0.528,110,3.978,115,6.345,116,3.217,136,0.618,156,2.15,164,0.673,167,0.648,180,3.187,187,2.978,234,2.819,338,0.693,339,0.667,342,1.638,349,2.886,355,4.971,372,3.056,373,2.389,380,5.116,389,2.068,407,4.639,416,3.098,429,3.449,452,1.506,458,1.802,468,4.246,469,4.339,482,2.34,526,4.99,566,2.249,601,3.758,645,4.469,692,3.791,705,3.12,778,3.391,793,9.563,886,3.609,900,4.285,914,2.393,999,3.718,1040,6.151,1089,2.844,1090,4.258,1139,4.735,1140,5.09,1143,2.269,1147,7.037,1153,4.735,1354,5.894,2156,8.446,2157,8.446]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement",[2158,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement",[53,1.388,78,2.458,94,0.976,108,0.903,115,4.099,136,1.057,164,1.151,167,1.692,188,4.914,238,3.72,338,1.185,339,1.141,341,1.636,343,2.088,359,1.491,375,1.603,389,1.923,396,4.558,400,3.067,411,6.232,564,6.044,716,4.132,718,5.696,722,2.703,1311,3.065,2128,6.093,2144,8.26,2158,6.629,2159,9.13,2160,9.13,2161,9.565]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled",[2162,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled",[6,4.359,53,1.42,78,3.241,94,0.999,108,0.924,115,4.193,136,1.082,164,1.177,167,1.133,187,2.832,238,3.775,338,1.212,339,1.167,341,1.661,343,2.136,359,1.525,369,5.154,375,1.64,389,2.805,396,4.626,403,3.243,468,4.658,469,4.76,722,2.743,778,5.028,818,8.015,1099,7.02,1311,3.135,2142,8.032,2162,6.782]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current",[2163,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current",[53,1.605,90,5.673,94,1.129,108,1.044,115,4.74,136,1.222,164,1.331,167,1.281,171,5.895,284,5.956,338,1.37,339,1.319,341,1.794,359,1.724,389,2.223,716,4.078,734,5.071,910,5.308,2163,7.665,2164,10.009,2165,7.32]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power",[2166,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power",[53,1.584,90,5.628,94,1.114,108,1.031,115,4.679,136,1.207,164,1.314,167,1.265,171,5.849,284,5.908,338,1.352,339,1.302,341,1.78,359,1.701,389,2.195,716,4.046,718,6.057,910,5.239,2130,8.608,2165,7.226,2166,7.567,2167,9.93]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage",[2168,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage",[53,1.605,90,5.673,94,1.129,108,1.044,115,4.74,136,1.222,164,1.331,167,1.281,171,5.895,284,5.956,338,1.37,339,1.319,341,1.794,359,1.724,389,2.223,716,4.078,730,5.895,737,4.653,910,5.308,2165,7.32,2168,7.665]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity",[2169,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity",[6,3.288,53,1.38,78,2.444,94,0.971,108,0.898,115,4.076,116,3.221,136,1.051,164,1.144,167,1.102,188,4.896,338,1.178,339,1.134,341,1.813,343,2.076,347,1.756,359,1.929,369,5.386,375,2.075,400,2.348,468,3.514,722,2.994,1287,3.318,2144,8.725,2161,10.74,2169,6.592,2170,9.097,2171,9.649,2172,7.217]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer",[2173,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer",[6,3.288,53,1.38,78,2.444,94,0.971,108,0.898,115,4.076,116,3.221,136,1.051,164,1.144,167,1.102,188,4.896,338,1.178,339,1.134,341,1.813,343,2.076,347,1.756,350,6.753,359,1.929,369,5.386,375,2.075,400,2.348,468,3.514,663,9.649,722,2.994,1287,3.318,2144,8.725,2171,9.649,2172,7.217,2173,6.592,2174,9.097]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage",[2175,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage",[6,3.325,53,1.396,78,2.472,94,0.982,108,0.908,115,4.122,116,3.245,136,1.063,164,1.157,167,1.114,188,4.932,338,1.192,339,1.147,341,1.823,343,2.1,347,1.776,359,1.943,369,5.409,375,2.09,400,2.375,468,3.553,722,3.01,737,4.9,1287,3.343,2144,8.763,2171,9.691,2172,7.27,2175,6.667]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load",[2176,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load",[53,0.823,54,4.243,94,0.579,97,1.732,100,1.316,108,0.535,115,2.429,136,0.627,156,3.309,164,0.682,166,4.367,167,1.44,170,4.238,187,2.486,226,3.267,253,4.783,295,4.438,304,2.383,332,4.684,338,0.702,339,0.676,341,1.791,347,1.586,359,0.883,373,2.687,375,1.738,394,3.707,400,2.121,416,3.129,424,3.226,432,4.435,452,1.526,458,1.826,583,5.008,645,2.979,686,3.033,705,5.74,718,2.34,730,5.664,734,4.273,737,1.787,858,3.879,896,4.078,923,4.018,1287,1.519,1405,4.018,1442,2.685,1716,7.66,1717,5.686,1806,5.294,1941,3.092,2073,3.156,2142,5.472,2145,7.25,2176,3.929,2177,6.312,2178,6.392,2179,6.392,2180,6.392,2181,6.312,2182,6.392,2183,6.865,2184,5.472,2185,6.607]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode",[2183,5.777]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode",[15,5.046,53,0.831,60,4.819,94,0.584,100,1.33,108,0.541,115,2.454,116,2.252,136,0.633,156,2.639,164,0.689,167,1.58,187,2.505,213,1.845,266,5.046,283,1.815,300,4.27,338,0.709,339,0.683,341,1.532,342,2.24,347,1.057,359,0.892,373,2.423,375,1.749,394,1.325,416,3.153,432,5.228,452,2.33,458,1.845,526,2.194,607,3.541,705,5.937,706,3.909,718,4.307,730,5.686,734,2.974,737,3.29,818,4.549,882,2.058,896,3.677,897,2.53,927,3.452,956,2.785,989,4.632,1021,3.188,1103,2.454,1155,4.632,1219,2.302,1272,5.181,1287,1.535,1577,4.632,1668,8.268,1941,3.123,2073,5.81,2096,3.969,2122,5.999,2134,5.729,2141,10.157,2145,3.338,2178,6.431,2179,6.431,2180,6.431,2182,6.431,2183,3.79,2186,9.179]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range",[2187,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range",[53,1.046,78,3.338,94,0.736,100,2.38,108,0.681,115,3.089,116,2.667,136,0.797,140,5.131,156,3.709,164,0.867,167,1.381,187,2.086,229,3.255,338,0.893,339,0.86,341,1.878,342,1.974,343,2.238,347,1.893,349,4.048,359,1.123,373,1.674,375,1.718,394,3.468,400,2.53,432,3.928,452,1.941,458,2.323,649,5.834,705,4.765,718,2.976,722,3.261,734,4.098,737,2.273,854,4.979,896,2.54,914,2.885,1076,5.057,1077,4.855,1287,1.932,1941,3.932,2073,4.014,2145,6.953,2178,4.443,2179,4.443,2180,4.443,2182,4.443,2184,6.529,2185,6.529,2187,4.996]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate",[2188,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate",[53,0.983,78,3.245,94,0.692,100,2.277,108,0.64,115,2.904,116,2.552,136,0.749,156,3.388,164,0.815,167,1.335,170,4.838,187,1.961,226,3.729,229,3.061,309,4.838,338,0.84,339,0.808,341,1.839,342,1.888,343,2.141,347,1.811,349,3.91,359,1.056,373,1.574,375,1.643,400,2.421,432,3.758,452,1.825,458,2.184,532,5.907,705,5.123,718,2.797,722,3.208,734,3.959,737,2.136,740,7.738,858,4.428,896,2.388,914,2.76,1076,4.838,1077,4.645,1287,1.817,1446,6.49,1577,5.247,1941,3.697,2073,3.773,2145,6.717,2178,4.177,2179,4.177,2180,4.177,2182,4.177,2184,6.246,2185,6.246,2188,4.697,2189,10.584]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level",[2190,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level",[53,1.3,78,2.303,94,0.914,108,0.846,115,3.839,136,0.99,156,3.601,164,1.078,167,1.548,229,4.046,304,5.619,338,1.11,339,1.068,341,1.876,343,1.956,347,2.198,359,1.396,373,2.08,375,1.502,394,2.754,400,2.212,432,4.561,705,4.903,718,3.698,722,2.589,734,4.592,737,2.824,896,3.157,1287,2.401,2073,4.988,2143,8.237,2145,6.939,2178,5.521,2179,5.521,2180,5.521,2182,5.521,2184,7.582,2185,7.582,2190,6.209,2191,8.746,2192,6.583]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input",[2193,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input",[6,3.962,53,1.229,78,3.578,94,0.864,100,2.661,108,0.8,115,3.629,136,0.936,164,1.019,167,0.981,186,9.24,187,2.451,338,1.049,339,1.01,341,1.711,343,2.502,347,1.564,349,4.409,359,1.32,369,5.539,375,1.921,452,2.28,458,2.728,468,4.234,469,4.327,722,3.393,778,5.551,779,6.594,818,7.316,1287,2.27,1327,5.118,1390,5.394,1941,4.619,2193,5.869,2194,8.422]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient",[2195,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient",[21,6.108,53,1.471,78,2.605,94,1.034,108,0.957,115,4.343,117,6.557,136,1.12,164,1.219,167,1.174,338,1.256,339,1.209,341,1.868,343,2.213,347,1.872,359,2.01,375,2.162,468,3.744,469,3.826,603,5.527,722,3.086,1287,3.457,1994,9.201,2143,9.201,2195,7.025]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient",[2196,6.049]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient",[53,1.574,78,2.788,94,1.107,108,1.024,115,4.649,136,1.199,164,1.305,167,1.257,338,1.344,339,1.294,341,1.773,343,2.368,347,2.003,359,1.691,375,1.818,432,5.158,722,2.928,1287,2.908,1344,9.328,2143,9.018,2196,7.518,2197,10.753,2198,9.89]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad-functions",[]],["title/api/instruments/#pytestlab.instruments.DCActiveLoad.health_check",[1317,5.223]],["text/api/instruments/#pytestlab.instruments.DCActiveLoad.health_check",[53,1.247,94,0.877,97,4.601,99,3.574,108,0.812,115,3.684,136,1.447,164,1.034,167,0.996,174,3.158,194,4.871,250,9.123,264,4.6,338,1.065,339,1.025,341,1.724,359,1.804,361,2.833,375,1.94,383,3.269,389,1.728,390,4.072,434,4.437,476,6.764,596,4.241,617,7.632,668,5.484,678,7.135,681,5.297,685,8.068,688,5.297,730,5.011,742,4.181,994,5.171,1300,5.145,1317,5.145,1321,6.749,2134,7.663]],["title/api/instruments/#spectrum-analyzer",[800,3.841,814,4.248]],["text/api/instruments/#spectrum-analyzer",[]],["title/api/instruments/#pytestlab.instruments.SpectrumAnalyser",[2199,5.378]],["text/api/instruments/#pytestlab.instruments.SpectrumAnalyser",[]],["title/api/instruments/#pytestlab.instruments.SpectrumAnalyser-classes",[299,3.075]],["text/api/instruments/#pytestlab.instruments.SpectrumAnalyser-classes",[]],["title/api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult",[2200,6.049]],["text/api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult",[94,1.086,108,1.005,136,1.176,164,1.281,283,4.216,338,1.319,339,1.269,340,4.11,341,2.06,342,2.561,400,3.284,664,6.205,751,5.042,755,4.354,966,7.763,1083,8.258,1442,5.042,2199,6.559,2201,10.056,2202,10.056]],["title/api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult-attributes",[]],["title/api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.x",[966,4.67]],["text/api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.x",[]],["title/api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.x_label",[2201,6.049]],["text/api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.x_label",[]],["title/api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.y",[1083,4.967]],["text/api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.y",[]],["title/api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.y_label",[2202,6.049]],["text/api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.y_label",[]],["title/api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult-functions",[]],["title/api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser",[2199,5.378]],["text/api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser",[9,3.485,14,3.178,21,4.364,38,4.327,44,3.044,94,1.482,100,2.477,108,0.72,116,1.986,130,3.149,136,0.843,164,0.918,167,1.543,194,2.839,206,3.942,234,2.529,299,2.689,320,3.82,336,7,338,0.945,339,0.91,340,2.947,341,2.062,347,1.409,355,4.29,372,2.742,373,1.772,375,1.788,376,5.949,380,2.799,458,2.458,471,3.446,558,3.371,595,4.403,692,3.958,710,5.054,816,5.05,882,2.742,900,3.178,923,3.569,926,3.614,1232,4.248,1275,6.385,1277,4.01,1278,4.567,1280,2.742,1281,4.248,1282,5.939,1283,7.171,1284,4.567]],["title/api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser-functions",[]],["title/api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement",[2074,5.559]],["text/api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement",[53,1.217,58,5.384,88,2.338,92,2.146,94,0.856,108,0.792,136,0.927,164,1.009,167,1.732,262,4.235,338,1.039,339,1,341,2.014,347,2.824,359,2.014,375,2.166,400,3.191,564,4.078,692,3.89,821,5.34,823,5.34,824,9.595,826,5.549,828,10.047,1006,5.699,1287,3.465,1299,5.167,2074,5.34,2199,5.167,2203,10.188,2204,6.161,2205,6.161]],["title/api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace",[2206,6.049]],["text/api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace",[37,2.913,53,0.999,77,1.921,78,1.77,92,2.539,94,0.703,108,0.65,121,4.244,136,0.761,164,0.829,167,1.869,225,2.681,254,5.646,265,4.318,338,0.853,339,0.821,341,1.85,343,1.504,359,1.073,375,1.154,389,2.557,396,2.526,434,2.639,509,4.122,564,3.35,577,4.122,592,5.126,611,2.619,692,3.026,722,1.498,755,2.818,794,3.043,821,4.387,823,6.319,850,2.869,854,3.367,884,7.86,910,3.305,966,5.308,1006,4.967,1082,2.981,1083,5.646,1115,6.319,1185,4.122,1280,1.77,1293,4.387,1299,4.244,1311,2.207,1442,4.699,1443,6.876,1653,4.559,1900,4.774,2199,6.113,2200,8.059,2206,6.876,2207,4.774,2208,5.061,2209,5.061,2210,4.774,2211,6.876,2212,4.774,2213,5.061,2214,4.559,2215,4.244,2216,7.29,2217,7.29,2218,7.29,2219,7.29,2220,5.061]],["title/api/instruments/#vector-network-analyzer-vna",[498,2.289,799,2.777,800,2.511,801,2.336]],["text/api/instruments/#vector-network-analyzer-vna",[]],["title/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser",[2221,5.378]],["text/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser",[]],["title/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser-classes",[299,3.075]],["text/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser-classes",[]],["title/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData",[2222,6.049]],["text/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData",[94,0.965,100,2.196,108,0.893,136,1.045,164,1.138,167,1.59,174,2.58,283,5.121,297,4.539,321,3.376,338,1.172,339,1.128,340,3.652,341,1.916,342,1.821,394,2.188,400,2.335,452,3.321,455,3.081,532,6.421,755,5.951,809,6.025,810,6.025,853,5.159,865,6.085,999,4.135,1043,4.224,1057,8.002,2221,5.829,2223,8.744,2224,6.95]],["title/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData-attributes",[]],["title/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData.frequencies",[755,3.57]],["text/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData.frequencies",[]],["title/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData.param_names",[1057,5.088]],["text/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData.param_names",[]],["title/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData.s_params",[2223,5.559]],["text/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData.s_params",[]],["title/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData-functions",[]],["title/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser",[2221,5.378]],["text/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser",[9,3.485,14,3.178,21,4.364,38,4.327,44,3.044,94,1.482,100,2.477,108,0.72,116,1.986,130,3.149,136,0.843,164,0.918,167,1.543,194,2.839,206,3.942,234,2.529,299,2.689,320,3.82,336,7,338,0.945,339,0.91,340,2.947,341,2.062,347,1.409,355,4.29,372,2.742,373,1.772,375,1.788,376,5.949,380,2.799,458,2.458,471,3.446,558,3.371,595,4.403,692,3.958,710,5.054,803,5.05,882,2.742,900,3.178,923,3.569,926,3.614,1232,4.248,1275,6.385,1277,4.01,1278,4.567,1280,2.742,1281,4.248,1282,5.939,1283,7.171,1284,4.567]],["title/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser-attributes",[354,2.796]],["text/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser-attributes",[]],["title/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.model_config",[682,4.245]],["text/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.model_config",[]],["title/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser-functions",[]],["title/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep",[2225,6.049]],["text/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep",[37,1.716,53,0.848,58,2.434,88,1.63,94,0.897,108,0.552,116,1.521,136,0.646,156,1.478,164,0.703,167,1.675,174,1.594,214,2.086,262,4.338,283,1.852,316,2.926,321,2.086,338,0.724,339,1.048,341,2.039,342,1.125,343,1.276,347,2.831,359,1.964,375,2.219,400,2.901,452,2.366,471,3.97,532,4.112,539,4.857,592,3.02,611,4.793,692,3.575,716,1.75,718,2.412,748,3.602,801,4.894,804,8.341,805,7.766,807,8.341,808,3.723,809,5.599,810,3.723,811,3.723,812,3.723,813,3.254,1006,4.401,1280,2.259,1287,3.378,1422,3.868,1440,8.146,1441,8.146,2221,3.602,2223,7.486,2225,4.051,2226,4.051,2227,4.295,2228,4.295,2229,8.636,2230,4.295,2231,4.295,2232,4.295,2233,4.295,2234,4.051]],["title/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data",[2235,6.049]],["text/api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data",[13,2.714,37,1.822,53,0.901,77,2.565,78,3.323,94,0.634,108,0.586,136,0.686,164,0.747,167,1.797,174,2.508,180,2.326,225,2.416,265,4.595,283,2.914,316,3.108,321,3.283,338,0.769,339,0.74,341,1.845,359,0.967,375,1.04,389,1.848,396,3.373,434,2.379,452,2.948,457,2.246,509,3.715,532,5.123,539,2.277,572,3.533,588,2.772,596,4.536,611,3.497,692,3.151,755,4.481,801,3.456,805,8.867,808,3.954,809,5.857,810,3.954,811,3.954,812,3.954,854,3.121,865,5.974,884,5.36,984,5.119,1057,3.619,1280,1.595,1293,3.954,1311,1.989,1653,4.109,1784,3.108,2207,4.302,2210,4.302,2211,4.302,2212,4.302,2221,3.825,2222,6.373,2223,3.954,2226,4.302,2235,6.373,2236,3.533,2237,4.561,2238,4.561,2239,4.561,2240,4.109,2241,8.048,2242,6.757,2243,8.048,2244,8.048,2245,4.561,2246,4.561,2247,8.048,2248,4.302,2249,6.757,2250,6.757,2251,4.561]],["title/api/instruments/#power-meter",[718,2.649,829,3.955]],["text/api/instruments/#power-meter",[]],["title/api/instruments/#pytestlab.instruments.PowerMeter",[2252,5.559]],["text/api/instruments/#pytestlab.instruments.PowerMeter",[]],["title/api/instruments/#pytestlab.instruments.PowerMeter-classes",[299,3.075]],["text/api/instruments/#pytestlab.instruments.PowerMeter-classes",[]],["title/api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter",[2252,5.559]],["text/api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter",[9,3.108,14,3.44,21,4.023,38,4.167,44,2.806,94,1.507,100,2.284,108,0.643,116,2.559,130,2.809,136,0.752,164,0.819,167,1.465,171,2.945,194,2.532,206,3.516,234,3.26,269,2.975,299,4.069,304,2.861,310,3.183,320,3.407,336,6.648,338,0.843,339,0.812,340,2.628,341,2.012,347,1.256,355,3.954,372,2.445,373,1.58,375,1.648,376,5.65,380,2.496,391,2.628,394,1.574,416,2.479,458,2.192,471,3.073,558,3.007,595,4.059,692,3.842,710,4.658,716,2.037,718,5.539,829,6.06,831,4.334,835,4.334,882,2.445,900,2.834,923,3.183,926,3.223,1232,3.788,1275,5.886,1277,3.576,1278,4.072,1280,2.527,1281,3.788,1282,5.475,1283,6.732,1284,4.072,1327,3.039,1362,4.193,1366,4.334,1367,4.072]],["title/api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter-functions",[261,2.402]],["text/api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter-functions",[]],["title/api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor",[2253,6.049]],["text/api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor",[44,2.06,53,0.658,58,3.007,60,1.663,78,2.637,88,1.264,92,1.16,94,0.463,100,2.602,108,0.428,116,2.916,136,0.501,141,2.58,150,3.671,156,3.166,164,0.545,167,1.624,174,1.969,187,1.312,205,2.58,214,3.212,226,5.704,262,3.911,321,2.578,338,0.562,339,0.541,341,1.808,342,1.39,343,2.24,347,2.535,349,4.25,359,1.402,366,2.426,369,2.667,375,1.878,391,1.751,394,1.67,400,1.783,416,2.63,434,1.737,452,1.22,457,4.054,458,1.461,471,2.047,539,1.663,583,4.209,607,1.855,611,1.724,613,2.305,630,5.996,631,3.142,664,4.209,692,3.382,716,3.355,718,5.667,722,2.914,751,3.42,755,4.584,829,4.45,831,2.888,832,8.288,834,3.001,835,7.604,836,7.766,837,5.732,882,1.629,886,3.064,898,1.855,1006,6.269,1219,1.823,1280,1.856,1287,2.412,1511,3.864,1577,3.864,1621,2.888,2234,3.142,2248,3.142,2252,2.888,2253,3.142,2254,5.306,2255,3.331,2256,3.331,2257,3.331,2258,3.331]],["title/api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power",[2259,6.049]],["text/api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power",[14,1.598,20,2.727,37,3.302,53,0.778,77,3.719,78,3.292,82,5.246,94,1.307,100,1.246,108,0.507,116,2.927,136,0.593,164,0.645,167,1.763,170,4.063,187,2.384,225,2.088,226,3.813,234,1.778,238,1.606,265,3.402,270,5.581,338,0.664,339,0.64,341,1.687,343,1.798,349,3.817,359,0.836,375,1.38,389,2.574,391,5.15,396,3.678,400,2.996,416,3,434,2.056,452,1.444,457,2.98,458,1.728,509,3.21,566,3.312,583,3.127,588,2.396,607,3.369,611,2.04,612,2.139,664,3.127,692,2.609,716,2.466,718,5.68,722,3.07,734,3.864,835,7.164,837,6.386,860,3.55,878,3.55,884,4.801,906,2.322,973,2.727,1028,4.255,1082,2.322,1280,1.379,1293,6.386,1311,1.719,2252,5.246,2259,5.708,2260,3.942,2261,3.942,2262,5.451,2263,9.411,2264,6.052,2265,3.942,2266,3.942,2267,3.942,2268,6.636,2269,3.942,2270,3.942]],["title/api/instruments/#facade-pattern",[95,3.263,96,3.841]],["text/api/instruments/#facade-pattern",[41,4.695,77,3.754,78,2.788,79,4.604,94,1.107,95,5.515,110,5.075,116,2.823,135,5.605,247,4.326,359,1.691,380,3.979,432,4.157,611,5.119,613,5.515,722,2.928,778,5.835,856,4.518,1082,4.695,1137,7.518,1152,5.431,1375,5.206,1381,6.492,1625,5.605,1682,7.18,2271,5.917,2272,5.917]],["title/api/instruments/#simulation-support",[37,1.884,60,2.354]],["text/api/instruments/#simulation-support",[6,4.238,37,4.682,38,3.652,42,5.416,60,4.496,62,4.971,92,3.137,110,5.734,245,5.963,247,4.888,600,6.686]],["title/api/instruments/#extending-drivers",[110,3.002,264,3.434]],["text/api/instruments/#extending-drivers",[12,4.496,23,5.193,60,4.401,76,4.065,83,3.931,92,3.071,94,1.461,180,5.363,189,5.418,247,4.784,609,6.994,1138,5.141,1143,4.866,2273,8.816]],["title/api/measurements/",[716,2.613]],["text/api/measurements/",[4,0.742,6,2.254,14,0.467,15,0.913,21,0.641,23,0.678,26,0.855,35,0.762,37,1.173,40,0.685,41,1.246,42,0.692,45,4.135,50,0.685,53,1.383,60,0.575,77,0.803,78,0.403,79,0.665,86,0.784,89,3.102,92,1.022,94,1.126,97,0.479,98,0.587,99,0.889,100,0.364,108,0.933,109,0.838,116,0.749,118,2.064,119,3.403,120,0.81,133,0.892,136,0.913,140,0.784,156,1.253,157,2.224,164,0.994,167,1.719,177,0.913,180,1.079,182,0.7,187,2.241,188,0.62,191,2.253,195,1.272,202,0.838,207,1.259,226,1.519,232,1.168,234,0.519,238,0.469,247,0.625,256,1.464,261,0.792,262,1.309,265,0.977,269,0.685,275,1.042,283,2.066,284,0.685,292,1.442,296,0.824,297,0.752,298,1.488,299,0.552,302,1.037,304,0.659,305,0.913,309,0.773,310,0.733,317,0.647,319,0.678,338,1.023,339,1.041,340,0.605,341,1.966,342,1.966,347,2.122,354,1.855,355,3.114,356,1.148,357,5.701,358,0.752,359,1.426,360,2,361,0.516,362,0.824,367,2.519,370,0.685,372,1.035,373,1.664,375,1.463,376,0.7,389,1.754,390,0.742,391,0.605,394,2.205,411,1.3,412,0.998,416,0.571,422,1.817,428,2.651,429,1.168,432,1.531,433,1.112,437,1.634,452,1.93,455,3.932,468,1.476,469,1.87,471,0.708,472,1.639,481,3.427,482,0.792,523,1.382,526,2.218,537,3.464,538,2.965,540,2.978,548,3.217,559,0.752,560,1.897,565,1.774,572,0.892,589,1.037,592,2.064,595,2.045,596,0.773,597,0.855,611,1.095,612,0.625,689,1.121,702,1.723,712,2.778,716,3.664,718,0.647,719,0.855,722,0.341,737,1.259,739,0.838,745,1.486,756,0.838,758,1.571,779,0.742,784,2.816,795,0.966,806,2.083,819,1.086,858,1.3,865,0.773,881,0.872,905,1.943,906,1.729,912,0.855,915,0.685,919,0.659,926,0.742,927,2.6,928,2.377,931,1.906,938,0.872,940,3.294,943,1.679,955,2.614,957,1.639,961,0.938,971,1.037,974,0.838,994,0.7,1001,1.037,1018,0.938,1024,1.906,1028,2.064,1041,1.037,1056,1.037,1075,3.44,1082,0.678,1085,2.651,1088,4.868,1092,4.408,1101,0.998,1103,3.54,1114,0.855,1138,2.123,1143,1.62,1150,1.037,1159,1.442,1230,1.464,1235,0.872,1295,0.838,1299,0.966,1327,0.7,1415,0.855,1456,1.037,1490,0.913,1499,0.998,1508,0.966,1520,4.816,1597,0.913,1617,2.991,1638,3.279,1707,0.892,1810,0.797,1835,3.374,2068,3.222,2125,1.679,2172,0.913,2236,0.892,2271,0.855,2272,0.855,2274,1.037,2275,0.966,2276,1.151,2277,0.966,2278,1.151,2279,0.998,2280,1.151,2281,4.519,2282,2.116,2283,1.151,2284,1.151,2285,1.151,2286,1.151,2287,1.151,2288,2.116,2289,1.996,2290,2.116,2291,2.116,2292,2.116,2293,4.316,2294,2.769,2295,3.831,2296,1.996,2297,2.769,2298,2.769,2299,1.996,2300,5.126,2301,1.151,2302,1.151,2303,1.996,2304,1.996,2305,3.434,2306,3.434,2307,3.434,2308,2.769,2309,1.996,2310,1.996,2311,1.774,2312,1.151,2313,1.151,2314,1.151,2315,2.116,2316,1.151,2317,3.64,2318,3.64,2319,2.935,2320,1.151,2321,2.935,2322,2.116,2323,2.116,2324,1.151,2325,1.151,2326,1.151,2327,1.151,2328,1.151,2329,1.151,2330,2.116,2331,2.116,2332,2.935,2333,2.935,2334,3.64,2335,0.913,2336,2.116,2337,2.116,2338,1.151,2339,1.151,2340,0.998,2341,0.81,2342,1.151,2343,0.913,2344,1.151,2345,1.151,2346,1.037,2347,1.151,2348,1.151,2349,1.151,2350,1.151]],["title/api/measurements/#measurement-session",[716,1.921,1088,2.898]],["text/api/measurements/#measurement-session",[89,6.016,94,1.167,108,1.079,119,3.811,133,6.507,232,4.636,234,3.789,269,4.999,296,6.008,298,5.907,299,4.028,304,4.806,310,5.348,481,6.008,702,6.842,716,4.162,865,5.64,1075,5.486,1150,7.567,1617,5.907,2274,7.567,2275,7.045]],["title/api/measurements/#overview",[302,5.777]],["text/api/measurements/#overview",[86,5.431,94,1.374,118,5.605,119,4.487,156,2.743,195,4.793,292,5.431,305,6.324,309,5.352,429,4.399,432,4.157,560,3.554,589,7.18,716,4.381,758,5.917,795,6.685,961,6.492,1075,5.206,1295,5.805,1508,6.685,1617,5.605,2172,6.324,2236,6.174,2276,7.971,2277,6.685,2278,7.971,2279,6.91,2280,7.971]],["title/api/measurements/#api-reference",[40,2.806,41,2.778]],["text/api/measurements/#api-reference",[]],["title/api/measurements/#pytestlab.measurements.MeasurementSession",[1075,4.188]],["text/api/measurements/#pytestlab.measurements.MeasurementSession",[14,1.735,26,3.177,42,2.573,45,5.676,60,2.136,94,1.197,108,0.55,109,3.117,119,4.574,136,0.644,156,2.217,157,4.881,164,0.701,167,1.705,187,3.642,238,1.744,262,3.455,265,1.977,283,2.779,284,2.547,298,3.009,317,2.404,319,2.521,338,0.721,339,0.695,340,2.249,341,2.108,342,2.642,347,2.442,355,2.342,357,6.502,360,2.916,375,1.469,391,2.249,432,2.232,433,3.386,455,4.1,469,3.31,471,2.63,482,2.413,523,2.795,526,4.041,592,4.53,716,1.744,745,2.167,806,2.448,928,2.795,931,3.855,1018,3.486,1088,2.63,1092,4.99,1499,3.71,1835,5.111,2281,7.308,2282,4.28,2283,4.28,2284,4.28,2285,4.28,2286,4.28,2287,4.28,2288,4.28,2289,4.037,2290,4.28,2291,4.28,2292,4.28,2293,5.803,2294,6.077,2295,3.855,2296,4.037,2297,4.037,2298,6.077,2299,4.037,2300,7.766,2301,4.28,2302,4.28]],["title/api/measurements/#pytestlab.measurements.MeasurementSession-attributes",[354,2.796]],["text/api/measurements/#pytestlab.measurements.MeasurementSession-attributes",[]],["title/api/measurements/#pytestlab.measurements.MeasurementSession.created_at",[2289,6.049]],["text/api/measurements/#pytestlab.measurements.MeasurementSession.created_at",[]],["title/api/measurements/#pytestlab.measurements.MeasurementSession.data",[265,2.962]],["text/api/measurements/#pytestlab.measurements.MeasurementSession.data",[]],["title/api/measurements/#pytestlab.measurements.MeasurementSession.description",[187,2.526]],["text/api/measurements/#pytestlab.measurements.MeasurementSession.description",[]],["title/api/measurements/#pytestlab.measurements.MeasurementSession.name",[455,2.843]],["text/api/measurements/#pytestlab.measurements.MeasurementSession.name",[]],["title/api/measurements/#pytestlab.measurements.MeasurementSession.tz",[2281,6.049]],["text/api/measurements/#pytestlab.measurements.MeasurementSession.tz",[]],["title/api/measurements/#pytestlab.measurements.MeasurementSession-functions",[261,2.402]],["text/api/measurements/#pytestlab.measurements.MeasurementSession-functions",[]],["title/api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__",[2303,6.049]],["text/api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__",[53,1.741,108,1.133,136,1.326,164,1.444,167,1.658,338,1.486,339,1.431,341,1.885,389,2.412,537,7.181,538,7.181,716,3.592,1075,5.758,1088,5.418,2303,8.315]],["title/api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__",[2304,6.049]],["text/api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__",[53,1.67,108,1.087,136,1.272,164,1.385,167,1.617,338,1.426,339,1.373,341,1.838,359,1.794,389,2.314,468,4.252,469,4.345,537,6.889,538,6.889,716,3.446,1088,5.198,2304,7.977,2305,7.977,2306,7.977,2307,7.977,2308,7.977]],["title/api/measurements/#pytestlab.measurements.MeasurementSession.__enter__",[2309,6.049]],["text/api/measurements/#pytestlab.measurements.MeasurementSession.__enter__",[89,6.016,108,1.079,136,1.264,164,1.375,167,1.61,338,1.416,339,1.363,341,1.831,389,2.298,481,7.305,537,6.842,538,6.842,565,8.566,716,3.423,1075,5.486,1088,5.163,2068,7.739,2309,7.924]],["title/api/measurements/#pytestlab.measurements.MeasurementSession.__exit__",[2310,6.049]],["text/api/measurements/#pytestlab.measurements.MeasurementSession.__exit__",[15,4.961,23,3.683,53,1.235,89,4.977,92,2.178,97,2.6,98,3.189,99,3.549,108,0.804,136,0.941,164,1.024,167,1.739,180,3.189,191,4.476,202,4.554,338,1.054,339,1.015,341,1.715,356,3.393,358,4.084,361,2.804,367,4.326,370,3.721,389,1.711,416,3.1,468,3.144,469,3.213,481,6.043,537,6.882,538,5.093,540,5.949,716,2.548,974,4.554,1001,5.633,1088,3.843,1520,9.102,2068,7.251,2125,4.961,2305,5.898,2306,5.898,2307,5.898,2308,7.97,2310,5.898,2311,7.087,2312,6.253,2313,6.253,2314,6.253,2315,8.45,2316,6.253]],["title/api/measurements/#pytestlab.measurements.MeasurementSession.acquire",[437,3.57]],["text/api/measurements/#pytestlab.measurements.MeasurementSession.acquire",[108,0.883,136,1.034,164,1.125,167,1.678,338,1.159,339,1.116,341,1.908,342,1.801,347,2.776,367,4.755,373,2.172,375,2.288,376,4.178,389,2.462,422,3.431,437,5.01,455,4.719,472,5.324,572,5.324,596,4.615,597,5.102,716,3.666,905,4.55,955,5.53,1088,4.224,1103,6.443,1114,5.102,2295,8.105,2296,6.483,2317,10.644]],["title/api/measurements/#pytestlab.measurements.MeasurementSession.instrument",[94,0.891]],["text/api/measurements/#pytestlab.measurements.MeasurementSession.instrument",[4,4.178,45,5.304,53,1.28,92,3.015,94,1.445,108,0.833,116,2.295,136,0.975,164,1.061,167,1.022,338,1.093,339,1.052,341,1.942,342,2.268,355,3.546,357,8.132,359,1.374,360,4.415,367,4.484,373,2.735,375,1.974,389,2.368,422,4.321,548,6.543,689,3.432,716,2.641,1088,3.983,1138,3.779,1143,3.577,1415,4.81,1835,7.731,2293,8.778,2294,6.113,2300,5.837,2318,9.745,2319,8.655]],["title/api/measurements/#pytestlab.measurements.MeasurementSession.parameter",[452,2.35]],["text/api/measurements/#pytestlab.measurements.MeasurementSession.parameter",[108,0.893,136,1.045,164,1.138,167,1.59,226,4.691,283,4.35,338,1.172,339,1.128,341,1.808,342,2.643,347,2.535,362,4.971,367,4.808,372,3.399,373,2.196,375,1.585,394,3.697,422,3.469,452,3.321,455,4.916,523,4.539,559,4.539,716,2.832,915,4.135,919,3.976,1028,6.373,1088,4.271,1092,7.813,2320,6.95]],["title/api/measurements/#pytestlab.measurements.MeasurementSession.run",[191,3.397]],["text/api/measurements/#pytestlab.measurements.MeasurementSession.run",[6,3.5,53,0.791,77,1.52,100,1.266,108,0.515,119,1.817,136,0.602,140,2.729,164,0.656,167,1.553,177,3.177,191,2.121,261,1.5,283,1.727,338,0.675,339,0.65,341,2.03,342,1.05,355,2.192,357,5.231,359,1.578,372,1.959,373,2.351,375,1.397,389,1.676,394,2.342,411,3.765,412,3.472,428,6.068,452,3.053,455,3.299,468,2.013,472,3.102,526,3.195,540,2.489,595,4.681,689,2.121,716,3.395,739,2.916,745,3.102,779,2.582,806,3.505,819,3.777,858,3.765,912,2.973,927,4.522,928,4.859,938,3.034,940,6.956,943,4.86,955,4.572,957,4.745,971,3.607,1024,5.518,1041,3.607,1056,3.607,1085,6.068,1088,2.461,1092,5.763,1101,3.472,1103,4.339,1230,4.239,1327,2.434,1456,3.607,1520,3.177,1597,3.177,1638,7.506,2125,3.177,2293,3.607,2295,5.518,2297,5.778,2298,3.777,2299,3.777,2300,6.702,2321,6.126,2322,6.126,2323,6.126,2324,4.005,2325,4.005,2326,4.005,2327,4.005,2328,4.005,2329,4.005,2330,6.126,2331,6.126,2332,7.44,2333,7.44,2334,8.334,2335,3.177,2336,6.126,2337,6.126,2338,4.005,2339,4.005]],["title/api/measurements/#example-usage",[611,2.441,905,3.122]],["text/api/measurements/#example-usage",[6,3.609,37,3.552,50,3.235,53,1.515,77,2.063,78,1.901,79,3.139,94,1.414,108,0.986,116,1.925,119,2.466,156,1.871,167,1.802,180,2.772,188,2.926,191,2.879,195,3.269,207,4.564,256,5.307,275,3.777,292,3.704,339,0.882,355,2.975,356,2.95,359,2.241,429,3,432,2.835,540,4.768,548,5.15,560,3.42,611,2.814,712,6.65,716,3.622,718,3.053,719,4.035,722,1.609,737,3.813,784,6.741,906,5.236,926,3.504,994,3.304,1075,5.01,1088,6.258,1138,5.184,1143,4.234,1159,5.226,1617,3.822,1707,4.21,2340,4.712,2341,3.822,2342,5.436,2343,4.312,2344,5.436]],["title/api/measurements/#key-features",[35,3.122,927,2.559]],["text/api/measurements/#key-features",[21,4.098,41,4.335,53,1.453,89,4.335,118,6.613,119,4.267,120,5.175,157,5.576,167,1.16,182,4.473,232,4.062,247,3.994,297,4.807,360,5.014,390,4.745,481,5.264,548,4.941,560,4.194,612,3.994,702,5.995,756,5.36,758,5.463,806,4.211,881,5.576,905,4.872,927,3.994,1082,4.335,1088,4.523,1235,5.576,1299,6.172,1490,5.839,1617,6.613,1810,5.092,2271,5.463,2272,5.463,2345,7.36,2346,6.629,2347,7.36,2348,7.36,2349,7.36,2350,7.36]],["title/profiles/creating/",[76,1.823,180,2.405]],["text/profiles/creating/",[2,2.453,12,4.458,23,3.874,24,5.674,37,2.999,39,2.252,40,4.466,41,3.874,42,3.17,43,5.433,44,3.909,50,1.966,60,1.65,62,2.91,69,2.364,73,2.692,76,4.292,77,3.318,78,1.156,83,4.378,88,1.254,92,2.615,94,1.043,97,1.374,103,2.009,108,0.965,116,3.095,171,1.947,174,1.227,180,3.354,187,1.302,188,1.779,189,4.042,207,3.137,214,3.195,225,1.75,229,2.031,234,2.378,238,1.347,247,4.073,256,2.286,265,3.467,272,2.977,290,3.075,309,2.219,313,2.286,321,1.606,392,2.252,394,1.04,502,2.692,504,3.49,539,1.65,563,1.84,587,3.707,588,2.009,601,3.17,603,1.927,605,4.481,611,3.404,612,1.793,689,3.484,690,4.182,692,1.867,705,1.65,706,2.031,707,5.564,708,5.356,712,2.158,713,5.218,717,2.188,718,2.961,719,3.913,721,3.994,722,1.947,725,2.772,730,3.105,738,2.977,744,2.977,752,2.252,753,2.865,854,1.526,864,2.772,865,2.219,882,4.275,927,1.793,968,2.977,969,2.56,973,2.286,1013,2.622,1093,4.749,1094,4.749,1111,2.364,1138,1.927,1141,2.772,1143,1.824,1164,4.182,1230,2.286,1261,4.083,1298,2.622,1327,2.009,1430,2.56,1551,2.504,1617,4.625,1647,2.865,1654,2.219,1742,2.977,1744,2.977,2214,2.977,2240,2.977,2351,3.305,2352,3.305,2353,3.305,2354,5.272,2355,2.977,2356,3.305,2357,2.772,2358,3.305,2359,2.977,2360,2.692,2361,2.977]],["title/profiles/creating/#creating-profiles",[76,1.823,180,2.405]],["text/profiles/creating/#creating-profiles",[12,4.343,24,5.892,43,5.293,44,3.307,76,3.981,83,3.797,88,3.232,92,2.966,94,1.43,108,1.094,234,3.841,539,4.251,601,5.12,689,4.51,753,7.382,882,4.165,1230,5.892,1327,5.176,1654,5.717,2351,8.516]],["title/profiles/creating/#profile-structure",[24,3.263,76,1.823]],["text/profiles/creating/#profile-structure",[12,4.87,24,5.215,43,5.936,44,4.071,60,3.763,73,6.139,76,2.914,83,4.258,116,3.382,171,4.44,174,2.798,207,4.485,214,4.639,265,4.411,321,3.662,394,2.373,504,4.99,605,6.506,705,3.763,707,6.079,708,4.923,713,5.98,717,4.99,721,5.711,722,2.232,854,3.482,1013,5.98,1111,5.391,1164,5.98,1298,5.98,1617,5.3]],["title/profiles/creating/#example-power-supply-profile",[76,1.192,611,1.596,718,1.732,719,2.289]],["text/profiles/creating/#example-power-supply-profile",[2,6.885,69,6.634,76,3.585,83,4.831,611,4.801,718,5.21,719,6.885,969,7.184,2352,9.275]],["title/profiles/creating/#metadata",[1617,4.509]],["text/profiles/creating/#metadata",[44,3.684,707,6.039,712,6.196,713,7.526,725,7.956,2240,8.545,2353,9.487]],["title/profiles/creating/#configuration-data-matches-powersupplyconfig-model",[44,1.021,116,0.931,265,1.214,708,1.717,721,1.991]],["text/profiles/creating/#configuration-data-matches-powersupplyconfig-model",[77,4.543,78,2.978,187,3.354,207,5.067,256,5.892,563,4.741,722,2.521,738,7.67,744,7.67,973,5.892,1093,9.276,1094,9.276,1742,7.67,1744,7.67,2214,7.67]],["title/profiles/creating/#creating-a-new-profile",[23,2.196,76,1.441,180,1.902]],["text/profiles/creating/#creating-a-new-profile",[12,4.807,23,4.878,24,4.2,39,4.136,40,4.928,41,3.576,43,5.148,44,3.661,50,3.612,76,4.228,83,4.203,92,2.115,94,1.15,108,1.211,116,2.933,180,3.096,189,5.089,214,2.949,225,3.215,265,2.804,272,5.468,290,4.83,309,4.076,313,4.2,587,5.823,601,3.65,603,3.54,605,4.136,612,3.294,689,4.386,692,2.933,706,3.731,707,5.272,708,3.965,713,4.816,722,1.797,730,4.878,752,4.136,864,5.091,865,4.076,882,4.61,927,3.294,968,5.468,1138,3.54,1141,5.091,1143,3.35,1164,4.816,1261,4.702,1617,4.268,1647,5.262,2354,8.282,2355,5.468,2356,6.071]],["title/profiles/creating/#tips",[2357,5.378]],["text/profiles/creating/#tips",[24,4.89,37,4.299,40,5.453,41,5.397,42,5.51,43,4.393,44,2.745,62,5.058,76,3.931,83,3.152,92,3.192,97,2.939,103,4.296,116,2.503,188,3.804,189,4.344,229,4.344,234,3.188,238,2.88,247,5.838,392,4.816,502,5.757,504,4.679,588,4.296,611,3.658,690,7.27,707,4.5,708,5.985,882,4.482,1261,5.475,1430,5.475,1551,5.355,2358,7.068,2359,6.367,2360,5.757,2361,6.367]],["title/profiles/gallery/",[76,1.823,2360,3.841]],["text/profiles/gallery/",[3,2.426,58,6.184,76,4.396,83,4.864,92,1.16,94,0.918,100,3.447,108,0.682,111,3.322,113,4.158,136,1.641,174,4.091,180,1.699,215,2.643,227,2.383,244,1.906,275,5.427,283,1.437,284,1.982,321,1.618,711,6.491,725,4.45,772,3.142,801,2.524,820,3.142,833,3.142,927,1.808,955,6.704,1241,4.262,2340,4.599,2341,3.731,2360,2.713,2362,3.331,2363,5.004,2364,7.433,2365,7.433,2366,7.433,2367,4.321,2368,5.004,2369,5.004,2370,5.004,2371,3.001,2372,3.001,2373,4.599,2374,5.004,2375,3.331,2376,5.004,2377,5.004,2378,3.001,2379,3.001,2380,3.331,2381,3.331]],["title/profiles/gallery/#instrument-profile-gallery",[76,1.441,94,0.518,2360,3.037]],["text/profiles/gallery/#instrument-profile-gallery",[3,6.201,76,4.446,92,2.966,94,1.43,108,1.323,174,3.161,180,4.343,215,6.756,227,6.09,244,4.872,275,4.193,283,3.673,284,5.067,321,4.137,927,4.621,1241,5.489,2362,8.516]],["title/profiles/gallery/#keysight-34460a",[275,2.322,2363,4.448]],["text/profiles/gallery/#keysight-34460a",[58,5.143,76,3.507,83,4.046,100,2.867,113,5.706,136,1.365,174,3.368,711,5.399,955,5.576,2363,8.557,2364,6.181,2365,6.181,2366,6.181]],["title/profiles/gallery/#keysight-34470a",[275,2.322,2367,3.841]],["text/profiles/gallery/#keysight-34470a",[58,5.143,76,3.507,83,4.046,100,2.867,113,5.706,136,1.365,174,3.368,711,5.399,955,5.576,2364,6.181,2365,6.181,2366,6.181,2367,7.389]],["title/profiles/gallery/#keysight-dsox1202g",[275,2.322,2368,4.448]],["text/profiles/gallery/#keysight-dsox1202g",[58,5.143,76,3.507,83,4.046,100,2.867,111,3.66,136,1.365,174,3.368,711,5.399,955,5.576,2364,6.181,2365,6.181,2366,6.181,2368,8.557]],["title/profiles/gallery/#keysight-dsox1204g",[275,2.322,1241,3.04]],["text/profiles/gallery/#keysight-dsox1204g",[58,5.143,76,3.507,83,4.046,100,2.867,111,3.66,136,1.365,174,3.368,711,5.399,955,5.576,1241,5.849,2364,6.181,2365,6.181,2366,6.181]],["title/profiles/gallery/#keysight-dsox3054g",[275,2.322,2369,4.448]],["text/profiles/gallery/#keysight-dsox3054g",[58,5.143,76,3.507,83,4.046,100,2.867,111,3.66,136,1.365,174,3.368,711,5.399,955,5.576,2364,6.181,2365,6.181,2366,6.181,2369,8.557]],["title/profiles/gallery/#keysight-e36313a",[275,2.322,2370,4.448]],["text/profiles/gallery/#keysight-e36313a",[58,5.143,76,3.507,83,4.046,100,2.867,136,1.365,174,3.368,711,5.399,725,7.609,955,5.576,2364,6.181,2365,6.181,2366,6.181,2370,8.557]],["title/profiles/gallery/#keysight-e5071c",[275,2.322,2371,4.248]],["text/profiles/gallery/#keysight-e5071c",[58,5.143,76,3.507,83,4.046,100,2.867,136,1.365,174,3.368,711,5.399,801,6.874,955,5.576,2364,6.181,2365,6.181,2366,6.181,2372,8.172]],["title/profiles/gallery/#keysight-edu33212a",[275,2.322,2373,4.088]],["text/profiles/gallery/#keysight-edu33212a",[58,5.143,76,3.507,83,4.046,100,2.867,136,1.365,174,3.368,711,5.399,772,8.557,955,5.576,2364,6.181,2365,6.181,2366,6.181,2373,7.865]],["title/profiles/gallery/#keysight-edu34450a",[275,2.322,2340,4.088]],["text/profiles/gallery/#keysight-edu34450a",[58,5.143,76,3.507,83,4.046,100,2.867,113,5.706,136,1.365,174,3.368,711,5.399,955,5.576,2340,7.865,2364,6.181,2365,6.181,2366,6.181]],["title/profiles/gallery/#keysight-edu36311a",[275,2.322,2341,3.316]],["text/profiles/gallery/#keysight-edu36311a",[58,5.143,76,3.507,83,4.046,100,2.867,136,1.365,174,3.368,711,5.399,725,7.609,955,5.576,2341,6.379,2364,6.181,2365,6.181,2366,6.181]],["title/profiles/gallery/#keysight-el33133a",[275,2.322,2374,4.448]],["text/profiles/gallery/#keysight-el33133a",[58,5.143,76,3.507,83,4.046,100,2.867,136,1.365,174,3.368,711,5.399,955,5.576,2364,6.181,2365,6.181,2366,6.181,2374,8.557,2375,9.073]],["title/profiles/gallery/#keysight-msox2024a",[275,2.322,2376,4.448]],["text/profiles/gallery/#keysight-msox2024a",[58,5.143,76,3.507,83,4.046,100,2.867,111,3.66,136,1.365,174,3.368,711,5.399,955,5.576,2364,6.181,2365,6.181,2366,6.181,2376,8.557]],["title/profiles/gallery/#keysight-mxr404a",[275,2.322,2377,4.448]],["text/profiles/gallery/#keysight-mxr404a",[58,5.143,76,3.507,83,4.046,100,2.867,111,3.66,136,1.365,174,3.368,711,5.399,955,5.576,2364,6.181,2365,6.181,2366,6.181,2377,8.557]],["title/profiles/gallery/#keysight-n9000a",[275,2.322,2378,4.248]],["text/profiles/gallery/#keysight-n9000a",[58,5.143,76,3.507,83,4.046,100,2.867,136,1.365,174,3.368,711,5.399,820,8.557,955,5.576,2364,6.181,2365,6.181,2366,6.181,2379,8.172]],["title/profiles/gallery/#keysight-u2000a",[275,2.322,2380,4.716]],["text/profiles/gallery/#keysight-u2000a",[58,5.143,76,3.507,83,4.046,100,2.867,136,1.365,174,3.368,711,5.399,833,8.557,955,5.576,2364,6.181,2365,6.181,2366,6.181,2381,9.073]],["title/user_guide/async_vs_sync/",[53,0.736,293,2.825,294,2.374]],["text/user_guide/async_vs_sync/",[2,1.643,6,2.332,9,1.376,18,1.486,22,3.281,32,3.002,37,2.343,39,1.508,50,1.317,53,2.067,54,1.233,60,2.475,62,2.089,75,1.994,77,2.501,78,2.512,79,2.186,86,1.508,88,0.84,92,3.142,94,1.216,102,1.77,103,1.346,108,1.159,111,2,116,0.784,126,1.677,131,1.994,133,1.715,135,1.557,136,1.154,145,1.409,159,2.809,161,2.409,164,0.362,167,1.21,180,1.129,182,1.346,191,4.064,207,3.921,218,3.083,219,3.932,225,1.173,232,1.222,238,1.542,247,2.054,261,2.689,265,1.748,275,2.441,294,1.409,295,2.661,296,2.707,298,3.485,300,1.486,304,3.355,309,1.486,319,3.881,331,1.612,332,3.046,334,3.839,339,1.07,349,1.023,356,2.69,358,1.446,359,2.295,370,1.317,376,1.346,394,1.561,399,1.583,410,1.346,416,1.098,432,1.155,433,3.463,437,1.233,448,1.583,455,0.982,473,1.803,487,1.612,540,5.44,546,1.557,552,2.579,560,3.202,586,1.677,603,2.207,611,3.036,612,1.201,642,1.677,689,1.173,711,1.317,716,0.902,722,1.736,759,1.532,769,3.107,778,2.69,841,1.994,850,1.255,856,1.255,865,1.486,886,1.279,891,1.756,893,4.248,905,1.466,906,4.23,994,1.346,1038,3.839,1082,1.304,1117,1.508,1138,2.891,1143,2.736,1151,1.756,1152,3.996,1153,2.867,1159,3.996,1182,1.803,1232,1.677,1237,1.857,1241,3.195,1281,2.867,1295,1.612,1298,1.756,1327,3.013,1331,1.857,1342,4.157,1364,1.508,1375,3.237,1487,4.444,1520,3.002,1552,1.803,1625,6.343,1654,1.486,1657,1.857,1697,1.803,1732,1.919,1740,1.715,2068,4.993,2125,3.002,2215,1.857,2236,2.931,2271,1.643,2272,1.643,2274,1.994,2382,1.994,2383,2.214,2384,1.994,2385,2.214,2386,6.435,2387,2.214,2388,2.214,2389,1.857,2390,3.57,2391,2.214,2392,2.214,2393,3.57,2394,2.214,2395,2.214,2396,2.214,2397,2.214,2398,3.785,2399,1.994,2400,3.57,2401,4.297,2402,2.214,2403,2.214,2404,2.214,2405,2.214,2406,2.214,2407,2.214,2408,8.752,2409,2.214,2410,2.214,2411,2.214,2412,3.785,2413,2.214,2414,2.214,2415,2.214,2416,2.214,2417,2.214,2418,1.994,2419,2.214,2420,2.214,2421,1.756]],["title/user_guide/async_vs_sync/#asynchronous-by-design",[298,3.316,319,2.778]],["text/user_guide/async_vs_sync/#asynchronous-by-design",[53,2.042,54,4.773,62,4.732,92,2.987,94,1.191,108,1.102,131,7.723,133,6.641,136,1.29,219,6.802,265,3.96,298,6.029,319,5.05,349,3.96,448,6.132,893,5.527,1327,5.211,1364,5.841,2382,7.723,2383,8.574]],["title/user_guide/async_vs_sync/#why-async",[53,1.266]],["text/user_guide/async_vs_sync/#why-async",[39,4.657,88,2.594,92,2.381,94,1.475,126,5.179,136,1.028,238,3.653,295,6.304,296,6.413,319,4.026,331,4.978,334,5.295,399,4.889,487,4.978,540,4.249,552,6.109,586,5.179,711,4.067,759,4.729,886,3.948,905,4.525,994,4.155,1151,5.423,1153,5.179,1182,5.568,1237,5.733,1281,5.179,1298,5.423,1327,4.155,1342,8.391,1657,5.733,1732,5.926,2068,5.179,2236,5.295,2274,6.157,2384,6.157,2385,6.836,2386,7.519,2387,6.836,2388,6.836,2389,5.733,2390,6.447,2391,6.836,2392,6.836,2393,6.447,2394,6.836,2395,6.836,2396,6.836]],["title/user_guide/async_vs_sync/#async-in-pytestlab",[53,0.931,108,0.606]],["text/user_guide/async_vs_sync/#async-in-pytestlab",[53,1.818,92,3.207,94,1.279,261,3.448,332,5.658,359,1.953,416,4.564,1232,6.975,2236,7.131,2386,7.721,2397,9.207]],["title/user_guide/async_vs_sync/#example-async-oscilloscope-measurement",[53,0.609,111,1.244,611,1.596,716,1.256]],["text/user_guide/async_vs_sync/#example-async-oscilloscope-measurement",[2,3.866,6,2.451,37,2.973,53,2.058,77,3.295,78,2.603,79,3.008,92,2.592,94,0.724,102,2.435,108,0.956,111,3.002,116,1.845,136,0.784,159,3.866,161,4.738,164,0.853,167,1.643,180,2.657,191,4.599,207,5.636,261,1.951,265,2.406,275,2.565,304,2.98,309,3.497,319,3.068,339,1.208,356,2.827,359,2.275,370,3.099,376,3.166,394,1.64,432,2.717,433,3.911,437,2.9,455,2.31,540,6.228,560,3.318,603,4.34,611,3.852,642,3.947,722,2.203,769,3.942,778,2.827,856,2.953,893,3.358,906,5.114,1038,4.035,1117,3.549,1138,3.038,1143,2.875,1152,5.07,1159,5.07,1241,3.358,1331,4.368,1375,3.402,1487,5.638,1552,4.243,1625,7.327,1697,4.243,2215,4.368,2398,7.442,2399,4.692]],["title/user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython",[218,3.037,219,2.958,2400,3.517]],["text/user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython",[6,3.081,32,5.195,37,2.617,53,1.293,60,4.351,77,2.486,78,3.048,92,3.036,108,1.12,159,4.861,218,5.334,247,3.554,261,3.264,275,3.224,300,4.397,304,4.986,356,3.554,359,2.489,394,2.062,410,3.98,433,3.442,560,3.886,689,3.469,722,1.939,778,3.554,850,3.712,906,3.857,1038,5.072,1138,3.819,1143,3.614,1152,4.462,1159,4.462,1241,4.222,1375,4.277,1487,4.962,1520,5.195,1625,7.646,1740,5.072,2125,5.195,2400,6.177,2401,7.555,2402,6.549,2403,6.549,2404,6.549,2405,6.549,2406,6.549]],["title/user_guide/async_vs_sync/#migrating-synchronous-scripts",[22,3.232,893,2.404,2068,2.825]],["text/user_guide/async_vs_sync/#migrating-synchronous-scripts",[6,2.775,9,3.666,18,3.96,22,5.113,37,2.357,53,1.834,60,2.945,75,5.313,77,2.239,78,2.84,79,3.407,94,0.819,102,2.758,103,3.585,108,1.286,136,0.887,167,0.93,182,3.585,191,4.918,207,3.51,261,2.209,275,2.904,319,3.474,332,3.625,339,1.507,356,3.201,358,3.852,359,2.299,394,1.857,433,4.267,540,5.772,546,4.147,560,3.621,722,1.746,769,4.301,778,3.201,893,3.802,906,4.783,1038,4.569,1138,3.44,1143,3.255,1152,4.019,1159,4.019,1241,3.802,1375,3.852,1487,4.469,1654,3.96,2068,6.152,2386,4.947,2407,5.899,2408,11.622,2409,5.899,2410,5.899,2411,5.899,2412,8.12]],["title/user_guide/async_vs_sync/#faq",[2413,6.413]],["text/user_guide/async_vs_sync/#faq",[]],["title/user_guide/async_vs_sync/#why-not-threads-or-processes",[334,3.652,1153,3.573]],["text/user_guide/async_vs_sync/#why-not-threads-or-processes",[53,1.729,94,1.216,334,6.781,841,7.886,865,5.877,1281,6.633,1295,6.375,1327,5.321,2386,8.782,2390,8.257,2393,8.257,2414,8.755,2415,8.755,2416,8.755,2417,8.755,2418,7.886,2419,8.755]],["title/user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously",[92,1.299,108,0.479,2068,2.825]],["text/user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously",[32,7.25,53,1.805,86,6.227,94,1.269,136,1.375,232,5.044,298,6.426,473,7.444,891,7.25,2386,7.665,2420,9.139,2421,7.25]],["title/user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code",[53,0.452,136,0.586,225,1.213,294,1.458,332,1.408]],["text/user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code",[50,4.999,53,1.659,62,4.636,92,3.834,135,5.907,145,5.348,191,4.449,219,6.665,247,4.559,261,3.146,304,4.806,359,1.782,540,5.222,611,4.348,612,4.559,893,5.416,1082,4.948,1520,6.665,2125,6.665,2271,6.236,2272,6.236,2401,7.282]],["title/user_guide/bench_descriptors/",[45,2.405,46,3.5]],["text/user_guide/bench_descriptors/",[2,2.176,6,1.859,12,2.015,18,1.109,25,2.458,37,2.948,38,1.602,39,1.997,40,1.744,41,0.973,45,5.707,46,1.226,47,4.132,48,2.973,53,1.082,59,2.328,61,1.039,76,2.852,77,2.302,78,2.121,79,3.502,83,3.98,86,2.693,87,1.31,88,2.079,89,2.328,92,1.908,94,1.406,97,1.219,98,0.842,99,1.66,100,1.249,102,1.848,108,0.948,110,1.051,116,1.94,117,1.142,119,1.33,136,0.248,140,1.125,156,1.36,160,1.251,161,3.86,167,1.69,171,0.973,174,2.739,182,1.781,187,1.885,188,3.534,191,2.902,195,1.762,200,1.31,203,1.843,207,2.352,225,0.875,226,0.855,229,1.801,232,0.911,233,1.487,234,1.783,247,0.896,256,2.028,262,0.736,269,0.983,275,3.233,283,0.712,288,1.968,290,3.536,296,1.181,297,1.914,299,0.792,308,2.653,317,2.688,321,2.662,328,4.123,329,2.061,331,1.202,332,1.015,338,0.494,339,0.268,349,1.825,356,1.591,357,3.365,359,1.015,360,1.125,361,1.314,373,0.522,375,1.25,376,1.004,382,4.151,383,0.855,385,1.202,394,0.52,396,0.824,399,1.181,432,0.861,433,3.187,445,1.385,447,1.279,455,0.732,469,0.848,480,1.065,483,1.31,504,1.093,526,2.857,540,1.822,546,1.161,563,2.2,588,1.004,600,2.933,602,3.213,604,2.458,605,1.125,606,1.226,612,0.896,649,1.279,689,3.212,692,1.038,695,3.314,702,3.898,705,1.973,711,0.983,712,4.571,716,1.194,718,2.688,722,0.868,724,2.096,727,1.202,730,2.328,732,3.135,734,1.848,737,2.35,742,1.093,773,1.431,783,1.142,784,3.168,801,1.251,844,1.039,850,0.936,858,1.015,865,1.109,882,1.933,886,0.954,888,1.94,893,3.532,904,1.202,906,1.726,907,1.251,908,1.31,927,2.145,978,1.051,989,1.202,994,1.004,1000,1.385,1032,1.385,1040,1.202,1077,3.085,1111,1.181,1151,2.325,1152,2.693,1173,2.64,1187,1.487,1237,1.385,1279,1.345,1319,1.226,1327,1.004,1367,1.345,1397,1.487,1490,1.31,1617,2.061,1618,1.487,1654,3.213,1707,1.279,1731,1.431,1803,1.385,1813,1.385,1847,1.431,1892,1.385,2035,2.64,2072,1.251,2236,1.279,2275,1.385,2277,4.013,2311,1.385,2335,1.31,2341,2.779,2343,1.31,2355,1.487,2367,1.345,2371,1.487,2372,1.487,2373,1.431,2378,1.487,2379,1.487,2384,1.487,2399,1.487,2421,1.31,2422,1.651,2423,1.651,2424,1.651,2425,1.651,2426,1.651,2427,3.952,2428,1.651,2429,2.931,2430,2.931,2431,1.651,2432,3.314,2433,1.651,2434,3.952,2435,1.651,2436,1.651,2437,3.727,2438,1.651,2439,2.64,2440,1.487,2441,1.487,2442,1.487,2443,1.487,2444,1.651,2445,1.651,2446,1.651,2447,1.651,2448,1.651,2449,1.651,2450,1.651,2451,2.931,2452,1.651,2453,2.931,2454,1.651,2455,1.651,2456,1.651,2457,1.487,2458,1.651,2459,1.651,2460,1.487,2461,1.487,2462,1.487,2463,1.651,2464,2.931,2465,1.345,2466,1.651,2467,2.64,2468,1.487,2469,1.651,2470,2.541,2471,1.651,2472,1.345]],["title/user_guide/bench_descriptors/#working-with-benches",[45,2.405,182,2.866]],["text/user_guide/bench_descriptors/#working-with-benches",[12,4.091,45,5.5,46,5.955,83,3.577,89,4.725,92,2.794,94,1.379,116,3.516,225,4.249,226,4.152,234,3.619,296,5.738,332,4.93,689,5.259,718,4.506,844,5.046,865,5.386,904,5.842,1152,5.466,1327,4.876,1654,5.386,2384,7.226,2422,8.023,2423,8.023,2424,8.023,2425,8.023]],["title/user_guide/bench_descriptors/#the-benchyaml-file",[12,1.902,45,1.902,83,1.663]],["text/user_guide/bench_descriptors/#the-benchyaml-file",[2,2.668,6,2.229,12,1.063,18,1.399,25,3.014,37,2.974,38,1.921,40,1.24,41,1.228,45,5.315,47,2.449,48,1.95,53,1.255,59,2.79,61,1.311,76,3.18,77,2.412,78,2.223,79,3.67,83,3.098,86,3.228,87,1.654,88,0.791,92,1.962,94,1.382,97,0.867,98,1.063,99,1.51,100,1.497,102,2.215,108,0.609,116,0.738,119,1.631,136,0.314,156,1.63,160,1.579,161,4.423,167,1.756,171,1.228,174,2.763,182,1.267,187,2.219,188,3.739,191,3.366,195,2.161,200,1.654,203,2.26,207,2.819,229,1.281,232,1.15,233,1.878,234,0.94,256,2.486,262,0.929,275,3.665,288,2.413,290,1.216,297,2.347,299,1,308,3.18,317,3.164,321,3.087,328,4.633,329,2.527,331,1.518,338,0.606,339,0.338,349,2.188,356,1.95,357,3.961,359,1.005,360,1.42,361,0.935,375,1.285,376,1.267,382,4.815,385,1.518,394,0.656,432,1.087,433,3.34,445,1.748,447,1.615,455,0.924,469,1.071,480,1.344,483,1.654,504,1.38,526,3.314,540,2.234,563,2.001,600,3.516,602,2.413,604,3.014,605,1.42,606,1.547,649,1.615,689,1.904,692,1.273,695,3.973,702,4.588,705,1.794,711,1.24,712,4.862,716,1.464,718,2.661,722,1.064,724,1.491,730,2.79,732,3.758,734,2.215,737,2.726,773,1.807,783,1.442,784,3.729,801,1.579,850,1.182,858,1.281,882,1.019,888,1.38,893,4.097,906,2.117,927,2.571,994,1.267,1000,1.748,1040,1.518,1077,3.632,1111,1.491,1151,2.851,1152,1.42,1173,3.237,1187,1.878,1237,1.748,1367,1.698,1397,1.878,1490,1.654,1617,2.527,1618,1.878,1654,3.18,1707,1.615,1803,1.748,1847,1.807,2035,3.237,2072,1.579,2277,4.724,2311,1.748,2341,3.331,2343,1.654,2355,1.878,2367,1.698,2371,1.878,2372,1.878,2373,1.807,2378,1.878,2379,1.878,2399,1.878,2421,1.654,2426,2.085,2427,4.737,2428,2.085,2429,3.594,2430,3.594,2431,2.085,2432,3.973,2433,2.085,2434,4.737,2435,2.085,2436,2.085,2437,3.39,2438,2.085,2439,3.237,2440,1.878,2441,1.878,2442,1.878,2443,1.878,2444,2.085,2445,2.085,2446,2.085,2447,2.085,2448,2.085,2449,2.085,2450,2.085,2451,3.594,2452,2.085,2453,3.594,2454,2.085,2455,2.085,2456,2.085,2457,1.878,2458,2.085,2459,2.085,2460,1.878,2461,1.878,2462,1.878,2463,2.085,2464,3.594,2465,1.698,2466,2.085,2467,3.237,2468,1.878]],["title/user_guide/bench_descriptors/#safety-limits",[47,3.213,48,2.559]],["text/user_guide/bench_descriptors/#safety-limits",[45,4.761,47,7.024,48,5.066,77,2.761,78,2.544,79,4.201,83,4.163,88,3.543,94,1.297,97,3.024,99,3.055,108,0.935,110,4.631,140,4.956,167,1.147,174,3.465,229,4.47,359,1.543,361,3.262,373,2.299,375,1.659,383,3.765,399,5.202,433,3.823,546,5.115,689,4.944,712,4.751,907,5.511,908,5.771,989,5.297,1279,5.925,1731,6.306,1892,6.1,2437,6.861,2469,7.274,2470,8.092,2471,7.274]],["title/user_guide/bench_descriptors/#command-line-interface",[88,1.415,269,2.219,727,2.715]],["text/user_guide/bench_descriptors/#command-line-interface",[37,3.446,39,5.876,40,3.836,45,6.192,83,4.824,88,2.447,89,5.08,94,1.35,108,1.39,116,3.054,117,4.461,188,3.47,234,2.908,247,3.499,283,2.781,290,6.309,396,3.218,563,3.589,588,3.918,602,5.791,612,3.499,705,3.218,724,4.611,742,4.268,882,4.218,886,3.724,888,4.268,978,4.104,1032,5.407,1152,4.393,1319,4.786,1813,5.407,2236,4.994,2275,5.407,2335,5.115,2472,5.251]],["title/user_guide/cli/",[88,1.415,269,2.219,727,2.715]],["text/user_guide/cli/",[12,4.152,18,3.124,23,2.74,24,1.959,37,4.076,39,4.034,41,1.668,42,2.798,43,1.76,44,1.1,45,5.671,49,2.551,56,1.74,61,4.312,62,3.268,76,4.423,83,4.271,86,1.93,88,3.725,89,4.038,92,2.388,94,1.248,102,1.324,108,1.463,116,2.097,119,1.285,125,4.744,155,2.375,161,1.803,167,0.733,171,1.668,172,2.375,182,1.721,191,1.5,194,1.434,203,1.781,206,1.991,214,3.331,220,1.563,229,1.74,232,1.563,238,1.154,245,1.875,247,3.213,262,1.263,269,2.769,275,3.729,283,3.512,284,3.523,288,1.901,290,5.017,317,1.591,328,1.668,349,2.735,362,2.026,396,1.414,433,2.445,492,2.247,496,2.247,503,2.194,548,4.603,552,1.93,563,1.577,568,2.551,587,3.271,588,1.721,600,2.102,602,6.247,607,2.59,612,3.213,689,1.5,692,1.648,705,1.414,706,2.859,718,1.591,727,3.388,730,1.668,742,3.08,852,2.375,872,1.93,881,2.146,882,4.685,888,1.875,893,3.817,905,3.08,934,2.307,969,4.586,978,1.803,987,3.328,1085,2.062,1117,1.93,1151,2.247,1241,1.826,1261,3.604,1295,2.062,1319,2.102,1376,2.026,1621,2.455,2335,2.247,2341,4.821,2357,2.375,2432,2.375,2443,2.551,2472,3.789,2473,2.832,2474,2.832,2475,2.832,2476,4.966,2477,2.832,2478,2.832,2479,2.832,2480,4.033,2481,2.832,2482,2.551]],["title/user_guide/cli/#command-line-interface",[88,1.415,269,2.219,727,2.715]],["text/user_guide/cli/#command-line-interface",[39,6.007,45,4.496,76,3.408,88,3.991,89,5.193,94,1.225,108,1.351,171,5.193,245,5.836,269,5.246,288,5.919,718,4.952,727,6.42,1261,6.829,2473,8.816]],["title/user_guide/cli/#general-usage",[220,2.603,905,3.122]],["text/user_guide/cli/#general-usage",[88,4.112,92,3.231,108,1.192,125,7.496,247,5.033,284,5.519,568,8.355,600,6.885]],["title/user_guide/cli/#profile-management-pytestlab-profile",[76,1.927,89,1.816,108,0.396]],["text/user_guide/cli/#profile-management-pytestlab-profile",[76,3.724,88,3.656,94,1.338,882,4.711,2335,7.642]],["title/user_guide/cli/#list",[283,2.766]],["text/user_guide/cli/#list",[76,4.225,94,1.308,108,1.21,283,4.714,284,5.602,1261,7.292]],["title/user_guide/cli/#show",[969,4.967]],["text/user_guide/cli/#show",[12,4.695,76,4.17,83,4.105,108,1.183,214,4.473,275,4.533,492,7.304,969,7.131,1241,5.935,1376,6.585]],["title/user_guide/cli/#validate",[882,3.136]],["text/user_guide/cli/#validate",[43,5.559,44,3.473,76,4.099,108,1.149,206,6.288,232,4.936,290,5.215,612,4.853,706,5.496,852,7.5,882,5.187,2443,8.055,2474,8.943]],["title/user_guide/cli/#bench-management-pytestlab-bench",[45,2.543,89,1.816,108,0.396]],["text/user_guide/cli/#bench-management-pytestlab-bench",[12,4.913,45,4.913,83,4.295,88,3.656,182,5.855]],["title/user_guide/cli/#ls",[2472,5.223]],["text/user_guide/cli/#ls",[12,4.661,45,5.818,83,4.075,94,1.269,108,1.174,116,3.236,283,3.942,290,5.33,689,4.841,2472,7.444]],["title/user_guide/cli/#validate_1",[882,3.136]],["text/user_guide/cli/#validate_1",[12,4.561,24,6.187,45,5.766,76,3.457,83,4.729,108,1.149,194,4.528,290,5.215,607,4.979,730,5.267,882,5.187]],["title/user_guide/cli/#id",[742,4.245]],["text/user_guide/cli/#id",[37,3.599,45,5.783,83,4.016,94,1.251,102,4.211,108,1.157,290,5.253,317,5.059,396,4.496,742,5.963,872,6.137,1319,6.686]],["title/user_guide/cli/#sim",[602,4.306]],["text/user_guide/cli/#sim",[12,4.797,23,5.54,37,4.51,42,4.425,45,5.888,62,4.062,83,4.871,108,1.209,116,2.606,167,1.483,247,3.994,290,6.045,362,5.264,433,3.868,563,4.098,587,5.175,602,6.959,612,3.994,692,3.331,705,3.674,706,4.523,978,4.685,1151,5.839,2475,7.36]],["title/user_guide/cli/#simulation-profile-tools-pytestlab-sim-profile",[37,0.915,76,1.506,108,0.294,172,1.921,602,1.538]],["text/user_guide/cli/#simulation-profile-tools-pytestlab-sim-profile",[37,3.819,76,3.695,88,3.628,89,5.63,548,6.418,2476,8.017]],["title/user_guide/cli/#record",[548,4.306]],["text/user_guide/cli/#record",[37,3.498,76,4.048,88,3.323,94,1.216,108,1.125,238,3.567,275,4.311,328,5.156,548,7.03,552,5.964,587,6.156,588,5.321,602,5.877,2341,6.156,2432,7.342,2477,8.755]],["title/user_guide/cli/#edit",[2476,5.378]],["text/user_guide/cli/#edit",[37,3.548,61,5.584,76,4.082,94,1.233,108,1.141,203,5.584,214,4.314,275,4.372,349,4.101,496,7.044,602,5.961,607,4.943,2341,6.243,2476,7.446,2478,8.879]],["title/user_guide/cli/#reset",[987,4.587]],["text/user_guide/cli/#reset",[37,3.599,61,5.665,76,4.383,108,1.157,214,4.376,275,4.435,349,4.16,602,6.047,934,7.336,987,6.442,2341,6.333,2479,9.007]],["title/user_guide/cli/#diff",[2480,5.559]],["text/user_guide/cli/#diff",[37,3.573,61,5.624,76,4.37,108,1.149,214,4.345,275,4.403,349,4.13,602,6.004,969,6.927,1117,6.093,1621,7.752,2341,6.288,2480,7.752]],["title/user_guide/cli/#other-useful-commands",[88,1.79,92,1.643]],["text/user_guide/cli/#other-useful-commands",[18,6.914,45,5.252,56,5.233,76,3.981,94,1.183,108,1.478,116,3.016,119,3.863,191,4.51,229,5.233,283,4.442,284,5.067,433,4.475,882,5.037]],["title/user_guide/cli/#tips",[2357,5.378]],["text/user_guide/cli/#tips",[37,3.125,39,6.659,41,4.607,42,4.703,49,7.045,61,4.919,62,5.394,86,5.329,88,2.969,92,3.405,108,1.37,125,6.762,155,6.559,161,4.979,247,4.244,262,3.488,503,6.058,612,4.244,881,5.926,882,3.825,888,5.178,893,6.873,905,5.178,1085,5.696,1295,5.696,2481,7.822,2482,7.045]],["title/user_guide/connecting/",[94,0.655,102,2.205]],["text/user_guide/connecting/",[4,1.83,6,2.193,12,2.377,37,3.83,42,1.707,45,5.288,46,2.107,50,1.689,53,1.497,56,1.744,59,4.466,62,3.273,76,2.654,77,1.077,78,0.993,79,1.639,83,2.645,89,1.672,92,2.066,94,1.46,97,1.18,98,1.448,102,4.773,108,1.262,116,1.651,132,3.086,145,1.807,156,1.604,160,2.151,164,0.465,167,1.357,174,1.73,180,3.867,182,1.725,188,2.509,191,3.636,194,1.437,195,2.803,203,1.785,207,4.85,225,3.141,232,1.567,234,2.103,237,2.107,247,1.54,256,3.225,266,2.252,267,4.041,271,3.005,274,2.557,275,3.381,276,2.557,283,1.224,284,1.689,286,2.557,287,2.381,288,3.13,289,2.557,290,2.718,291,2.199,292,1.934,293,3.532,294,1.807,295,1.996,296,2.03,299,1.361,309,1.906,311,2.557,312,1.807,319,1.672,321,2.265,328,4.466,339,0.963,355,3.245,356,3.218,357,1.996,359,2.127,361,1.273,375,1.566,380,1.417,382,2.151,392,1.934,394,0.894,416,1.407,432,1.48,433,3.608,448,2.03,478,2.107,503,2.199,535,3.532,540,5.066,588,2.833,600,2.107,601,1.707,607,1.58,612,1.54,689,1.503,692,1.005,695,2.381,705,2.327,712,1.854,716,1.157,722,0.84,730,1.672,737,2.544,742,3.086,783,1.964,784,5.02,791,2.461,844,1.785,858,1.744,906,4.801,927,1.54,994,1.725,1138,4.422,1139,2.151,1143,3.273,1148,2.557,1159,4.041,1241,3.005,1295,2.067,1476,2.461,1654,3.13,1707,2.199,2335,2.252,2343,2.252,2367,2.312,2382,2.557,2439,2.557,2440,2.557,2441,2.557,2442,2.557,2465,2.312,2468,2.557,2472,2.312,2483,2.839,2484,6.866,2485,2.839,2486,2.839,2487,2.839,2488,2.839]],["title/user_guide/connecting/#connecting-to-instruments",[94,0.655,102,2.205]],["text/user_guide/connecting/#connecting-to-instruments",[37,3.706,94,1.288,102,4.337,108,1.192,234,4.184,311,8.355,448,6.634,588,5.637,1654,6.227,2483,9.275]],["title/user_guide/connecting/#using-autoinstrument",[92,1.643,1138,2.75]],["text/user_guide/connecting/#using-autoinstrument",[12,3.915,76,2.968,83,3.423,94,1.468,102,4.517,108,0.986,116,2.719,164,1.257,174,2.85,180,5.391,225,4.066,234,3.463,275,3.78,290,4.477,319,4.522,321,3.73,355,5.286,359,1.628,380,3.832,392,5.23,416,3.806,535,5.816,783,5.311,844,4.828,927,4.166,1138,5.634,1139,5.816,1143,4.237,1159,5.23,1241,4.949,1654,5.154]],["title/user_guide/connecting/#connecting-to-a-real-instrument",[94,0.518,102,1.743,588,2.266]],["text/user_guide/connecting/#connecting-to-a-real-instrument",[53,1.365,59,4.071,76,2.672,94,1.254,102,4.703,108,1.16,167,1.681,180,3.525,191,3.661,207,5.374,225,3.661,266,5.483,275,3.403,312,4.4,328,5.319,339,1.122,355,3.782,356,3.751,359,2.262,375,1.576,382,5.236,432,3.604,433,3.632,535,5.236,540,5.614,607,3.848,742,4.575,784,7.061,906,5.319,994,4.201,1138,4.031,1143,3.814,1148,6.225,1159,4.709,2367,5.629,2439,6.225,2440,6.225,2441,6.225,2442,6.225]],["title/user_guide/connecting/#connecting-to-a-simulated-instrument",[37,1.49,94,0.518,102,1.743]],["text/user_guide/connecting/#connecting-to-a-simulated-instrument",[6,4.295,37,4.446,53,1.388,94,1.268,102,3.286,108,1.173,132,6.044,156,2.418,167,1.108,180,3.584,188,4.914,191,3.723,207,5.433,225,3.723,271,4.531,275,3.461,328,4.14,339,1.141,356,3.814,359,2.277,375,1.603,433,3.694,503,5.444,540,5.675,600,5.217,705,3.509,742,4.653,906,5.378,1138,4.099,1143,3.879,1159,4.788,1241,4.531,1295,5.118,1476,6.093,2484,10.736]],["title/user_guide/connecting/#using-a-bench",[45,2.405,92,1.643]],["text/user_guide/connecting/#using-a-bench",[12,3.066,42,3.615,45,5.949,53,1.625,62,3.318,77,2.282,78,2.103,79,3.472,83,3.668,89,3.541,94,1.401,98,3.066,102,2.811,108,1.205,156,2.069,160,4.555,167,1.297,174,2.232,182,3.654,191,3.184,195,4.947,203,3.781,207,4.895,247,3.263,256,5.692,288,4.036,296,4.3,299,2.883,321,2.921,339,0.976,356,3.263,357,4.227,359,1.989,375,1.876,394,1.893,433,4.324,478,4.463,540,5.114,612,3.263,689,3.184,692,2.129,695,5.042,712,3.927,716,2.45,722,1.78,730,3.541,737,4.023,784,3.98,858,3.695,906,4.846,1707,4.657,2343,4.77,2382,5.415,2465,4.897,2468,5.415]],["title/user_guide/connecting/#troubleshooting-connections",[102,2.205,286,4.248]],["text/user_guide/connecting/#troubleshooting-connections",[4,4.662,37,3.716,45,4.743,56,4.444,59,6.392,76,3.595,92,2.519,97,3.007,102,3.381,108,1.195,116,2.561,191,3.83,194,3.662,232,3.991,237,5.368,267,8.062,271,4.662,274,6.514,275,3.561,276,6.514,283,3.119,284,4.303,287,6.065,288,4.855,289,6.514,290,4.218,293,5.479,309,4.855,328,5.478,361,3.243,601,4.349,705,3.61,791,6.269,2335,5.737,2472,5.89,2485,7.232,2486,7.232,2487,7.232,2488,7.232]],["title/user_guide/connecting/#next-steps",[291,3.652,292,3.213]],["text/user_guide/connecting/#next-steps",[37,3.678,45,4.695,46,6.834,50,5.478,53,1.818,62,5.954,145,5.861,293,6.975,294,5.861,295,6.473]],["title/user_guide/errors/",[97,1.96,98,2.405]],["text/user_guide/errors/",[12,3.039,37,2.381,39,1.947,40,1.701,41,1.683,42,1.719,45,5.216,46,2.122,47,4.697,48,3.234,53,1.503,62,1.577,67,1.919,76,1.812,77,1.779,78,1,83,2.657,87,2.267,88,1.085,89,1.683,92,2.651,94,1.297,97,4.092,98,3.516,99,4.363,100,1.883,102,3.223,108,1.2,116,2.11,120,2.01,125,1.977,130,1.605,132,1.892,134,3.631,135,3.296,136,0.43,140,1.947,156,1.613,167,1.2,171,1.683,174,3.566,188,1.538,191,1.514,194,2.373,195,1.719,203,2.948,214,2.277,232,1.577,234,1.289,237,2.122,238,1.165,244,1.635,253,2.165,255,1.651,271,1.842,282,2.478,287,2.397,288,1.919,299,1.37,304,1.635,319,1.683,328,3.51,339,0.464,356,2.544,357,2.01,359,1.264,361,2.672,370,2.789,373,2.729,374,4.19,375,1.736,379,1.919,383,3.084,384,2.881,385,3.414,391,1.502,392,1.947,393,2.267,405,1.551,410,1.737,415,2.01,416,1.417,420,1.892,429,3.289,432,2.445,433,4,452,2.183,478,3.48,481,2.044,482,1.755,498,2.122,535,2.165,601,2.819,605,1.947,611,2.426,612,1.551,613,1.977,689,2.483,690,2.267,692,1.66,712,1.867,737,1.226,778,1.551,854,2.752,864,2.397,867,2.328,875,2.574,882,3.372,886,2.707,889,2.574,891,2.267,892,2.574,893,1.842,896,3.306,898,2.61,900,1.62,902,2.574,906,3.51,907,2.165,908,3.719,1075,1.867,1117,1.947,1161,2.574,1165,2.397,1276,2.165,1430,4.616,1551,2.165,1740,2.214,1856,2.574,1892,2.397,2040,2.478,2130,2.478,2277,2.397,2357,2.397,2361,2.574,2389,2.397,2418,2.574,2460,2.574,2461,2.574,2462,2.574,2465,3.818,2470,5.976,2489,2.858,2490,2.858,2491,2.858,2492,2.858,2493,4.421,2494,2.858,2495,2.858,2496,2.858,2497,2.858,2498,2.858]],["title/user_guide/errors/#error-handling",[97,1.96,98,2.405]],["text/user_guide/errors/#error-handling",[67,5.717,97,3.54,98,5.252,99,4.326,100,2.691,108,1.094,125,5.892,134,6.596,135,5.987,156,2.93,188,4.583,234,3.841,253,6.452,393,6.756,410,5.176,889,7.67,891,6.756,892,7.67,893,5.489,1276,6.452]],["title/user_guide/errors/#common-exceptions",[99,1.981,613,3.263]],["text/user_guide/errors/#common-exceptions",[12,4.724,45,4.724,47,4,48,3.186,76,2.269,83,2.618,88,2.228,94,1.455,97,3.365,99,2.466,100,1.855,102,3.784,108,0.754,116,2.866,130,3.298,140,4,156,2.02,171,3.458,237,4.358,238,2.392,255,3.391,287,4.923,288,3.941,328,3.458,357,4.128,361,2.633,370,3.493,373,3.421,374,4.128,379,3.941,383,3.039,384,3.608,385,4.275,405,3.186,416,2.91,420,3.886,432,3.062,452,2.151,478,4.358,498,4.358,535,4.448,601,3.53,605,4,611,4.189,689,4.287,690,4.657,737,2.519,854,2.712,875,5.288,886,3.391,896,2.815,898,3.268,900,3.328,902,5.288,906,3.458,1165,4.923,1740,4.547,2040,5.089,2130,5.089,2277,4.923,2460,5.288,2461,5.288,2462,5.288,2470,5.089,2489,5.871,2490,5.871,2491,5.871,2492,5.871,2493,5.537,2494,5.871]],["title/user_guide/errors/#best-practices",[134,3.652,135,3.316]],["text/user_guide/errors/#best-practices",[]],["title/user_guide/errors/#catch-specific-exceptions",[99,1.566,214,1.811,1430,2.888]],["text/user_guide/errors/#catch-specific-exceptions",[45,5.185,47,5.68,48,3.327,53,1.211,77,3.164,78,2.144,83,2.734,97,3.939,98,3.126,99,4.608,100,1.937,102,2.866,108,1.217,167,1.314,174,4.239,203,3.856,214,2.978,244,3.507,359,1.768,361,2.749,373,1.937,374,5.862,375,2.319,383,3.173,384,3.767,392,4.177,415,4.31,433,5.343,452,2.246,712,4.004,854,2.831,867,4.993,886,3.541,896,4.543,898,3.413,906,4.911,907,4.645,908,6.614,1117,4.177,1430,4.748,1892,5.141,2470,8.212,2493,5.782]],["title/user_guide/errors/#use-async-with-for-cleanup",[53,0.736,92,1.299,2465,3.037]],["text/user_guide/errors/#use-async-with-for-cleanup",[45,5.571,53,2.047,83,3.282,87,5.839,89,4.335,92,2.564,94,1.306,97,3.06,99,3.951,108,0.946,136,1.107,167,1.483,174,3.491,191,3.898,195,4.425,203,4.629,232,4.062,299,3.529,319,4.335,339,1.195,356,5.104,359,1.561,361,3.301,370,4.379,375,1.679,383,3.809,385,5.36,432,3.838,433,3.868,478,5.463,481,5.264,1075,4.807,1856,6.629,2465,5.995,2495,7.36]],["title/user_guide/errors/#debugging-tips",[482,1.766,2357,3.955]],["text/user_guide/errors/#debugging-tips",[37,3.661,39,4.816,42,4.25,45,3.605,76,2.732,92,3.542,94,1.273,97,4.228,102,3.305,108,1.307,116,2.503,120,4.97,132,4.679,194,4.64,271,4.556,282,6.127,304,4.044,328,5.397,429,5.612,452,2.589,482,2.647,601,4.25,612,3.836,692,3.245,778,3.836,854,3.265,864,5.928,882,5.262,1161,6.367,1430,5.475,2361,6.367,2389,5.928,2418,6.367,2496,7.068,2497,7.068,2498,7.068]],["title/user_guide/errors/#further-reading",[391,2.478,1551,3.573]],["text/user_guide/errors/#further-reading",[37,3.706,40,5.519,41,5.463,45,4.73,46,6.885,47,6.319,48,5.033,62,5.119,99,3.896,167,1.462]],["title/user_guide/getting_started/",[50,2.806,145,3.002]],["text/user_guide/getting_started/",[6,1.739,14,1.499,37,3.663,41,2.177,50,4.209,53,1.577,54,3.939,56,5.32,60,1.845,61,2.325,62,4.408,76,1.429,77,2.685,78,2.474,79,2.135,90,2.095,92,2.464,94,1.274,95,2.557,102,3.308,108,1.272,111,2.323,116,1.309,118,2.599,125,2.557,126,2.801,130,2.076,132,2.447,134,2.863,143,3.33,145,2.353,148,3.1,157,2.801,164,0.605,167,1.365,173,4.363,176,4.193,180,1.885,188,1.989,191,3.05,194,1.872,203,2.325,207,3.427,218,3.011,219,2.933,225,1.958,229,2.272,237,2.744,247,3.125,256,2.557,261,1.384,263,3.33,265,3.267,271,2.383,275,1.82,291,2.863,292,3.923,293,2.801,294,2.353,295,2.599,304,2.115,309,2.482,319,3.392,339,0.6,356,2.006,359,2.03,390,2.383,391,1.943,394,1.813,432,1.928,433,3.026,437,3.939,540,3.58,552,2.518,560,3.154,588,2.247,603,3.358,612,2.006,642,2.801,705,1.845,711,2.2,716,2.346,722,1.705,769,3.05,778,2.006,850,2.095,856,2.095,890,2.933,906,3.392,916,2.177,956,2.447,980,2.599,984,2.801,994,2.247,1038,2.863,1082,4.167,1138,3.358,1143,2.04,1152,2.518,1156,3.011,1159,2.518,1241,2.383,1276,4.363,1327,2.247,1375,2.414,1487,2.801,1625,6.447,1654,2.482,1697,3.011,1769,3.1,1889,3.204,2215,3.1,2271,5.251,2272,5.251,2359,3.33,2360,3.011,2389,3.1,2499,3.697,2500,3.697,2501,3.697,2502,3.697,2503,3.697,2504,3.697,2505,3.697,2506,3.697,2507,3.697,2508,3.697,2509,3.697,2510,3.697]],["title/user_guide/getting_started/#getting-started-with-pytestlab",[50,2.219,108,0.479,145,2.374]],["text/user_guide/getting_started/#getting-started-with-pytestlab",[14,3.02,37,2.976,41,4.387,50,5.639,54,4.146,62,5.23,92,2.594,94,1.316,95,5.153,102,3.482,108,0.957,118,5.237,134,5.769,143,6.709,157,5.643,167,1.174,191,3.945,218,6.066,219,5.909,292,5.074,319,4.387,390,4.801,552,5.074,560,3.321,716,3.035,890,5.909,984,5.643,994,4.527,1082,5.582,1276,7.18,1327,4.527,1654,5,2271,7.035,2272,7.035,2499,7.448,2500,7.448]],["title/user_guide/getting_started/#1-installation",[56,2.898,78,1.649]],["text/user_guide/getting_started/#1-installation",[56,7.069,62,4.7,90,4.827,92,2.966,108,1.423,126,6.452,173,7.803,176,7.499,229,5.233,247,4.621,261,3.189,263,7.67,309,5.717,2501,8.516,2502,8.516]],["title/user_guide/getting_started/#2-your-first-instrument-simulated",[37,1.232,54,1.717,94,0.428,850,1.748]],["text/user_guide/getting_started/#2-your-first-instrument-simulated",[6,2.711,37,3.665,53,1.811,54,3.208,77,3.481,78,2.795,79,3.328,92,2.007,94,1.11,102,2.694,108,1.027,111,3.224,116,2.041,164,0.943,167,1.561,180,2.939,191,3.052,207,4.754,265,4.236,275,2.837,304,3.297,319,3.394,339,0.935,356,3.127,359,2.341,394,2.515,432,3.005,433,4.199,437,5.106,540,4.966,560,3.563,603,4.66,642,4.366,722,2.365,769,4.232,778,3.127,856,3.266,906,4.706,916,3.394,980,4.052,1038,4.463,1138,4.66,1143,3.18,1152,3.926,1159,3.926,1241,3.715,1375,3.763,1487,4.366,1625,7.569,1697,4.693,1889,4.995,2215,4.832,2389,4.832,2503,5.762]],["title/user_guide/getting_started/#3-next-steps",[256,2.58,291,2.888,292,2.54]],["text/user_guide/getting_started/#3-next-steps",[37,3.29,53,1.626,60,4.111,76,3.183,94,1.144,102,3.85,108,1.058,132,5.451,247,4.468,271,5.308,293,6.239,294,5.242,295,5.79,391,4.327,588,5.005,705,4.111,711,4.9,1082,4.85,1769,6.906,2271,6.112,2272,6.112,2359,7.417,2360,6.707,2504,8.235,2505,8.235,2506,8.235,2507,8.235]],["title/user_guide/getting_started/#4-need-help",[125,2.58,225,1.975,1156,3.037]],["text/user_guide/getting_started/#4-need-help",[61,5.665,62,4.971,130,5.059,148,7.554,188,4.848,194,4.561,203,5.665,237,6.686,612,4.888,716,3.67,956,5.963,2508,9.007,2509,9.007,2510,9.007]],["title/user_guide/simulation/",[37,1.884,705,2.354]],["text/user_guide/simulation/",[2,1.789,6,2.917,9,2.529,12,2.075,23,1.42,35,2.693,37,4.368,38,1.65,39,1.642,40,2.421,44,0.936,45,3.162,48,1.308,58,1.366,59,1.42,61,1.516,62,1.331,76,3.83,77,3.32,78,2.628,83,3.565,84,2.022,85,1.826,86,2.772,88,3.433,92,2.785,94,1.324,96,3.314,97,1.002,100,0.762,102,1.127,103,3.208,108,1.124,116,0.854,119,1.094,132,2.693,155,2.022,156,1.816,158,3.151,161,4.409,167,1.502,174,1.51,180,2.692,182,2.473,188,2.841,189,1.482,190,2.171,191,2.796,192,1.963,195,2.446,212,2.171,214,2.564,220,1.331,225,1.277,227,1.724,232,1.331,234,1.835,238,3.061,247,1.308,253,1.826,255,1.392,257,3.151,266,1.913,269,1.434,271,1.554,275,2.003,292,2.772,300,1.619,304,1.379,310,2.59,321,1.977,328,2.396,338,0.686,342,0.632,349,1.113,355,1.319,359,0.511,369,3.777,370,1.434,377,2.171,391,1.267,394,1.281,396,2.635,400,0.81,410,1.465,452,0.883,480,1.554,502,3.314,503,3.151,504,2.693,521,2.171,539,2.635,548,5.872,552,3.596,560,1.075,587,1.695,588,3.208,597,3.918,601,2.446,602,3.544,611,1.248,612,1.308,645,1.724,689,1.277,692,0.854,705,2.031,707,1.535,708,3.447,711,1.434,713,1.913,716,0.982,718,1.354,727,1.756,732,1.913,734,1.127,737,2.66,758,1.789,761,1.574,778,2.208,813,1.826,840,3.837,881,1.826,893,2.623,906,1.42,927,1.308,973,1.668,974,3.844,984,1.826,987,1.724,1055,1.619,1088,1.482,1111,1.724,1121,4.088,1138,2.373,1143,1.331,1230,1.668,1235,1.826,1241,1.554,1269,4.576,1319,1.789,1404,1.963,1405,2.59,1479,2.09,1511,1.756,1538,2.022,1551,1.826,1552,1.963,1625,1.695,1654,1.619,1813,2.022,1978,2.171,1994,2.022,2102,2.171,2172,1.913,2262,2.171,2268,2.171,2311,2.022,2341,1.695,2401,2.09,2421,1.913,2432,2.022,2457,3.665,2476,2.022,2480,2.09,2482,2.171,2511,2.171,2512,4.755,2513,4.979,2514,2.411,2515,5.848,2516,2.411,2517,4.069,2518,2.411,2519,2.411,2520,2.411,2521,3.837,2522,2.411,2523,2.411,2524,2.411,2525,2.411,2526,2.411,2527,2.411,2528,2.411,2529,2.411,2530,2.411,2531,2.411,2532,2.411,2533,2.411,2534,2.411,2535,2.411]],["title/user_guide/simulation/#simulation-mode",[37,1.884,705,2.354]],["text/user_guide/simulation/#simulation-mode",[35,6.006,37,3.625,38,3.678,83,4.046,84,7.609,85,6.874,94,1.26,108,1.166,234,4.092,502,7.389,718,5.096,974,6.607,2262,8.172]],["title/user_guide/simulation/#how-simulation-works",[37,1.884,182,2.866]],["text/user_guide/simulation/#how-simulation-works",[9,5.293,12,4.343,37,4.115,76,3.292,83,3.797,88,3.232,92,2.966,94,1.183,96,6.936,214,4.137,238,3.47,369,4.281,504,6.817,539,4.251,689,4.51,708,5.561,974,6.201,1230,5.892,2511,7.67,2512,7.67]],["title/user_guide/simulation/#example-profile-with-simulation-logic",[37,1.232,76,1.192,103,1.874,611,1.596]],["text/user_guide/simulation/#example-profile-with-simulation-logic",[2,4.107,9,3.439,37,2.21,44,2.148,76,2.139,77,4.297,78,3.717,83,3.463,88,2.948,92,2.705,94,1.079,108,1.25,156,2.672,158,6.015,161,4.944,167,1.828,212,4.983,238,3.164,257,6.015,338,0.933,342,1.45,369,4.512,377,4.983,394,1.742,396,4.48,400,1.859,521,4.983,539,2.762,597,5.765,707,3.522,713,4.389,734,2.587,737,3.85,840,7.325,973,3.828,984,4.192,1235,4.192,1269,6.732,1319,4.107,1405,4.944,1479,4.796,1511,4.029,1552,4.506,1978,4.983,2268,4.983,2512,4.983,2513,7.325,2514,5.532,2515,7.325,2516,5.532,2517,7.766,2518,5.532,2519,5.532]],["title/user_guide/simulation/#enabling-simulation",[37,1.884,778,2.559]],["text/user_guide/simulation/#enabling-simulation",[6,5.15,12,3.776,37,4.518,45,5.301,83,4.21,94,1.311,108,1.213,156,2.548,161,4.713,180,3.776,189,4.55,214,3.597,275,3.645,304,4.236,355,4.051,359,1.57,370,4.405,480,4.773,601,4.452,705,3.696,732,5.874,778,4.018,906,4.361,1111,5.295,1138,5.506,1143,4.086,1241,4.773,1625,5.206,1654,4.971,2401,6.418,2520,7.404]],["title/user_guide/simulation/#recording-a-simulation-profile",[37,1.49,76,1.441,548,2.503]],["text/user_guide/simulation/#recording-a-simulation-profile",[37,4.219,76,3.432,92,3.093,94,1.233,180,4.528,195,5.339,214,4.314,220,4.9,310,5.652,548,5.961,552,6.049,588,5.397,601,5.339,974,6.466,2521,8.375]],["title/user_guide/simulation/#step-by-step-guide",[62,2.058,292,3.95]],["text/user_guide/simulation/#step-by-step-guide",[39,4.438,40,3.876,59,3.837,61,4.097,76,4.316,83,2.905,88,3.956,94,1.206,100,2.059,102,3.046,108,1.116,116,2.307,161,4.147,167,1.027,174,2.418,191,4.6,195,3.917,227,4.659,234,2.938,238,2.654,247,3.535,275,3.208,321,3.165,328,5.116,548,7.288,552,5.917,587,4.581,588,3.959,602,6.56,612,3.535,692,2.307,761,4.255,813,4.936,893,4.2,927,3.535,987,4.659,2311,5.463,2341,4.581,2432,5.463,2476,5.463,2480,5.647,2522,6.515,2523,6.515,2524,6.515,2525,6.515,2526,6.515,2527,6.515,2528,6.515]],["title/user_guide/simulation/#advanced-simulation-features",[35,2.468,37,1.49,881,2.825]],["text/user_guide/simulation/#advanced-simulation-features",[37,4.153,38,3.002,58,4.197,88,3.583,92,3.289,96,6.03,132,4.901,155,6.209,161,4.713,174,2.748,188,3.985,232,4.086,238,3.847,253,5.609,321,3.597,338,1.248,369,4.746,394,2.331,452,2.712,502,6.03,503,5.734,539,3.696,560,3.301,597,5.496,645,5.295,708,6.166,737,3.176,1055,4.971,1269,6.418,1538,6.209,1813,6.209,2512,6.669,2513,6.983,2515,8.905,2529,7.404,2530,7.404]],["title/user_guide/simulation/#when-to-use-simulation",[37,1.884,92,1.643]],["text/user_guide/simulation/#when-to-use-simulation",[23,4.607,86,6.659,94,1.358,103,4.754,119,3.549,132,5.178,188,5.26,191,4.143,192,6.37,225,4.143,255,4.517,266,6.205,271,5.042,410,4.754,503,6.058,711,4.654,716,3.187,758,5.806,893,5.042,1121,8.258,1994,6.559,2421,6.205,2457,8.804,2482,7.045,2531,7.822,2532,7.822,2533,7.822,2534,7.822,2535,7.822]],["title/user_guide/simulation/#limitations",[48,3.48]],["text/user_guide/simulation/#limitations",[37,4.166,76,4.031,94,1.207,97,3.614,103,5.284,190,7.831,300,5.837,310,5.534,349,4.015,548,7.001,588,5.284,1088,5.342,1404,7.081,2102,7.831,2172,6.897,2521,8.2]],["title/user_guide/simulation/#further-reading",[391,2.478,1551,3.573]],["text/user_guide/simulation/#further-reading",[40,5.602,45,4.802,76,3.639,88,3.573,180,4.802,182,5.722,269,5.602,727,6.856]],["title/user_guide/uncertainty/",[90,2.673,98,2.405]],["text/user_guide/uncertainty/",[11,3.698,21,1.613,44,2.337,48,1.573,54,1.613,60,1.447,67,3.183,76,2.964,77,3.298,79,2.738,83,1.292,90,6.371,91,6.868,92,2.422,93,4.466,94,1.303,97,3.187,98,2.418,108,1.116,110,1.845,116,1.679,128,2.61,133,2.245,134,2.245,135,2.038,159,2.151,161,1.845,164,0.776,167,1.37,170,1.946,174,2.233,182,1.761,194,1.467,195,4.18,214,1.408,232,1.599,234,1.307,247,1.573,255,3.475,259,4.822,264,2.11,265,2.19,284,1.724,297,1.893,299,1.39,312,1.845,313,2.005,317,1.628,321,2.923,342,0.759,359,0.615,375,0.661,380,3.827,389,1.646,391,3.162,392,1.974,393,2.299,394,3.039,400,0.974,413,3.018,432,2.473,433,2.492,448,2.073,463,2.43,483,2.299,546,2.038,560,3.874,605,1.974,607,1.613,611,2.454,612,1.573,618,2.43,716,3.54,717,5.449,728,2.733,734,2.813,756,3.452,758,2.151,776,3.28,778,1.573,784,3.983,794,1.742,795,2.43,843,2.196,845,3.761,847,3.334,854,1.338,856,1.643,858,1.781,859,4.66,866,4.271,872,1.974,879,4.9,888,1.918,890,2.299,906,1.707,918,4.709,926,1.868,930,3.761,952,2.36,978,1.845,994,1.761,999,1.724,1015,2.43,1020,2.61,1082,1.707,1085,2.11,1117,1.974,1142,2.36,1153,2.196,1221,2.43,1228,2.43,1276,2.196,1298,2.299,1465,2.36,1490,2.299,1538,2.43,1551,2.196,1657,2.43,1806,2.43,2026,2.61,2072,2.196,2097,2.61,2271,2.151,2272,2.151,2275,2.43,2279,4.11,2343,2.299,2346,2.61,2421,2.299,2467,2.61,2511,2.61,2536,2.898,2537,2.898,2538,4.472,2539,2.898,2540,2.898,2541,2.898,2542,2.898,2543,2.898,2544,2.898,2545,2.898,2546,4.741,2547,4.741,2548,4.472,2549,4.472,2550,4.741,2551,2.898,2552,2.898,2553,2.898,2554,2.898,2555,2.898]],["title/user_guide/uncertainty/#handling-uncertainty",[90,2.673,98,2.405]],["text/user_guide/uncertainty/#handling-uncertainty",[54,4.709,60,4.222,90,4.794,91,6.408,97,3.516,108,1.087,128,7.618,133,6.551,159,6.278,234,3.815,255,4.885,265,3.906,299,4.056,618,7.093,716,3.446,728,7.977,756,6.159,778,4.59,890,6.71,2279,7.332,2536,8.458,2537,8.458,2538,7.977]],["title/user_guide/uncertainty/#why-uncertainty-matters",[90,2.673,2539,4.716]],["text/user_guide/uncertainty/#why-uncertainty-matters",[48,4.382,90,5.651,91,6.118,94,1.385,97,3.357,164,1.322,255,4.663,259,5.078,393,6.406,560,3.6,716,4.062,795,6.772,1117,5.501,1298,6.406,1465,6.576,1490,6.406,1657,6.772,2026,7.273,2072,6.118,2346,7.273,2421,6.406,2538,7.616,2540,8.075,2541,8.075,2542,8.075,2543,8.075,2544,8.075]],["title/user_guide/uncertainty/#how-pytestlab-handles-uncertainty",[90,2.113,98,1.902,108,0.479]],["text/user_guide/uncertainty/#how-pytestlab-handles-uncertainty",[90,5.257,91,7.027,93,6.885,97,3.856,108,1.192,161,5.905,195,5.577,716,3.779,758,6.885,843,7.027]],["title/user_guide/uncertainty/#instrument-profiles-and-accuracy",[76,1.441,94,0.518,717,2.468]],["text/user_guide/uncertainty/#instrument-profiles-and-accuracy",[76,3.649,77,4.155,83,3.301,90,4.197,92,2.579,94,1.028,108,0.951,116,2.622,167,1.488,214,3.597,259,4.656,297,4.835,312,4.713,313,5.122,391,4.962,607,4.122,611,3.832,716,3.017,717,6.25,784,4.901,794,4.452,854,3.42,856,4.197,858,4.55,859,8.051,866,8.504,1085,5.391,1538,6.209,2467,6.669,2545,7.404,2546,9.441,2547,9.441]],["title/user_guide/uncertainty/#automatic-uncertainty-propagation",[90,2.113,91,2.825,195,2.242]],["text/user_guide/uncertainty/#automatic-uncertainty-propagation",[21,3.571,77,3.262,79,3.704,90,4.872,91,6.512,92,2.234,93,4.761,94,1.194,97,2.667,108,1.105,110,4.083,167,1.702,174,2.381,195,3.857,259,4.034,265,2.962,284,3.817,321,3.116,359,1.36,375,1.463,380,4.291,389,1.755,394,3.4,413,5.472,433,4.517,448,4.587,463,5.379,560,4.323,716,2.613,717,5.69,734,4.533,776,4.438,784,5.69,845,5.088,879,5.224,906,3.778,918,4.918,930,5.088,994,3.898,999,3.817,1806,5.379,2343,5.088,2511,5.777,2548,6.05,2549,6.05,2550,8.596]],["title/user_guide/uncertainty/#working-with-ufloat-objects",[182,2.266,380,1.861,918,2.133]],["text/user_guide/uncertainty/#working-with-ufloat-objects",[11,4.899,77,3.026,79,4.604,90,5.606,91,6.039,174,2.959,247,4.326,259,6.22,317,4.477,321,3.873,342,2.089,394,3.54,432,5.158,560,4.795,612,4.326,845,6.324,879,8.055,930,6.324,952,6.492,1015,6.685,1020,7.18,2548,7.518,2549,7.518]],["title/user_guide/uncertainty/#custom-uncertainty-models",[44,1.448,67,2.503,90,2.113]],["text/user_guide/uncertainty/#custom-uncertainty-models",[44,3.136,67,5.421,76,3.121,90,5.651,92,2.813,94,1.385,97,3.357,170,5.421,174,2.997,255,4.663,264,5.88,321,3.923,380,4.031,389,2.209,394,2.542,483,6.406,546,5.677,605,5.501,716,3.29,847,5.677,872,5.501,918,5.703,926,5.205,1153,6.118,1228,6.772,2097,7.273,2551,8.075]],["title/user_guide/uncertainty/#best-practices",[134,3.652,135,3.316]],["text/user_guide/uncertainty/#best-practices",[11,4.868,76,3.062,90,6.359,91,6.001,92,2.759,94,1.1,164,1.297,194,4.01,195,4.763,232,4.371,380,3.954,389,2.167,392,5.396,400,2.661,717,5.243,756,5.768,776,5.48,847,5.569,888,5.243,918,4.531,978,5.042,1142,6.451,1221,6.643,1276,6.001,2275,6.643,2279,6.866,2552,7.921,2553,7.921,2554,7.921,2555,7.921]],["title/user_guide/uncertainty/#further-reading",[391,2.478,1551,3.573]],["text/user_guide/uncertainty/#further-reading",[11,5.658,44,3.575,90,6.115,93,6.834,108,1.183,116,3.26,611,4.765,1082,5.423,2271,6.834,2272,6.834]]],"fields":["title","text"],"invertedIndex":[["",{"_index":167,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/common/":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#key-features":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"contributing/":{},"contributing/#code-style-quality":{},"contributing/#getting-started":{},"contributing/#need-help":{},"installation/":{},"installation/#standard-installation":{},"installation/#visa-backend-support":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#sim":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#further-reading":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{"api/experiments/":{}}}],["0",{"_index":77,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/errors/":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"changelog/":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{"changelog/#010-2024-04-15":{},"changelog/#015-2024-06-01":{}}}],["000000e+02",{"_index":2085,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["0001",{"_index":860,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{}}],["0005",{"_index":2547,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["001",{"_index":501,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{}},"title":{}}],["0012",{"_index":2548,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{}}],["0025",{"_index":2549,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{}}],["005",{"_index":857,"text":{"api/config/":{}},"title":{}}],["01",{"_index":82,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"changelog/":{}},"title":{"changelog/#015-2024-06-01":{}}}],["025",{"_index":2546,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["04",{"_index":104,"text":{"changelog/":{}},"title":{"changelog/#010-2024-04-15":{}}}],["042",{"_index":2456,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["05",{"_index":2251,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["06",{"_index":81,"text":{"changelog/":{}},"title":{"changelog/#015-2024-06-01":{}}}],["0x0957",{"_index":2440,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{}},"title":{}}],["0x1b07",{"_index":2441,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{}},"title":{}}],["0x2a01",{"_index":2447,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["0x2a8d",{"_index":2446,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["1",{"_index":78,"text":{"api/config/":{},"api/errors/":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/measurements/":{},"api/measurements/#example-usage":{},"changelog/":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{"changelog/#010-2024-04-15":{},"changelog/#015-2024-06-01":{},"user_guide/getting_started/#1-installation":{}}}],["10",{"_index":1082,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/measurements/":{},"api/measurements/#key-features":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#further-reading":{}},"title":{}}],["100",{"_index":973,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["1000",{"_index":463,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{}}],["10000",{"_index":445,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["100_000_000",{"_index":2018,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{}}],["100e6",{"_index":2217,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{}}],["100uw",{"_index":2264,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{}}],["101",{"_index":2240,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"profiles/creating/":{},"profiles/creating/#metadata":{}},"title":{}}],["102",{"_index":1901,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["1024",{"_index":1772,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{}},"title":{}}],["11",{"_index":2218,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{}}],["113",{"_index":1888,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["12",{"_index":1847,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["120",{"_index":2001,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{}},"title":{}}],["12345",{"_index":2433,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["145",{"_index":2123,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{}},"title":{}}],["15",{"_index":105,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"changelog/":{}},"title":{"changelog/#010-2024-04-15":{}}}],["150",{"_index":1131,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{}},"title":{}}],["17025",{"_index":2544,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["172",{"_index":2435,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["1d",{"_index":949,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["1e",{"_index":1877,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["1e30",{"_index":1955,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{}},"title":{}}],["1e9",{"_index":2211,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["1mw",{"_index":2266,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{}}],["1v",{"_index":2099,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["2",{"_index":850,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/getting_started/":{}},"title":{"user_guide/getting_started/#2-your-first-instrument-simulated":{}}}],["2*current",{"_index":1130,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{}},"title":{}}],["20",{"_index":1115,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{}}],["200",{"_index":1129,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{}}],["2024",{"_index":80,"text":{"changelog/":{}},"title":{"changelog/#010-2024-04-15":{},"changelog/#015-2024-06-01":{}}}],["20e6",{"_index":1570,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["20m",{"_index":1569,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["22",{"_index":2436,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["25",{"_index":2215,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{}}],["2e9",{"_index":2212,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["3",{"_index":256,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/measurements/":{},"api/measurements/#example-usage":{},"installation/":{},"installation/#installation":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/getting_started/":{}},"title":{"user_guide/getting_started/#3-next-steps":{}}}],["30",{"_index":2214,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{}},"title":{}}],["30000",{"_index":1191,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["32767",{"_index":1870,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["32768",{"_index":1869,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["34460a",{"_index":2363,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-34460a":{}},"title":{"profiles/gallery/#keysight-34460a":{}}}],["34470a",{"_index":2367,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-34470a":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{}},"title":{"profiles/gallery/#keysight-34470a":{}}}],["350",{"_index":1306,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{}},"title":{}}],["3e9",{"_index":2213,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{}}],["4",{"_index":1156,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"user_guide/getting_started/":{}},"title":{"user_guide/getting_started/#4-need-help":{}}}],["404",{"_index":1,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{"404/":{}}}],["44",{"_index":2079,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{}},"title":{}}],["488",{"_index":1883,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["4f",{"_index":2468,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{}},"title":{}}],["5",{"_index":79,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/measurements/":{},"api/measurements/#example-usage":{},"changelog/":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{"changelog/#015-2024-06-01":{}}}],["50",{"_index":647,"text":{"api/common/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{}},"title":{}}],["500",{"_index":1679,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{}},"title":{}}],["5000",{"_index":330,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{}},"title":{}}],["5v",{"_index":2471,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{}},"title":{}}],["6",{"_index":908,"text":{"api/errors/":{},"api/errors/#usage-example":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{}},"title":{}}],["65536",{"_index":1663,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{}},"title":{}}],["65_536",{"_index":1665,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{}},"title":{}}],["67890",{"_index":2438,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["781",{"_index":1887,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["786",{"_index":1885,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["8",{"_index":490,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{}}],["8000",{"_index":444,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["8g",{"_index":1895,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["9",{"_index":257,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"installation/":{},"installation/#installation":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["99",{"_index":1609,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{}},"title":{}}],["9_",{"_index":1846,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["9e37",{"_index":1954,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{}},"title":{}}],["_",{"_index":572,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{}},"title":{}}],["__aenter__",{"_index":2303,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{}},"title":{"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{}}}],["__aexit__",{"_index":2304,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{}},"title":{"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{}}}],["__all__",{"_index":619,"text":{"api/common/":{}},"title":{"api/common/#pytestlab.common.enums.__all__":{}}}],["__args__",{"_index":2258,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}},"title":{}}],["__class__",{"_index":1282,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{}},"title":{}}],["__delitem__",{"_index":932,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{}}}],["__enter__",{"_index":2309,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{}},"title":{"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{}}}],["__exit__",{"_index":2310,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{}},"title":{"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{}}}],["__file__",{"_index":1206,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["__getattr__",{"_index":555,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{}},"title":{"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{}}}],["__getitem__",{"_index":939,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{}}}],["__init__",{"_index":340,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["__iter__",{"_index":942,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{}},"title":{"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{}}}],["__len__",{"_index":945,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{}},"title":{"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{}}}],["__main__",{"_index":2399,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["__name__",{"_index":376,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["__repr__",{"_index":947,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{}}}],["__str__",{"_index":953,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{}},"title":{"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{}}}],["_acq_mode_map",{"_index":1646,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{}},"title":{}}],["_acq_type_map",{"_index":1651,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{}},"title":{}}],["_auto_connect_perform",{"_index":467,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{}},"title":{}}],["_backend",{"_index":1277,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{}},"title":{}}],["_bench",{"_index":2300,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["_blocking_queri",{"_index":401,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{}},"title":{}}],["_blocking_query_raw",{"_index":409,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{}},"title":{}}],["_blocking_set_timeout",{"_index":425,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{}},"title":{}}],["_blocking_writ",{"_index":435,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{}},"title":{}}],["_build_dispatch_t",{"_index":529,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["_build_experi",{"_index":2338,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["_channel",{"_index":1683,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{}},"title":{}}],["_channel_count",{"_index":1811,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{}},"title":{}}],["_client",{"_index":464,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{}},"title":{}}],["_command_log",{"_index":1278,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{}},"title":{}}],["_data_row",{"_index":2297,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["_disconnect_all_instru",{"_index":2308,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{}},"title":{}}],["_ensure_connect",{"_index":474,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{}},"title":{}}],["_error_check",{"_index":1827,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{}},"title":{}}],["_error_queu",{"_index":522,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["_exact_map",{"_index":525,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["_experi",{"_index":2298,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["_format_value_min_max_def",{"_index":1822,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{}},"title":{}}],["_get_function_spec",{"_index":2106,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["_get_measurement_unit_and_typ",{"_index":2121,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["_get_scpi_function_nam",{"_index":1818,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["_handle_command",{"_index":541,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{}},"title":{}}],["_has_run",{"_index":2299,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["_instrument",{"_index":2293,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["_instrument_map",{"_index":1227,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{}},"title":{}}],["_instrumentrecord",{"_index":2294,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{}},"title":{}}],["_load_profil",{"_index":518,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["_lock",{"_index":351,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{}},"title":{}}],["_log",{"_index":1941,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{}}],["_logger",{"_index":1280,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{}},"title":{}}],["_meas_func",{"_index":2295,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["_measure_with_uncertainti",{"_index":2165,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{}},"title":{}}],["_paramet",{"_index":1092,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["_pattern_rul",{"_index":527,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["_patternrul",{"_index":528,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["_profil",{"_index":517,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["_psu",{"_index":1708,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{}},"title":{}}],["_queri",{"_index":1311,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["_query'",{"_index":1353,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["_query_raw",{"_index":1556,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["_read_preambl",{"_index":1517,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["_read_to_np",{"_index":2154,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{}},"title":{}}],["_read_wave_data",{"_index":1523,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["_scope",{"_index":1628,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{}},"title":{}}],["_send_command",{"_index":1287,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{}},"title":{}}],["_session",{"_index":1086,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{}},"title":{}}],["_set_timeout_on_instru",{"_index":381,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{}},"title":{}}],["_state",{"_index":519,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["_timeout_m",{"_index":348,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{}},"title":{}}],["_timeout_sec",{"_index":462,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{}},"title":{}}],["_validate_channel",{"_index":1816,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{}},"title":{}}],["_validate_rang",{"_index":1664,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{}},"title":{}}],["_wait",{"_index":1425,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{}},"title":{}}],["_wg",{"_index":1776,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{}},"title":{}}],["_write_binari",{"_index":1881,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["aabb",{"_index":1858,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["ab",{"_index":869,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{}},"title":{}}],["abab",{"_index":1859,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["abort",{"_index":2197,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{}},"title":{}}],["absolut",{"_index":866,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["abspath",{"_index":1210,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["abstract",{"_index":305,"text":{"api/backends/":{},"api/backends/#overview":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/measurements/":{},"api/measurements/#overview":{}},"title":{}}],["abstractasynccontextmanag",{"_index":2283,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["abstractcontextmanag",{"_index":2284,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["abstractmethod",{"_index":1318,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{}},"title":{}}],["ac",{"_index":1690,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{}},"title":{}}],["accept",{"_index":486,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{}},"title":{}}],["access",{"_index":288,"text":{"api/backends/":{},"api/backends/#asynclambbackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"installation/":{},"installation/#troubleshooting":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["accident",{"_index":2461,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["accord",{"_index":1098,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{}},"title":{}}],["accur",{"_index":2102,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"user_guide/simulation/":{},"user_guide/simulation/#limitations":{}},"title":{}}],["accuraci",{"_index":717,"text":{"api/config/":{},"api/config/#accuracy-specification":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"profiles/creating/":{},"profiles/creating/#profile-structure":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{"api/config/#accuracy-specification":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}}}],["accuracy_spec",{"_index":2114,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["accuracyspec",{"_index":842,"text":{"api/config/":{},"api/config/#accuracy-specification":{}},"title":{"api/config/#pytestlab.config.accuracy.AccuracySpec":{}}}],["acq_typ",{"_index":1671,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{}},"title":{}}],["acq_type_enum_or_str",{"_index":1505,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["acquir",{"_index":437,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{}}}],["acquisit",{"_index":1364,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.acquisition":{}}}],["acquisitionmod",{"_index":1648,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{}},"title":{}}],["acquisitiontyp",{"_index":623,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{}},"title":{"api/common/#pytestlab.common.enums.AcquisitionType":{}}}],["activ",{"_index":166,"text":{"api/config/":{},"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#standard-installation":{}},"title":{"api/config/#dc-active-load":{},"api/instruments/#dc-active-load":{}}}],["actual",{"_index":1185,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{}}],["actual_address",{"_index":1186,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["actual_instrument_rang",{"_index":2108,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["actual_sourc",{"_index":1411,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["actual_timeout",{"_index":1189,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["actual_timeout}m",{"_index":1192,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["ad",{"_index":20,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"changelog/":{}},"title":{"changelog/#added":{},"changelog/#added_1":{},"changelog/#added_2":{}}}],["adapt",{"_index":1126,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{}},"title":{}}],["adc",{"_index":1525,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{}}],["add",{"_index":189,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/instruments/":{},"api/instruments/#extending-drivers":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"contributing/":{},"contributing/#development-workflow":{},"contributing/#documentation":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#tips":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{}}}],["add_paramet",{"_index":1051,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{}},"title":{"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{}}}],["add_trial",{"_index":1023,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{}},"title":{"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{}}}],["addit",{"_index":926,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/measurements/":{},"api/measurements/#example-usage":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{}}],["addition",{"_index":1036,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{}},"title":{}}],["address",{"_index":328,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#record":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#debugging-tips":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.address":{},"api/config/#pytestlab.config.instrument_config.InstrumentConfig.address":{}}}],["address_overrid",{"_index":1148,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{}},"title":{}}],["adher",{"_index":16,"text":{"changelog/":{},"changelog/#changelog":{}},"title":{}}],["adjac",{"_index":1622,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{}}],["adjust",{"_index":417,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{}}],["advanc",{"_index":881,"text":{"api/config/":{},"api/config/#configuration-loader":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/measurements/":{},"api/measurements/#key-features":{},"user_guide/cli/":{},"user_guide/cli/#tips":{},"user_guide/simulation/":{}},"title":{"user_guide/simulation/#advanced-simulation-features":{}}}],["advance_mod",{"_index":1759,"text":{"api/instruments/":{}},"title":{}}],["afterward",{"_index":1337,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{}},"title":{}}],["against",{"_index":206,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"contributing/":{},"contributing/#development-workflow":{},"user_guide/cli/":{},"user_guide/cli/#validate":{}},"title":{}}],["ah",{"_index":2170,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{}},"title":{}}],["aiofil",{"_index":1245,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["algorithm",{"_index":1672,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{}},"title":{}}],["alia",{"_index":357,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["alic",{"_index":2342,"text":{"api/measurements/":{},"api/measurements/#example-usage":{}},"title":{}}],["align",{"_index":1455,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{}},"title":{}}],["all?{path_scpi",{"_index":1987,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["alloc",{"_index":2326,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["allow",{"_index":886,"text":{"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["along",{"_index":2351,"text":{"profiles/creating/":{},"profiles/creating/#creating-profiles":{}},"title":{}}],["alreadi",{"_index":367,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{}},"title":{}}],["alt",{"_index":658,"text":{"api/common/":{}},"title":{}}],["altern",{"_index":657,"text":{"api/common/":{}},"title":{"api/common/#pytestlab.common.enums.TriggerSlope.ALTERNATING":{}}}],["alway",{"_index":392,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/connecting/":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{}},"title":{}}],["amp",{"_index":254,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{}},"title":{"api/experiments/#database-results":{},"api/experiments/#experiments-sweeps":{},"api/experiments/#experiments-sweeps_1":{},"contributing/#code-style-quality":{}}}],["amp_cmd_val",{"_index":2004,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{}},"title":{}}],["amper",{"_index":1717,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{}},"title":{}}],["ampl",{"_index":1825,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{}}],["amplifi",{"_index":2427,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["amplitud",{"_index":1442,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.amplitude":{}}}],["amplitude{type_str",{"_index":1920,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{}},"title":{}}],["analog",{"_index":750,"text":{"api/config/":{}},"title":{}}],["analysi",{"_index":756,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/measurements/":{},"api/measurements/#key-features":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{}}],["analysis_fft",{"_index":1549,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["analyz",{"_index":800,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{}},"title":{"api/config/#spectrum-analyzer":{},"api/config/#vector-network-analyzer-vna":{},"api/instruments/#spectrum-analyzer":{},"api/instruments/#vector-network-analyzer-vna":{}}}],["analyze_all_seg",{"_index":1629,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{}}}],["angl",{"_index":1804,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{}},"title":{}}],["annot",{"_index":2257,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}},"title":{}}],["anoth",{"_index":547,"text":{"api/backends/":{},"api/backends/#recordingbackend":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{}},"title":{}}],["anyio",{"_index":335,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{}},"title":{}}],["api",{"_index":41,"text":{"api/backends/":{},"api/backends/#overview":{},"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#instrument-drivers":{},"api/measurements/":{},"api/measurements/#key-features":{},"changelog/":{},"changelog/#added":{},"changelog/#changed_1":{},"contributing/":{},"contributing/#documentation":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#tips":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#tips":{},"user_guide/errors/":{},"user_guide/errors/#further-reading":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}},"title":{"api/measurements/#api-reference":{}}}],["appear",{"_index":2525,"text":{"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["append",{"_index":596,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{}},"title":{}}],["appli",{"_index":1106,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["applic",{"_index":487,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{}}],["apply_suffix",{"_index":1821,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{}},"title":{}}],["apply_suffix_map",{"_index":1819,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{}},"title":{}}],["apply_waveform_set",{"_index":1814,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{}}}],["approach",{"_index":2382,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{}},"title":{}}],["appropri",{"_index":415,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{}},"title":{}}],["arang",{"_index":1531,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["arb",{"_index":667,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/common/#pytestlab.common.enums.WaveformType.ARB":{}}}],["arb_adv_enum_v",{"_index":1760,"text":{"api/instruments/":{}},"title":{}}],["arb_cmd_nod",{"_index":1853,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["arb_cmd_node}{scpi_suffix",{"_index":1880,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["arb_filter_enum_v",{"_index":1758,"text":{"api/instruments/":{}},"title":{}}],["arb_nam",{"_index":1783,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{}},"title":{}}],["arbadvancemod",{"_index":637,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/common/#pytestlab.common.enums.ArbAdvanceMode":{}}}],["arbfiltertyp",{"_index":639,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/common/#pytestlab.common.enums.ArbFilterType":{}}}],["arbitrari",{"_index":1810,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#key-features":{}},"title":{}}],["arbitrary2",{"_index":1855,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["arbitrary_dac_rang",{"_index":1868,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["arbitrary_types_allow",{"_index":1723,"text":{"api/instruments/":{}},"title":{}}],["arbitrary{scpi_suffix",{"_index":1896,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["arg",{"_index":458,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{}},"title":{}}],["argument",{"_index":923,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{}},"title":{}}],["aris",{"_index":2540,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["around",{"_index":353,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{}},"title":{}}],["array",{"_index":950,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{}}],["asarray",{"_index":1850,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["ascii",{"_index":1562,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["assert_in_rang",{"_index":1581,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{}},"title":{}}],["assess",{"_index":2541,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["assign",{"_index":1499,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["assist",{"_index":2287,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["associ",{"_index":2026,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["assum",{"_index":413,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{}}],["astimezon",{"_index":2291,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["astyp",{"_index":1865,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["async",{"_index":53,"text":{"api/backends/":{},"api/backends/#asynclambbackend":{},"api/backends/#extending-backends":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/instruments/":{},"api/instruments/#instrument-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#key-features":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"changelog/":{},"changelog/#changed":{},"changelog/#changed_1":{},"installation/":{},"installation/#next-steps":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#async-in-pytestlab":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#next-steps":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/getting_started/#3-next-steps":{}},"title":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#async-in-pytestlab":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/errors/#use-async-with-for-cleanup":{}}}],["async_mod",{"_index":1296,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{}},"title":{}}],["async_visa_backend",{"_index":327,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{}},"title":{}}],["asynccli",{"_index":466,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["asynchron",{"_index":319,"text":{"api/backends/":{},"api/backends/#asyncvisabackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/connecting/":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}},"title":{"user_guide/async_vs_sync/#asynchronous-by-design":{}}}],["asyncinstrumentio",{"_index":336,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{}},"title":{}}],["asyncio",{"_index":540,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-a-bench":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{}}],["asynclambbackend",{"_index":438,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{"api/backends/#asynclambbackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{}}}],["asyncvisabackend",{"_index":318,"text":{"api/backends/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{"api/backends/#asyncvisabackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{}}}],["attach",{"_index":2347,"text":{"api/measurements/":{},"api/measurements/#key-features":{}},"title":{}}],["attempt",{"_index":989,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{}},"title":{}}],["attenu",{"_index":817,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.attenuation":{}}}],["attribut",{"_index":354,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/common/":{},"api/config/":{},"api/errors/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/measurements/":{}},"title":{"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend-attributes":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend-attributes":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend-attributes":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2-attributes":{},"api/config/#pytestlab.config.accuracy.AccuracySpec-attributes":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended-attributes":{},"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig-attributes":{},"api/config/#pytestlab.config.instrument_config.InstrumentConfig-attributes":{},"api/config/#pytestlab.config.multimeter_config.MultimeterConfig-attributes":{},"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig-attributes":{},"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig-attributes":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig-attributes":{},"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig-attributes":{},"api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig-attributes":{},"api/config/#pytestlab.config.vna_config.VNAConfig-attributes":{},"api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig-attributes":{},"api/errors/#pytestlab.errors.DatabaseError-attributes":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError-attributes":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError-attributes":{},"api/errors/#pytestlab.errors.InstrumentConnectionError-attributes":{},"api/errors/#pytestlab.errors.InstrumentParameterError-attributes":{},"api/experiments/#pytestlab.experiments.experiments.Experiment-attributes":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult-attributes":{},"api/experiments/#pytestlab.experiments.sweep-attributes":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace-attributes":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad-attributes":{},"api/instruments/#pytestlab.instruments.Instrument-attributes":{},"api/instruments/#pytestlab.instruments.Multimeter-attributes":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter-attributes":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult-attributes":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope-attributes":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble-attributes":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig-attributes":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply-attributes":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult-attributes":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData-attributes":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser-attributes":{},"api/instruments/#pytestlab.instruments.WaveformGenerator-attributes":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo-attributes":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult-attributes":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator-attributes":{},"api/measurements/#pytestlab.measurements.MeasurementSession-attributes":{}}}],["audit",{"_index":2280,"text":{"api/measurements/":{},"api/measurements/#overview":{}},"title":{}}],["auto",{"_index":451,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{}}}],["auto_clos",{"_index":2302,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["auto_scal",{"_index":1374,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{}}}],["autoinstru",{"_index":1138,"text":{"api/instruments/":{},"api/instruments/#extending-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{"api/instruments/#pytestlab.instruments.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"user_guide/connecting/#using-autoinstrument":{}}}],["autom",{"_index":86,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/measurements/":{},"api/measurements/#overview":{},"changelog/":{},"changelog/#added_1":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#tips":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended.automation":{}}}],["automat",{"_index":195,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/backends/#overview":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#overview":{},"contributing/":{},"contributing/#development-workflow":{},"installation/":{},"installation/#visa-backend-support":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/simulation/":{},"user_guide/simulation/#recording-a-simulation-profile":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#how-pytestlab-handles-uncertainty":{}},"title":{"user_guide/uncertainty/#automatic-uncertainty-propagation":{}}}],["autorang",{"_index":777,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{}},"title":{"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.autorange":{}}}],["autoscal",{"_index":1378,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{}},"title":{}}],["avail",{"_index":284,"text":{"api/backends/":{},"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"installation/":{},"installation/#verifying-your-installation":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"user_guide/cli/":{},"user_guide/cli/#general-usage":{},"user_guide/cli/#list":{},"user_guide/cli/#other-useful-commands":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{"api/backends/#available-backends":{}}}],["aver",{"_index":631,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}},"title":{}}],["averag",{"_index":630,"text":{"api/common/":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}},"title":{"api/common/#pytestlab.common.enums.AcquisitionType.AVERAGE":{}}}],["averaging_count",{"_index":832,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}},"title":{"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.averaging_count":{}}}],["avg_count_int",{"_index":1509,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["avoid",{"_index":2418,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{}},"title":{}}],["await",{"_index":359,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/errors/":{},"api/errors/#usage-example":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#async-in-pytestlab":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-a-bench":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{}}],["awar",{"_index":2139,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{}},"title":{}}],["awg",{"_index":773,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["ax",{"_index":1619,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{}}],["axi",{"_index":937,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{}},"title":{}}],["b",{"_index":184,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"contributing/":{},"contributing/#development-workflow":{}},"title":{}}],["back",{"_index":1655,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{}},"title":{}}],["backend",{"_index":38,"text":{"api/backends/":{},"api/backends/#asynclambbackend":{},"api/backends/#asyncvisabackend":{},"api/backends/#backend-selection-logic":{},"api/backends/#extending-backends":{},"api/backends/#instrument-backends":{},"api/backends/#overview":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/backends/#recordingbackend":{},"api/backends/#simbackendv2":{},"api/instruments/":{},"api/instruments/#instrument-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#simulation-support":{},"changelog/":{},"changelog/#added":{},"changelog/#added_1":{},"changelog/#added_2":{},"changelog/#changed":{},"installation/":{},"installation/#visa-backend-support":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#simulation-mode":{}},"title":{"api/backends/":{},"api/backends/#available-backends":{},"api/backends/#backend-selection-logic":{},"api/backends/#extending-backends":{},"api/backends/#instrument-backends":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.backend":{},"installation/#visa-backend-support":{}}}],["backend'",{"_index":1348,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["backend_default",{"_index":604,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/config/":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended.backend_defaults":{}}}],["backend_inst",{"_index":1175,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["backend_nam",{"_index":1472,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{}}],["backend_statu",{"_index":680,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{"api/common/#pytestlab.common.health.HealthReport.backend_status":{}}}],["backend_typ",{"_index":1224,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["backend_type_hint",{"_index":608,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["backward",{"_index":948,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{}},"title":{}}],["bad",{"_index":368,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["band",{"_index":2205,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{}},"title":{}}],["bandwidth",{"_index":748,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.bandwidth":{}}}],["bandwidth_limit",{"_index":1687,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["base",{"_index":14,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/backends/#overview":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#simbackendv2":{},"api/common/":{},"api/common/#pytestlab.common.enums.AcquisitionType":{},"api/common/#pytestlab.common.enums.ArbAdvanceMode":{},"api/common/#pytestlab.common.enums.ArbFilterType":{},"api/common/#pytestlab.common.enums.BurstMode":{},"api/common/#pytestlab.common.enums.ModulationSource":{},"api/common/#pytestlab.common.enums.OutputLoadImpedance":{},"api/common/#pytestlab.common.enums.OutputPolarity":{},"api/common/#pytestlab.common.enums.SCPIOnOff":{},"api/common/#pytestlab.common.enums.SweepSpacing":{},"api/common/#pytestlab.common.enums.SyncMode":{},"api/common/#pytestlab.common.enums.TriggerSlope":{},"api/common/#pytestlab.common.enums.TriggerSource":{},"api/common/#pytestlab.common.enums.VoltageUnit":{},"api/common/#pytestlab.common.enums.WaveformType":{},"api/common/#pytestlab.common.health.HealthReport":{},"api/common/#pytestlab.common.health.HealthStatus":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended":{},"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig":{},"api/config/#pytestlab.config.instrument_config.InstrumentConfig":{},"api/config/#pytestlab.config.multimeter_config.MultimeterConfig":{},"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig":{},"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig":{},"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig":{},"api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig":{},"api/config/#pytestlab.config.vna_config.VNAConfig":{},"api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig":{},"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel_count":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"changelog/":{},"changelog/#added_2":{},"changelog/#changelog":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}},"title":{"api/config/#base-instrument-model":{}}}],["base_profil",{"_index":551,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{}},"title":{"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.base_profile":{}}}],["base_url",{"_index":459,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{}},"title":{"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.base_url":{}}}],["basemodel",{"_index":679,"text":{"api/common/":{},"api/common/#pytestlab.common.health.HealthReport":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended":{},"api/config/#pytestlab.config.instrument_config.InstrumentConfig":{}},"title":{}}],["bash",{"_index":2523,"text":{"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["basi",{"_index":1720,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{}},"title":{}}],["basic",{"_index":121,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"changelog/":{},"changelog/#added_2":{}},"title":{}}],["batch",{"_index":2278,"text":{"api/measurements/":{},"api/measurements/#overview":{}},"title":{}}],["batteri",{"_index":2144,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{}},"title":{}}],["be",{"_index":2130,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["becam",{"_index":404,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{}},"title":{}}],["befor",{"_index":229,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"contributing/":{},"contributing/#tests":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#other-useful-commands":{},"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{}},"title":{}}],["begin",{"_index":2501,"text":{"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{}},"title":{}}],["behavior",{"_index":974,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.items":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"user_guide/simulation/":{},"user_guide/simulation/#how-simulation-works":{},"user_guide/simulation/#recording-a-simulation-profile":{},"user_guide/simulation/#simulation-mode":{}},"title":{}}],["behaviour",{"_index":1406,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["bench",{"_index":45,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/config/":{},"api/config/#configuration-models":{},"api/errors/":{},"api/errors/#usage-example":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"changelog/":{},"changelog/#added":{},"changelog/#added_1":{},"changelog/#fixed":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/cli/":{},"user_guide/cli/#bench-management-pytestlab-bench":{},"user_guide/cli/#command-line-interface":{},"user_guide/cli/#id":{},"user_guide/cli/#ls":{},"user_guide/cli/#other-useful-commands":{},"user_guide/cli/#sim":{},"user_guide/cli/#validate_1":{},"user_guide/connecting/":{},"user_guide/connecting/#next-steps":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#debugging-tips":{},"user_guide/errors/#further-reading":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/simulation/#further-reading":{}},"title":{"api/config/#bench-configuration":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/cli/#bench-management-pytestlab-bench":{},"user_guide/connecting/#using-a-bench":{}}}],["bench_config",{"_index":693,"text":{"api/config/":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{}},"title":{}}],["bench_nam",{"_index":695,"text":{"api/config/":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended.bench_name":{}}}],["benchconfigextend",{"_index":694,"text":{"api/config/":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended":{}}}],["benefit",{"_index":2383,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{}},"title":{}}],["best",{"_index":134,"text":{"contributing/":{},"contributing/#contributing-to-pytestlab":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/uncertainty/":{}},"title":{"user_guide/errors/#best-practices":{},"user_guide/uncertainty/#best-practices":{}}}],["better",{"_index":64,"text":{"changelog/":{},"changelog/#changed":{},"contributing/":{},"contributing/#contributing-to-pytestlab":{},"contributing/#need-help":{}},"title":{}}],["between",{"_index":1621,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"user_guide/cli/":{},"user_guide/cli/#diff":{}},"title":{}}],["beyond",{"_index":767,"text":{"api/config/":{}},"title":{}}],["bin",{"_index":165,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#standard-installation":{}},"title":{}}],["binari",{"_index":577,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["binary_data",{"_index":1860,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["binary_data_respons",{"_index":1555,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["binary_filenam",{"_index":573,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{}},"title":{}}],["binary_filepath",{"_index":574,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{}},"title":{}}],["black",{"_index":210,"text":{"contributing/":{},"contributing/#code-style-quality":{}},"title":{}}],["ble001",{"_index":2316,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{}},"title":{}}],["block",{"_index":331,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["bool",{"_index":468,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["boolean",{"_index":2459,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["both",{"_index":448,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/instruments/":{},"api/instruments/#instrument-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-instruments":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{}}],["bound",{"_index":1281,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{}},"title":{}}],["box",{"_index":2362,"text":{"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{}},"title":{}}],["bpsk",{"_index":1913,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{}},"title":{}}],["branch",{"_index":181,"text":{"contributing/":{},"contributing/#development-workflow":{},"contributing/#submitting-a-pull-request":{}},"title":{}}],["break",{"_index":1305,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["broken",{"_index":72,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"changelog/":{},"changelog/#fixed":{}},"title":{}}],["brows",{"_index":2359,"text":{"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{}},"title":{}}],["bu",{"_index":662,"text":{"api/common/":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{}},"title":{"api/common/#pytestlab.common.enums.TriggerSource.BUS":{}}}],["budget",{"_index":1122,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{}},"title":{}}],["bug",{"_index":71,"text":{"changelog/":{},"changelog/#fixed":{},"changelog/#fixed_1":{},"contributing/":{},"contributing/#need-help":{}},"title":{}}],["bugfix",{"_index":228,"text":{"contributing/":{},"contributing/#tests":{}},"title":{}}],["build",{"_index":1366,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{}},"title":{}}],["builder",{"_index":2285,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["built",{"_index":1261,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#tips":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{},"user_guide/cli/#list":{}},"title":{}}],["burst",{"_index":1904,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{}},"title":{}}],["burstmod",{"_index":640,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{}},"title":{"api/common/#pytestlab.common.enums.BurstMode":{}}}],["busi",{"_index":2392,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{}}],["bwid",{"_index":2233,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{}}],["bypass",{"_index":1162,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["byte",{"_index":408,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["bytes_fre",{"_index":1765,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo.bytes_free":{}}}],["bytes_us",{"_index":1764,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo.bytes_used":{}}}],["bytesio",{"_index":1566,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["c",{"_index":200,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"contributing/":{},"contributing/#code-style-quality":{},"contributing/#development-workflow":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["cach",{"_index":591,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["cache_dir",{"_index":1242,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["cache_fil",{"_index":1244,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["calc",{"_index":2226,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["calcul",{"_index":847,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{}}],["calculate_std_dev",{"_index":861,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{}},"title":{"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{}}}],["calculate_uncertainti",{"_index":2118,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["calibr",{"_index":2463,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["call",{"_index":332,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#async-in-pytestlab":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#working-with-benches":{}},"title":{"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{}}}],["callabl",{"_index":559,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{}},"title":{}}],["caller",{"_index":1157,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["capabl",{"_index":753,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"profiles/creating/":{},"profiles/creating/#creating-profiles":{}},"title":{}}],["capac",{"_index":2161,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{}},"title":{}}],["captur",{"_index":1552,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["care",{"_index":2554,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{}},"title":{}}],["carlo",{"_index":1133,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{}}],["carr",{"_index":1973,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{}},"title":{}}],["carrier",{"_index":655,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{}},"title":{"api/common/#pytestlab.common.enums.SyncMode.CARRIER":{}}}],["case",{"_index":300,"text":{"api/backends/":{},"api/backends/#instrument-backends":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/simulation/":{},"user_guide/simulation/#limitations":{}},"title":{}}],["cast",{"_index":377,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["cat",{"_index":1988,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["catalog",{"_index":1986,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["catch",{"_index":1430,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#debugging-tips":{}},"title":{"user_guide/errors/#catch-specific-exceptions":{}}}],["categori",{"_index":1145,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{}},"title":{}}],["caught",{"_index":1731,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{}},"title":{}}],["caus",{"_index":2040,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["cc",{"_index":2178,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{}},"title":{}}],["cd",{"_index":155,"text":{"contributing/":{},"contributing/#getting-started":{},"user_guide/cli/":{},"user_guide/cli/#tips":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{}},"title":{}}],["cdn",{"_index":1154,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["cent",{"_index":2204,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{}},"title":{}}],["center",{"_index":822,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["center_freq",{"_index":2203,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{}},"title":{}}],["ch",{"_index":743,"text":{"api/config/":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{}},"title":{}}],["ch1",{"_index":642,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{"api/common/#pytestlab.common.enums.ModulationSource.CH1":{}}}],["ch2",{"_index":643,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{}},"title":{"api/common/#pytestlab.common.enums.ModulationSource.CH2":{}}}],["ch_list",{"_index":1429,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{}},"title":{}}],["ch_num",{"_index":1379,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{}}],["ch_num_loop",{"_index":1521,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["ch_num_val",{"_index":1502,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["ch_to_set",{"_index":2057,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{}},"title":{}}],["chain",{"_index":1691,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{}},"title":{}}],["chainabl",{"_index":1381,"text":{"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{}},"title":{}}],["chan",{"_index":1699,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{}},"title":{}}],["chan1",{"_index":1413,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["chang",{"_index":9,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"changelog/":{},"changelog/#changelog":{},"contributing/":{},"contributing/#development-workflow":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#how-simulation-works":{}},"title":{"changelog/#changed":{},"changelog/#changed_1":{}}}],["changelog",{"_index":7,"text":{"api/config/":{},"changelog/":{},"changelog/#changelog":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended.changelog":{},"changelog/":{},"changelog/#changelog":{}}}],["channel",{"_index":722,"text":{"api/config/":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel_count":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#example-usage":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#profile-structure":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.channels":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.channels":{},"api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{}}}],["channel'",{"_index":1703,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{}},"title":{}}],["channel1",{"_index":1414,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["channel<n",{"_index":1410,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{}},"title":{}}],["channel_commands_str",{"_index":1503,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["channel_conf",{"_index":1890,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["channel_config",{"_index":1741,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{}},"title":{}}],["channel_config_model",{"_index":2005,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{}},"title":{}}],["channel_count",{"_index":1812,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel_count":{}}}],["channel_id",{"_index":744,"text":{"api/config/":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{}},"title":{}}],["channel_model_config",{"_index":1573,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{}},"title":{}}],["channel_num",{"_index":1680,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{}},"title":{}}],["channelreadingresult",{"_index":1359,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{}}}],["channels_to_process",{"_index":1730,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{}},"title":{}}],["channelvoltagetim",{"_index":1535,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["channel{ch",{"_index":1504,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["channel{ch_num",{"_index":1434,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{}},"title":{}}],["channel{ch_num_loop",{"_index":1524,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["channel{channel",{"_index":1412,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{}},"title":{}}],["channel{processed_channel",{"_index":1515,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["channel{self",{"_index":1695,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["channel{source_channel",{"_index":1398,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{}},"title":{}}],["channel{source_channel_to_valid",{"_index":1420,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["chan{channel",{"_index":1426,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{}},"title":{}}],["char",{"_index":1658,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{}},"title":{}}],["character",{"_index":2428,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["charset",{"_index":488,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{}},"title":{}}],["chat",{"_index":246,"text":{"contributing/":{},"contributing/#need-help":{}},"title":{}}],["check",{"_index":194,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/common/":{},"api/common/#common-utilities":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"contributing/":{},"contributing/#code-style-quality":{},"contributing/#development-workflow":{},"user_guide/cli/":{},"user_guide/cli/#validate_1":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{},"user_guide/getting_started/":{},"user_guide/getting_started/#4-need-help":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{}},"title":{"api/common/#health-checks":{}}}],["check_channel_ids_uniqu",{"_index":741,"text":{"api/config/":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{}},"title":{"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{}}}],["check_instru",{"_index":703,"text":{"api/config/":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{}}}],["checker",{"_index":378,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{}},"title":{}}],["checkout",{"_index":183,"text":{"contributing/":{},"contributing/#development-workflow":{}},"title":{}}],["choos",{"_index":599,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{}},"title":{}}],["chosen_backend_typ",{"_index":1218,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["chr",{"_index":1560,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["chunk_siz",{"_index":418,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{}},"title":{}}],["ch{ch",{"_index":1893,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{}},"title":{}}],["ch{ch_num",{"_index":1942,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{}}],["ch{ch_to_set",{"_index":2058,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{}},"title":{}}],["ch{src_ch",{"_index":1979,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{}},"title":{}}],["ci",{"_index":503,"text":{"api/backends/":{},"api/backends/#simbackendv2":{},"user_guide/cli/":{},"user_guide/cli/#tips":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{}}],["circuit",{"_index":2194,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{}},"title":{}}],["cl",{"_index":1090,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{}},"title":{}}],["clamp_duti",{"_index":1611,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{}},"title":{}}],["clamp_symmetri",{"_index":1603,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{}},"title":{}}],["clariti",{"_index":52,"text":{"changelog/":{},"changelog/#changed":{}},"title":{}}],["class",{"_index":299,"text":{"api/backends/":{},"api/backends/#instrument-backends":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/common/":{},"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/experiments/":{},"api/experiments/#experiments-sweeps":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{},"api/instruments/":{},"api/instruments/#instrument-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/measurements/":{},"api/measurements/#measurement-session":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{"api/experiments/#pytestlab.experiments.sweep-classes":{},"api/instruments/#core-instrument-classes":{},"api/instruments/#pytestlab.instruments.AutoInstrument-classes":{},"api/instruments/#pytestlab.instruments.DCActiveLoad-classes":{},"api/instruments/#pytestlab.instruments.Multimeter-classes":{},"api/instruments/#pytestlab.instruments.Oscilloscope-classes":{},"api/instruments/#pytestlab.instruments.PowerMeter-classes":{},"api/instruments/#pytestlab.instruments.PowerSupply-classes":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser-classes":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser-classes":{},"api/instruments/#pytestlab.instruments.WaveformGenerator-classes":{}}}],["classmethod",{"_index":1089,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{}},"title":{}}],["clean",{"_index":2345,"text":{"api/measurements/":{},"api/measurements/#key-features":{}},"title":{}}],["cleaner",{"_index":1368,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{}},"title":{}}],["cleanup",{"_index":2465,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{}},"title":{"user_guide/errors/#use-async-with-for-cleanup":{}}}],["clear",{"_index":235,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"contributing/":{},"contributing/#submitting-a-pull-request":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{}}}],["clear_statu",{"_index":1285,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{"api/instruments/#pytestlab.instruments.Instrument.clear_status":{}}}],["clear_volatile_arbitrary_waveform",{"_index":1829,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{}}}],["cli",{"_index":39,"text":{"changelog/":{},"changelog/#added":{},"changelog/#added_1":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{},"user_guide/cli/#tips":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["client",{"_index":479,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["clip",{"_index":1878,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["clone",{"_index":149,"text":{"contributing/":{},"contributing/#getting-started":{}},"title":{}}],["close",{"_index":356,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/instruments/#pytestlab.instruments.Instrument.close":{}}}],["cmd",{"_index":397,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["cmd_imped",{"_index":2042,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{}},"title":{}}],["cmd_lambda",{"_index":2038,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["cmd_prefix",{"_index":1879,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["cmd_src",{"_index":2003,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{}},"title":{}}],["cmd_state",{"_index":1903,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{}},"title":{}}],["cmd_val",{"_index":2000,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{}},"title":{}}],["code",{"_index":136,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/backends/#extending-backends":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.items":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{},"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"contributing/":{},"contributing/#code-of-conduct":{},"contributing/#code-style-quality":{},"contributing/#contributing-to-pytestlab":{},"contributing/#development-workflow":{},"contributing/#documentation":{},"contributing/#submitting-a-pull-request":{},"profiles/gallery/":{},"profiles/gallery/#keysight-34460a":{},"profiles/gallery/#keysight-34470a":{},"profiles/gallery/#keysight-dsox1202g":{},"profiles/gallery/#keysight-dsox1204g":{},"profiles/gallery/#keysight-dsox3054g":{},"profiles/gallery/#keysight-e36313a":{},"profiles/gallery/#keysight-e5071c":{},"profiles/gallery/#keysight-edu33212a":{},"profiles/gallery/#keysight-edu34450a":{},"profiles/gallery/#keysight-edu36311a":{},"profiles/gallery/#keysight-el33133a":{},"profiles/gallery/#keysight-msox2024a":{},"profiles/gallery/#keysight-mxr404a":{},"profiles/gallery/#keysight-n9000a":{},"profiles/gallery/#keysight-u2000a":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{}},"title":{"contributing/#code-of-conduct":{},"contributing/#code-style-quality":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{}}}],["code_str",{"_index":1312,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{}},"title":{}}],["cohes",{"_index":2422,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#working-with-benches":{}},"title":{}}],["col",{"_index":1024,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["collect",{"_index":904,"text":{"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#working-with-benches":{}},"title":{}}],["color",{"_index":1558,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["column",{"_index":1025,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["com",{"_index":153,"text":{"contributing/":{},"contributing/#getting-started":{}},"title":{}}],["combin",{"_index":1085,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/cli/":{},"user_guide/cli/#tips":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["combo",{"_index":2331,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["comma",{"_index":1450,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{}}],["command",{"_index":88,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#recordingbackend":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"changelog/":{},"changelog/#added_1":{},"profiles/creating/":{},"profiles/creating/#creating-profiles":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#bench-management-pytestlab-bench":{},"user_guide/cli/#command-line-interface":{},"user_guide/cli/#general-usage":{},"user_guide/cli/#profile-management-pytestlab-profile":{},"user_guide/cli/#record":{},"user_guide/cli/#simulation-profile-tools-pytestlab-sim-profile":{},"user_guide/cli/#tips":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#further-reading":{},"user_guide/simulation/#how-simulation-works":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"api/errors/#pytestlab.errors.InstrumentCommunicationError.command":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{},"user_guide/cli/#other-useful-commands":{}}}],["command_map",{"_index":2184,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{}},"title":{}}],["command_slug",{"_index":567,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{}},"title":{}}],["commit",{"_index":178,"text":{"contributing/":{},"contributing/#code-style-quality":{},"contributing/#development-workflow":{},"contributing/#getting-started":{}},"title":{}}],["commitizen",{"_index":198,"text":{"contributing/":{},"contributing/#development-workflow":{}},"title":{}}],["common",{"_index":613,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"user_guide/errors/":{}},"title":{"api/common/":{},"api/common/#common-utilities":{},"user_guide/errors/#common-exceptions":{}}}],["commun",{"_index":130,"text":{"api/backends/":{},"api/backends/#asynclambbackend":{},"api/backends/#instrument-backends":{},"api/backends/#overview":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"contributing/":{},"contributing/#code-of-conduct":{},"contributing/#contributing-to-pytestlab":{},"installation/":{},"installation/#visa-backend-support":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/getting_started/":{},"user_guide/getting_started/#4-need-help":{}},"title":{}}],["communication_timeout_m",{"_index":1193,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["compar",{"_index":1657,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["compat",{"_index":320,"text":{"api/backends/":{},"api/backends/#asyncvisabackend":{},"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{}},"title":{}}],["compens",{"_index":836,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}},"title":{}}],["complet",{"_index":586,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{}}],["complex",{"_index":865,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/measurements/":{},"api/measurements/#measurement-session":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#working-with-benches":{}},"title":{}}],["compli",{"_index":1316,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{}},"title":{}}],["complianc",{"_index":2279,"text":{"api/measurements/":{},"api/measurements/#overview":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{}}],["compliant",{"_index":2137,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{}},"title":{}}],["compon",{"_index":1595,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{}},"title":{}}],["comprehens",{"_index":1365,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{}},"title":{}}],["compress",{"_index":2431,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["comput",{"_index":1538,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["compute_fft",{"_index":1550,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["concept",{"_index":2533,"text":{"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{}}],["concis",{"_index":963,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{}},"title":{}}],["concurr",{"_index":2393,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{}},"title":{}}],["condit",{"_index":2172,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/measurements/":{},"api/measurements/#overview":{},"user_guide/simulation/":{},"user_guide/simulation/#limitations":{}},"title":{}}],["conduct",{"_index":138,"text":{"contributing/":{},"contributing/#code-of-conduct":{}},"title":{"contributing/#code-of-conduct":{}}}],["conf_obj",{"_index":2157,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{}},"title":{}}],["config",{"_index":692,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#sim":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.config":{},"api/instruments/#pytestlab.instruments.Instrument.config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.config":{}}}],["config_data",{"_index":1166,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["config_key",{"_index":2318,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{}},"title":{}}],["config_model",{"_index":1167,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["config_sourc",{"_index":1146,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["config_str",{"_index":2083,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["config_text",{"_index":1254,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["configdict",{"_index":683,"text":{"api/common/":{},"api/config/":{}},"title":{}}],["configload",{"_index":883,"text":{"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{}},"title":{"api/config/#pytestlab.config.loader.ConfigLoader":{}}}],["configrequir",{"_index":1391,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{}},"title":{}}],["configtyp",{"_index":1275,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{}},"title":{}}],["configur",{"_index":116,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/config/":{},"api/config/#configuration-loader":{},"api/config/#configuration-models":{},"api/config/#instrument-configuration-models":{},"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig":{},"api/config/#pytestlab.config.multimeter_config.MultimeterConfig":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig":{},"api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel_count":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"changelog/":{},"changelog/#added_2":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#profile-structure":{},"profiles/creating/#tips":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/cli/":{},"user_guide/cli/#ls":{},"user_guide/cli/#other-useful-commands":{},"user_guide/cli/#sim":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#debugging-tips":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#further-reading":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{"api/config/":{},"api/config/#bench-configuration":{},"api/config/#configuration-loader":{},"api/config/#configuration-models":{},"api/config/#instrument-configuration-models":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{}}}],["configure_fft",{"_index":1384,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{}}}],["configure_measur",{"_index":2074,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{}},"title":{"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{}}}],["configure_s_parameter_sweep",{"_index":2225,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}}}],["configure_sensor",{"_index":2253,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}},"title":{"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}}}],["configure_transient_mod",{"_index":2146,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{}}}],["configure_trigg",{"_index":1401,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}}}],["conflict",{"_index":1886,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["conform",{"_index":2492,"text":{"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["connect",{"_index":102,"text":{"api/backends/":{},"api/backends/#overview":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/config/":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#usage-example":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"changelog/":{},"changelog/#fixed_1":{},"installation/":{},"installation/#next-steps":{},"installation/#troubleshooting":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#id":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#connecting-to-instruments":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/connecting/#using-a-bench":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#debugging-tips":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#connecting-to-instruments":{},"user_guide/connecting/#troubleshooting-connections":{}}}],["connect_backend",{"_index":1159,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/measurements/":{},"api/measurements/#example-usage":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{}}}],["consid",{"_index":977,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["consist",{"_index":1704,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{}},"title":{}}],["consol",{"_index":2475,"text":{"user_guide/cli/":{},"user_guide/cli/#sim":{}},"title":{}}],["constant",{"_index":2141,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{}},"title":{}}],["constraint",{"_index":1072,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.constraint":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}}}],["construct",{"_index":1240,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{}},"title":{}}],["constructor",{"_index":1228,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{}}],["consult",{"_index":2496,"text":{"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{}},"title":{}}],["contain",{"_index":999,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{}}],["content",{"_index":492,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"user_guide/cli/":{},"user_guide/cli/#show":{}},"title":{}}],["context",{"_index":481,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/measurements/":{},"api/measurements/#key-features":{},"api/measurements/#measurement-session":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{}},"title":{}}],["continu",{"_index":1994,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{}}],["continue_on_automation_error",{"_index":696,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended.continue_on_automation_error":{}}}],["contribut",{"_index":122,"text":{"contributing/":{},"contributing/#contributing-to-pytestlab":{}},"title":{"contributing/":{},"contributing/#contributing-to-pytestlab":{}}}],["contributor",{"_index":139,"text":{"contributing/":{},"contributing/#code-of-conduct":{}},"title":{}}],["control",{"_index":1327,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"profiles/creating/":{},"profiles/creating/#creating-profiles":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}},"title":{}}],["conveni",{"_index":1380,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{}},"title":{}}],["convent",{"_index":196,"text":{"contributing/":{},"contributing/#code-style-quality":{},"contributing/#development-workflow":{}},"title":{}}],["convers",{"_index":1022,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{}},"title":{}}],["convert",{"_index":978,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/cli/":{},"user_guide/cli/#sim":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{}},"title":{}}],["coordin",{"_index":2274,"text":{"api/measurements/":{},"api/measurements/#measurement-session":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{}}],["core",{"_index":109,"text":{"api/experiments/":{},"api/experiments/#experiments-sweeps":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"changelog/":{},"changelog/#added_2":{},"installation/":{},"installation/#core-package":{}},"title":{"api/instruments/#core-instrument-classes":{},"installation/#core-package":{}}}],["coroutin",{"_index":2397,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#async-in-pytestlab":{}},"title":{}}],["correct",{"_index":1142,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{}},"title":{}}],["correctli",{"_index":1294,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{}},"title":{}}],["correspond",{"_index":1164,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#profile-structure":{}},"title":{}}],["corrupt",{"_index":1248,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["coun",{"_index":2255,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}},"title":{}}],["count",{"_index":1511,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["counter",{"_index":2513,"text":{"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["coupl",{"_index":1686,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{}},"title":{}}],["cover",{"_index":190,"text":{"contributing/":{},"contributing/#development-workflow":{},"user_guide/simulation/":{},"user_guide/simulation/#limitations":{}},"title":{}}],["cp",{"_index":2180,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{}},"title":{}}],["cpu",{"_index":2396,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{}}],["cr",{"_index":2182,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{}},"title":{}}],["creat",{"_index":180,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#extending-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"contributing/":{},"contributing/#development-workflow":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/simulation/#further-reading":{},"user_guide/simulation/#recording-a-simulation-profile":{}},"title":{"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#creating-profiles":{}}}],["created_at",{"_index":2289,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{"api/measurements/#pytestlab.measurements.MeasurementSession.created_at":{}}}],["creation",{"_index":2156,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{}},"title":{}}],["crucial",{"_index":1298,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"profiles/creating/":{},"profiles/creating/#profile-structure":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["csv",{"_index":1900,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["ctrl+d",{"_index":2527,"text":{"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["ctx",{"_index":2337,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["curr",{"_index":2096,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["current",{"_index":734,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.current":{}}}],["current_acq_type_str",{"_index":1666,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{}},"title":{}}],["current_file_directori",{"_index":1265,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["current_instrument_config",{"_index":2107,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["current_limit",{"_index":1707,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/measurements/":{},"api/measurements/#example-usage":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{}},"title":{}}],["current_limit_rang",{"_index":1742,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{}},"title":{}}],["current_mod",{"_index":2145,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.current_mode":{}}}],["current_mode_queri",{"_index":1674,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{}},"title":{}}],["current_offset_v",{"_index":1692,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["current_scale_v",{"_index":1694,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["current_set_bas",{"_index":1743,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{}},"title":{}}],["current_time_axi",{"_index":1500,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["current_v",{"_index":1728,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{}},"title":{}}],["custom",{"_index":67,"text":{"api/errors/":{},"api/errors/#exceptions":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"changelog/":{},"changelog/#changed":{},"changelog/#changed_1":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{"user_guide/uncertainty/#custom-uncertainty-models":{}}}],["custom_signal_gener",{"_index":2444,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["custom_valid",{"_index":697,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended.custom_validations":{}}}],["cutoff",{"_index":2171,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{}},"title":{}}],["cv",{"_index":2179,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{}},"title":{}}],["cycl",{"_index":1608,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{}}],["cz",{"_index":199,"text":{"contributing/":{},"contributing/#code-style-quality":{},"contributing/#development-workflow":{}},"title":{}}],["d",{"_index":1012,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["d401",{"_index":538,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{}},"title":{}}],["dac",{"_index":1840,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["dac_max",{"_index":1867,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["dac_min",{"_index":1866,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["daemon",{"_index":442,"text":{"api/backends/":{},"api/backends/#asynclambbackend":{}},"title":{}}],["damag",{"_index":2462,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["data",{"_index":265,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"installation/":{},"installation/#full-installation":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#profile-structure":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{"api/experiments/#pytestlab.experiments.experiments.Experiment.data":{},"api/measurements/#pytestlab.measurements.MeasurementSession.data":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{}}}],["data_point",{"_index":1838,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["data_typ",{"_index":1839,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["data_type_upp",{"_index":1848,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["databas",{"_index":118,"text":{"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/measurements/":{},"api/measurements/#key-features":{},"api/measurements/#overview":{},"changelog/":{},"changelog/#added_2":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}},"title":{"api/experiments/":{},"api/experiments/#database-results":{},"api/experiments/#pytestlab.experiments.database.Database":{}}}],["databaseerror",{"_index":901,"text":{"api/errors/":{},"api/errors/#usage-example":{}},"title":{"api/errors/#pytestlab.errors.DatabaseError":{}}}],["dataclass",{"_index":1615,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["datafram",{"_index":916,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{}}],["datasheet",{"_index":864,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{}},"title":{}}],["date",{"_index":233,"text":{"contributing/":{},"contributing/#submitting-a-pull-request":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["datetim",{"_index":2290,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["db",{"_index":819,"text":{"api/config/":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["dbm",{"_index":664,"text":{"api/common/":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{}},"title":{"api/common/#pytestlab.common.enums.VoltageUnit.DBM":{}}}],["dc",{"_index":668,"text":{"api/common/":{},"api/config/":{},"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/common/#pytestlab.common.enums.WaveformType.DC":{},"api/config/#dc-active-load":{},"api/instruments/#dc-active-load":{}}}],["dc_active_load",{"_index":2375,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-el33133a":{}},"title":{}}],["dc_active_load_config",{"_index":792,"text":{"api/config/":{}},"title":{}}],["dc_voltag",{"_index":2467,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["dcactiveload",{"_index":115,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"changelog/":{},"changelog/#added_2":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{}}}],["dcactiveloadconfig",{"_index":793,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{}},"title":{"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig":{}}}],["dcycl",{"_index":1612,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{}},"title":{}}],["debug",{"_index":482,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/backends/#recordingbackend":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{}},"title":{"user_guide/errors/#debugging-tips":{}}}],["debug_mod",{"_index":1147,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{}},"title":{}}],["decibel",{"_index":1388,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{}},"title":{}}],["declar",{"_index":2426,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["decod",{"_index":493,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["decor",{"_index":1114,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{}},"title":{}}],["def",{"_index":339,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.items":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{}}],["default",{"_index":349,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/common/":{},"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#diff":{},"user_guide/cli/#edit":{},"user_guide/cli/#reset":{},"user_guide/simulation/":{},"user_guide/simulation/#limitations":{}},"title":{"api/common/#pytestlab.common.enums.OutputLoadImpedance.DEFAULT":{}}}],["default_accuraci",{"_index":2115,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["default_communication_timeout_m",{"_index":1190,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["default_ext",{"_index":1016,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{}},"title":{}}],["default_factori",{"_index":715,"text":{"api/config/":{},"api/instruments/":{}},"title":{}}],["default_measurement_funct",{"_index":780,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.default_measurement_function":{}}}],["default_timeout_m",{"_index":515,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.DEFAULT_TIMEOUT_MS":{}}}],["defin",{"_index":689,"text":{"api/config/":{},"api/config/#accuracy-specification":{},"api/config/#configuration-models":{},"api/config/#instrument-configuration-models":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#creating-profiles":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/cli/":{},"user_guide/cli/#ls":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/simulation/":{},"user_guide/simulation/#how-simulation-works":{}},"title":{}}],["definit",{"_index":1111,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"profiles/creating/":{},"profiles/creating/#profile-structure":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{}}],["deg",{"_index":1922,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{}},"title":{}}],["degre",{"_index":2009,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{}},"title":{}}],["del",{"_index":936,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{}},"title":{}}],["delay",{"_index":398,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["deleg",{"_index":556,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{}},"title":{}}],["delet",{"_index":934,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"user_guide/cli/":{},"user_guide/cli/#reset":{}},"title":{}}],["delete_file_or_fold",{"_index":1831,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{}}}],["depend",{"_index":170,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#full-installation":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{}}],["deprec",{"_index":1491,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{}},"title":{}}],["deprecationwarn",{"_index":1495,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{}},"title":{}}],["depth",{"_index":760,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{}},"title":{}}],["depth_perc",{"_index":1999,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{}},"title":{}}],["desc",{"_index":2329,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["describ",{"_index":1618,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["descript",{"_index":187,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"contributing/":{},"contributing/#development-workflow":{},"contributing/#submitting-a-pull-request":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended.description":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.description":{},"api/measurements/#pytestlab.measurements.MeasurementSession.description":{}}}],["description}\\n",{"_index":1047,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{}},"title":{}}],["descriptor",{"_index":46,"text":{"api/config/":{},"api/config/#configuration-models":{},"changelog/":{},"changelog/#added":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/connecting/":{},"user_guide/connecting/#next-steps":{},"user_guide/errors/":{},"user_guide/errors/#further-reading":{}},"title":{"user_guide/bench_descriptors/":{}}}],["design",{"_index":298,"text":{"api/backends/":{},"api/backends/#instrument-backends":{},"api/config/":{},"api/config/#pytestlab.config.multimeter_config.MultimeterConfig":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/measurements/":{},"api/measurements/#measurement-session":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{}},"title":{"user_guide/async_vs_sync/#asynchronous-by-design":{}}}],["desir",{"_index":1577,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}},"title":{}}],["detail",{"_index":42,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/config/":{},"api/config/#configuration-models":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#simulation-support":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"changelog/":{},"changelog/#added":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/cli/":{},"user_guide/cli/#sim":{},"user_guide/cli/#tips":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{}},"title":{}}],["detect",{"_index":279,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"installation/":{},"installation/#visa-backend-support":{}},"title":{}}],["determin",{"_index":1155,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{}},"title":{}}],["determinist",{"_index":502,"text":{"api/backends/":{},"api/backends/#simbackendv2":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#simulation-mode":{}},"title":{}}],["dev",{"_index":175,"text":{"contributing/":{},"contributing/#getting-started":{}},"title":{}}],["develop",{"_index":132,"text":{"api/backends/":{},"api/backends/#simbackendv2":{},"contributing/":{},"contributing/#contributing-to-pytestlab":{},"contributing/#getting-started":{},"installation/":{},"installation/#full-installation":{},"installation/#troubleshooting":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{"contributing/#development-workflow":{}}}],["deviat",{"_index":845,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{}}],["deviation_hz",{"_index":2024,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{}},"title":{}}],["devic",{"_index":711,"text":{"api/config/":{},"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig":{},"api/config/#pytestlab.config.multimeter_config.MultimeterConfig":{},"profiles/gallery/":{},"profiles/gallery/#keysight-34460a":{},"profiles/gallery/#keysight-34470a":{},"profiles/gallery/#keysight-dsox1202g":{},"profiles/gallery/#keysight-dsox1204g":{},"profiles/gallery/#keysight-dsox3054g":{},"profiles/gallery/#keysight-e36313a":{},"profiles/gallery/#keysight-e5071c":{},"profiles/gallery/#keysight-edu33212a":{},"profiles/gallery/#keysight-edu34450a":{},"profiles/gallery/#keysight-edu36311a":{},"profiles/gallery/#keysight-el33133a":{},"profiles/gallery/#keysight-msox2024a":{},"profiles/gallery/#keysight-mxr404a":{},"profiles/gallery/#keysight-n9000a":{},"profiles/gallery/#keysight-u2000a":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{}}],["device_model_str",{"_index":1207,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["device_typ",{"_index":707,"text":{"api/config/":{},"api/config/#instrument-configuration-models":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#metadata":{},"profiles/creating/#profile-structure":{},"profiles/creating/#tips":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.device_type":{},"api/config/#pytestlab.config.instrument_config.InstrumentConfig.device_type":{},"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.device_type":{},"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.device_type":{},"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.device_type":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.device_type":{},"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.device_type":{},"api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig.device_type":{},"api/config/#pytestlab.config.vna_config.VNAConfig.device_type":{},"api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.device_type":{}}}],["device_type_str",{"_index":1225,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["df",{"_index":982,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{}},"title":{}}],["dict",{"_index":526,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.items":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["dictionari",{"_index":1040,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["diff",{"_index":2480,"text":{"user_guide/cli/":{},"user_guide/cli/#diff":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"user_guide/cli/#diff":{}}}],["differ",{"_index":1117,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/cli/":{},"user_guide/cli/#diff":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["digit",{"_index":1363,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{}},"title":{}}],["dimens",{"_index":1112,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{}}],["dimension",{"_index":962,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{}},"title":{}}],["dir",{"_index":1995,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["direct",{"_index":449,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{}},"title":{}}],["directli",{"_index":313,"text":{"api/backends/":{},"api/backends/#overview":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["directori",{"_index":227,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"contributing/":{},"contributing/#tests":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["dirnam",{"_index":1205,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["disabl",{"_index":779,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{}}}],["disable_on_complet",{"_index":1445,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{}}],["disc_",{"_index":1291,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{}},"title":{}}],["discard",{"_index":2553,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{}},"title":{}}],["disconnect",{"_index":358,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{}},"title":{"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{}}}],["discover",{"_index":66,"text":{"changelog/":{},"changelog/#changed":{}},"title":{}}],["discoveri",{"_index":1220,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["discuss",{"_index":242,"text":{"contributing/":{},"contributing/#need-help":{}},"title":{}}],["disp",{"_index":1725,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{}},"title":{}}],["dispatch",{"_index":524,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["display",{"_index":1376,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"user_guide/cli/":{},"user_guide/cli/#show":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{}}}],["display_channel",{"_index":1427,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{}}}],["dissip",{"_index":2167,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{}},"title":{}}],["distribut",{"_index":1136,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{}}],["divis",{"_index":1492,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["dlog",{"_index":2151,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{}},"title":{}}],["dmm",{"_index":784,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/measurements/":{},"api/measurements/#example-usage":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#using-a-bench":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["dmm'",{"_index":2082,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["dmm_voltag",{"_index":2344,"text":{"api/measurements/":{},"api/measurements/#example-usage":{}},"title":{}}],["dmmfunction",{"_index":781,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{}},"title":{}}],["doc",{"_index":26,"text":{"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"changelog/":{},"changelog/#added":{},"contributing/":{},"contributing/#development-workflow":{},"contributing/#documentation":{}},"title":{}}],["docstr",{"_index":224,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"contributing/":{},"contributing/#documentation":{}},"title":{}}],["document",{"_index":11,"text":{"api/backends/":{},"api/backends/#instrument-backends":{},"api/common/":{},"api/common/#common-utilities":{},"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/errors/":{},"api/errors/#exceptions":{},"api/experiments/":{},"api/experiments/#experiments-sweeps":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{},"api/instruments/":{},"api/instruments/#instrument-drivers":{},"changelog/":{},"changelog/#added":{},"changelog/#changelog":{},"changelog/#fixed":{},"contributing/":{},"contributing/#contributing-to-pytestlab":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#further-reading":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{"contributing/#documentation":{}}}],["domain",{"_index":998,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["don't",{"_index":430,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{}},"title":{}}],["done",{"_index":981,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{}},"title":{}}],["don\u2019t",{"_index":2552,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{}},"title":{}}],["dotdict",{"_index":520,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["doubl",{"_index":2485,"text":{"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{}},"title":{}}],["download",{"_index":1238,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["download_arbitrary_waveform_data",{"_index":1837,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{}}}],["download_arbitrary_waveform_data_binari",{"_index":1844,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}}}],["download_arbitrary_waveform_data_csv",{"_index":1845,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}}}],["drive",{"_index":1362,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{}},"title":{}}],["driven",{"_index":84,"text":{"api/backends/":{},"api/backends/#simbackendv2":{},"changelog/":{},"changelog/#added_1":{},"user_guide/simulation/":{},"user_guide/simulation/#simulation-mode":{}},"title":{}}],["driver",{"_index":110,"text":{"api/backends/":{},"api/backends/#overview":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#instrument-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#simulation-support":{},"changelog/":{},"changelog/#added_2":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{"api/instruments/#extending-drivers":{},"api/instruments/#instrument-drivers":{}}}],["drop",{"_index":507,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["dsox1202g",{"_index":2368,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-dsox1202g":{}},"title":{"profiles/gallery/#keysight-dsox1202g":{}}}],["dsox1204g",{"_index":1241,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"profiles/gallery/#keysight-dsox1204g":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/cli/":{},"user_guide/cli/#show":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{"profiles/gallery/#keysight-dsox1204g":{}}}],["dsox3054g",{"_index":2369,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-dsox3054g":{}},"title":{"profiles/gallery/#keysight-dsox3054g":{}}}],["dtype",{"_index":965,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["dual",{"_index":1854,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["dual_data_format",{"_index":1843,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["due",{"_index":1356,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{}},"title":{}}],["dummi",{"_index":884,"text":{"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["dump",{"_index":584,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["duplic",{"_index":2044,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{}},"title":{}}],["dure",{"_index":420,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["dut",{"_index":2277,"text":{"api/measurements/":{},"api/measurements/#overview":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["duti",{"_index":1607,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{}},"title":{}}],["duty_cycl",{"_index":1606,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.duty_cycle":{}}}],["dutycycl",{"_index":1610,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{}},"title":{}}],["dynam",{"_index":1269,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["e",{"_index":174,"text":{"api/backends/":{},"api/backends/#asyncvisabackend":{},"api/backends/#backend-selection-logic":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/errors/":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"contributing/":{},"contributing/#getting-started":{},"profiles/creating/":{},"profiles/creating/#profile-structure":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"profiles/gallery/#keysight-34460a":{},"profiles/gallery/#keysight-34470a":{},"profiles/gallery/#keysight-dsox1202g":{},"profiles/gallery/#keysight-dsox1204g":{},"profiles/gallery/#keysight-dsox3054g":{},"profiles/gallery/#keysight-e36313a":{},"profiles/gallery/#keysight-e5071c":{},"profiles/gallery/#keysight-edu33212a":{},"profiles/gallery/#keysight-edu34450a":{},"profiles/gallery/#keysight-edu36311a":{},"profiles/gallery/#keysight-el33133a":{},"profiles/gallery/#keysight-msox2024a":{},"profiles/gallery/#keysight-mxr404a":{},"profiles/gallery/#keysight-n9000a":{},"profiles/gallery/#keysight-u2000a":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#custom-uncertainty-models":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{}}],["e36313a",{"_index":2370,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-e36313a":{}},"title":{"profiles/gallery/#keysight-e36313a":{}}}],["e5071c",{"_index":2371,"text":{"profiles/gallery/":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{"profiles/gallery/#keysight-e5071c":{}}}],["e5071c_vna",{"_index":2372,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-e5071c":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["each",{"_index":297,"text":{"api/backends/":{},"api/backends/#instrument-backends":{},"api/config/":{},"api/config/#instrument-configuration-models":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/measurements/":{},"api/measurements/#key-features":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["earli",{"_index":2361,"text":{"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{}},"title":{}}],["earlier",{"_index":2286,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["easier",{"_index":2416,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{}},"title":{}}],["easili",{"_index":2394,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{}}],["edg",{"_index":1404,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"user_guide/simulation/":{},"user_guide/simulation/#limitations":{}},"title":{}}],["edit",{"_index":2476,"text":{"user_guide/cli/":{},"user_guide/cli/#edit":{},"user_guide/cli/#simulation-profile-tools-pytestlab-sim-profile":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"user_guide/cli/#edit":{}}}],["editor",{"_index":2478,"text":{"user_guide/cli/":{},"user_guide/cli/#edit":{}},"title":{}}],["edu33210",{"_index":1807,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{}},"title":{}}],["edu33212a",{"_index":2373,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-edu33212a":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{"profiles/gallery/#keysight-edu33212a":{}}}],["edu34450a",{"_index":2340,"text":{"api/measurements/":{},"api/measurements/#example-usage":{},"profiles/gallery/":{},"profiles/gallery/#keysight-edu34450a":{}},"title":{"profiles/gallery/#keysight-edu34450a":{}}}],["edu36311a",{"_index":2341,"text":{"api/measurements/":{},"api/measurements/#example-usage":{},"profiles/gallery/":{},"profiles/gallery/#keysight-edu36311a":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#diff":{},"user_guide/cli/#edit":{},"user_guide/cli/#record":{},"user_guide/cli/#reset":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"profiles/gallery/#keysight-edu36311a":{}}}],["educ",{"_index":2531,"text":{"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{}}],["effect",{"_index":1347,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["effici",{"_index":1237,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["eith",{"_index":659,"text":{"api/common/":{}},"title":{}}],["el30000",{"_index":2135,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{}},"title":{}}],["el33133a",{"_index":2374,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-el33133a":{}},"title":{"profiles/gallery/#keysight-el33133a":{}}}],["electron",{"_index":2134,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{}},"title":{}}],["element",{"_index":1014,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{}},"title":{}}],["elif",{"_index":566,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["empti",{"_index":578,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{}},"title":{}}],["en",{"_index":27,"text":{"changelog/":{},"changelog/#added":{}},"title":{}}],["enabl",{"_index":778,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"user_guide/simulation/#enabling-simulation":{}}}],["enable_battery_test",{"_index":2148,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{}}}],["enable_burst",{"_index":1902,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{}}}],["enable_input",{"_index":2149,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{}}}],["enable_modul",{"_index":1905,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{}}}],["enable_sweep",{"_index":1915,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{}}}],["encapsul",{"_index":2276,"text":{"api/measurements/":{},"api/measurements/#overview":{}},"title":{}}],["encod",{"_index":544,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{}},"title":{}}],["encount",{"_index":287,"text":{"installation/":{},"installation/#troubleshooting":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["end",{"_index":314,"text":{"api/backends/":{},"api/backends/#overview":{}},"title":{}}],["endpoint",{"_index":477,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{}},"title":{}}],["endswith",{"_index":1017,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{}},"title":{}}],["enforc",{"_index":197,"text":{"contributing/":{},"contributing/#code-style-quality":{},"contributing/#development-workflow":{}},"title":{}}],["engin",{"_index":129,"text":{"contributing/":{},"contributing/#contributing-to-pytestlab":{}},"title":{}}],["enhanc",{"_index":28,"text":{"changelog/":{},"changelog/#added":{}},"title":{}}],["enough",{"_index":1432,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{}},"title":{}}],["ensur",{"_index":232,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#key-features":{},"api/measurements/#measurement-session":{},"contributing/":{},"contributing/#submitting-a-pull-request":{},"installation/":{},"installation/#troubleshooting":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#validate":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{}},"title":{}}],["entir",{"_index":1151,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#sim":{}},"title":{}}],["entri",{"_index":565,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{}},"title":{}}],["enum",{"_index":616,"text":{"api/common/":{},"api/common/#common-utilities":{},"api/common/#pytestlab.common.enums.AcquisitionType":{},"api/common/#pytestlab.common.enums.ArbAdvanceMode":{},"api/common/#pytestlab.common.enums.ArbFilterType":{},"api/common/#pytestlab.common.enums.BurstMode":{},"api/common/#pytestlab.common.enums.ModulationSource":{},"api/common/#pytestlab.common.enums.OutputLoadImpedance":{},"api/common/#pytestlab.common.enums.OutputPolarity":{},"api/common/#pytestlab.common.enums.SCPIOnOff":{},"api/common/#pytestlab.common.enums.SweepSpacing":{},"api/common/#pytestlab.common.enums.SyncMode":{},"api/common/#pytestlab.common.enums.TriggerSlope":{},"api/common/#pytestlab.common.enums.TriggerSource":{},"api/common/#pytestlab.common.enums.VoltageUnit":{},"api/common/#pytestlab.common.enums.WaveformType":{},"api/common/#pytestlab.common.health.HealthStatus":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/common/#enums":{},"api/common/#pytestlab.common.enums":{}}}],["enum_memb",{"_index":1656,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{}},"title":{}}],["enumer",{"_index":2328,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["env_simul",{"_index":1179,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["envelop",{"_index":913,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.envelope":{}}}],["environ",{"_index":159,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#standard-installation":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{}}],["environment",{"_index":795,"text":{"api/config/":{},"api/measurements/":{},"api/measurements/#overview":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.environmental":{}}}],["equal",{"_index":1135,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{}}],["equip",{"_index":2494,"text":{"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["equival",{"_index":1650,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{}},"title":{}}],["err",{"_index":1836,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{}},"title":{}}],["err_msg",{"_index":1355,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["error",{"_index":97,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/common/":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"changelog/":{},"changelog/#changed_1":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#debugging-tips":{},"user_guide/errors/#error-handling":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/simulation/":{},"user_guide/simulation/#limitations":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#custom-uncertainty-models":{},"user_guide/uncertainty/#handling-uncertainty":{},"user_guide/uncertainty/#how-pytestlab-handles-uncertainty":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{"api/common/#pytestlab.common.health.HealthReport.errors":{},"api/common/#pytestlab.common.health.HealthStatus.ERROR":{},"api/errors/":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{}}}],["errors_after_test",{"_index":1335,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{}},"title":{}}],["essenti",{"_index":890,"text":{"api/errors/":{},"api/errors/#exceptions":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{}}],["establish",{"_index":535,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["etc",{"_index":309,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/backends/#overview":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/measurements/":{},"api/measurements/#overview":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{}},"title":{}}],["evalu",{"_index":1128,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{}}],["even",{"_index":1856,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{}},"title":{}}],["event",{"_index":2125,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{}},"title":{}}],["everyon",{"_index":127,"text":{"contributing/":{},"contributing/#contributing-to-pytestlab":{}},"title":{}}],["exact",{"_index":2511,"text":{"user_guide/simulation/":{},"user_guide/simulation/#how-simulation-works":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{}}],["exampl",{"_index":611,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/errors/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/measurements/":{},"api/measurements/#example-usage":{},"profiles/creating/":{},"profiles/creating/#example-power-supply-profile":{},"profiles/creating/#tips":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/simulation/":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#further-reading":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{"api/errors/#usage-example":{},"api/measurements/#example-usage":{},"profiles/creating/#example-power-supply-profile":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}}}],["exc",{"_index":2306,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{}},"title":{}}],["exc_typ",{"_index":2305,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{}},"title":{}}],["exce",{"_index":1892,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{}},"title":{}}],["except",{"_index":99,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/errors/":{},"api/errors/#exceptions":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"changelog/":{},"changelog/#changed_1":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#error-handling":{},"user_guide/errors/#further-reading":{},"user_guide/errors/#use-async-with-for-cleanup":{}},"title":{"api/errors/#exception-reference":{},"api/errors/#exceptions":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{}}}],["excerpt",{"_index":2545,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["exclus",{"_index":436,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{}},"title":{}}],["execut",{"_index":1331,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{}},"title":{}}],["exist",{"_index":362,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"user_guide/cli/":{},"user_guide/cli/#sim":{}},"title":{}}],["exist_ok",{"_index":582,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["exit",{"_index":2311,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["expandus",{"_index":1200,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["expect",{"_index":140,"text":{"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"contributing/":{},"contributing/#code-of-conduct":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["expect_respons",{"_index":542,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{}},"title":{}}],["experi",{"_index":119,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#experiments-sweeps":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.items":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{},"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#key-features":{},"api/measurements/#measurement-session":{},"api/measurements/#overview":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"changelog/":{},"changelog/#added_2":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#other-useful-commands":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended.experiment":{},"api/experiments/":{},"api/experiments/#experiments-sweeps":{},"api/experiments/#experiments-sweeps_1":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{}}}],["experiment",{"_index":2424,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#working-with-benches":{}},"title":{}}],["experimentparamet",{"_index":1039,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{}},"title":{}}],["explain",{"_index":131,"text":{"contributing/":{},"contributing/#contributing-to-pytestlab":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{}},"title":{}}],["explicit",{"_index":922,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{}},"title":{}}],["explicitli",{"_index":1158,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["explor",{"_index":2504,"text":{"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{}},"title":{}}],["export",{"_index":1033,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{}},"title":{}}],["expos",{"_index":1137,"text":{"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#instrument-drivers":{}},"title":{}}],["express",{"_index":2515,"text":{"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["ext",{"_index":790,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{}},"title":{}}],["extend",{"_index":264,"text":{"api/backends/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"installation/":{},"installation/#full-installation":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{"api/backends/#extending-backends":{},"api/instruments/#extending-drivers":{}}}],["extens",{"_index":1018,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["extern",{"_index":644,"text":{"api/common/":{},"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{"api/common/#pytestlab.common.enums.ModulationSource.EXTERNAL":{},"api/common/#pytestlab.common.enums.TriggerSource.EXTERNAL":{}}}],["extra",{"_index":700,"text":{"api/config/":{}},"title":{}}],["extract",{"_index":1055,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{}}}],["f",{"_index":375,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{}}],["f'sens",{"_index":2124,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{}},"title":{}}],["f'sour{ch",{"_index":1748,"text":{"api/instruments/":{}},"title":{}}],["f_evalu",{"_index":1108,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{}}}],["facad",{"_index":95,"text":{"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"changelog/":{},"changelog/#changed_1":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}},"title":{"api/instruments/#facade-pattern":{}}}],["factor",{"_index":1465,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["factori",{"_index":1139,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"user_guide/connecting/":{},"user_guide/connecting/#using-autoinstrument":{}},"title":{}}],["fail",{"_index":383,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#use-async-with-for-cleanup":{}},"title":{}}],["fail_msg",{"_index":1338,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{}},"title":{}}],["failur",{"_index":1304,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["fallback",{"_index":972,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["fals",{"_index":469,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["faq",{"_index":2413,"text":{"user_guide/async_vs_sync/":{}},"title":{"user_guide/async_vs_sync/#faq":{}}}],["fast",{"_index":995,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{}},"title":{}}],["feat",{"_index":185,"text":{"contributing/":{},"contributing/#development-workflow":{}},"title":{}}],["featur",{"_index":35,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/measurements/":{},"changelog/":{},"changelog/#added":{},"contributing/":{},"contributing/#development-workflow":{},"contributing/#need-help":{},"contributing/#tests":{},"user_guide/simulation/":{},"user_guide/simulation/#simulation-mode":{}},"title":{"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.features":{},"api/measurements/#key-features":{},"user_guide/simulation/#advanced-simulation-features":{}}}],["feed",{"_index":1447,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{}}],["feedback",{"_index":240,"text":{"contributing/":{},"contributing/#submitting-a-pull-request":{}},"title":{}}],["fetch",{"_index":1171,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{}}],["fetch_datalogger_data",{"_index":2150,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{}}}],["fetch_scope_data",{"_index":2152,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{}}}],["fetc{channel",{"_index":2261,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{}}],["few",{"_index":970,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{}},"title":{}}],["fft",{"_index":752,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{}},"title":{"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.fft":{}}}],["fft_computed_python",{"_index":1542,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["fft_display",{"_index":1435,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{}}}],["fft_magnitud",{"_index":1005,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{}},"title":{}}],["fft_valu",{"_index":1003,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{}},"title":{}}],["fftresult",{"_index":1360,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{}}}],["fidel",{"_index":2521,"text":{"user_guide/simulation/":{},"user_guide/simulation/#limitations":{},"user_guide/simulation/#recording-a-simulation-profile":{}},"title":{}}],["field",{"_index":605,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/config/":{},"api/config/#accuracy-specification":{},"api/config/#instrument-configuration-models":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#profile-structure":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{}}],["fifty_ohm",{"_index":646,"text":{"api/common/":{}},"title":{"api/common/#pytestlab.common.enums.OutputLoadImpedance.FIFTY_OHM":{}}}],["file",{"_index":12,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/config/":{},"api/config/#configuration-models":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#extending-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"changelog/":{},"changelog/#changelog":{},"contributing/":{},"contributing/#development-workflow":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#creating-profiles":{},"profiles/creating/#profile-structure":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/cli/":{},"user_guide/cli/#bench-management-pytestlab-bench":{},"user_guide/cli/#ls":{},"user_guide/cli/#show":{},"user_guide/cli/#sim":{},"user_guide/cli/#validate_1":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/simulation/#how-simulation-works":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo.files":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}}}],["file_path",{"_index":1035,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{}},"title":{}}],["file_pattern",{"_index":1989,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["file_typ",{"_index":1993,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["filenam",{"_index":1062,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{}},"title":{}}],["filenotfounderror",{"_index":1163,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["filesystem",{"_index":1259,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["filesysteminfo",{"_index":1763,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{}}}],["fill",{"_index":2354,"text":{"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{}},"title":{}}],["filter",{"_index":1417,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["final",{"_index":386,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{}}],["final_simulation_mod",{"_index":1177,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["find",{"_index":1231,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{}},"title":{}}],["findal",{"_index":1990,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["finish",{"_index":1343,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["first",{"_index":54,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#instrument-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"changelog/":{},"changelog/#added_2":{},"changelog/#changed":{},"changelog/#changed_1":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{"user_guide/getting_started/#2-your-first-instrument-simulated":{}}}],["first_arg",{"_index":1498,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["fix",{"_index":70,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"changelog/":{}},"title":{"changelog/#fixed":{},"changelog/#fixed_1":{}}}],["flag",{"_index":600,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#simulation-support":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#general-usage":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{}},"title":{}}],["flatten",{"_index":1002,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{}},"title":{}}],["flexibl",{"_index":1813,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{}},"title":{}}],["float",{"_index":400,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{}},"title":{}}],["float32",{"_index":1873,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["float64",{"_index":917,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{}},"title":{}}],["flow",{"_index":2535,"text":{"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{}}],["fluent",{"_index":1682,"text":{"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{}},"title":{}}],["fm",{"_index":1909,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{}},"title":{}}],["fmt_upper",{"_index":1857,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["focu",{"_index":55,"text":{"changelog/":{},"changelog/#changed":{}},"title":{}}],["focus",{"_index":1696,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{}},"title":{}}],["folder",{"_index":1767,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{}},"title":{}}],["follow",{"_index":141,"text":{"api/config/":{},"api/config/#instrument-configuration-models":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"contributing/":{},"contributing/#code-of-conduct":{},"contributing/#code-style-quality":{}},"title":{}}],["forbid",{"_index":701,"text":{"api/config/":{}},"title":{}}],["forc",{"_index":1512,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["fork",{"_index":146,"text":{"contributing/":{},"contributing/#development-workflow":{},"contributing/#getting-started":{}},"title":{}}],["form",{"_index":852,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"user_guide/cli/":{},"user_guide/cli/#validate":{}},"title":{}}],["format",{"_index":13,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"changelog/":{},"changelog/#changelog":{},"changelog/#fixed":{},"contributing/":{},"contributing/#code-style-quality":{},"contributing/#getting-started":{},"installation/":{},"installation/#full-installation":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.format":{}}}],["formatted_data",{"_index":1894,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["formatted_valu",{"_index":2037,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["found",{"_index":4,"text":{"404/":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{}},"title":{}}],["fourier",{"_index":996,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{}},"title":{}}],["fra",{"_index":1369,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{}},"title":{}}],["franalysi",{"_index":754,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.franalysis":{}}}],["franalysis_sweep",{"_index":1437,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}}}],["franalysisresult",{"_index":1361,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{}}}],["fre",{"_index":2084,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["free",{"_index":1769,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{}},"title":{}}],["free_point",{"_index":1947,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{}},"title":{}}],["freq",{"_index":1006,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{}},"title":{}}],["freq_cmd_val",{"_index":2025,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{}},"title":{}}],["freq_hz",{"_index":2050,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{}},"title":{}}],["freq_valu",{"_index":1452,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{}}],["frequenc",{"_index":755,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{}},"title":{"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData.frequencies":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.frequency":{}}}],["frequency_array",{"_index":1547,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["frequency_cent",{"_index":821,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.frequency_center":{}}}],["frequency_compensation_valu",{"_index":834,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}},"title":{"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.frequency_compensation_value":{}}}],["frequency_span",{"_index":823,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.frequency_span":{}}}],["frequencyrespons",{"_index":1454,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{}}],["frequency{type_str",{"_index":1948,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{}},"title":{}}],["frequent",{"_index":976,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{}},"title":{}}],["friendli",{"_index":2092,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["friendly_nam",{"_index":1644,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{}},"title":{}}],["from_config",{"_index":1143,"text":{"api/instruments/":{},"api/instruments/#extending-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{}}}],["from_sess",{"_index":1087,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{}}}],["from_typ",{"_index":1144,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{}},"title":{"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{}}}],["frombuff",{"_index":2155,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{}},"title":{}}],["front",{"_index":1325,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{}},"title":{}}],["fsk",{"_index":1912,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{}},"title":{}}],["ftype",{"_index":1991,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["full",{"_index":176,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"contributing/":{},"contributing/#getting-started":{},"contributing/#tests":{},"installation/":{},"installation/#full-installation":{},"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{}},"title":{"installation/#full-installation":{}}}],["full_messag",{"_index":895,"text":{"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{}},"title":{}}],["full_test",{"_index":1330,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{}},"title":{}}],["func",{"_index":1103,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["func_arb",{"_index":2029,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["func_enum_key",{"_index":2031,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["func_scpi_str",{"_index":1929,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{}}],["func_typ",{"_index":1585,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{}},"title":{}}],["function",{"_index":261,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/config/":{},"api/errors/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"installation/":{},"installation/#core-package":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#async-in-pytestlab":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{}},"title":{"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend-functions":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend-functions":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend-functions":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2-functions":{},"api/config/#pytestlab.config.accuracy.AccuracySpec-functions":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended-functions":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig-functions":{},"api/errors/#pytestlab.errors.DatabaseError-functions":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError-functions":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError-functions":{},"api/errors/#pytestlab.errors.InstrumentConnectionError-functions":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError-functions":{},"api/errors/#pytestlab.errors.InstrumentParameterError-functions":{},"api/experiments/#pytestlab.experiments.experiments.Experiment-functions":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult-functions":{},"api/experiments/#pytestlab.experiments.sweep-functions":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace-functions":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/#pytestlab.instruments.AutoInstrument-functions":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument-functions":{},"api/instruments/#pytestlab.instruments.DCActiveLoad-functions":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad-functions":{},"api/instruments/#pytestlab.instruments.Instrument-functions":{},"api/instruments/#pytestlab.instruments.Multimeter-functions":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter-functions":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult-functions":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope-functions":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble-functions":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade-functions":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade-functions":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade-functions":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter-functions":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig-functions":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade-functions":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply-functions":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult-functions":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser-functions":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData-functions":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser-functions":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo-functions":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade-functions":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult-functions":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator-functions":{},"api/measurements/#pytestlab.measurements.MeasurementSession-functions":{}}}],["function_display",{"_index":1457,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{}}}],["function_gener",{"_index":757,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{}},"title":{"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.function_generator":{}}}],["function_spec",{"_index":2105,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["function_typ",{"_index":1815,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["functool",{"_index":1118,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{}}],["fundament",{"_index":2385,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{}}],["further",{"_index":1551,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/errors/":{},"user_guide/simulation/":{},"user_guide/uncertainty/":{}},"title":{"user_guide/errors/#further-reading":{},"user_guide/simulation/#further-reading":{},"user_guide/uncertainty/#further-reading":{}}}],["futur",{"_index":1239,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["g",{"_index":321,"text":{"api/backends/":{},"api/backends/#asyncvisabackend":{},"api/backends/#backend-selection-logic":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"profiles/creating/":{},"profiles/creating/#profile-structure":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#custom-uncertainty-models":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{}}],["g1",{"_index":2514,"text":{"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["gain",{"_index":2429,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["galleri",{"_index":2360,"text":{"profiles/creating/":{},"profiles/creating/#tips":{},"profiles/gallery/":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{}},"title":{"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{}}}],["gate",{"_index":641,"text":{"api/common/":{}},"title":{"api/common/#pytestlab.common.enums.BurstMode.GATED":{}}}],["gaussian",{"_index":2551,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{}}],["ge",{"_index":855,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{}},"title":{}}],["gener",{"_index":220,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#recordingbackend":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"contributing/":{},"contributing/#documentation":{},"user_guide/cli/":{},"user_guide/simulation/":{},"user_guide/simulation/#recording-a-simulation-profile":{}},"title":{"api/config/#waveform-generator":{},"api/instruments/#waveform-generator":{},"user_guide/cli/#general-usage":{}}}],["general_specif",{"_index":796,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.general_specifications":{}}}],["generate_profil",{"_index":562,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{}},"title":{"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{}}}],["genericsimulatedmodel",{"_index":1208,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["get",{"_index":145,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"contributing/":{},"installation/":{},"installation/#next-steps":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/connecting/":{},"user_guide/connecting/#next-steps":{},"user_guide/getting_started/":{}},"title":{"contributing/#getting-started":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}}}],["get_acquire_point",{"_index":1633,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{}}}],["get_acquire_setup",{"_index":1635,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{}}}],["get_acquisition_average_count",{"_index":1510,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{}}}],["get_acquisition_mod",{"_index":1632,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{}}}],["get_acquisition_sample_r",{"_index":1649,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{}}}],["get_acquisition_typ",{"_index":1506,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{}}}],["get_al",{"_index":991,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{}}}],["get_all_error",{"_index":1300,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{}}}],["get_amplitud",{"_index":1916,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{}}}],["get_angle_unit",{"_index":1921,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{}}}],["get_arbitrary_waveform_point",{"_index":1924,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{}}}],["get_arbitrary_waveform_sample_r",{"_index":1925,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{}}}],["get_battery_test_measur",{"_index":2158,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{}}}],["get_channel_axi",{"_index":1458,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{}}}],["get_channel_configuration_summari",{"_index":1927,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{}}}],["get_communication_timeout",{"_index":1309,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{}},"title":{"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{}}}],["get_complete_config",{"_index":1928,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}}}],["get_config",{"_index":2080,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}}}],["get_config_from_cdn",{"_index":1172,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}}}],["get_config_from_loc",{"_index":1174,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}}}],["get_configur",{"_index":1701,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{}}}],["get_curr",{"_index":1709,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{}}}],["get_error",{"_index":1302,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{}},"title":{"api/instruments/#pytestlab.instruments.Instrument.get_error":{}}}],["get_event_loop",{"_index":2312,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{}},"title":{}}],["get_free_volatile_arbitrary_memori",{"_index":1946,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{}}}],["get_frequ",{"_index":1931,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{}}}],["get_funct",{"_index":1930,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{}}}],["get_logg",{"_index":1284,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{}},"title":{}}],["get_offset",{"_index":1932,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{}}}],["get_output_load_imped",{"_index":1936,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{}}}],["get_output_polar",{"_index":1956,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{}}}],["get_output_st",{"_index":1711,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{}}}],["get_paramet",{"_index":1095,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{}}}],["get_phas",{"_index":1940,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{}}}],["get_phase_unlock_error_st",{"_index":1960,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{}}}],["get_probe_attenu",{"_index":1461,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{}}}],["get_pulse_duty_cycl",{"_index":1945,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{}}}],["get_pulse_hold_mod",{"_index":1962,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{}}}],["get_pulse_period",{"_index":1963,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{}}}],["get_pulse_transition_both",{"_index":1964,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{}}}],["get_pulse_transition_lead",{"_index":1967,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{}}}],["get_pulse_transition_trail",{"_index":1968,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{}}}],["get_pulse_width",{"_index":1969,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{}}}],["get_ramp_symmetri",{"_index":1943,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{}}}],["get_s_parameter_data",{"_index":2235,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}}}],["get_sampling_r",{"_index":1468,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{}}}],["get_scpi_vers",{"_index":1315,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{}},"title":{"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{}}}],["get_segment_index",{"_index":1659,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{}}}],["get_segmented_count",{"_index":1660,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{}}}],["get_selected_arbitrary_waveform_nam",{"_index":1970,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{}}}],["get_square_duty_cycl",{"_index":1944,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{}}}],["get_square_period",{"_index":1971,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{}}}],["get_sync_output_mod",{"_index":1972,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{}}}],["get_sync_output_polar",{"_index":1975,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{}}}],["get_sync_output_sourc",{"_index":1976,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{}}}],["get_sync_output_st",{"_index":1980,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{}}}],["get_time_axi",{"_index":1470,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{}}}],["get_timeout",{"_index":387,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{}},"title":{"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{}}}],["get_trac",{"_index":2206,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}}}],["get_voltag",{"_index":1714,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{}}}],["get_voltage_autorange_st",{"_index":1981,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{}}}],["get_voltage_limit_high",{"_index":1982,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{}}}],["get_voltage_limit_low",{"_index":1984,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{}}}],["get_voltage_limits_st",{"_index":1985,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{}}}],["get_voltage_unit",{"_index":1919,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{}}}],["getattr",{"_index":557,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["getenv",{"_index":1180,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["git",{"_index":151,"text":{"contributing/":{},"contributing/#development-workflow":{},"contributing/#getting-started":{}},"title":{}}],["github",{"_index":148,"text":{"contributing/":{},"contributing/#development-workflow":{},"contributing/#getting-started":{},"contributing/#need-help":{},"user_guide/getting_started/":{},"user_guide/getting_started/#4-need-help":{}},"title":{}}],["given",{"_index":853,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{}},"title":{}}],["global",{"_index":732,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{}}],["go",{"_index":590,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{}},"title":{}}],["good",{"_index":1733,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{}},"title":{}}],["gpib",{"_index":322,"text":{"api/backends/":{},"api/backends/#asyncvisabackend":{}},"title":{}}],["gradient",{"_index":1124,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{}},"title":{}}],["grid",{"_index":1110,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{}},"title":{}}],["grid_sweep",{"_index":1066,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{}}}],["grid_sweep_impl",{"_index":1065,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.grid_sweep_impl":{}}}],["group",{"_index":1978,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["gt",{"_index":749,"text":{"api/config/":{}},"title":{}}],["gui",{"_index":2391,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{}}],["guid",{"_index":62,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/errors/":{},"api/errors/#usage-example":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#simulation-support":{},"changelog/":{},"changelog/#changed":{},"contributing/":{},"contributing/#contributing-to-pytestlab":{},"installation/":{},"installation/#next-steps":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/cli/":{},"user_guide/cli/#sim":{},"user_guide/cli/#tips":{},"user_guide/connecting/":{},"user_guide/connecting/#next-steps":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#further-reading":{},"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{},"user_guide/getting_started/#4-need-help":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/simulation/":{}},"title":{"user_guide/simulation/#step-by-step-guide":{}}}],["guidanc",{"_index":2273,"text":{"api/instruments/":{},"api/instruments/#extending-drivers":{}},"title":{}}],["gwass",{"_index":1068,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.gwass":{}}}],["gwass_impl",{"_index":1067,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.gwass_impl":{}}}],["h",{"_index":1871,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["ham",{"_index":1540,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["han",{"_index":1387,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{}},"title":{}}],["hand",{"_index":2505,"text":{"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{}},"title":{}}],["handl",{"_index":98,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/errors/":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"changelog/":{},"changelog/#changed_1":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#error-handling":{},"user_guide/uncertainty/":{}},"title":{"user_guide/errors/":{},"user_guide/errors/#error-handling":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{},"user_guide/uncertainty/#how-pytestlab-handles-uncertainty":{}}}],["hann",{"_index":1537,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["happen",{"_index":875,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["happi",{"_index":2510,"text":{"user_guide/getting_started/":{},"user_guide/getting_started/#4-need-help":{}},"title":{}}],["hardwar",{"_index":271,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/backends/#instrument-backends":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"installation/":{},"installation/#visa-backend-support":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{}}],["hasattr",{"_index":558,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{}},"title":{}}],["head",{"_index":1038,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{}}],["head_data",{"_index":1044,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{}},"title":{}}],["header",{"_index":485,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{}},"title":{}}],["health",{"_index":617,"text":{"api/common/":{},"api/common/#common-utilities":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{"api/common/#health-checks":{},"api/common/#pytestlab.common.health":{}}}],["health_check",{"_index":1317,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}}}],["healthreport",{"_index":678,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{"api/common/#pytestlab.common.health.HealthReport":{}}}],["healthstatu",{"_index":685,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{"api/common/#pytestlab.common.health.HealthStatus":{}}}],["height",{"_index":946,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{}},"title":{}}],["help",{"_index":125,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"contributing/":{},"contributing/#code-of-conduct":{},"contributing/#code-style-quality":{},"contributing/#contributing-to-pytestlab":{},"contributing/#need-help":{},"user_guide/cli/":{},"user_guide/cli/#general-usage":{},"user_guide/cli/#tips":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{},"user_guide/getting_started/":{}},"title":{"contributing/#need-help":{},"user_guide/getting_started/#4-need-help":{}}}],["helper",{"_index":1196,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["here",{"_index":478,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#use-async-with-for-cleanup":{}},"title":{}}],["here'",{"_index":2503,"text":{"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{}}],["hide",{"_index":1428,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{}},"title":{}}],["high",{"_index":310,"text":{"api/backends/":{},"api/backends/#overview":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/measurements/":{},"api/measurements/#measurement-session":{},"user_guide/simulation/":{},"user_guide/simulation/#limitations":{},"user_guide/simulation/#recording-a-simulation-profile":{}},"title":{}}],["high_r",{"_index":632,"text":{"api/common/":{}},"title":{"api/common/#pytestlab.common.enums.AcquisitionType.HIGH_RES":{}}}],["higher",{"_index":258,"text":{"installation/":{},"installation/#installation":{}},"title":{}}],["highest",{"_index":1178,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["highli",{"_index":2228,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{}}],["highlight",{"_index":512,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["hint",{"_index":924,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{}},"title":{}}],["hold",{"_index":1616,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{}},"title":{}}],["hold_mod",{"_index":1755,"text":{"api/instruments/":{}},"title":{}}],["home",{"_index":0,"text":{"api/backends/":{},"changelog/":{},"changelog/#changed":{}},"title":{"":{}}}],["hood",{"_index":326,"text":{"api/backends/":{},"api/backends/#asyncvisabackend":{}},"title":{}}],["hook",{"_index":87,"text":{"changelog/":{},"changelog/#added_1":{},"contributing/":{},"contributing/#getting-started":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{}},"title":{}}],["hre",{"_index":633,"text":{"api/common/":{}},"title":{}}],["http",{"_index":152,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"contributing/":{},"contributing/#getting-started":{}},"title":{}}],["http_err",{"_index":1256,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["httpstatuserror",{"_index":494,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["httpx",{"_index":465,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["human",{"_index":2091,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["hz",{"_index":751,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{}},"title":{}}],["i*2",{"_index":2220,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{}}],["i+1",{"_index":1303,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{}},"title":{}}],["id",{"_index":742,"text":{"api/config/":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/cli/":{},"user_guide/cli/#id":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{}},"title":{"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"user_guide/cli/#id":{}}}],["idea",{"_index":137,"text":{"contributing/":{},"contributing/#contributing-to-pytestlab":{}},"title":{}}],["ideal",{"_index":1295,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/measurements/":{},"api/measurements/#overview":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{},"user_guide/cli/":{},"user_guide/cli/#tips":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{}},"title":{}}],["identif",{"_index":1322,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{}},"title":{}}],["identifi",{"_index":724,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["idn",{"_index":1319,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/cli/":{},"user_guide/cli/#id":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["idx",{"_index":2330,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["iec",{"_index":2543,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["ieee",{"_index":1882,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["if_bandwidth",{"_index":804,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{"api/config/#pytestlab.config.vna_config.VNAConfig.if_bandwidth":{}}}],["ignor",{"_index":366,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["imag",{"_index":1553,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["imag_part",{"_index":2250,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["image_data_byt",{"_index":1565,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["imaginari",{"_index":2237,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["imm",{"_index":789,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{}},"title":{}}],["immedi",{"_index":424,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/common/":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{}},"title":{"api/common/#pytestlab.common.enums.TriggerSource.IMMEDIATE":{}}}],["imped",{"_index":1779,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{}},"title":{}}],["implement",{"_index":270,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"installation/":{},"installation/#visa-backend-support":{}},"title":{}}],["impli",{"_index":979,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{}},"title":{}}],["import",{"_index":906,"text":{"api/errors/":{},"api/errors/#usage-example":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/measurements/":{},"api/measurements/#example-usage":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{}}],["improv",{"_index":36,"text":{"changelog/":{},"changelog/#added":{},"changelog/#changed_1":{}},"title":{}}],["inc",{"_index":2517,"text":{"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["includ",{"_index":171,"text":{"api/config/":{},"api/config/#accuracy-specification":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"contributing/":{},"contributing/#getting-started":{},"contributing/#tests":{},"installation/":{},"installation/#full-installation":{},"profiles/creating/":{},"profiles/creating/#profile-structure":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["inclus",{"_index":144,"text":{"contributing/":{},"contributing/#code-of-conduct":{}},"title":{}}],["incorpor",{"_index":1721,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{}},"title":{}}],["incorrect",{"_index":2489,"text":{"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["increas",{"_index":2497,"text":{"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{}},"title":{}}],["independ",{"_index":1689,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["index",{"_index":933,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{}},"title":{}}],["indexerror",{"_index":941,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["individu",{"_index":2449,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["ineffici",{"_index":975,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{}},"title":{}}],["inefficient\u2014especi",{"_index":2388,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{}}],["inf",{"_index":1446,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{}}],["infer",{"_index":1217,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["infin",{"_index":648,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{"api/common/#pytestlab.common.enums.OutputLoadImpedance.INFINITY":{}}}],["influenc",{"_index":1350,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["info",{"_index":471,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["inform",{"_index":888,"text":{"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#tips":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{}},"title":{}}],["inherit",{"_index":2301,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["initi",{"_index":21,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/measurements/":{},"api/measurements/#key-features":{},"changelog/":{},"changelog/#added":{},"changelog/#added_1":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{}}],["initial_percentag",{"_index":1123,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{}},"title":{}}],["initial_st",{"_index":521,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["initialis",{"_index":531,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["inner",{"_index":2224,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{}},"title":{}}],["input",{"_index":818,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{}},"title":{}}],["input_channel",{"_index":1438,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{}}],["insensit",{"_index":1272,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{}},"title":{}}],["insid",{"_index":2404,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{}},"title":{}}],["inspect",{"_index":2335,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/cli/":{},"user_guide/cli/#profile-management-pytestlab-profile":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{}},"title":{}}],["inst",{"_index":1835,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{}},"title":{}}],["inst0",{"_index":2434,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["inst_max_cycl",{"_index":2017,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{}}],["inst_rec",{"_index":2336,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["instal",{"_index":56,"text":{"changelog/":{},"changelog/#changed":{},"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#core-package":{},"installation/#full-installation":{},"installation/#standard-installation":{},"installation/#troubleshooting":{},"installation/#upgrading":{},"installation/#verifying-your-installation":{},"installation/#visa-backend-support":{},"user_guide/cli/":{},"user_guide/cli/#other-useful-commands":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{}},"title":{"installation/":{},"installation/#full-installation":{},"installation/#installation":{},"installation/#standard-installation":{},"installation/#verifying-your-installation":{},"user_guide/getting_started/#1-installation":{}}}],["instanc",{"_index":355,"text":{"api/backends/":{},"api/common/":{},"api/config/":{},"api/errors/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{}}],["instanti",{"_index":1140,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{}},"title":{}}],["instead",{"_index":315,"text":{"api/backends/":{},"api/backends/#overview":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{}},"title":{}}],["instr",{"_index":382,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{}},"title":{}}],["instruct",{"_index":57,"text":{"changelog/":{},"changelog/#changed":{}},"title":{}}],["instrument",{"_index":94,"text":{"api/backends/":{},"api/backends/#asynclambbackend":{},"api/backends/#asyncvisabackend":{},"api/backends/#backend-selection-logic":{},"api/backends/#instrument-backends":{},"api/backends/#overview":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/backends/#simbackendv2":{},"api/config/":{},"api/config/#accuracy-specification":{},"api/config/#configuration-models":{},"api/config/#instrument-configuration-models":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/instruments/":{},"api/instruments/#extending-drivers":{},"api/instruments/#facade-pattern":{},"api/instruments/#instrument-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel_count":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#measurement-session":{},"api/measurements/#overview":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"changelog/":{},"changelog/#added_2":{},"changelog/#changed_1":{},"changelog/#fixed_1":{},"installation/":{},"installation/#next-steps":{},"installation/#troubleshooting":{},"installation/#verifying-your-installation":{},"installation/#visa-backend-support":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#creating-profiles":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#async-in-pytestlab":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{},"user_guide/cli/#edit":{},"user_guide/cli/#id":{},"user_guide/cli/#list":{},"user_guide/cli/#ls":{},"user_guide/cli/#other-useful-commands":{},"user_guide/cli/#profile-management-pytestlab-profile":{},"user_guide/cli/#record":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#connecting-to-instruments":{},"user_guide/connecting/#using-a-bench":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#debugging-tips":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#how-simulation-works":{},"user_guide/simulation/#limitations":{},"user_guide/simulation/#recording-a-simulation-profile":{},"user_guide/simulation/#simulation-mode":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/simulation/#when-to-use-simulation":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#custom-uncertainty-models":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{"api/backends/#instrument-backends":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.instrument":{},"api/config/#base-instrument-model":{},"api/config/#instrument-configuration-models":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.instruments":{},"api/config/#virtual-instrument":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError.instrument":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError.instrument":{},"api/errors/#pytestlab.errors.InstrumentConnectionError.instrument":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.instrument":{},"api/instruments/":{},"api/instruments/#core-instrument-classes":{},"api/instruments/#instrument-drivers":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#supported-instrument-types":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"profiles/gallery/#instrument-profile-gallery":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#connecting-to-instruments":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}}}],["instrument'",{"_index":601,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#creating-profiles":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#debugging-tips":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/simulation/#recording-a-simulation-profile":{}},"title":{}}],["instrument_address",{"_index":461,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{}},"title":{"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.instrument_address":{}}}],["instrument_class",{"_index":1234,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{}},"title":{}}],["instrument_class_to_init",{"_index":1226,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["instrument_config",{"_index":709,"text":{"api/config/":{}},"title":{}}],["instrument_error",{"_index":1320,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{}}],["instrument_idn",{"_index":681,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{"api/common/#pytestlab.common.health.HealthReport.instrument_idn":{}}}],["instrument_typ",{"_index":1229,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{}},"title":{}}],["instrumentbackendbas",{"_index":610,"text":{"api/backends/":{},"api/backends/#extending-backends":{}},"title":{}}],["instrumentcommunicationerror",{"_index":405,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/errors/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{"api/errors/#pytestlab.errors.InstrumentCommunicationError":{}}}],["instrumentconfig",{"_index":710,"text":{"api/config/":{},"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig":{},"api/config/#pytestlab.config.multimeter_config.MultimeterConfig":{},"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig":{},"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig":{},"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig":{},"api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig":{},"api/config/#pytestlab.config.vna_config.VNAConfig":{},"api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{}},"title":{"api/config/#pytestlab.config.instrument_config.InstrumentConfig":{}}}],["instrumentconfigurationerror",{"_index":900,"text":{"api/errors/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{"api/errors/#pytestlab.errors.InstrumentConfigurationError":{}}}],["instrumentconnectionerror",{"_index":374,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/errors/":{},"api/errors/#usage-example":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{}},"title":{"api/errors/#pytestlab.errors.InstrumentConnectionError":{}}}],["instrumentdataerror",{"_index":1493,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["instrumentnotfounderror",{"_index":902,"text":{"api/errors/":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{"api/errors/#pytestlab.errors.InstrumentNotFoundError":{}}}],["instrumentparametererror",{"_index":896,"text":{"api/errors/":{},"api/errors/#usage-example":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{}},"title":{"api/errors/#pytestlab.errors.InstrumentParameterError":{}}}],["int",{"_index":343,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{}},"title":{}}],["int16",{"_index":1864,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["integ",{"_index":1113,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{}},"title":{}}],["integr",{"_index":758,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/measurements/":{},"api/measurements/#key-features":{},"api/measurements/#overview":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#how-pytestlab-handles-uncertainty":{}},"title":{}}],["intend",{"_index":395,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{}},"title":{}}],["interact",{"_index":552,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/cli/":{},"user_guide/cli/#record":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/simulation/":{},"user_guide/simulation/#recording-a-simulation-profile":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["interest",{"_index":124,"text":{"contributing/":{},"contributing/#contributing-to-pytestlab":{}},"title":{}}],["interfac",{"_index":269,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/measurements/":{},"api/measurements/#measurement-session":{},"installation/":{},"installation/#visa-backend-support":{},"user_guide/bench_descriptors/":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{},"user_guide/simulation/":{},"user_guide/simulation/#further-reading":{}},"title":{"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{}}}],["intern",{"_index":645,"text":{"api/common/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{}},"title":{"api/common/#pytestlab.common.enums.ModulationSource.INTERNAL":{}}}],["interv",{"_index":1623,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{}}],["inv",{"_index":1957,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{}},"title":{}}],["invalid",{"_index":898,"text":{"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["invert",{"_index":651,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{}},"title":{"api/common/#pytestlab.common.enums.OutputPolarity.INVERTED":{}}}],["involv",{"_index":2236,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/measurements/":{},"api/measurements/#overview":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#async-in-pytestlab":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{}},"title":{}}],["io",{"_index":276,"text":{"installation/":{},"installation/#visa-backend-support":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{}},"title":{}}],["ip",{"_index":2039,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["ipython",{"_index":2400,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{}},"title":{"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{}}}],["is_404",{"_index":5,"text":{"404/":{}},"title":{}}],["is_autorang",{"_index":2100,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["is_average_mod",{"_index":1507,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["is_dual_channel_data",{"_index":1842,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["is_empti",{"_index":1045,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["is_input_en",{"_index":2162,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{}}}],["is_integ",{"_index":1467,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{}},"title":{}}],["is_run",{"_index":2313,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{}},"title":{}}],["is_valid",{"_index":1096,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{}}}],["iscoroutin",{"_index":561,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{}},"title":{}}],["isdigit",{"_index":1418,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["isinst",{"_index":372,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["isn't",{"_index":427,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["iso",{"_index":2542,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["isoformat",{"_index":2292,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["isol",{"_index":2487,"text":{"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{}},"title":{}}],["issu",{"_index":237,"text":{"contributing/":{},"contributing/#need-help":{},"contributing/#submitting-a-pull-request":{},"installation/":{},"installation/#troubleshooting":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/getting_started/":{},"user_guide/getting_started/#4-need-help":{}},"title":{}}],["issubclass",{"_index":1274,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{}},"title":{}}],["issubdtyp",{"_index":1863,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["it'",{"_index":935,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["item",{"_index":928,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.items":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.items":{}}}],["iter",{"_index":943,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["iter_row",{"_index":944,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{}},"title":{}}],["itertool",{"_index":2324,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["itself",{"_index":1392,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["join",{"_index":956,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"user_guide/getting_started/":{},"user_guide/getting_started/#4-need-help":{}},"title":{}}],["json",{"_index":484,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["jupyt",{"_index":218,"text":{"contributing/":{},"contributing/#documentation":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}},"title":{"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{}}}],["k",{"_index":2035,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["keep",{"_index":15,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"changelog/":{},"changelog/#changelog":{},"contributing/":{},"contributing/#code-of-conduct":{}},"title":{}}],["key",{"_index":927,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#key-features":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys":{},"api/measurements/#key-features":{}}}],["keysight",{"_index":275,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/measurements/":{},"api/measurements/#example-usage":{},"installation/":{},"installation/#visa-backend-support":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#diff":{},"user_guide/cli/#edit":{},"user_guide/cli/#record":{},"user_guide/cli/#reset":{},"user_guide/cli/#show":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"profiles/gallery/#keysight-34460a":{},"profiles/gallery/#keysight-34470a":{},"profiles/gallery/#keysight-dsox1202g":{},"profiles/gallery/#keysight-dsox1204g":{},"profiles/gallery/#keysight-dsox3054g":{},"profiles/gallery/#keysight-e36313a":{},"profiles/gallery/#keysight-e5071c":{},"profiles/gallery/#keysight-edu33212a":{},"profiles/gallery/#keysight-edu34450a":{},"profiles/gallery/#keysight-edu36311a":{},"profiles/gallery/#keysight-el33133a":{},"profiles/gallery/#keysight-msox2024a":{},"profiles/gallery/#keysight-mxr404a":{},"profiles/gallery/#keysight-n9000a":{},"profiles/gallery/#keysight-u2000a":{}}}],["keysightedu36311apsu_scpi",{"_index":1722,"text":{"api/instruments/":{}},"title":{}}],["keyword",{"_index":1232,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#async-in-pytestlab":{}},"title":{}}],["known",{"_index":1647,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{}},"title":{}}],["kv",{"_index":1640,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{}},"title":{}}],["kw",{"_index":2319,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{}},"title":{}}],["kwarg",{"_index":595,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["lab",{"_index":2421,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["laboratori",{"_index":2384,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#working-with-benches":{}},"title":{}}],["lamb",{"_index":308,"text":{"api/backends/":{},"api/backends/#asynclambbackend":{},"api/backends/#overview":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["lamb_logg",{"_index":470,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{}},"title":{}}],["lamb_server_url",{"_index":1222,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["lamb_url",{"_index":1223,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["lambbackend",{"_index":1475,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{}}],["lambda",{"_index":597,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["lambinstru",{"_index":1474,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{}}],["larg",{"_index":1899,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["largest",{"_index":2113,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["last",{"_index":2366,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-34460a":{},"profiles/gallery/#keysight-34470a":{},"profiles/gallery/#keysight-dsox1202g":{},"profiles/gallery/#keysight-dsox1204g":{},"profiles/gallery/#keysight-dsox3054g":{},"profiles/gallery/#keysight-e36313a":{},"profiles/gallery/#keysight-e5071c":{},"profiles/gallery/#keysight-edu33212a":{},"profiles/gallery/#keysight-edu34450a":{},"profiles/gallery/#keysight-edu36311a":{},"profiles/gallery/#keysight-el33133a":{},"profiles/gallery/#keysight-msox2024a":{},"profiles/gallery/#keysight-mxr404a":{},"profiles/gallery/#keysight-n9000a":{},"profiles/gallery/#keysight-u2000a":{}},"title":{}}],["last_modifi",{"_index":698,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended.last_modified":{}}}],["later",{"_index":1299,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/measurements/":{},"api/measurements/#key-features":{}},"title":{}}],["latest",{"_index":281,"text":{"installation/":{},"installation/#upgrading":{}},"title":{}}],["layer",{"_index":2469,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{}},"title":{}}],["lead",{"_index":1752,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{}},"title":{}}],["learn",{"_index":2507,"text":{"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{}},"title":{}}],["left",{"_index":1688,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["legaci",{"_index":1201,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["len",{"_index":745,"text":{"api/config/":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["length",{"_index":1662,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["length_of_length_field",{"_index":1559,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["let'",{"_index":593,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{}},"title":{}}],["level",{"_index":304,"text":{"api/backends/":{},"api/backends/#overview":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/measurements/":{},"api/measurements/#measurement-session":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{}}],["leverag",{"_index":2138,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{}},"title":{}}],["librari",{"_index":267,"text":{"installation/":{},"installation/#troubleshooting":{},"installation/#visa-backend-support":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{}},"title":{}}],["lighter",{"_index":2414,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{}},"title":{}}],["limit",{"_index":48,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"changelog/":{},"changelog/#added":{},"changelog/#added_1":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#further-reading":{},"user_guide/simulation/":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.limits":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/simulation/#limitations":{}}}],["limit{type_str",{"_index":1983,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{}},"title":{}}],["line",{"_index":727,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"user_guide/bench_descriptors/":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{},"user_guide/simulation/":{},"user_guide/simulation/#further-reading":{}},"title":{"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{}}}],["line_regul",{"_index":726,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.line_regulation":{}}}],["linear",{"_index":653,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{"api/common/#pytestlab.common.enums.SweepSpacing.LINEAR":{}}}],["link",{"_index":73,"text":{"changelog/":{},"changelog/#fixed":{},"contributing/":{},"contributing/#need-help":{},"contributing/#submitting-a-pull-request":{},"profiles/creating/":{},"profiles/creating/#profile-structure":{}},"title":{}}],["lint",{"_index":179,"text":{"contributing/":{},"contributing/#code-style-quality":{},"contributing/#getting-started":{}},"title":{}}],["list",{"_index":283,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"installation/":{},"installation/#verifying-your-installation":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/cli/":{},"user_guide/cli/#list":{},"user_guide/cli/#ls":{},"user_guide/cli/#other-useful-commands":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{}},"title":{"user_guide/cli/#list":{}}}],["list_directori",{"_index":1766,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}}}],["list_trial",{"_index":1061,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{}},"title":{"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{}}}],["lit",{"_index":1059,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{}},"title":{}}],["liter",{"_index":2128,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{}},"title":{}}],["live",{"_index":215,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"contributing/":{},"contributing/#documentation":{},"contributing/#tests":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{}},"title":{}}],["load",{"_index":730,"text":{"api/config/":{},"api/config/#configuration-loader":{},"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig":{},"api/config/#pytestlab.config.multimeter_config.MultimeterConfig":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#validate_1":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{}},"title":{"api/config/#dc-active-load":{},"api/instruments/#dc-active-load":{}}}],["load'",{"_index":2142,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{}},"title":{}}],["load_imped",{"_index":1800,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.load_impedance":{}}}],["load_impedance_str",{"_index":1937,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{}}],["load_impedance_v",{"_index":1935,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{}}],["load_profil",{"_index":1170,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["load_regul",{"_index":729,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.load_regulation":{}}}],["loaded_config",{"_index":1246,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["loader",{"_index":880,"text":{"api/config/":{},"api/config/#configuration-loader":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{}},"title":{"api/config/#configuration-loader":{}}}],["local",{"_index":150,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"contributing/":{},"contributing/#documentation":{},"contributing/#getting-started":{}},"title":{}}],["local_spac",{"_index":1119,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{}}],["locat",{"_index":1141,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{}},"title":{}}],["lock",{"_index":352,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{}},"title":{}}],["lock_panel",{"_index":1323,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{}},"title":{"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{}}}],["log",{"_index":429,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#overview":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{}},"title":{"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.log":{}}}],["log_val",{"_index":2015,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{}}],["logarithm",{"_index":654,"text":{"api/common/":{}},"title":{"api/common/#pytestlab.common.enums.SweepSpacing.LOGARITHMIC":{}}}],["logger",{"_index":530,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Instrument":{}},"title":{"api/instruments/#pytestlab.instruments.Multimeter.logger":{}}}],["logger_nam",{"_index":1283,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{}},"title":{}}],["logic",{"_index":103,"text":{"api/backends/":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"changelog/":{},"changelog/#fixed_1":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/simulation/":{},"user_guide/simulation/#limitations":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{"api/backends/#backend-selection-logic":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}}}],["logmag",{"_index":2238,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["long",{"_index":971,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["lookup",{"_index":1652,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["loop",{"_index":1520,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{}},"title":{}}],["low",{"_index":303,"text":{"api/backends/":{},"api/backends/#overview":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{}},"title":{}}],["lower",{"_index":1182,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{}}],["lowest",{"_index":1184,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["ls",{"_index":2472,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/cli/":{},"user_guide/cli/#ls":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{}},"title":{"user_guide/cli/#ls":{}}}],["m",{"_index":162,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#standard-installation":{}},"title":{}}],["made",{"_index":2131,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{}},"title":{}}],["mag_valu",{"_index":1453,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{}}],["magnitud",{"_index":870,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["magnitude_array",{"_index":1548,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["main",{"_index":207,"text":{"api/backends/":{},"api/backends/#instrument-backends":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/instruments/":{},"api/instruments/#instrument-drivers":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/measurements/":{},"api/measurements/#example-usage":{},"contributing/":{},"contributing/#development-workflow":{},"contributing/#submitting-a-pull-request":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{},"profiles/creating/#profile-structure":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-a-bench":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{}}],["maintain",{"_index":253,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"contributing/":{},"contributing/#need-help":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{}},"title":{}}],["make",{"_index":126,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"contributing/":{},"contributing/#contributing-to-pytestlab":{},"contributing/#development-workflow":{},"contributing/#need-help":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{}},"title":{}}],["makedir",{"_index":1243,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["malform",{"_index":2491,"text":{"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["manag",{"_index":89,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/experiments/":{},"api/experiments/#experiments-sweeps":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/measurements/":{},"api/measurements/#key-features":{},"api/measurements/#measurement-session":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"changelog/":{},"changelog/#added_1":{},"changelog/#added_2":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{},"user_guide/cli/#simulation-profile-tools-pytestlab-sim-profile":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{}},"title":{"user_guide/cli/#bench-management-pytestlab-bench":{},"user_guide/cli/#profile-management-pytestlab-profile":{}}}],["manager'",{"_index":903,"text":{"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{}},"title":{}}],["mani",{"_index":841,"text":{"api/config/":{},"api/config/#accuracy-specification":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{}},"title":{}}],["manipul",{"_index":2516,"text":{"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["manual",{"_index":1161,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{}},"title":{}}],["manufactur",{"_index":713,"text":{"api/config/":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#metadata":{},"profiles/creating/#profile-structure":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{"api/config/#pytestlab.config.instrument_config.InstrumentConfig.manufacturer":{}}}],["map",{"_index":1230,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"profiles/creating/":{},"profiles/creating/#creating-profiles":{},"user_guide/simulation/":{},"user_guide/simulation/#how-simulation-works":{}},"title":{}}],["map_to_scpi_pref",{"_index":2011,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{}},"title":{}}],["mappabl",{"_index":2033,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["mark",{"_index":1974,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{}},"title":{}}],["markdown",{"_index":217,"text":{"contributing/":{},"contributing/#documentation":{}},"title":{}}],["marker",{"_index":656,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{}},"title":{"api/common/#pytestlab.common.enums.SyncMode.MARKER":{}}}],["match",{"_index":708,"text":{"api/config/":{},"api/config/#instrument-configuration-models":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#profile-structure":{},"profiles/creating/#tips":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#how-simulation-works":{}},"title":{"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{}}}],["matching_range_spec",{"_index":2109,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["materi",{"_index":33,"text":{"changelog/":{},"changelog/#added":{}},"title":{}}],["math",{"_index":879,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{}}],["math_funct",{"_index":785,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.math_functions":{}}}],["matter",{"_index":2539,"text":{"user_guide/uncertainty/":{}},"title":{"user_guide/uncertainty/#why-uncertainty-matters":{}}}],["max",{"_index":1077,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["max1",{"_index":1079,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{}},"title":{}}],["max2",{"_index":1081,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{}},"title":{}}],["max_cmd_len",{"_index":1897,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["max_errors_to_read",{"_index":1301,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{}},"title":{}}],["max_point",{"_index":1891,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["max_scpi_command_length",{"_index":1898,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["max_val",{"_index":1094,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{}},"title":{}}],["maximum",{"_index":649,"text":{"api/common/":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{"api/common/#pytestlab.common.enums.OutputLoadImpedance.MAXIMUM":{}}}],["maxsplit",{"_index":1641,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{}},"title":{}}],["mea",{"_index":1479,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["mean",{"_index":990,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{}},"title":{}}],["meaning",{"_index":868,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{}}],["meas_current_query_bas",{"_index":1736,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{}},"title":{}}],["meas_nam",{"_index":2333,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["meas_voltage_query_bas",{"_index":1738,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{}},"title":{}}],["measur",{"_index":716,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#experiments-sweeps":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#measurement-session":{},"api/measurements/#overview":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/async_vs_sync/":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/getting_started/":{},"user_guide/getting_started/#4-need-help":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#custom-uncertainty-models":{},"user_guide/uncertainty/#handling-uncertainty":{},"user_guide/uncertainty/#how-pytestlab-handles-uncertainty":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/measurements/":{},"api/measurements/#measurement-session":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{}}}],["measure_async",{"_index":2412,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{}},"title":{}}],["measure_curr",{"_index":2163,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{}}}],["measure_func",{"_index":1120,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{}}],["measure_peak_to_peak",{"_index":1684,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{}}}],["measure_pow",{"_index":2166,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{}}}],["measure_rm",{"_index":1685,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{}}}],["measure_rms_voltag",{"_index":1477,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{}}}],["measure_sync",{"_index":2407,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{}},"title":{}}],["measure_voltag",{"_index":2168,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{}}}],["measure_voltage_dc",{"_index":2343,"text":{"api/measurements/":{},"api/measurements/#example-usage":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{}}],["measure_voltage_peak_to_peak",{"_index":1484,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{}}}],["measure_waveform",{"_index":2398,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{}},"title":{}}],["measurement_accuraci",{"_index":714,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{}},"title":{"api/config/#pytestlab.config.instrument_config.InstrumentConfig.measurement_accuracy":{}}}],["measurement_funct",{"_index":786,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.measurement_functions":{}}}],["measurement_mod",{"_index":2098,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{}},"title":{"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.measurement_mode":{}}}],["measurement_mode_str",{"_index":2093,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["measurement_mode}\\n",{"_index":2132,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{}},"title":{}}],["measurement_name_v",{"_index":2120,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["measurement_plan",{"_index":699,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended.measurement_plan":{}}}],["measurement_result",{"_index":1052,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{}},"title":{}}],["measurement_results_dict",{"_index":1519,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["measurement_typ",{"_index":911,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.measurement_type":{}}}],["measurementdatabas",{"_index":909,"text":{"api/experiments/":{}},"title":{}}],["measurementresult",{"_index":910,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult":{}}}],["measurementsess",{"_index":1075,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#measurement-session":{},"api/measurements/#overview":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{}},"title":{"api/measurements/#pytestlab.measurements.MeasurementSession":{}}}],["measurementvalu",{"_index":986,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{}},"title":{}}],["mechan",{"_index":307,"text":{"api/backends/":{},"api/backends/#overview":{}},"title":{}}],["meet",{"_index":2538,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["member",{"_index":1587,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["memori",{"_index":759,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.memory":{}}}],["messag",{"_index":213,"text":{"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"contributing/":{},"contributing/#code-style-quality":{}},"title":{"api/errors/#pytestlab.errors.DatabaseError.message":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError.message":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError.message":{},"api/errors/#pytestlab.errors.InstrumentConnectionError.message":{},"api/errors/#pytestlab.errors.InstrumentParameterError.message":{}}}],["messagebasedresourc",{"_index":346,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{}},"title":{}}],["metadata",{"_index":1617,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#key-features":{},"api/measurements/#measurement-session":{},"api/measurements/#overview":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#profile-structure":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{"profiles/creating/#metadata":{}}}],["meter",{"_index":829,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}},"title":{"api/config/#power-meter":{},"api/instruments/#power-meter":{}}}],["method",{"_index":416,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#async-in-pytestlab":{},"user_guide/connecting/":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["method'",{"_index":1357,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["metric",{"_index":2159,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{}},"title":{}}],["migrat",{"_index":22,"text":{"changelog/":{},"changelog/#added":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{}},"title":{"user_guide/async_vs_sync/#migrating-synchronous-scripts":{}}}],["millisecond",{"_index":388,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["min",{"_index":1076,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{}}],["min1",{"_index":1078,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{}},"title":{}}],["min2",{"_index":1080,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{}},"title":{}}],["min_length",{"_index":723,"text":{"api/config/":{}},"title":{}}],["min_val",{"_index":1093,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{}},"title":{}}],["minim",{"_index":925,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{}},"title":{}}],["minimum",{"_index":650,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{"api/common/#pytestlab.common.enums.OutputLoadImpedance.MINIMUM":{}}}],["minut",{"_index":2271,"text":{"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/measurements/":{},"api/measurements/#key-features":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#further-reading":{}},"title":{}}],["miss",{"_index":1165,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["mix",{"_index":967,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{}},"title":{}}],["mkdir",{"_index":581,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{}},"title":{}}],["mkdoc",{"_index":34,"text":{"changelog/":{},"changelog/#added":{},"contributing/":{},"contributing/#documentation":{}},"title":{}}],["mkdocstr",{"_index":221,"text":{"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{},"contributing/":{},"contributing/#documentation":{}},"title":{}}],["mmem",{"_index":1834,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["mmemori",{"_index":1833,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["mod_typ",{"_index":1906,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{}},"title":{}}],["mod_upp",{"_index":1907,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{}},"title":{}}],["mode",{"_index":705,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"profiles/creating/":{},"profiles/creating/#profile-structure":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#sim":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{"user_guide/simulation/":{},"user_guide/simulation/#simulation-mode":{}}}],["mode_key",{"_index":1481,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{}},"title":{}}],["mode_map",{"_index":2186,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{}},"title":{}}],["mode_part",{"_index":2086,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["mode_upp",{"_index":1668,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{}},"title":{}}],["model",{"_index":44,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/config/":{},"api/config/#accuracy-specification":{},"api/config/#configuration-models":{},"api/config/#instrument-configuration-models":{},"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig":{},"api/config/#pytestlab.config.multimeter_config.MultimeterConfig":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig":{},"api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"changelog/":{},"changelog/#added":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#creating-profiles":{},"profiles/creating/#metadata":{},"profiles/creating/#profile-structure":{},"profiles/creating/#tips":{},"user_guide/cli/":{},"user_guide/cli/#validate":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#custom-uncertainty-models":{},"user_guide/uncertainty/#further-reading":{}},"title":{"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.model":{},"api/config/#base-instrument-model":{},"api/config/#configuration-models":{},"api/config/#instrument-configuration-models":{},"api/config/#pytestlab.config.instrument_config.InstrumentConfig.model":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{},"user_guide/uncertainty/#custom-uncertainty-models":{}}}],["model_config",{"_index":682,"text":{"api/common/":{},"api/config/":{},"api/instruments/":{}},"title":{"api/common/#pytestlab.common.health.HealthReport.model_config":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.model_config":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.model_config":{},"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.model_config":{},"api/config/#pytestlab.config.instrument_config.InstrumentConfig.model_config":{},"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.model_config":{},"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.model_config":{},"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.model_config":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.model_config":{},"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.model_config":{},"api/config/#pytestlab.config.vna_config.VNAConfig.model_config":{},"api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.model_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.model_config":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.model_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.model_config":{}}}],["model_dump",{"_index":1169,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["model_field",{"_index":2256,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}},"title":{}}],["model_nam",{"_index":446,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.model_name":{}}}],["model_name_for_logg",{"_index":1289,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.close":{}},"title":{}}],["model_valid",{"_index":704,"text":{"api/config/":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{}},"title":{}}],["modern",{"_index":32,"text":{"api/instruments/":{},"api/instruments/#instrument-drivers":{},"changelog/":{},"changelog/#added":{},"changelog/#changed":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{}},"title":{}}],["modul",{"_index":120,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/common/":{},"api/common/#common-utilities":{},"api/experiments/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/measurements/":{},"api/measurements/#key-features":{},"changelog/":{},"changelog/#added_2":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{}},"title":{}}],["modulationsourc",{"_index":629,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{}},"title":{"api/common/#pytestlab.common.enums.ModulationSource":{}}}],["monoton",{"_index":554,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{}},"title":{}}],["mont",{"_index":1132,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{}}],["monte_carlo_sweep",{"_index":1070,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{}}}],["monte_carlo_sweep_impl",{"_index":1069,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep_impl":{}}}],["more",{"_index":612,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/measurements/":{},"api/measurements/#key-features":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/cli/":{},"user_guide/cli/#sim":{},"user_guide/cli/#tips":{},"user_guide/cli/#validate":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{},"user_guide/getting_started/":{},"user_guide/getting_started/#4-need-help":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{}}],["ms",{"_index":454,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{}},"title":{}}],["msg",{"_index":1321,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{}},"title":{}}],["msg_part",{"_index":1313,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{}},"title":{}}],["msox2024a",{"_index":2376,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-msox2024a":{}},"title":{"profiles/gallery/#keysight-msox2024a":{}}}],["multi",{"_index":961,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/measurements/":{},"api/measurements/#overview":{}},"title":{}}],["multilingu",{"_index":31,"text":{"changelog/":{},"changelog/#added":{}},"title":{}}],["multimet",{"_index":113,"text":{"api/config/":{},"api/config/#pytestlab.config.multimeter_config.MultimeterConfig":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"changelog/":{},"changelog/#added_2":{},"profiles/gallery/":{},"profiles/gallery/#keysight-34460a":{},"profiles/gallery/#keysight-34470a":{},"profiles/gallery/#keysight-edu34450a":{}},"title":{"api/config/#multimeter":{},"api/instruments/#multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{}}}],["multimeter'",{"_index":2129,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{}},"title":{}}],["multimeter_config",{"_index":774,"text":{"api/config/":{}},"title":{}}],["multimeterconfig",{"_index":775,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{}},"title":{"api/config/#pytestlab.config.multimeter_config.MultimeterConfig":{}}}],["multimeterconfigresult",{"_index":2081,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{}}}],["multipl",{"_index":296,"text":{"api/backends/":{},"api/backends/#instrument-backends":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/measurements/":{},"api/measurements/#measurement-session":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{}},"title":{}}],["mw",{"_index":2265,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{}}],["mxr404a",{"_index":2377,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-mxr404a":{}},"title":{"profiles/gallery/#keysight-mxr404a":{}}}],["my56430012",{"_index":2442,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{}},"title":{}}],["my57701234",{"_index":2448,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["my_custom_profil",{"_index":2443,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#validate":{}},"title":{}}],["my_custom_scop",{"_index":1271,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{}},"title":{}}],["my_psu_profil",{"_index":2352,"text":{"profiles/creating/":{},"profiles/creating/#example-power-supply-profile":{}},"title":{}}],["mybrand",{"_index":2353,"text":{"profiles/creating/":{},"profiles/creating/#metadata":{}},"title":{}}],["mypi",{"_index":211,"text":{"contributing/":{},"contributing/#code-style-quality":{}},"title":{}}],["n",{"_index":955,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"profiles/gallery/":{},"profiles/gallery/#keysight-34460a":{},"profiles/gallery/#keysight-34470a":{},"profiles/gallery/#keysight-dsox1202g":{},"profiles/gallery/#keysight-dsox1204g":{},"profiles/gallery/#keysight-dsox3054g":{},"profiles/gallery/#keysight-e36313a":{},"profiles/gallery/#keysight-e5071c":{},"profiles/gallery/#keysight-edu33212a":{},"profiles/gallery/#keysight-edu34450a":{},"profiles/gallery/#keysight-edu36311a":{},"profiles/gallery/#keysight-el33133a":{},"profiles/gallery/#keysight-msox2024a":{},"profiles/gallery/#keysight-mxr404a":{},"profiles/gallery/#keysight-n9000a":{},"profiles/gallery/#keysight-u2000a":{}},"title":{}}],["n9000a",{"_index":2378,"text":{"profiles/gallery/":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{"profiles/gallery/#keysight-n9000a":{}}}],["n9000a_sa",{"_index":2379,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-n9000a":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["n_cycl",{"_index":2014,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{}}],["n_pts_int",{"_index":1530,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["name",{"_index":455,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{"api/experiments/#pytestlab.experiments.experiments.Experiment.name":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.names":{},"api/measurements/#pytestlab.measurements.MeasurementSession.name":{}}}],["namedtemporaryfil",{"_index":1213,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["name}\\n",{"_index":1046,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{}},"title":{}}],["nan",{"_index":1107,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{}},"title":{}}],["nation",{"_index":273,"text":{"installation/":{},"installation/#visa-backend-support":{}},"title":{}}],["navig",{"_index":30,"text":{"changelog/":{},"changelog/#added":{},"changelog/#fixed":{}},"title":{}}],["nc_upper",{"_index":2016,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{}}],["ncycl",{"_index":2019,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{}}],["ndarray",{"_index":915,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{}},"title":{}}],["ndim",{"_index":954,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["necessari",{"_index":1448,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{}}],["necessarili",{"_index":431,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{}},"title":{}}],["need",{"_index":225,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"contributing/":{},"contributing/#documentation":{},"installation/":{},"installation/#troubleshooting":{},"installation/#visa-backend-support":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/async_vs_sync/":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/getting_started/":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{"contributing/#need-help":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/getting_started/#4-need-help":{}}}],["neg",{"_index":660,"text":{"api/common/":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{}},"title":{"api/common/#pytestlab.common.enums.TriggerSlope.NEGATIVE":{}}}],["nest",{"_index":968,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{}},"title":{}}],["nest_asyncio",{"_index":2405,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{}},"title":{}}],["network",{"_index":498,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{"api/config/#vector-network-analyzer-vna":{},"api/instruments/#vector-network-analyzer-vna":{}}}],["new",{"_index":23,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#extending-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"changelog/":{},"changelog/#added":{},"changelog/#changed":{},"contributing/":{},"contributing/#tests":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/cli/":{},"user_guide/cli/#sim":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{"profiles/creating/#creating-a-new-profile":{}}}],["new_event_loop",{"_index":2314,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{}},"title":{}}],["newli",{"_index":1255,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["newlin",{"_index":951,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{}},"title":{}}],["next",{"_index":291,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"installation/":{},"user_guide/connecting/":{},"user_guide/getting_started/":{}},"title":{"installation/#next-steps":{},"user_guide/connecting/#next-steps":{},"user_guide/getting_started/#3-next-steps":{}}}],["ni",{"_index":274,"text":{"installation/":{},"installation/#visa-backend-support":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{}},"title":{}}],["noi",{"_index":670,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["nois",{"_index":669,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/common/#pytestlab.common.enums.WaveformType.NOISE":{}}}],["nomin",{"_index":930,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.nominal":{}}}],["nominal_valu",{"_index":1020,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{}}],["non",{"_index":872,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"user_guide/cli/":{},"user_guide/cli/#id":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{}}],["none",{"_index":347,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/common/":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{}},"title":{}}],["noqa",{"_index":537,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{}},"title":{}}],["norm",{"_index":635,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{}},"title":{}}],["norm_id",{"_index":1263,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["norm_max",{"_index":1875,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["norm_min",{"_index":1874,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["normal",{"_index":634,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{}},"title":{"api/common/#pytestlab.common.enums.AcquisitionType.NORMAL":{},"api/common/#pytestlab.common.enums.ArbFilterType.NORMAL":{},"api/common/#pytestlab.common.enums.OutputPolarity.NORMAL":{},"api/common/#pytestlab.common.enums.SyncMode.NORMAL":{}}}],["normalized_identifi",{"_index":1258,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["normpath",{"_index":1264,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["notabl",{"_index":8,"text":{"changelog/":{},"changelog/#changelog":{}},"title":{}}],["note",{"_index":1028,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{}},"title":{"api/experiments/#pytestlab.experiments.experiments.Experiment.notes":{}}}],["notebook",{"_index":219,"text":{"contributing/":{},"contributing/#documentation":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}},"title":{"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{}}}],["notes'}\\n",{"_index":1048,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{}},"title":{}}],["notimplementederror",{"_index":598,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{}},"title":{}}],["now",{"_index":592,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["np",{"_index":919,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{}},"title":{}}],["np_data",{"_index":1849,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["npi",{"_index":1010,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{}},"title":{}}],["num_ch",{"_index":1724,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{}},"title":{}}],["num_channel",{"_index":1726,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{}},"title":{}}],["num_conf_ch",{"_index":1383,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{}},"title":{}}],["num_configured_channel",{"_index":1734,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{}},"title":{}}],["num_factor",{"_index":1466,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{}},"title":{}}],["num_point",{"_index":805,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{"api/config/#pytestlab.config.vna_config.VNAConfig.num_points":{}}}],["num_points_per_channel",{"_index":1852,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["num_points_tot",{"_index":1851,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["num_str",{"_index":1416,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["number",{"_index":457,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel_count":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["numer",{"_index":1464,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{}},"title":{}}],["numeric_respons",{"_index":1953,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{}},"title":{}}],["numpi",{"_index":959,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{}},"title":{}}],["n{head_data",{"_index":1050,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{}},"title":{}}],["o",{"_index":2386,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#async-in-pytestlab":{},"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{}},"title":{}}],["object",{"_index":380,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"user_guide/connecting/":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{"user_guide/uncertainty/#working-with-ufloat-objects":{}}}],["obtain",{"_index":1802,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{}},"title":{}}],["occur",{"_index":385,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#use-async-with-for-cleanup":{}},"title":{}}],["octet",{"_index":499,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{}},"title":{}}],["off",{"_index":1826,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{}},"title":{}}],["offici",{"_index":1252,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["offlin",{"_index":2490,"text":{"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["offset",{"_index":856,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.offset":{}}}],["offset_cmd_v",{"_index":2041,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{}},"title":{}}],["offset_str",{"_index":1460,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{}},"title":{}}],["offset_valu",{"_index":851,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{}},"title":{"api/config/#pytestlab.config.accuracy.AccuracySpec.offset_value":{}}}],["offset_value**2",{"_index":873,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{}},"title":{}}],["offset{type_str",{"_index":1950,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{}},"title":{}}],["ohm",{"_index":1806,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{}}],["ok",{"_index":688,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{"api/common/#pytestlab.common.health.HealthStatus.OK":{}}}],["old",{"_index":75,"text":{"changelog/":{},"changelog/#fixed":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{}},"title":{}}],["oldest",{"_index":1310,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{}},"title":{}}],["olow",{"_index":2365,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-34460a":{},"profiles/gallery/#keysight-34470a":{},"profiles/gallery/#keysight-dsox1202g":{},"profiles/gallery/#keysight-dsox1204g":{},"profiles/gallery/#keysight-dsox3054g":{},"profiles/gallery/#keysight-e36313a":{},"profiles/gallery/#keysight-e5071c":{},"profiles/gallery/#keysight-edu33212a":{},"profiles/gallery/#keysight-edu34450a":{},"profiles/gallery/#keysight-edu36311a":{},"profiles/gallery/#keysight-el33133a":{},"profiles/gallery/#keysight-msox2024a":{},"profiles/gallery/#keysight-mxr404a":{},"profiles/gallery/#keysight-n9000a":{},"profiles/gallery/#keysight-u2000a":{}},"title":{}}],["on",{"_index":706,"text":{"api/config/":{},"api/config/#instrument-configuration-models":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/cli/":{},"user_guide/cli/#sim":{},"user_guide/cli/#validate":{}},"title":{}}],["onboard",{"_index":65,"text":{"changelog/":{},"changelog/#changed":{}},"title":{}}],["onc",{"_index":1270,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["onemeg",{"_index":1444,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{}}],["ongo",{"_index":2160,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{}},"title":{}}],["op",{"_index":536,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{}},"title":{}}],["opc",{"_index":1351,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["open",{"_index":203,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"contributing/":{},"contributing/#development-workflow":{},"contributing/#need-help":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#edit":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/getting_started/":{},"user_guide/getting_started/#4-need-help":{}},"title":{}}],["open_resourc",{"_index":371,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{}},"title":{}}],["oper",{"_index":432,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#overview":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{"api/errors/#pytestlab.errors.DatabaseError.operation":{}}}],["operating_mod",{"_index":797,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.operating_modes":{}}}],["option",{"_index":262,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/config/":{},"api/config/#instrument-configuration-models":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"installation/":{},"installation/#full-installation":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#tips":{}},"title":{}}],["orchestr",{"_index":1150,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/measurements/":{},"api/measurements/#measurement-session":{}},"title":{}}],["org",{"_index":1253,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["origin",{"_index":202,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"contributing/":{},"contributing/#development-workflow":{}},"title":{}}],["original_typ",{"_index":1009,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{}},"title":{}}],["os",{"_index":513,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["osc",{"_index":2408,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{}},"title":{}}],["oscilloscop",{"_index":111,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"changelog/":{},"changelog/#added_2":{},"profiles/gallery/":{},"profiles/gallery/#keysight-dsox1202g":{},"profiles/gallery/#keysight-dsox1204g":{},"profiles/gallery/#keysight-dsox3054g":{},"profiles/gallery/#keysight-msox2024a":{},"profiles/gallery/#keysight-mxr404a":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{"api/config/#oscilloscope":{},"api/instruments/#oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{}}}],["oscilloscope'",{"_index":1586,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{}},"title":{}}],["oscilloscope_config",{"_index":746,"text":{"api/config/":{}},"title":{}}],["oscilloscopeconfig",{"_index":747,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{}},"title":{"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig":{}}}],["oserror",{"_index":1251,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["other_characteristics_typ",{"_index":798,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.other_characteristics_typical":{}}}],["otherwis",{"_index":1099,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{}},"title":{}}],["out",{"_index":244,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"contributing/":{},"contributing/#need-help":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{}},"title":{}}],["outdat",{"_index":74,"text":{"changelog/":{},"changelog/#fixed":{}},"title":{}}],["outp",{"_index":1614,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{}},"title":{}}],["output",{"_index":563,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel_count":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#sim":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{}}}],["output_channel",{"_index":1439,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{}}],["output_fil",{"_index":580,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{}},"title":{}}],["output_path",{"_index":550,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{}},"title":{"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.output_path":{}}}],["output_st",{"_index":1799,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.output_state":{}}}],["output_state_bool",{"_index":1934,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{}}],["output_state_command",{"_index":1729,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{}},"title":{}}],["output_state_enum",{"_index":1933,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{}}],["output_state_query_bas",{"_index":1712,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{}},"title":{}}],["output_state_set_bas",{"_index":1735,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{}},"title":{}}],["outputloadimped",{"_index":624,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{}},"title":{"api/common/#pytestlab.common.enums.OutputLoadImpedance":{}}}],["outputpolar",{"_index":625,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{}},"title":{"api/common/#pytestlab.common.enums.OutputPolarity":{}}}],["output{ch",{"_index":1951,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{}},"title":{}}],["outsid",{"_index":1740,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["over",{"_index":733,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["over_current_protect",{"_index":731,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.over_current_protection":{}}}],["over_voltage_protect",{"_index":736,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.over_voltage_protection":{}}}],["overflow",{"_index":1307,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{}},"title":{}}],["overhead",{"_index":2419,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{}},"title":{}}],["overlap",{"_index":1345,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["overrid",{"_index":606,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["overridden",{"_index":1187,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["overview",{"_index":302,"text":{"api/backends/":{},"api/measurements/":{}},"title":{"api/backends/#overview":{},"api/measurements/#overview":{}}}],["owner",{"_index":2364,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-34460a":{},"profiles/gallery/#keysight-34470a":{},"profiles/gallery/#keysight-dsox1202g":{},"profiles/gallery/#keysight-dsox1204g":{},"profiles/gallery/#keysight-dsox3054g":{},"profiles/gallery/#keysight-e36313a":{},"profiles/gallery/#keysight-e5071c":{},"profiles/gallery/#keysight-edu33212a":{},"profiles/gallery/#keysight-edu34450a":{},"profiles/gallery/#keysight-edu36311a":{},"profiles/gallery/#keysight-el33133a":{},"profiles/gallery/#keysight-msox2024a":{},"profiles/gallery/#keysight-mxr404a":{},"profiles/gallery/#keysight-n9000a":{},"profiles/gallery/#keysight-u2000a":{}},"title":{}}],["p",{"_index":1638,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["p2pv",{"_index":1486,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{}},"title":{}}],["pa",{"_index":2430,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["packag",{"_index":93,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"changelog/":{},"changelog/#added_1":{},"installation/":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#further-reading":{},"user_guide/uncertainty/#how-pytestlab-handles-uncertainty":{}},"title":{"installation/#core-package":{}}}],["page",{"_index":3,"text":{"404/":{},"api/backends/":{},"api/backends/#instrument-backends":{},"api/errors/":{},"api/errors/#exceptions":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"changelog/":{},"changelog/#changed":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{}},"title":{}}],["panel",{"_index":1326,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{}},"title":{}}],["par",{"_index":2227,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{}}],["parallel",{"_index":2395,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{}}],["param",{"_index":1043,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{}},"title":{}}],["param_cmds_for_func",{"_index":2034,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["param_ctx",{"_index":2332,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["param_data",{"_index":2247,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["param_dict",{"_index":1100,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{}},"title":{}}],["param_nam",{"_index":1057,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData.param_names":{}}}],["param_rang",{"_index":1091,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{}},"title":{}}],["param_spac",{"_index":1109,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{}}],["param_str",{"_index":1042,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{}},"title":{}}],["param_str}\\n",{"_index":1049,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{}},"title":{}}],["param_valu",{"_index":1097,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{}},"title":{}}],["paramet",{"_index":452,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/config/":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#debugging-tips":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{}},"title":{"api/errors/#pytestlab.errors.InstrumentParameterError.parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.parameters":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{}}}],["parameter'",{"_index":1346,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["parameter_valu",{"_index":1053,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{}},"title":{}}],["parameterspac",{"_index":1071,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{}}}],["parent",{"_index":575,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{}},"title":{}}],["parquet",{"_index":1011,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{}},"title":{}}],["pars",{"_index":794,"text":{"api/config/":{},"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["parsed_result",{"_index":1451,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{}}],["part",{"_index":1637,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["particularli",{"_index":2423,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#working-with-benches":{}},"title":{}}],["pass",{"_index":370,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{}}],["patch",{"_index":2406,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{}},"title":{}}],["path",{"_index":290,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"installation/":{},"installation/#troubleshooting":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#id":{},"user_guide/cli/#ls":{},"user_guide/cli/#sim":{},"user_guide/cli/#validate":{},"user_guide/cli/#validate_1":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/connecting/#using-autoinstrument":{}},"title":{}}],["path_scpi",{"_index":1832,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["path_to_tri",{"_index":1267,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["pathlik",{"_index":514,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["pattern",{"_index":96,"text":{"api/instruments/":{},"changelog/":{},"changelog/#changed_1":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#how-simulation-works":{}},"title":{"api/instruments/#facade-pattern":{}}}],["peak",{"_index":636,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{}},"title":{"api/common/#pytestlab.common.enums.AcquisitionType.PEAK":{}}}],["pend",{"_index":1344,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["per",{"_index":480,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{}}],["percent_rang",{"_index":874,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{}},"title":{}}],["percent_read",{"_index":849,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{}},"title":{"api/config/#pytestlab.config.accuracy.AccuracySpec.percent_reading":{}}}],["percentag",{"_index":859,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["perform",{"_index":994,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/measurements/":{},"api/measurements/#example-usage":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{}}],["perform_fft",{"_index":993,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{}}}],["period",{"_index":1597,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["period_sec",{"_index":2022,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{}},"title":{}}],["persist",{"_index":2486,"text":{"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{}},"title":{}}],["ph",{"_index":1958,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{}},"title":{}}],["phase",{"_index":1784,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.phase":{}}}],["phase_cmd_v",{"_index":2045,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{}},"title":{}}],["phase{type_str",{"_index":1959,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{}},"title":{}}],["physic",{"_index":266,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"installation/":{},"installation/#visa-backend-support":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{}}],["pil",{"_index":1554,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["ping",{"_index":475,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{}},"title":{}}],["pip",{"_index":173,"text":{"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#core-package":{},"installation/#full-installation":{},"installation/#standard-installation":{},"installation/#upgrading":{},"installation/#visa-backend-support":{},"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{}},"title":{}}],["pipelin",{"_index":2482,"text":{"user_guide/cli/":{},"user_guide/cli/#tips":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{}}],["pkg_profil",{"_index":1204,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["pl",{"_index":920,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["place",{"_index":2355,"text":{"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["placehold",{"_index":1293,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["placeholdermeasurementresult",{"_index":2200,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{}}}],["plain",{"_index":2555,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{}},"title":{}}],["pleas",{"_index":142,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"contributing/":{},"contributing/#code-of-conduct":{},"contributing/#need-help":{}},"title":{}}],["plot",{"_index":263,"text":{"installation/":{},"installation/#full-installation":{},"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{}},"title":{}}],["pm",{"_index":1910,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{}},"title":{}}],["png",{"_index":1557,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["png_data_length",{"_index":1563,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["png_data_length_str",{"_index":1561,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["png_data_start_index",{"_index":1564,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{}}],["po",{"_index":661,"text":{"api/common/":{}},"title":{}}],["poin",{"_index":2232,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{}}],["point",{"_index":761,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.points":{}}}],["polar",{"_index":980,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{}}],["poll",{"_index":1358,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["pop",{"_index":2030,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["posit",{"_index":423,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/common/":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{"api/common/#pytestlab.common.enums.TriggerSlope.POSITIVE":{}}}],["position_str",{"_index":1471,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{}},"title":{}}],["possibl",{"_index":867,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{}},"title":{}}],["post",{"_index":483,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{}}],["post_experi",{"_index":2453,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["pow",{"_index":2234,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{}}],["power",{"_index":718,"text":{"api/config/":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/measurements/":{},"api/measurements/#example-usage":{},"profiles/creating/":{},"profiles/creating/#example-power-supply-profile":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{},"user_guide/simulation/":{},"user_guide/simulation/#simulation-mode":{}},"title":{"api/config/#power-meter":{},"api/config/#power-supply":{},"api/instruments/#power-meter":{},"api/instruments/#power-supply":{},"profiles/creating/#example-power-supply-profile":{}}}],["power_level",{"_index":807,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{"api/config/#pytestlab.config.vna_config.VNAConfig.power_level":{}}}],["power_met",{"_index":833,"text":{"api/config/":{},"profiles/gallery/":{},"profiles/gallery/#keysight-u2000a":{}},"title":{}}],["power_meter_config",{"_index":830,"text":{"api/config/":{}},"title":{}}],["power_suppli",{"_index":725,"text":{"api/config/":{},"profiles/creating/":{},"profiles/creating/#metadata":{},"profiles/gallery/":{},"profiles/gallery/#keysight-e36313a":{},"profiles/gallery/#keysight-edu36311a":{}},"title":{}}],["power_supply_config",{"_index":720,"text":{"api/config/":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{}},"title":{}}],["power_unit",{"_index":837,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig.power_units":{}}}],["powermet",{"_index":2252,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{"api/instruments/#pytestlab.instruments.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{}}}],["powermeterconfig",{"_index":831,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}},"title":{"api/config/#pytestlab.config.power_meter_config.PowerMeterConfig":{}}}],["powersuppli",{"_index":112,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"changelog/":{},"changelog/#added_2":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{}}}],["powersupplyconfig",{"_index":721,"text":{"api/config/":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"profiles/creating/":{},"profiles/creating/#profile-structure":{}},"title":{"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{}}}],["pr",{"_index":231,"text":{"contributing/":{},"contributing/#submitting-a-pull-request":{},"contributing/#tests":{}},"title":{}}],["practic",{"_index":135,"text":{"api/errors/":{},"api/errors/#usage-example":{},"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"contributing/":{},"contributing/#contributing-to-pytestlab":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{},"user_guide/uncertainty/":{}},"title":{"user_guide/errors/#best-practices":{},"user_guide/uncertainty/#best-practices":{}}}],["pre",{"_index":177,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"contributing/":{},"contributing/#code-style-quality":{},"contributing/#development-workflow":{},"contributing/#getting-started":{}},"title":{}}],["pre_experi",{"_index":2451,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["pream",{"_index":1516,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["preambl",{"_index":1489,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}}}],["precis",{"_index":1431,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{}},"title":{}}],["predefin",{"_index":1236,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["prefer",{"_index":988,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["present",{"_index":1221,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{}},"title":{}}],["preset_path",{"_index":1266,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["press",{"_index":2526,"text":{"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["prevent",{"_index":2460,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["preview",{"_index":222,"text":{"contributing/":{},"contributing/#documentation":{}},"title":{}}],["previou",{"_index":1194,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["primari",{"_index":783,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-autoinstrument":{}},"title":{}}],["primarili",{"_index":2069,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{}},"title":{}}],["print",{"_index":433,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/errors/":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#other-useful-commands":{},"user_guide/cli/#sim":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{}}],["prioriti",{"_index":1176,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["privat",{"_index":252,"text":{"contributing/":{},"contributing/#need-help":{}},"title":{}}],["probe",{"_index":1462,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["probe_attenu",{"_index":1574,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["problem",{"_index":2488,"text":{"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{}},"title":{}}],["proce",{"_index":1249,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["process",{"_index":1153,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{"user_guide/async_vs_sync/#why-not-threads-or-processes":{}}}],["processed_channel",{"_index":1497,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["product",{"_index":2325,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["profil",{"_index":76,"text":{"api/backends/":{},"api/backends/#overview":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#recordingbackend":{},"api/backends/#simbackendv2":{},"api/config/":{},"api/config/#configuration-loader":{},"api/config/#configuration-models":{},"api/config/#instrument-configuration-models":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/instruments/":{},"api/instruments/#extending-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"changelog/":{},"changelog/#added_1":{},"changelog/#added_2":{},"changelog/#fixed":{},"installation/":{},"installation/#verifying-your-installation":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#creating-profiles":{},"profiles/creating/#example-power-supply-profile":{},"profiles/creating/#profile-structure":{},"profiles/creating/#tips":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"profiles/gallery/#keysight-34460a":{},"profiles/gallery/#keysight-34470a":{},"profiles/gallery/#keysight-dsox1202g":{},"profiles/gallery/#keysight-dsox1204g":{},"profiles/gallery/#keysight-dsox3054g":{},"profiles/gallery/#keysight-e36313a":{},"profiles/gallery/#keysight-e5071c":{},"profiles/gallery/#keysight-edu33212a":{},"profiles/gallery/#keysight-edu34450a":{},"profiles/gallery/#keysight-edu36311a":{},"profiles/gallery/#keysight-el33133a":{},"profiles/gallery/#keysight-msox2024a":{},"profiles/gallery/#keysight-mxr404a":{},"profiles/gallery/#keysight-n9000a":{},"profiles/gallery/#keysight-u2000a":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{},"user_guide/cli/#diff":{},"user_guide/cli/#edit":{},"user_guide/cli/#list":{},"user_guide/cli/#other-useful-commands":{},"user_guide/cli/#profile-management-pytestlab-profile":{},"user_guide/cli/#record":{},"user_guide/cli/#reset":{},"user_guide/cli/#show":{},"user_guide/cli/#simulation-profile-tools-pytestlab-sim-profile":{},"user_guide/cli/#validate":{},"user_guide/cli/#validate_1":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#debugging-tips":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#further-reading":{},"user_guide/simulation/#how-simulation-works":{},"user_guide/simulation/#limitations":{},"user_guide/simulation/#recording-a-simulation-profile":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#custom-uncertainty-models":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#creating-profiles":{},"profiles/creating/#example-power-supply-profile":{},"profiles/creating/#profile-structure":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"user_guide/cli/#profile-management-pytestlab-profile":{},"user_guide/cli/#simulation-profile-tools-pytestlab-sim-profile":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#recording-a-simulation-profile":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}}}],["profile_key_or_path",{"_index":1198,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["profile_path",{"_index":506,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.profile_path":{}}}],["program",{"_index":295,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"installation/":{},"installation/#next-steps":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/connecting/":{},"user_guide/connecting/#next-steps":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{}},"title":{}}],["programm",{"_index":1719,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{}},"title":{}}],["programmat",{"_index":2136,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{}},"title":{}}],["progress",{"_index":2198,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{}},"title":{}}],["project",{"_index":10,"text":{"changelog/":{},"changelog/#changelog":{},"contributing/":{},"contributing/#contributing-to-pytestlab":{},"contributing/#need-help":{}},"title":{}}],["propag",{"_index":91,"text":{"changelog/":{},"changelog/#added_1":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#handling-uncertainty":{},"user_guide/uncertainty/#how-pytestlab-handles-uncertainty":{},"user_guide/uncertainty/#why-uncertainty-matters":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{"user_guide/uncertainty/#automatic-uncertainty-propagation":{}}}],["properli",{"_index":1490,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/measurements/":{},"api/measurements/#key-features":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["properti",{"_index":931,"text":{"api/experiments/":{},"api/instruments/":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["protect",{"_index":735,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig.protection":{}}}],["protocol",{"_index":337,"text":{"api/backends/":{},"api/backends/#asynclambbackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["prototyp",{"_index":2457,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{}}],["provid",{"_index":234,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#simbackendv2":{},"api/config/":{},"api/config/#configuration-loader":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/instruments/":{},"api/instruments/#instrument-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/measurements/":{},"api/measurements/#measurement-session":{},"contributing/":{},"contributing/#submitting-a-pull-request":{},"profiles/creating/":{},"profiles/creating/#creating-profiles":{},"profiles/creating/#tips":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-instruments":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{},"user_guide/simulation/":{},"user_guide/simulation/#simulation-mode":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{}}],["proxi",{"_index":2477,"text":{"user_guide/cli/":{},"user_guide/cli/#record":{}},"title":{}}],["psu",{"_index":712,"text":{"api/config/":{},"api/errors/":{},"api/errors/#usage-example":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/measurements/":{},"api/measurements/#example-usage":{},"profiles/creating/":{},"profiles/creating/#metadata":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{}},"title":{}}],["psuchannelconfig",{"_index":1700,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{}}}],["psuchannelfacad",{"_index":1706,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{}}}],["pt",{"_index":1884,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["ptl",{"_index":1203,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["ptp",{"_index":1762,"text":{"api/instruments/":{}},"title":{}}],["ptpeak_voltag",{"_index":1761,"text":{"api/instruments/":{}},"title":{}}],["public",{"_index":106,"text":{"changelog/":{},"changelog/#added_2":{}},"title":{}}],["pul",{"_index":672,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["pull",{"_index":204,"text":{"contributing/":{},"contributing/#development-workflow":{}},"title":{"contributing/#submitting-a-pull-request":{}}}],["puls",{"_index":671,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/common/#pytestlab.common.enums.WaveformType.PULSE":{}}}],["pulse_param",{"_index":1793,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{}},"title":{}}],["pulse_width",{"_index":1598,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{}},"title":{}}],["pulsewidth",{"_index":1600,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{}},"title":{}}],["purpos",{"_index":1354,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["push",{"_index":201,"text":{"contributing/":{},"contributing/#development-workflow":{}},"title":{}}],["pwm",{"_index":1911,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{}},"title":{}}],["py",{"_index":338,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.items":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["pydant",{"_index":43,"text":{"api/config/":{},"api/config/#configuration-models":{},"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig":{},"api/config/#pytestlab.config.multimeter_config.MultimeterConfig":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig":{},"api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"changelog/":{},"changelog/#added":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#creating-profiles":{},"profiles/creating/#profile-structure":{},"profiles/creating/#tips":{},"user_guide/cli/":{},"user_guide/cli/#validate":{}},"title":{}}],["pydanticinstrumentconfig",{"_index":1168,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["pypi",{"_index":260,"text":{"installation/":{},"installation/#standard-installation":{}},"title":{}}],["pytest",{"_index":193,"text":{"contributing/":{},"contributing/#development-workflow":{}},"title":{}}],["pytestlab",{"_index":108,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/backends/#instrument-backends":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/common/":{},"api/common/#common-utilities":{},"api/config/":{},"api/config/#configuration-loader":{},"api/config/#configuration-models":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/errors/":{},"api/errors/#exceptions":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#experiments-sweeps":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.items":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{},"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#instrument-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#measurement-session":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"changelog/":{},"changelog/#added_2":{},"contributing/":{},"contributing/#code-of-conduct":{},"contributing/#code-style-quality":{},"contributing/#contributing-to-pytestlab":{},"contributing/#getting-started":{},"contributing/#need-help":{},"installation/":{},"installation/#core-package":{},"installation/#full-installation":{},"installation/#installation":{},"installation/#standard-installation":{},"installation/#upgrading":{},"installation/#verifying-your-installation":{},"installation/#visa-backend-support":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#creating-profiles":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{},"user_guide/cli/#diff":{},"user_guide/cli/#edit":{},"user_guide/cli/#general-usage":{},"user_guide/cli/#id":{},"user_guide/cli/#list":{},"user_guide/cli/#ls":{},"user_guide/cli/#other-useful-commands":{},"user_guide/cli/#record":{},"user_guide/cli/#reset":{},"user_guide/cli/#show":{},"user_guide/cli/#sim":{},"user_guide/cli/#tips":{},"user_guide/cli/#validate":{},"user_guide/cli/#validate_1":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#connecting-to-instruments":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/connecting/#using-a-bench":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#debugging-tips":{},"user_guide/errors/#error-handling":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#simulation-mode":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#further-reading":{},"user_guide/uncertainty/#handling-uncertainty":{},"user_guide/uncertainty/#how-pytestlab-handles-uncertainty":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{"contributing/#contributing-to-pytestlab":{},"user_guide/async_vs_sync/#async-in-pytestlab":{},"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{},"user_guide/cli/#bench-management-pytestlab-bench":{},"user_guide/cli/#profile-management-pytestlab-profile":{},"user_guide/cli/#simulation-profile-tools-pytestlab-sim-profile":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/uncertainty/#how-pytestlab-handles-uncertainty":{}}}],["pytestlab'",{"_index":2350,"text":{"api/measurements/":{},"api/measurements/#key-features":{}},"title":{}}],["pytestlab_simul",{"_index":1181,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["python",{"_index":161,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#installation":{},"installation/#standard-installation":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#tips":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#how-pytestlab-handles-uncertainty":{}},"title":{}}],["python'",{"_index":2389,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{}}],["pyvisa",{"_index":268,"text":{"api/backends/":{},"api/backends/#asyncvisabackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"installation/":{},"installation/#visa-backend-support":{}},"title":{}}],["q_delay",{"_index":402,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{}},"title":{}}],["qualiti",{"_index":208,"text":{"contributing/":{}},"title":{"contributing/#code-style-quality":{}}}],["quantifi",{"_index":2536,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{}}],["quantiti",{"_index":2122,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{}},"title":{}}],["queri",{"_index":396,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/cli/":{},"user_guide/cli/#id":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{}}}],["query_command",{"_index":2104,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["query_instru",{"_index":1341,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["query_raw",{"_index":406,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{}},"title":{"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{}}}],["query_typ",{"_index":1917,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{}},"title":{}}],["question",{"_index":241,"text":{"contributing/":{},"contributing/#need-help":{}},"title":{}}],["queue",{"_index":1286,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{}},"title":{}}],["quick",{"_index":49,"text":{"changelog/":{},"changelog/#changed":{},"user_guide/cli/":{},"user_guide/cli/#tips":{}},"title":{}}],["quickli",{"_index":2534,"text":{"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{}}],["quot",{"_index":1996,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{}},"title":{}}],["quoted_arb_nam",{"_index":1997,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{}},"title":{}}],["r",{"_index":569,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/experiments/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.R":{}}}],["r_spec",{"_index":2112,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["rad",{"_index":1923,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{}},"title":{}}],["radian",{"_index":2010,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{}},"title":{}}],["rais",{"_index":373,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["raise_for_statu",{"_index":491,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["ramp",{"_index":673,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/common/#pytestlab.common.enums.WaveformType.RAMP":{}}}],["rand",{"_index":2518,"text":{"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["randint",{"_index":2519,"text":{"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["random",{"_index":2268,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["rang",{"_index":854,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"profiles/creating/":{},"profiles/creating/#profile-structure":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#debugging-tips":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.ranges":{}}}],["range_for_calc",{"_index":2117,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["range_for_queri",{"_index":2077,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["range_str",{"_index":2088,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["range_v",{"_index":2075,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["range_valu",{"_index":863,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{}},"title":{"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.range_value":{}}}],["range_value_float",{"_index":2090,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["rangemixin'",{"_index":1583,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{}},"title":{}}],["rate",{"_index":740,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{}},"title":{}}],["rate_upp",{"_index":1578,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{}},"title":{}}],["rate{type_str",{"_index":1926,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{}},"title":{}}],["raw",{"_index":407,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{}},"title":{}}],["raw_data",{"_index":2153,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{}},"title":{}}],["raw_data_str",{"_index":2207,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["raw_power_str",{"_index":2260,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{}}],["raw_str",{"_index":1636,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{}},"title":{}}],["raw_wave_data",{"_index":1522,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["rbw",{"_index":828,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{}},"title":{}}],["re",{"_index":428,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["reach",{"_index":243,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"contributing/":{},"contributing/#need-help":{}},"title":{}}],["read",{"_index":391,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#simbackendv2":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"user_guide/errors/":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/simulation/":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"user_guide/errors/#further-reading":{},"user_guide/simulation/#further-reading":{},"user_guide/uncertainty/#further-reading":{}}}],["read_byt",{"_index":414,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{}},"title":{}}],["read_channel",{"_index":1487,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}}}],["read_curr",{"_index":1710,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{}}}],["read_current_ch{channel",{"_index":1737,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{}},"title":{}}],["read_fft_data",{"_index":1536,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}}}],["read_pow",{"_index":2259,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}}}],["read_raw",{"_index":419,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{}},"title":{}}],["read_voltag",{"_index":1715,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{}}}],["read_voltage_ch{channel",{"_index":1739,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{}},"title":{}}],["read_waveform",{"_index":2411,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{}},"title":{}}],["readabl",{"_index":1681,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{}},"title":{}}],["readback",{"_index":1676,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{}},"title":{}}],["readi",{"_index":473,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{}},"title":{}}],["reading_valu",{"_index":862,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{}},"title":{}}],["readm",{"_index":248,"text":{"contributing/":{},"contributing/#need-help":{}},"title":{}}],["real",{"_index":588,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#instrument-drivers":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/cli/":{},"user_guide/cli/#record":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-instruments":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/simulation/":{},"user_guide/simulation/#limitations":{},"user_guide/simulation/#recording-a-simulation-profile":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"user_guide/connecting/#connecting-to-a-real-instrument":{}}}],["real_part",{"_index":2249,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["real_tim",{"_index":1642,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{}},"title":{}}],["realist",{"_index":2262,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"user_guide/simulation/":{},"user_guide/simulation/#simulation-mode":{}},"title":{}}],["rear",{"_index":2127,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{}},"title":{}}],["reason",{"_index":2417,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{}},"title":{}}],["receiv",{"_index":899,"text":{"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{}},"title":{}}],["recogn",{"_index":1233,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{}},"title":{}}],["recommend",{"_index":160,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#standard-installation":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{}},"title":{}}],["reconnect",{"_index":363,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{}},"title":{}}],["record",{"_index":548,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#recordingbackend":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#key-features":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"user_guide/cli/":{},"user_guide/cli/#record":{},"user_guide/cli/#simulation-profile-tools-pytestlab-sim-profile":{},"user_guide/simulation/":{},"user_guide/simulation/#limitations":{},"user_guide/simulation/#recording-a-simulation-profile":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"user_guide/cli/#record":{},"user_guide/simulation/#recording-a-simulation-profile":{}}}],["recorded_sim_profil",{"_index":2528,"text":{"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["recording_backend",{"_index":549,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{}},"title":{}}],["recordingbackend",{"_index":545,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{}},"title":{"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#recordingbackend":{}}}],["refer",{"_index":40,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/config/":{},"api/errors/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/measurements/":{},"changelog/":{},"changelog/#added":{},"changelog/#fixed":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#tips":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/errors/":{},"user_guide/errors/#further-reading":{},"user_guide/simulation/":{},"user_guide/simulation/#further-reading":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"api/errors/#exception-reference":{},"api/measurements/#api-reference":{}}}],["reference_level",{"_index":825,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.reference_level":{}}}],["reflect",{"_index":2245,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["reg_nam",{"_index":2317,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{}},"title":{}}],["regardless",{"_index":1031,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{}},"title":{}}],["regex",{"_index":2512,"text":{"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#how-simulation-works":{}},"title":{}}],["regist",{"_index":472,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["register_instru",{"_index":1268,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{}},"title":{"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{}}}],["regul",{"_index":728,"text":{"api/config/":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{}}],["regular",{"_index":2529,"text":{"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{}},"title":{}}],["relat",{"_index":691,"text":{"api/config/":{},"api/config/#configuration-models":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{}},"title":{}}],["releas",{"_index":107,"text":{"changelog/":{},"changelog/#added_2":{}},"title":{}}],["relev",{"_index":236,"text":{"contributing/":{},"contributing/#submitting-a-pull-request":{}},"title":{}}],["reliabl",{"_index":393,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/errors/":{},"api/errors/#exceptions":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["remain",{"_index":1732,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{}}],["remot",{"_index":439,"text":{"api/backends/":{},"api/backends/#asynclambbackend":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["remov",{"_index":1250,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{}},"title":{}}],["renam",{"_index":2094,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["reorgan",{"_index":63,"text":{"changelog/":{},"changelog/#changed":{}},"title":{}}],["repeat",{"_index":2530,"text":{"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{}},"title":{}}],["repl",{"_index":2524,"text":{"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["replac",{"_index":508,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["report",{"_index":250,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"contributing/":{},"contributing/#need-help":{}},"title":{}}],["repositori",{"_index":147,"text":{"contributing/":{},"contributing/#getting-started":{}},"title":{}}],["repres",{"_index":843,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#how-pytestlab-handles-uncertainty":{}},"title":{}}],["represent",{"_index":952,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{}}],["reproduc",{"_index":2275,"text":{"api/measurements/":{},"api/measurements/#measurement-session":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{}},"title":{}}],["request",{"_index":205,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"contributing/":{},"contributing/#development-workflow":{},"contributing/#need-help":{}},"title":{"contributing/#submitting-a-pull-request":{}}}],["requesterror",{"_index":497,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["requir",{"_index":255,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/config/":{},"api/config/#instrument-configuration-models":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"installation/":{},"installation/#installation":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#custom-uncertainty-models":{},"user_guide/uncertainty/#handling-uncertainty":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{"api/instruments/#pytestlab.instruments.Instrument.requires":{}}}],["reset",{"_index":987,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"user_guide/cli/":{},"user_guide/cli/#reset":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"user_guide/cli/#reset":{}}}],["resist",{"_index":2073,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{}},"title":{}}],["resistor",{"_index":2550,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{}},"title":{}}],["resolut",{"_index":827,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.resolution":{}}}],["resolution_bandwidth",{"_index":826,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{}},"title":{"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig.resolution_bandwidth":{}}}],["resolution_for_queri",{"_index":2078,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["resolution_str",{"_index":2089,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["resolv",{"_index":887,"text":{"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["resolve_sim_profile_path",{"_index":1197,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["resourc",{"_index":360,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/measurements/":{},"api/measurements/#key-features":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["resource_nam",{"_index":1188,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["resourcemanag",{"_index":345,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{}},"title":{}}],["resp",{"_index":543,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{}},"title":{}}],["resp_str_raw",{"_index":1643,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{}},"title":{}}],["respond",{"_index":1653,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["respons",{"_index":238,"text":{"api/backends/":{},"api/backends/#overview":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#recordingbackend":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"contributing/":{},"contributing/#submitting-a-pull-request":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/cli/":{},"user_guide/cli/#record":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#how-simulation-works":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["response_str",{"_index":1463,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{}},"title":{}}],["response{type_str",{"_index":1952,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{}},"title":{}}],["restor",{"_index":1349,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["result",{"_index":560,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#experiments-sweeps":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.items":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#key-features":{},"api/measurements/#overview":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#why-uncertainty-matters":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{"api/experiments/#database-results":{}}}],["result_data",{"_index":1449,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{}},"title":{}}],["result_df",{"_index":1008,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{}},"title":{}}],["result_str",{"_index":1334,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{}},"title":{}}],["retriev",{"_index":1235,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/measurements/":{},"api/measurements/#key-features":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["return",{"_index":389,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.items":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel_count":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{}}],["rev",{"_index":2458,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["revert",{"_index":2479,"text":{"user_guide/cli/":{},"user_guide/cli/#reset":{}},"title":{}}],["review",{"_index":239,"text":{"contributing/":{},"contributing/#submitting-a-pull-request":{}},"title":{}}],["rewritten",{"_index":51,"text":{"changelog/":{},"changelog/#changed":{}},"title":{}}],["rfft",{"_index":1004,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{}},"title":{}}],["rfftfreq",{"_index":1007,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{}},"title":{}}],["rich",{"_index":2140,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{}},"title":{}}],["richer",{"_index":511,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["rigor",{"_index":2537,"text":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{}}],["risk",{"_index":2498,"text":{"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{}},"title":{}}],["rm",{"_index":344,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{}},"title":{"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.rm":{}}}],["rms_voltag",{"_index":1483,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{}},"title":{}}],["robust",{"_index":891,"text":{"api/errors/":{},"api/errors/#exceptions":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{}},"title":{}}],["rohd",{"_index":277,"text":{"installation/":{},"installation/#visa-backend-support":{}},"title":{}}],["role",{"_index":301,"text":{"api/backends/":{},"api/backends/#instrument-backends":{}},"title":{}}],["root",{"_index":1478,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{}},"title":{}}],["routin",{"_index":1332,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{}},"title":{}}],["row",{"_index":940,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["rs232",{"_index":325,"text":{"api/backends/":{},"api/backends/#asyncvisabackend":{}},"title":{}}],["rst",{"_index":1328,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{}},"title":{}}],["rstrip",{"_index":460,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{}},"title":{}}],["ruff",{"_index":209,"text":{"contributing/":{},"contributing/#code-style-quality":{}},"title":{}}],["run",{"_index":191,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"contributing/":{},"contributing/#development-workflow":{},"contributing/#tests":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#other-useful-commands":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}}}],["run_aft",{"_index":1488,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["run_self_test",{"_index":1329,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{}},"title":{"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{}}}],["run_sync",{"_index":365,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{}},"title":{}}],["run_until_complet",{"_index":2315,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{}},"title":{}}],["runaft",{"_index":1494,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["runtim",{"_index":885,"text":{"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{}},"title":{}}],["runtimeerror",{"_index":2322,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["s",{"_index":532,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{}},"title":{}}],["s11",{"_index":809,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["s21",{"_index":810,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["s_param",{"_index":2223,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData.s_params":{}}}],["s_paramet",{"_index":808,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{"api/config/#pytestlab.config.vna_config.VNAConfig.s_parameters":{}}}],["s_params_to_measur",{"_index":2243,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["sa",{"_index":1803,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["safe",{"_index":892,"text":{"api/errors/":{},"api/errors/#exceptions":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{}},"title":{}}],["safe_load",{"_index":1247,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["safe_oper",{"_index":2495,"text":{"user_guide/errors/":{},"user_guide/errors/#use-async-with-for-cleanup":{}},"title":{}}],["safer",{"_index":2415,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{}},"title":{}}],["safeti",{"_index":47,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"changelog/":{},"changelog/#added":{},"changelog/#added_1":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#further-reading":{}},"title":{"user_guide/bench_descriptors/#safety-limits":{}}}],["safety_limit",{"_index":2437,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["safetylimiterror",{"_index":2470,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["same",{"_index":1000,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["sampl",{"_index":763,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{}},"title":{}}],["sample_r",{"_index":1757,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{}},"title":{}}],["samples_list",{"_index":1134,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{}}],["sampling_r",{"_index":762,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{}},"title":{"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.sampling_rate":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.sampling_rate":{}}}],["sampling_rate_float",{"_index":1469,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["sampling_rates_rp",{"_index":787,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.sampling_rates_rps":{}}}],["save",{"_index":587,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/cli/":{},"user_guide/cli/#record":{},"user_guide/cli/#sim":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{}}}],["save_experi",{"_index":2339,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["save_parquet",{"_index":1034,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{}},"title":{"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{}}}],["save_result",{"_index":2454,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["scalabl",{"_index":2420,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{}},"title":{}}],["scalar",{"_index":1027,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{}},"title":{}}],["scale",{"_index":1375,"text":{"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{}}],["scale_str",{"_index":1459,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{}},"title":{}}],["scenario",{"_index":589,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/measurements/":{},"api/measurements/#overview":{}},"title":{}}],["schema",{"_index":690,"text":{"api/config/":{},"api/config/#configuration-models":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["schwarz",{"_index":278,"text":{"installation/":{},"installation/#visa-backend-support":{}},"title":{}}],["scientif",{"_index":128,"text":{"contributing/":{},"contributing/#contributing-to-pytestlab":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{}}],["scope",{"_index":1625,"text":{"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{}}],["scope'",{"_index":1630,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{}},"title":{}}],["scope_sim",{"_index":2484,"text":{"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{}},"title":{}}],["scopeacquisitionfacad",{"_index":1372,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{}}}],["scopechannelfacad",{"_index":1382,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{}}}],["scopetriggerfacad",{"_index":1371,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{}}}],["scpi",{"_index":539,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/backends/#recordingbackend":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"profiles/creating/":{},"profiles/creating/#creating-profiles":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#how-simulation-works":{}},"title":{}}],["scpi_command_str",{"_index":1645,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{}},"title":{}}],["scpi_display_st",{"_index":1400,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{}},"title":{}}],["scpi_func",{"_index":1949,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{}},"title":{}}],["scpi_func_short",{"_index":2027,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["scpi_function_v",{"_index":2076,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["scpi_map",{"_index":564,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.SCPI_MAP":{}}}],["scpi_mod",{"_index":1424,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["scpi_mode_v",{"_index":1669,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{}},"title":{}}],["scpi_param",{"_index":2185,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{}},"title":{}}],["scpi_short_nam",{"_index":1817,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{}},"title":{}}],["scpi_slop",{"_index":1423,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["scpi_stat",{"_index":1433,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{}},"title":{}}],["scpi_suffix",{"_index":1861,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["scpi_to_enum_map",{"_index":2032,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["scpi_to_send",{"_index":2012,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{}},"title":{}}],["scpi_unit",{"_index":1396,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{}},"title":{}}],["scpi_val",{"_index":1673,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{}},"title":{}}],["scpi_window",{"_index":1394,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{}},"title":{}}],["scpionoff",{"_index":620,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{}},"title":{"api/common/#pytestlab.common.enums.SCPIOnOff":{}}}],["screen",{"_index":1624,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{}}],["screenshot",{"_index":1370,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{}}}],["script",{"_index":893,"text":{"api/errors/":{},"api/errors/#exceptions":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#tips":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{"user_guide/async_vs_sync/#migrating-synchronous-scripts":{}}}],["sdat",{"_index":2239,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["seamlessli",{"_index":2349,"text":{"api/measurements/":{},"api/measurements/#key-features":{}},"title":{}}],["search",{"_index":1260,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["sec",{"_index":764,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{}},"title":{}}],["second",{"_index":350,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{}},"title":{}}],["secondari",{"_index":2191,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{}},"title":{}}],["section",{"_index":504,"text":{"api/backends/":{},"api/backends/#simbackendv2":{},"api/common/":{},"api/common/#common-utilities":{},"api/config/":{},"api/config/#accuracy-specification":{},"api/config/#configuration-models":{},"api/experiments/":{},"api/experiments/#experiments-sweeps":{},"api/instruments/":{},"api/instruments/#instrument-drivers":{},"profiles/creating/":{},"profiles/creating/#profile-structure":{},"profiles/creating/#tips":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/simulation/":{},"user_guide/simulation/#how-simulation-works":{}},"title":{}}],["secur",{"_index":249,"text":{"contributing/":{},"contributing/#need-help":{}},"title":{}}],["see",{"_index":247,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/config/":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/errors/":{},"api/errors/#usage-example":{},"api/instruments/":{},"api/instruments/#extending-drivers":{},"api/instruments/#facade-pattern":{},"api/instruments/#simulation-support":{},"api/measurements/":{},"api/measurements/#key-features":{},"contributing/":{},"contributing/#need-help":{},"installation/":{},"installation/#verifying-your-installation":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/cli/":{},"user_guide/cli/#general-usage":{},"user_guide/cli/#sim":{},"user_guide/cli/#tips":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{}}],["seem",{"_index":1408,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["seen",{"_index":2356,"text":{"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{}},"title":{}}],["segment",{"_index":1627,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{}},"title":{}}],["select",{"_index":316,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/backends/#overview":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{}},"title":{"api/backends/#backend-selection-logic":{}}}],["select_arbitrary_waveform",{"_index":1786,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{}}}],["self",{"_index":341,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.items":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["semant",{"_index":17,"text":{"changelog/":{},"changelog/#changelog":{}},"title":{}}],["sen",{"_index":2229,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{}}],["send",{"_index":399,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{}},"title":{}}],["sensor",{"_index":835,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{}}],["sens{channel",{"_index":2254,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{}},"title":{}}],["sent",{"_index":1279,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{}},"title":{}}],["separ",{"_index":333,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{}},"title":{}}],["sequenc",{"_index":1508,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/measurements/":{},"api/measurements/#overview":{}},"title":{}}],["seri",{"_index":1808,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{}},"title":{}}],["serial",{"_index":456,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["serial_numb",{"_index":447,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.serial_number":{},"api/config/#pytestlab.config.instrument_config.InstrumentConfig.serial_number":{}}}],["serv",{"_index":223,"text":{"contributing/":{},"contributing/#documentation":{}},"title":{}}],["server",{"_index":440,"text":{"api/backends/":{},"api/backends/#asynclambbackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["session",{"_index":1088,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#key-features":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/simulation/":{},"user_guide/simulation/#limitations":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/measurements/#measurement-session":{}}}],["set",{"_index":156,"text":{"api/backends/":{},"api/backends/#overview":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/config/":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#overview":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"contributing/":{},"contributing/#getting-started":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#error-handling":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{}}}],["set_acquisition_average_count",{"_index":1661,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{}}}],["set_acquisition_mod",{"_index":1667,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{}}}],["set_acquisition_tim",{"_index":1567,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{}}}],["set_acquisition_typ",{"_index":1670,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{}}}],["set_am_depth",{"_index":1998,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{}}}],["set_am_sourc",{"_index":2002,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{}}}],["set_amplitud",{"_index":1788,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{}}}],["set_angle_unit",{"_index":2006,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{}}}],["set_arbitrary_waveform_sample_r",{"_index":1787,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{}}}],["set_bandwidth_limit",{"_index":1568,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{}}}],["set_battery_cutoff_capac",{"_index":2169,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{}}}],["set_battery_cutoff_tim",{"_index":2173,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{}}}],["set_battery_cutoff_voltag",{"_index":2175,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{}}}],["set_burst_cycl",{"_index":2013,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}}}],["set_burst_mod",{"_index":2020,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{}}}],["set_burst_period",{"_index":2021,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{}}}],["set_channel_axi",{"_index":1571,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{}}}],["set_communication_timeout",{"_index":1339,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{}},"title":{"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{}}}],["set_curr",{"_index":1718,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{}}}],["set_fm_devi",{"_index":2023,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{}}}],["set_frequ",{"_index":1795,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{}}}],["set_funct",{"_index":1785,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}}}],["set_load",{"_index":2176,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{}}}],["set_load_imped",{"_index":1778,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{}}}],["set_measurement_funct",{"_index":2103,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{}},"title":{"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{}}}],["set_mod",{"_index":2183,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{}}}],["set_offset",{"_index":1789,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{}}}],["set_output_load_imped",{"_index":1780,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{}}}],["set_output_polar",{"_index":2043,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{}}}],["set_output_st",{"_index":1777,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{}}}],["set_phas",{"_index":1790,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{}}}],["set_phase_refer",{"_index":2046,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{}}}],["set_phase_unlock_error_st",{"_index":2047,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{}}}],["set_probe_attenu",{"_index":1572,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{}}}],["set_rang",{"_index":2187,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{}}}],["set_sample_r",{"_index":1576,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{}}}],["set_segment_index",{"_index":1675,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{}}}],["set_segmented_count",{"_index":1678,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{}}}],["set_slew_r",{"_index":2188,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{}}}],["set_sweep_spac",{"_index":2048,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{}}}],["set_sweep_start_frequ",{"_index":2049,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{}}}],["set_sweep_stop_frequ",{"_index":2051,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{}}}],["set_sweep_tim",{"_index":2052,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{}}}],["set_sync_output_mod",{"_index":2054,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{}}}],["set_sync_output_polar",{"_index":2055,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{}}}],["set_sync_output_sourc",{"_index":2056,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{}}}],["set_sync_output_st",{"_index":2059,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{}}}],["set_time_axi",{"_index":1501,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{}}}],["set_timeout",{"_index":421,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{}},"title":{"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{}}}],["set_transient_level",{"_index":2190,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{}}}],["set_trigger_slop",{"_index":2060,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{}}}],["set_trigger_sourc",{"_index":2062,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{}},"title":{"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{}}}],["set_valu",{"_index":985,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{}}}],["set_voltag",{"_index":907,"text":{"api/errors/":{},"api/errors/#usage-example":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{}}}],["set_voltage_autorange_st",{"_index":2063,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{}}}],["set_voltage_limit_high",{"_index":2064,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{}}}],["set_voltage_limit_low",{"_index":2065,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{}}}],["set_voltage_limits_st",{"_index":2066,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{}}}],["set_voltage_unit",{"_index":1781,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{}}}],["set_wave_gen_amp",{"_index":1580,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{}}}],["set_wave_gen_freq",{"_index":1582,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{}}}],["set_wave_gen_func",{"_index":1584,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{}}}],["set_wave_gen_offset",{"_index":1589,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{}}}],["set_wgen_dc",{"_index":1590,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{}}}],["set_wgen_nois",{"_index":1592,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{}}}],["set_wgen_puls",{"_index":1596,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{}}}],["set_wgen_ramp",{"_index":1601,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{}}}],["set_wgen_sin",{"_index":1604,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{}}}],["set_wgen_squar",{"_index":1605,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{}}}],["setattr",{"_index":929,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{}},"title":{}}],["setpoint",{"_index":2177,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{}},"title":{}}],["settings_part",{"_index":2087,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["setup",{"_index":1152,"text":{"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}}}],["setup_acquisit",{"_index":2410,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{}},"title":{}}],["setup_arbitrari",{"_index":1782,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{}}}],["setup_dc",{"_index":1791,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{}}}],["setup_dict",{"_index":1639,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{}},"title":{}}],["setup_edg",{"_index":1697,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{}}}],["setup_environ",{"_index":2452,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["setup_puls",{"_index":1792,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{}}}],["setup_ramp",{"_index":1794,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{}}}],["setup_sin",{"_index":1796,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{}}}],["setup_squar",{"_index":1797,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{}}}],["sever",{"_index":2520,"text":{"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{}}],["sg001",{"_index":2445,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["shape",{"_index":964,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{}},"title":{}}],["share",{"_index":615,"text":{"api/common/":{},"api/common/#common-utilities":{}},"title":{}}],["short",{"_index":186,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"contributing/":{},"contributing/#development-workflow":{}},"title":{}}],["short_input",{"_index":2193,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{}}}],["show",{"_index":969,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"profiles/creating/":{},"profiles/creating/#example-power-supply-profile":{},"user_guide/cli/":{},"user_guide/cli/#diff":{},"user_guide/cli/#show":{}},"title":{"user_guide/cli/#show":{}}}],["show_progress",{"_index":2321,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["sig",{"_index":2334,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["sigma",{"_index":846,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.sigma":{}}}],["signal",{"_index":1626,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{}},"title":{}}],["signatur",{"_index":1456,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["signific",{"_index":1292,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{}},"title":{}}],["sim",{"_index":602,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#diff":{},"user_guide/cli/#edit":{},"user_guide/cli/#record":{},"user_guide/cli/#reset":{},"user_guide/cli/#sim":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"user_guide/cli/#sim":{},"user_guide/cli/#simulation-profile-tools-pytestlab-sim-profile":{}}}],["sim_amp",{"_index":2219,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{}}],["sim_backend_v2",{"_index":505,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{}},"title":{}}],["sim_freq",{"_index":2216,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{}}],["sim_pow",{"_index":2263,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{}}],["sim_profil",{"_index":534,"text":{"api/backends/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["sim_profile_path",{"_index":1209,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["sim_psu",{"_index":2450,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["sim_s_params_data",{"_index":2244,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["simbackend",{"_index":509,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["simbackendv2",{"_index":85,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"changelog/":{},"changelog/#added_1":{},"user_guide/simulation/":{},"user_guide/simulation/#simulation-mode":{}},"title":{"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#simbackendv2":{}}}],["similar",{"_index":1297,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{}},"title":{}}],["simpl",{"_index":984,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["simpli",{"_index":2402,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{}},"title":{}}],["simplifi",{"_index":69,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"changelog/":{},"changelog/#changed":{},"profiles/creating/":{},"profiles/creating/#example-power-supply-profile":{}},"title":{}}],["simul",{"_index":37,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/backends/#extending-backends":{},"api/backends/#instrument-backends":{},"api/backends/#overview":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#recordingbackend":{},"api/backends/#simbackendv2":{},"api/config/":{},"api/instruments/":{},"api/instruments/#instrument-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#simulation-support":{},"api/measurements/":{},"api/measurements/#example-usage":{},"changelog/":{},"changelog/#added":{},"changelog/#added_1":{},"changelog/#added_2":{},"changelog/#fixed_1":{},"installation/":{},"installation/#troubleshooting":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#diff":{},"user_guide/cli/#edit":{},"user_guide/cli/#id":{},"user_guide/cli/#record":{},"user_guide/cli/#reset":{},"user_guide/cli/#sim":{},"user_guide/cli/#simulation-profile-tools-pytestlab-sim-profile":{},"user_guide/cli/#tips":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/connecting/#connecting-to-instruments":{},"user_guide/connecting/#next-steps":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{},"user_guide/errors/#further-reading":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#how-simulation-works":{},"user_guide/simulation/#limitations":{},"user_guide/simulation/#recording-a-simulation-profile":{},"user_guide/simulation/#simulation-mode":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended.simulate":{},"api/instruments/#simulation-support":{},"user_guide/cli/#simulation-profile-tools-pytestlab-sim-profile":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#how-simulation-works":{},"user_guide/simulation/#recording-a-simulation-profile":{},"user_guide/simulation/#simulation-mode":{},"user_guide/simulation/#when-to-use-simulation":{}}}],["sin",{"_index":675,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["sine",{"_index":674,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/common/#pytestlab.common.enums.WaveformType.SINE":{}}}],["singl",{"_index":844,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/connecting/":{},"user_guide/connecting/#using-autoinstrument":{}},"title":{}}],["sink",{"_index":2164,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{}},"title":{}}],["sinusoid",{"_index":1820,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["size",{"_index":1771,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["size_str",{"_index":1992,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["skip_check",{"_index":1288,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["sleep",{"_index":412,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["slew",{"_index":2189,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{}},"title":{}}],["slope",{"_index":1403,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{}},"title":{}}],["small",{"_index":878,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{}}],["smallest",{"_index":2110,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["sn",{"_index":2455,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["snapshot",{"_index":1702,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{}}],["soft",{"_index":1631,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{}},"title":{}}],["softwar",{"_index":791,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{}},"title":{}}],["somesyncoscilloscop",{"_index":2409,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{}},"title":{}}],["soon",{"_index":2126,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{}},"title":{}}],["sort",{"_index":2111,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["sort_key",{"_index":585,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{}},"title":{}}],["sour",{"_index":1422,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{}}],["sour1",{"_index":1961,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{}},"title":{}}],["sourc",{"_index":164,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.close":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.close":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.close":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.connect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.disconnect":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.items":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.reset":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.off":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.reset":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aenter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#standard-installation":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/connecting/":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["source1",{"_index":1397,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["source_channel",{"_index":1385,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{}},"title":{}}],["source_channel_to_valid",{"_index":1419,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["sour{ch",{"_index":1823,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{}},"title":{}}],["space",{"_index":1073,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{}},"title":{}}],["span",{"_index":824,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{}},"title":{}}],["sparameterdata",{"_index":2222,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{}}}],["spec",{"_index":776,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig":{},"api/config/#pytestlab.config.multimeter_config.MultimeterConfig":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#best-practices":{}},"title":{}}],["spec'",{"_index":2116,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["special",{"_index":960,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["specif",{"_index":214,"text":{"api/backends/":{},"api/backends/#instrument-backends":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"contributing/":{},"contributing/#code-style-quality":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#profile-structure":{},"user_guide/cli/":{},"user_guide/cli/#diff":{},"user_guide/cli/#edit":{},"user_guide/cli/#reset":{},"user_guide/cli/#show":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/simulation/#how-simulation-works":{},"user_guide/simulation/#recording-a-simulation-profile":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{"api/config/#accuracy-specification":{},"user_guide/errors/#catch-specific-exceptions":{}}}],["specifi",{"_index":607,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/config/":{},"api/config/#instrument-configuration-models":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"user_guide/cli/":{},"user_guide/cli/#edit":{},"user_guide/cli/#validate_1":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["spectrum",{"_index":814,"text":{"api/config/":{},"api/instruments/":{}},"title":{"api/config/#spectrum-analyzer":{},"api/instruments/#spectrum-analyzer":{}}}],["spectrum_analyz",{"_index":820,"text":{"api/config/":{},"profiles/gallery/":{},"profiles/gallery/#keysight-n9000a":{}},"title":{}}],["spectrum_analyzer_config",{"_index":815,"text":{"api/config/":{}},"title":{}}],["spectrumanalys",{"_index":2199,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{"api/instruments/#pytestlab.instruments.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{}}}],["spectrumanalyzerconfig",{"_index":816,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{}},"title":{"api/config/#pytestlab.config.spectrum_analyzer_config.SpectrumAnalyzerConfig":{}}}],["split",{"_index":1314,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{}},"title":{}}],["sqrt",{"_index":848,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{}},"title":{}}],["squ",{"_index":677,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["squar",{"_index":676,"text":{"api/common/":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/common/#pytestlab.common.enums.WaveformType.SQUARE":{}}}],["sr",{"_index":1824,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{}},"title":{}}],["srate",{"_index":638,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{}},"title":{"api/common/#pytestlab.common.enums.ArbAdvanceMode.SRATE":{}}}],["src_ch",{"_index":1977,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{}},"title":{}}],["stack",{"_index":1060,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{}},"title":{}}],["stacklevel",{"_index":1496,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{}},"title":{}}],["standalon",{"_index":2466,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["standard",{"_index":259,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"installation/":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{},"user_guide/uncertainty/#why-uncertainty-matters":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{"installation/#standard-installation":{}}}],["standard_params_set",{"_index":2028,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["star",{"_index":2230,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{}}],["start",{"_index":50,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/measurements/":{},"api/measurements/#example-usage":{},"changelog/":{},"changelog/#changed":{},"contributing/":{},"contributing/#contributing-to-pytestlab":{},"installation/":{},"installation/#next-steps":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/connecting/":{},"user_guide/connecting/#next-steps":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}},"title":{"contributing/#getting-started":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}}}],["start_f",{"_index":2241,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["start_freq",{"_index":1440,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{}}],["start_frequ",{"_index":811,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{"api/config/#pytestlab.config.vna_config.VNAConfig.start_frequency":{}}}],["start_tim",{"_index":553,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{}},"title":{"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.start_time":{}}}],["start_transi",{"_index":2195,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{}}}],["startswith",{"_index":1415,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{}},"title":{}}],["stat",{"_index":1773,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{}},"title":{}}],["state",{"_index":369,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#how-simulation-works":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.state":{}}}],["state_str",{"_index":1713,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{}},"title":{}}],["state_upp",{"_index":1705,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{}},"title":{}}],["statement",{"_index":2464,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["static",{"_index":212,"text":{"contributing/":{},"contributing/#code-style-quality":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["statu",{"_index":476,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.connect":{},"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{}},"title":{"api/common/#pytestlab.common.health.HealthReport.status":{}}}],["status_cod",{"_index":495,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["std_dev",{"_index":1015,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{}}],["stdout",{"_index":594,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{}},"title":{}}],["stem",{"_index":516,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["step",{"_index":292,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#overview":{},"installation/":{},"user_guide/connecting/":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/simulation/":{}},"title":{"api/common/#pytestlab.common.enums.ArbFilterType.STEP":{},"installation/#next-steps":{},"user_guide/connecting/#next-steps":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/simulation/#step-by-step-guide":{}}}],["still",{"_index":1308,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{}}],["stochast",{"_index":1127,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{}},"title":{}}],["stop",{"_index":813,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["stop_f",{"_index":2242,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["stop_freq",{"_index":1441,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{}}],["stop_frequ",{"_index":812,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{"api/config/#pytestlab.config.vna_config.VNAConfig.stop_frequency":{}}}],["stop_transi",{"_index":2196,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{}},"title":{"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{}}}],["storag",{"_index":2348,"text":{"api/measurements/":{},"api/measurements/#key-features":{}},"title":{}}],["store",{"_index":390,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/measurements/":{},"api/measurements/#key-features":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}},"title":{}}],["str",{"_index":342,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query_raw":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/common/":{},"api/common/#pytestlab.common.enums.AcquisitionType":{},"api/common/#pytestlab.common.enums.ArbAdvanceMode":{},"api/common/#pytestlab.common.enums.ArbFilterType":{},"api/common/#pytestlab.common.enums.BurstMode":{},"api/common/#pytestlab.common.enums.ModulationSource":{},"api/common/#pytestlab.common.enums.OutputLoadImpedance":{},"api/common/#pytestlab.common.enums.OutputPolarity":{},"api/common/#pytestlab.common.enums.SCPIOnOff":{},"api/common/#pytestlab.common.enums.SweepSpacing":{},"api/common/#pytestlab.common.enums.SyncMode":{},"api/common/#pytestlab.common.enums.TriggerSlope":{},"api/common/#pytestlab.common.enums.TriggerSource":{},"api/common/#pytestlab.common.enums.VoltageUnit":{},"api/common/#pytestlab.common.enums.WaveformType":{},"api/common/#pytestlab.common.health.HealthStatus":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{}}],["straightforward",{"_index":2483,"text":{"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-instruments":{}},"title":{}}],["strategi",{"_index":1074,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{}},"title":{}}],["stream",{"_index":500,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{}},"title":{}}],["strict",{"_index":1056,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["string",{"_index":317,"text":{"api/backends/":{},"api/backends/#overview":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Instrument.id":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#id":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{}}],["strip",{"_index":403,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{}},"title":{}}],["structur",{"_index":24,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"changelog/":{},"changelog/#added":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#creating-profiles":{},"profiles/creating/#profile-structure":{},"profiles/creating/#tips":{},"user_guide/cli/":{},"user_guide/cli/#validate_1":{}},"title":{"profiles/creating/#profile-structure":{}}}],["stuck",{"_index":2509,"text":{"user_guide/getting_started/":{},"user_guide/getting_started/#4-need-help":{}},"title":{}}],["style",{"_index":68,"text":{"changelog/":{},"changelog/#changed":{},"contributing/":{},"contributing/#code-style-quality":{}},"title":{"contributing/#code-style-quality":{}}}],["sub",{"_index":568,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"user_guide/cli/":{},"user_guide/cli/#general-usage":{}},"title":{}}],["subclass",{"_index":609,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/instruments/":{},"api/instruments/#extending-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Instrument":{}},"title":{}}],["subcommand",{"_index":2481,"text":{"user_guide/cli/":{},"user_guide/cli/#tips":{}},"title":{}}],["submit",{"_index":230,"text":{"contributing/":{},"contributing/#tests":{}},"title":{"contributing/#submitting-a-pull-request":{}}}],["submodul",{"_index":1539,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["success",{"_index":285,"text":{"installation/":{},"installation/#verifying-your-installation":{}},"title":{}}],["successfulli",{"_index":1173,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["such",{"_index":2072,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["suffici",{"_index":1514,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["suffix",{"_index":1214,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["suit",{"_index":192,"text":{"contributing/":{},"contributing/#development-workflow":{},"contributing/#tests":{},"installation/":{},"installation/#visa-backend-support":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{}}],["suitabl",{"_index":579,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["sum",{"_index":1914,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{}},"title":{}}],["summari",{"_index":1037,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{}},"title":{}}],["super",{"_index":894,"text":{"api/errors/":{},"api/errors/#pytestlab.errors.DatabaseError":{},"api/errors/#pytestlab.errors.InstrumentCommunicationError":{},"api/errors/#pytestlab.errors.InstrumentConfigurationError":{},"api/errors/#pytestlab.errors.InstrumentConnectionError":{},"api/errors/#pytestlab.errors.InstrumentNotFoundError":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{}},"title":{}}],["suppli",{"_index":719,"text":{"api/config/":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/measurements/":{},"api/measurements/#example-usage":{},"profiles/creating/":{},"profiles/creating/#example-power-supply-profile":{}},"title":{"api/config/#power-supply":{},"api/instruments/#power-supply":{},"profiles/creating/#example-power-supply-profile":{}}}],["support",{"_index":60,"text":{"api/backends/":{},"api/backends/#asynclambbackend":{},"api/backends/#extending-backends":{},"api/backends/#instrument-backends":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/instruments/":{},"api/instruments/#extending-drivers":{},"api/instruments/#instrument-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel_count":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#simulation-support":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"changelog/":{},"changelog/#added_1":{},"changelog/#changed":{},"installation/":{},"profiles/creating/":{},"profiles/creating/#profile-structure":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{"api/instruments/#simulation-support":{},"api/instruments/#supported-instrument-types":{},"installation/#visa-backend-support":{}}}],["supported_featur",{"_index":687,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{"api/common/#pytestlab.common.health.HealthReport.supported_features":{}}}],["sure",{"_index":2502,"text":{"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{}},"title":{}}],["swe",{"_index":2231,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{}},"title":{}}],["sweep",{"_index":806,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#experiments-sweeps":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{},"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/measurements/":{},"api/measurements/#key-features":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{"api/experiments/#experiments-sweeps":{},"api/experiments/#experiments-sweeps_1":{},"api/experiments/#pytestlab.experiments.sweep":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{}}}],["sweep_orig_str",{"_index":1513,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["sweep_time_sec",{"_index":2053,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{}},"title":{}}],["sweepspac",{"_index":652,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{}},"title":{"api/common/#pytestlab.common.enums.SweepSpacing":{}}}],["switch",{"_index":1436,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{}},"title":{}}],["symmetri",{"_index":1602,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.symmetry":{}}}],["sync",{"_index":294,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"installation/":{},"installation/#next-steps":{},"user_guide/async_vs_sync/":{},"user_guide/connecting/":{},"user_guide/connecting/#next-steps":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{}},"title":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{}}}],["synchron",{"_index":2068,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__enter__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/async_vs_sync/#why-async":{}},"title":{"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{}}}],["synchronize_phase_all_channel",{"_index":2067,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{}}}],["syncmod",{"_index":628,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{}},"title":{"api/common/#pytestlab.common.enums.SyncMode":{}}}],["syntax",{"_index":1889,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{}}],["syntaxerror",{"_index":2403,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{}},"title":{}}],["system",{"_index":117,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"changelog/":{},"changelog/#added_2":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{}},"title":{}}],["system'",{"_index":289,"text":{"installation/":{},"installation/#troubleshooting":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{}},"title":{}}],["t",{"_index":1064,"text":{"api/experiments/":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.T":{}}}],["t_measfunc",{"_index":2296,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{}},"title":{}}],["t_paramiter",{"_index":2320,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{}},"title":{}}],["take",{"_index":1084,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{}},"title":{}}],["target",{"_index":1716,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{}},"title":{}}],["task",{"_index":2390,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{}},"title":{}}],["taught",{"_index":2210,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["tb",{"_index":2307,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__aexit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{}},"title":{}}],["tcp",{"_index":441,"text":{"api/backends/":{},"api/backends/#asynclambbackend":{}},"title":{}}],["tcpip",{"_index":324,"text":{"api/backends/":{},"api/backends/#asyncvisabackend":{}},"title":{}}],["tcpip0",{"_index":2432,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#record":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["teach",{"_index":2532,"text":{"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{}}],["temp",{"_index":1211,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["temperatur",{"_index":2097,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{}}],["tempfil",{"_index":1212,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["templat",{"_index":2358,"text":{"profiles/creating/":{},"profiles/creating/#tips":{}},"title":{}}],["test",{"_index":188,"text":{"api/backends/":{},"api/backends/#simbackendv2":{},"api/errors/":{},"api/errors/#exceptions":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_battery_test":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/measurements/":{},"api/measurements/#example-usage":{},"contributing/":{},"contributing/#development-workflow":{},"contributing/#tests":{},"profiles/creating/":{},"profiles/creating/#tips":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{},"user_guide/getting_started/":{},"user_guide/getting_started/#4-need-help":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{"contributing/#tests":{}}}],["text",{"_index":496,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"user_guide/cli/":{},"user_guide/cli/#edit":{}},"title":{}}],["tf",{"_index":1215,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["thank",{"_index":123,"text":{"contributing/":{},"contributing/#contributing-to-pytestlab":{},"contributing/#need-help":{}},"title":{}}],["theme",{"_index":29,"text":{"changelog/":{},"changelog/#added":{},"changelog/#changed":{}},"title":{}}],["thread",{"_index":334,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/async_vs_sync/#why-not-threads-or-processes":{}},"title":{"user_guide/async_vs_sync/#why-not-threads-or-processes":{}}}],["through",{"_index":1276,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#best-practices":{}},"title":{}}],["throughout",{"_index":618,"text":{"api/common/":{},"api/common/#common-utilities":{},"api/errors/":{},"api/errors/#exceptions":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{}}],["time",{"_index":411,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.get_battery_test_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["time_",{"_index":2174,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{}},"title":{}}],["time_array",{"_index":1543,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["time_values_np",{"_index":1518,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["timebas",{"_index":766,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{}},"title":{}}],["timebase_set",{"_index":765,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.timebase_settings":{}}}],["timeout",{"_index":379,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.Instrument.get_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["timeout_from_config",{"_index":1195,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["timeout_m",{"_index":329,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.get_timeout":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.set_timeout":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.set_communication_timeout":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.timeout_ms":{}}}],["timeout_override_m",{"_index":1149,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["timeout_v",{"_index":426,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{}},"title":{}}],["timeout}",{"_index":1352,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{}}],["timer",{"_index":663,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{}},"title":{"api/common/#pytestlab.common.enums.TriggerSource.TIMER":{}}}],["timestamp",{"_index":912,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.timestamp":{}}}],["tip",{"_index":2357,"text":{"profiles/creating/":{},"user_guide/cli/":{},"user_guide/errors/":{}},"title":{"profiles/creating/#tips":{},"user_guide/cli/#tips":{},"user_guide/errors/#debugging-tips":{}}}],["titl",{"_index":2,"text":{"404/":{},"contributing/":{},"contributing/#submitting-a-pull-request":{},"profiles/creating/":{},"profiles/creating/#example-power-supply-profile":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["tlevel",{"_index":2192,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{}},"title":{}}],["to_dict",{"_index":992,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.items":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.keys":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{}}}],["to_list",{"_index":1026,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{}},"title":{}}],["to_numpi",{"_index":1544,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["to_thread",{"_index":364,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{}},"title":{}}],["tobyt",{"_index":1872,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["togeth",{"_index":2425,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#working-with-benches":{}},"title":{}}],["toggl",{"_index":2147,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{}},"title":{}}],["toler",{"_index":1876,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["tool",{"_index":172,"text":{"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#full-installation":{},"user_guide/cli/":{}},"title":{"user_guide/cli/#simulation-profile-tools-pytestlab-sim-profile":{}}}],["toolbox",{"_index":2500,"text":{"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}},"title":{}}],["top",{"_index":2401,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{}}],["topic",{"_index":2508,"text":{"user_guide/getting_started/":{},"user_guide/getting_started/#4-need-help":{}},"title":{}}],["total",{"_index":739,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["total_pow",{"_index":738,"text":{"api/config/":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{}},"title":{"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.total_power":{}}}],["total_seg",{"_index":1677,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{}},"title":{}}],["tour",{"_index":2272,"text":{"api/instruments/":{},"api/instruments/#facade-pattern":{},"api/measurements/":{},"api/measurements/#key-features":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#further-reading":{}},"title":{}}],["tqdm",{"_index":2327,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["trac",{"_index":2208,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{}}],["trace",{"_index":1443,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{}}],["traceabl",{"_index":702,"text":{"api/config/":{},"api/measurements/":{},"api/measurements/#key-features":{},"api/measurements/#measurement-session":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended.traceability":{}}}],["trace{channel",{"_index":2209,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{}}],["track",{"_index":2346,"text":{"api/measurements/":{},"api/measurements/#key-features":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#why-uncertainty-matters":{}},"title":{}}],["tracker",{"_index":1029,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{}},"title":{}}],["trail",{"_index":1754,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{}},"title":{}}],["tran",{"_index":1965,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{}},"title":{}}],["transfer",{"_index":1634,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["transfer_type_log_msg",{"_index":1862,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{}},"title":{}}],["transform",{"_index":997,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{}},"title":{}}],["transient",{"_index":2143,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.stop_transient":{}},"title":{}}],["transit",{"_index":1750,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{}},"title":{}}],["transition_both",{"_index":1749,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{}},"title":{}}],["transition_lead",{"_index":1751,"text":{"api/instruments/":{}},"title":{}}],["transition_trail",{"_index":1753,"text":{"api/instruments/":{}},"title":{}}],["transmiss",{"_index":2246,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["transport",{"_index":306,"text":{"api/backends/":{},"api/backends/#overview":{}},"title":{}}],["trg",{"_index":2071,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{}},"title":{}}],["tri",{"_index":361,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/errors/":{},"api/errors/#usage-example":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#use-async-with-for-cleanup":{}},"title":{}}],["trial",{"_index":1030,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__len__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.list_trials":{}},"title":{}}],["trial_df",{"_index":1054,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{}},"title":{}}],["triangl",{"_index":1805,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{}},"title":{}}],["tricki",{"_index":2101,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["trig",{"_index":1421,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["trigger",{"_index":603,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/common/":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.start_transient":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{"api/common/#pytestlab.common.enums.ArbAdvanceMode.TRIGGER":{},"api/common/#pytestlab.common.enums.BurstMode.TRIGGERED":{},"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.trigger":{}}}],["trigger_channel_for_level",{"_index":1698,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{}},"title":{}}],["trigger_now",{"_index":2070,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{}}}],["trigger_sourc",{"_index":788,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.multimeter_config.MultimeterConfig.trigger_source":{}}}],["trigger_typ",{"_index":1402,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{}},"title":{}}],["triggerslop",{"_index":622,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{}},"title":{"api/common/#pytestlab.common.enums.TriggerSlope":{}}}],["triggersourc",{"_index":627,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{}},"title":{"api/common/#pytestlab.common.enums.TriggerSource":{}}}],["trigger{ch",{"_index":2061,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{}},"title":{}}],["troubleshoot",{"_index":286,"text":{"installation/":{},"user_guide/connecting/":{}},"title":{"installation/#troubleshooting":{},"user_guide/connecting/#troubleshooting-connections":{}}}],["true",{"_index":6,"text":{"404/":{},"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.query":{},"api/common/":{},"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.is_input_enabled":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_capacity":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_timer":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.Instrument.clear_status":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.on":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#simulation-support":{},"api/measurements/":{},"api/measurements/#example-usage":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{}}],["trueform",{"_index":1809,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{}},"title":{}}],["tst",{"_index":1333,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{}},"title":{}}],["tupl",{"_index":523,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.f_evaluate":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{}},"title":{}}],["turn",{"_index":1390,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{}},"title":{}}],["two",{"_index":1013,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"profiles/creating/":{},"profiles/creating/#profile-structure":{}},"title":{}}],["txt",{"_index":1770,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{}},"title":{}}],["type",{"_index":100,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.read":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/config/":{},"api/config/#instrument-configuration-models":{},"api/errors/":{},"api/errors/#exceptions":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.enable_input":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.short_input":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.from_config":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.id":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"changelog/":{},"changelog/#changed_1":{},"contributing/":{},"contributing/#code-style-quality":{},"profiles/gallery/":{},"profiles/gallery/#keysight-34460a":{},"profiles/gallery/#keysight-34470a":{},"profiles/gallery/#keysight-dsox1202g":{},"profiles/gallery/#keysight-dsox1204g":{},"profiles/gallery/#keysight-dsox3054g":{},"profiles/gallery/#keysight-e36313a":{},"profiles/gallery/#keysight-e5071c":{},"profiles/gallery/#keysight-edu33212a":{},"profiles/gallery/#keysight-edu34450a":{},"profiles/gallery/#keysight-edu36311a":{},"profiles/gallery/#keysight-el33133a":{},"profiles/gallery/#keysight-msox2024a":{},"profiles/gallery/#keysight-mxr404a":{},"profiles/gallery/#keysight-n9000a":{},"profiles/gallery/#keysight-u2000a":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#error-handling":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.type":{},"api/instruments/#supported-instrument-types":{}}}],["type_key",{"_index":1273,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{}},"title":{}}],["type_str",{"_index":1918,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{}},"title":{}}],["typeerror",{"_index":938,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["typer",{"_index":2473,"text":{"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{}},"title":{}}],["typevar",{"_index":1063,"text":{"api/experiments/":{}},"title":{}}],["typic",{"_index":312,"text":{"api/backends/":{},"api/backends/#overview":{},"api/config/":{},"api/config/#accuracy-specification":{},"api/config/#pytestlab.config.accuracy.AccuracySpec":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["typinglist",{"_index":921,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{}},"title":{}}],["tz",{"_index":2281,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{"api/measurements/#pytestlab.measurements.MeasurementSession.tz":{}}}],["u",{"_index":1395,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{}},"title":{}}],["u2000a",{"_index":2380,"text":{"profiles/gallery/":{}},"title":{"profiles/gallery/#keysight-u2000a":{}}}],["u2000a_pm",{"_index":2381,"text":{"profiles/gallery/":{},"profiles/gallery/#keysight-u2000a":{}},"title":{}}],["ufloat",{"_index":918,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{"user_guide/uncertainty/#working-with-ufloat-objects":{}}}],["unavail",{"_index":1476,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-simulated-instrument":{}},"title":{}}],["uncertainti",{"_index":90,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_current":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_power":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"changelog/":{},"changelog/#added_1":{},"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#custom-uncertainty-models":{},"user_guide/uncertainty/#further-reading":{},"user_guide/uncertainty/#handling-uncertainty":{},"user_guide/uncertainty/#how-pytestlab-handles-uncertainty":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{},"user_guide/uncertainty/#why-uncertainty-matters":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#custom-uncertainty-models":{},"user_guide/uncertainty/#handling-uncertainty":{},"user_guide/uncertainty/#how-pytestlab-handles-uncertainty":{},"user_guide/uncertainty/#why-uncertainty-matters":{}}}],["under",{"_index":25,"text":{"api/backends/":{},"api/backends/#asyncvisabackend":{},"changelog/":{},"changelog/#added":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["underli",{"_index":1290,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{}},"title":{}}],["understand",{"_index":889,"text":{"api/errors/":{},"api/errors/#exceptions":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{}},"title":{}}],["unexpect",{"_index":384,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["unifi",{"_index":311,"text":{"api/backends/":{},"api/backends/#overview":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-instruments":{}},"title":{}}],["uniform",{"_index":2270,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{}}],["union",{"_index":914,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{}},"title":{}}],["uniqu",{"_index":453,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/config/":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["unit",{"_index":226,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_parameter":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"contributing/":{},"contributing/#tests":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#working-with-benches":{}},"title":{"api/experiments/#pytestlab.experiments.results.MeasurementResult.units":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.units":{}}}],["unit_str",{"_index":2095,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{}},"title":{}}],["unit_upp",{"_index":2007,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{}},"title":{}}],["units_v",{"_index":2119,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["units}\\n",{"_index":2133,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult.__str__":{}},"title":{}}],["unknown",{"_index":686,"text":{"api/common/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/common/#pytestlab.common.health.HealthStatus.UNKNOWN":{}}}],["unlock",{"_index":1324,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{}},"title":{}}],["unreleas",{"_index":19,"text":{"changelog/":{}},"title":{"changelog/#unreleased":{}}}],["unrespons",{"_index":2387,"text":{"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{}}],["unsupport",{"_index":1021,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{}},"title":{}}],["untitl",{"_index":2288,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["unus",{"_index":1409,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["up",{"_index":157,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/measurements/":{},"api/measurements/#key-features":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{},"contributing/":{},"contributing/#getting-started":{},"contributing/#submitting-a-pull-request":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}},"title":{}}],["updat",{"_index":58,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"changelog/":{},"changelog/#changed":{},"contributing/":{},"contributing/#development-workflow":{},"contributing/#documentation":{},"profiles/gallery/":{},"profiles/gallery/#keysight-34460a":{},"profiles/gallery/#keysight-34470a":{},"profiles/gallery/#keysight-dsox1202g":{},"profiles/gallery/#keysight-dsox1204g":{},"profiles/gallery/#keysight-dsox3054g":{},"profiles/gallery/#keysight-e36313a":{},"profiles/gallery/#keysight-e5071c":{},"profiles/gallery/#keysight-edu33212a":{},"profiles/gallery/#keysight-edu34450a":{},"profiles/gallery/#keysight-edu36311a":{},"profiles/gallery/#keysight-el33133a":{},"profiles/gallery/#keysight-msox2024a":{},"profiles/gallery/#keysight-mxr404a":{},"profiles/gallery/#keysight-n9000a":{},"profiles/gallery/#keysight-u2000a":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{}},"title":{}}],["upgrad",{"_index":280,"text":{"installation/":{},"installation/#upgrading":{}},"title":{"installation/#upgrading":{}}}],["upon",{"_index":1367,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{}}],["upper",{"_index":1219,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.configure_transient_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_trigger_source":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["url",{"_index":443,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{}},"title":{}}],["us",{"_index":92,"text":{"api/backends/":{},"api/backends/#asyncvisabackend":{},"api/backends/#instrument-backends":{},"api/backends/#overview":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#recordingbackend":{},"api/common/":{},"api/common/#common-utilities":{},"api/config/":{},"api/config/#accuracy-specification":{},"api/config/#configuration-models":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/errors/":{},"api/errors/#exceptions":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.Sweep":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/instruments/":{},"api/instruments/#extending-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_type":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.from_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.configure_measurement":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#simulation-support":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"changelog/":{},"changelog/#added_1":{},"contributing/":{},"contributing/#code-style-quality":{},"contributing/#development-workflow":{},"contributing/#documentation":{},"contributing/#need-help":{},"installation/":{},"installation/#standard-installation":{},"installation/#visa-backend-support":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#creating-profiles":{},"profiles/creating/#tips":{},"profiles/gallery/":{},"profiles/gallery/#instrument-profile-gallery":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#async-in-pytestlab":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#what-if-i-need-to-call-async-code-from-sync-code":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/cli/":{},"user_guide/cli/#general-usage":{},"user_guide/cli/#tips":{},"user_guide/connecting/":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/getting_started/":{},"user_guide/getting_started/#1-installation":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#how-simulation-works":{},"user_guide/simulation/#recording-a-simulation-profile":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#best-practices":{},"user_guide/uncertainty/#custom-uncertainty-models":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{"user_guide/async_vs_sync/#can-i-use-pytestlab-synchronously":{},"user_guide/cli/#other-useful-commands":{},"user_guide/connecting/#using-a-bench":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/simulation/#when-to-use-simulation":{}}}],["usag",{"_index":905,"text":{"api/errors/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{},"api/measurements/":{},"api/measurements/#key-features":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{},"user_guide/cli/":{},"user_guide/cli/#tips":{}},"title":{"api/errors/#usage-example":{},"api/measurements/#example-usage":{},"user_guide/cli/#general-usage":{}}}],["usb",{"_index":323,"text":{"api/backends/":{},"api/backends/#asyncvisabackend":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{}},"title":{}}],["usb0",{"_index":2439,"text":{"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{}},"title":{}}],["use_binari",{"_index":1841,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{}},"title":{}}],["user",{"_index":61,"text":{"api/backends/":{},"api/backends/#overview":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/config/":{},"api/config/#configuration-loader":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"changelog/":{},"changelog/#changed":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#diff":{},"user_guide/cli/#edit":{},"user_guide/cli/#reset":{},"user_guide/cli/#tips":{},"user_guide/getting_started/":{},"user_guide/getting_started/#4-need-help":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["user_override_root",{"_index":533,"text":{"api/backends/":{}},"title":{"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.USER_OVERRIDE_ROOT":{}}}],["user_profil",{"_index":1199,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["user_sim_profil",{"_index":1202,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["userwarn",{"_index":1966,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{}},"title":{}}],["usual",{"_index":1575,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{}}],["utc",{"_index":2282,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession":{}},"title":{}}],["utf",{"_index":489,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{}},"title":{}}],["util",{"_index":614,"text":{"api/common/":{},"api/common/#common-utilities":{},"api/config/":{},"api/config/#configuration-loader":{},"api/experiments/":{},"api/experiments/#experiments-sweeps":{}},"title":{"api/common/":{},"api/common/#common-utilities":{}}}],["uw",{"_index":2267,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{}}],["v",{"_index":858,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{}}],["v0",{"_index":1593,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{}},"title":{}}],["v1",{"_index":1594,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{}},"title":{}}],["v2",{"_index":1373,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{}},"title":{}}],["v_float",{"_index":1747,"text":{"api/instruments/":{}},"title":{}}],["v_str_hold",{"_index":1756,"text":{"api/instruments/":{}},"title":{}}],["val",{"_index":957,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["val_to_set",{"_index":1693,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["valid",{"_index":882,"text":{"api/config/":{},"api/config/#configuration-loader":{},"api/config/#pytestlab.config.loader.ConfigLoader":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.register_instrument":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Instrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#creating-profiles":{},"profiles/creating/#tips":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#other-useful-commands":{},"user_guide/cli/#profile-management-pytestlab-profile":{},"user_guide/cli/#tips":{},"user_guide/cli/#validate":{},"user_guide/cli/#validate_1":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{}},"title":{"user_guide/cli/#validate":{},"user_guide/cli/#validate_1":{}}}],["valid_mod",{"_index":1908,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{}},"title":{}}],["valid_rang",{"_index":897,"text":{"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{}},"title":{"api/errors/#pytestlab.errors.InstrumentParameterError.valid_range":{}}}],["valid_region",{"_index":1116,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{}}],["valid_scpi_unit",{"_index":2008,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{}},"title":{}}],["valid_valu",{"_index":1579,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{}},"title":{}}],["validate_assign",{"_index":684,"text":{"api/common/":{},"api/config/":{}},"title":{}}],["validate_cal",{"_index":1377,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.auto_scale":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_sampling_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.screenshot":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_acquisition_time":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.analyze_all_segments":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_average_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segment_index":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_segmented_count":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.channel":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{}},"title":{}}],["validated_ch_num",{"_index":1828,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{}},"title":{}}],["valu",{"_index":394,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.get_timeout":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__str__":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__delitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__getitem__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__iter__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__len__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.get_all":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.set_values":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.to_dict":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.from_session":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FFTResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.FRanalysisResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.display_channel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.fft_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.lock_panel":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_bandwidth_limit":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_sample_rate":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.set_acquisition_type":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.display":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{},"profiles/creating/":{},"profiles/creating/#profile-structure":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#automatic-uncertainty-propagation":{},"user_guide/uncertainty/#custom-uncertainty-models":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}},"title":{"api/errors/#pytestlab.errors.InstrumentParameterError.value":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.values":{}}}],["value_list",{"_index":2323,"text":{"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["value_to_format",{"_index":2036,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{}}],["value_to_return",{"_index":1480,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_current":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{}},"title":{}}],["valueerror",{"_index":422,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/config/#pytestlab.config.bench_config.BenchConfigExtended.check_instruments":{},"api/config/#pytestlab.config.power_supply_config.PowerSupplyConfig.check_channel_ids_unique":{},"api/errors/":{},"api/errors/#pytestlab.errors.InstrumentParameterError":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.get_parameters":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.output":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.acquire":{},"api/measurements/#pytestlab.measurements.MeasurementSession.instrument":{},"api/measurements/#pytestlab.measurements.MeasurementSession.parameter":{}},"title":{}}],["values_typ",{"_index":958,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__repr__":{}},"title":{}}],["vari",{"_index":2248,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{}}],["variabl",{"_index":1160,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["varianc",{"_index":871,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{}},"title":{}}],["variat",{"_index":2269,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{}}],["variou",{"_index":101,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"changelog/":{},"changelog/#fixed_1":{}},"title":{}}],["vastli",{"_index":510,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2":{}},"title":{}}],["vector",{"_index":799,"text":{"api/config/":{},"api/instruments/":{}},"title":{"api/config/#vector-network-analyzer-vna":{},"api/instruments/#vector-network-analyzer-vna":{}}}],["vectornetworkanalys",{"_index":2221,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.SParameterData":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{}},"title":{"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{}}}],["vendor",{"_index":272,"text":{"installation/":{},"installation/#visa-backend-support":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{}},"title":{}}],["venv",{"_index":163,"text":{"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#standard-installation":{}},"title":{}}],["venv\\scripts\\activ",{"_index":169,"text":{"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#standard-installation":{}},"title":{}}],["veri",{"_index":877,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{}},"title":{}}],["verifi",{"_index":282,"text":{"installation/":{},"installation/#verifying-your-installation":{},"user_guide/errors/":{},"user_guide/errors/#debugging-tips":{}},"title":{"installation/#verifying-your-installation":{}}}],["version",{"_index":18,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Instrument.get_scpi_version":{},"changelog/":{},"changelog/#changelog":{},"installation/":{},"installation/#upgrading":{},"installation/#verifying-your-installation":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#other-useful-commands":{}},"title":{"api/config/#pytestlab.config.bench_config.BenchConfigExtended.version":{}}}],["vertic",{"_index":1389,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{}},"title":{}}],["via",{"_index":245,"text":{"api/backends/":{},"api/backends/#asynclambbackend":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Instrument.close":{},"api/instruments/#pytestlab.instruments.Instrument.connect_backend":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#simulation-support":{},"contributing/":{},"contributing/#need-help":{},"user_guide/cli/":{},"user_guide/cli/#command-line-interface":{}},"title":{}}],["violat",{"_index":2493,"text":{"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{}},"title":{}}],["virtual",{"_index":158,"text":{"api/config/":{},"api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig":{},"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#standard-installation":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{"api/config/#virtual-instrument":{}}}],["virtual_instru",{"_index":840,"text":{"api/config/":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["virtual_instrument_config",{"_index":838,"text":{"api/config/":{}},"title":{}}],["virtualinstrumentconfig",{"_index":839,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.virtual_instrument_config.VirtualInstrumentConfig":{}}}],["visa",{"_index":59,"text":{"api/backends/":{},"api/backends/#asyncvisabackend":{},"api/backends/#overview":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.connect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.disconnect":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"changelog/":{},"changelog/#changed":{},"installation/":{},"installation/#troubleshooting":{},"installation/#visa-backend-support":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-a-real-instrument":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{"installation/#visa-backend-support":{}}}],["visa_str",{"_index":450,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{}},"title":{}}],["visabackend",{"_index":1473,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{}},"title":{}}],["vna",{"_index":801,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.configure_s_parameter_sweep":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"profiles/gallery/":{},"profiles/gallery/#keysight-e5071c":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{}},"title":{"api/config/#vector-network-analyzer-vna":{},"api/instruments/#vector-network-analyzer-vna":{}}}],["vna_config",{"_index":802,"text":{"api/config/":{}},"title":{}}],["vnaconfig",{"_index":803,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser":{}},"title":{"api/config/#pytestlab.config.vna_config.VNAConfig":{}}}],["volatil",{"_index":1830,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{}},"title":{}}],["volt",{"_index":1405,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.setup":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeTriggerFacade.setup_edge":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"user_guide/simulation/":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{}}],["voltag",{"_index":737,"text":{"api/config/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--or-with-auto-parameter-extraction-from-session":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.measure_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_battery_cutoff_voltage":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_mode":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_range":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_slew_rate":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_transient_level":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.get_config":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.set_measurement_function":{},"api/instruments/#pytestlab.instruments.Multimeter.MultimeterConfigResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ChannelReadingResult":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_peak_to_peak":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeChannelFacade.measure_rms":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.__repr__":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.get_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelFacade.set":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.read_voltage":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/measurements/":{},"api/measurements/#example-usage":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/errors/":{},"user_guide/errors/#common-exceptions":{},"user_guide/simulation/":{},"user_guide/simulation/#advanced-simulation-features":{},"user_guide/simulation/#example-profile-with-simulation-logic":{}},"title":{"api/instruments/#pytestlab.instruments.PowerSupply.PSUChannelConfig.voltage":{}}}],["voltage_array",{"_index":1546,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["voltage_column_nam",{"_index":1545,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["voltage_dc",{"_index":782,"text":{"api/config/":{}},"title":{}}],["voltage_rang",{"_index":1744,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{},"profiles/creating/":{},"profiles/creating/#configuration-data-matches-powersupplyconfig-model":{}},"title":{}}],["voltage_set_bas",{"_index":1745,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{}},"title":{}}],["voltage_unit",{"_index":1801,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult.voltage_unit":{}}}],["voltage_unit_enum",{"_index":1938,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{}}],["voltage_unit_str",{"_index":1939,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{}}],["voltage_v",{"_index":1727,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{}},"title":{}}],["voltages_np",{"_index":1526,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{}},"title":{}}],["voltageunit",{"_index":626,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{}},"title":{"api/common/#pytestlab.common.enums.VoltageUnit":{}}}],["volum",{"_index":1768,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.FileSystemInfo":{}},"title":{}}],["vpp",{"_index":665,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{}},"title":{"api/common/#pytestlab.common.enums.VoltageUnit.VPP":{}}}],["vpp_ch{channel",{"_index":1485,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_voltage_peak_to_peak":{}},"title":{}}],["vrm",{"_index":666,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{}},"title":{"api/common/#pytestlab.common.enums.VoltageUnit.VRMS":{}}}],["vrms_ch{channel",{"_index":1482,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.measure_rms_voltage":{}},"title":{}}],["vs",{"_index":293,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade":{},"installation/":{},"installation/#next-steps":{},"user_guide/connecting/":{},"user_guide/connecting/#next-steps":{},"user_guide/connecting/#troubleshooting-connections":{},"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{}},"title":{"user_guide/async_vs_sync/":{}}}],["vstack",{"_index":983,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{}},"title":{}}],["vtype",{"_index":1399,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{}},"title":{}}],["vulner",{"_index":251,"text":{"contributing/":{},"contributing/#need-help":{}},"title":{}}],["w",{"_index":583,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{}},"title":{}}],["wait",{"_index":1342,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.franalysis_sweep":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#why-async":{}},"title":{}}],["wait_for_operation_complet",{"_index":1340,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}},"title":{"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{}}}],["walk",{"_index":2499,"text":{"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}},"title":{}}],["walkthrough",{"_index":2506,"text":{"user_guide/getting_started/":{},"user_guide/getting_started/#3-next-steps":{}},"title":{}}],["want",{"_index":2522,"text":{"user_guide/simulation/":{},"user_guide/simulation/#step-by-step-guide":{}},"title":{}}],["warn",{"_index":434,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.set_timeout":{},"api/common/":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.add":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.clear":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Instrument.get_error":{},"api/instruments/#pytestlab.instruments.Instrument.health_check":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_probe_attenuation":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.health_check":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_mode":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.configure_sensor":{},"api/instruments/#pytestlab.instruments.PowerMeter.PowerMeter.read_power":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.get_configuration":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.VectorNetworkAnalyser.VectorNetworkAnalyser.get_s_parameter_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{}},"title":{"api/common/#pytestlab.common.health.HealthReport.warnings":{},"api/common/#pytestlab.common.health.HealthStatus.WARNING":{}}}],["warn_msg",{"_index":1336,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{}},"title":{}}],["watt",{"_index":2181,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.set_load":{}},"title":{}}],["wave",{"_index":1591,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{}},"title":{}}],["wave_gen",{"_index":1613,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{}}}],["waveform",{"_index":769,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_scope_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquire_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#example-async-oscilloscope-measurement":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/getting_started/":{},"user_guide/getting_started/#2-your-first-instrument-simulated":{}},"title":{"api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig.waveforms":{},"api/config/#waveform-generator":{},"api/instruments/#waveform-generator":{}}}],["waveform_data",{"_index":1541,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{}},"title":{}}],["waveform_gener",{"_index":772,"text":{"api/config/":{},"profiles/gallery/":{},"profiles/gallery/#keysight-edu33212a":{}},"title":{}}],["waveform_generator_config",{"_index":770,"text":{"api/config/":{}},"title":{}}],["waveform_param_command",{"_index":1746,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WAVEFORM_PARAM_COMMANDS":{}}}],["waveform_typ",{"_index":1588,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{}},"title":{}}],["waveform_update_r",{"_index":768,"text":{"api/config/":{}},"title":{"api/config/#pytestlab.config.oscilloscope_config.OscilloscopeConfig.waveform_update_rate":{}}}],["waveformconfigresult",{"_index":1798,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{}}}],["waveformgener",{"_index":114,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.disable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.enable":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.clear_volatile_arbitrary_waveforms":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.delete_file_or_folder":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_burst":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_modulation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.enable_sweep":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_points":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_channel_configuration_summary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_free_volatile_arbitrary_memory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_hold_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_both":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_leading":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_transition_trailing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_ramp_symmetry":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_selected_arbitrary_waveform_name":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_duty_cycle":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_square_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.list_directory":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.select_arbitrary_waveform":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_depth":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_am_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_amplitude":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_angle_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_arbitrary_waveform_sample_rate":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_cycles":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_burst_period":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_fm_deviation":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_offset":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_load_impedance":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_reference":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_phase_unlock_error_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_spacing":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_start_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_stop_frequency":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sweep_time":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_mode":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_polarity":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_sync_output_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_slope":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_trigger_source":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_autorange_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_high":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limit_low":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_limits_state":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_voltage_unit":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.synchronize_phase_all_channels":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.trigger_now":{},"changelog/":{},"changelog/#added_2":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{}}}],["waveformgeneratorconfig",{"_index":771,"text":{"api/config/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.from_config":{}},"title":{"api/config/#pytestlab.config.waveform_generator_config.WaveformGeneratorConfig":{}}}],["waveformtyp",{"_index":621,"text":{"api/common/":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_dc":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_sin":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_arbitrary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_dc":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_ramp":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_sine":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_square":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.apply_waveform_settings":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_complete_config":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.set_function":{}},"title":{"api/common/#pytestlab.common.enums.WaveformType":{}}}],["way",{"_index":1654,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.ScopeAcquisitionFacade.get_acquisition_type":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformConfigResult":{},"profiles/creating/":{},"profiles/creating/#creating-profiles":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/connecting/":{},"user_guide/connecting/#connecting-to-instruments":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{}},"title":{}}],["wb",{"_index":576,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{}},"title":{}}],["we'r",{"_index":1001,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.__exit__":{}},"title":{}}],["weight",{"_index":1125,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.gwass":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{}},"title":{}}],["welcom",{"_index":143,"text":{"contributing/":{},"contributing/#code-of-conduct":{},"user_guide/getting_started/":{},"user_guide/getting_started/#getting-started-with-pytestlab":{}},"title":{}}],["well",{"_index":2474,"text":{"user_guide/cli/":{},"user_guide/cli/#validate":{}},"title":{}}],["wg",{"_index":1775,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{}},"title":{}}],["wgchannelfacad",{"_index":1774,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.channel":{}},"title":{"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade":{}}}],["wgen",{"_index":1407,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_trigger":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.function_display":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_amp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_freq":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_func":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wave_gen_offset":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_noise":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_ramp":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_square":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.wave_gen":{}},"title":{}}],["whether",{"_index":1032,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{}},"title":{}}],["width",{"_index":1599,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_wgen_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WGChannelFacade.setup_pulse":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.get_pulse_width":{}},"title":{}}],["window",{"_index":168,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_fft_data":{},"contributing/":{},"contributing/#getting-started":{},"installation/":{},"installation/#standard-installation":{}},"title":{}}],["window_typ",{"_index":1386,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{}},"title":{}}],["with_column",{"_index":1058,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.add_trial":{}},"title":{}}],["within",{"_index":1262,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.PowerSupply.PowerSupply.set_voltage":{}},"title":{}}],["without",{"_index":1121,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.get_all_errors":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.configure_measurement":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{}}],["word",{"_index":1620,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{}}],["work",{"_index":182,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.perform_fft":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad":{},"api/instruments/#pytestlab.instruments.Instrument.from_config":{},"api/measurements/":{},"api/measurements/#key-features":{},"contributing/":{},"contributing/#development-workflow":{},"installation/":{},"installation/#verifying-your-installation":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/cli/":{},"user_guide/cli/#bench-management-pytestlab-bench":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/simulation/":{},"user_guide/simulation/#further-reading":{},"user_guide/uncertainty/":{}},"title":{"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/simulation/#how-simulation-works":{},"user_guide/uncertainty/#working-with-ufloat-objects":{}}}],["workflow",{"_index":133,"text":{"api/measurements/":{},"api/measurements/#measurement-session":{},"contributing/":{},"contributing/#contributing-to-pytestlab":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#asynchronous-by-design":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#handling-uncertainty":{}},"title":{"contributing/#development-workflow":{}}}],["wrap",{"_index":546,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.__getattr__":{},"api/backends/#recordingbackend":{},"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#migrating-synchronous-scripts":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#custom-uncertainty-models":{}},"title":{}}],["wrap_funct",{"_index":1102,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{}}}],["wrapped_func",{"_index":1105,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.requires":{}},"title":{}}],["wrapper",{"_index":1104,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/experiments/#pytestlab.experiments.sweep.grid_sweep--with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.gwass--or-with-constraint":{},"api/experiments/#pytestlab.experiments.sweep.monte_carlo_sweep--with-constraint-function":{}},"title":{}}],["write",{"_index":410,"text":{"api/backends/":{},"api/backends/#extending-backends":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.query_raw":{},"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.close":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{},"api/errors/":{},"api/errors/#exceptions":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.Instrument.wait_for_operation_complete":{},"user_guide/async_vs_sync/":{},"user_guide/async_vs_sync/#in-a-jupyter-notebook-or-ipython":{},"user_guide/errors/":{},"user_guide/errors/#error-handling":{},"user_guide/simulation/":{},"user_guide/simulation/#when-to-use-simulation":{}},"title":{"api/backends/#pytestlab.instruments.backends.async_visa_backend.AsyncVisaBackend.write":{},"api/backends/#pytestlab.instruments.backends.lamb.AsyncLambBackend.write":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.write":{},"api/backends/#pytestlab.instruments.backends.sim_backend_v2.SimBackendV2.write":{}}}],["write_parquet",{"_index":1019,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.save_parquet":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.save":{}},"title":{}}],["written",{"_index":216,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"contributing/":{},"contributing/#documentation":{}},"title":{}}],["wrote",{"_index":1216,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{}},"title":{}}],["wt",{"_index":1393,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.configure_fft":{}},"title":{}}],["x",{"_index":966,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.results.MeasurementResult.__str__":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.DCActiveLoad.DCActiveLoad.fetch_datalogger_data":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_time_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.x":{}}}],["x_label",{"_index":2201,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{}},"title":{"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.x_label":{}}}],["xinc",{"_index":1533,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.xinc":{}}}],["xorg",{"_index":1534,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.xorg":{}}}],["xref",{"_index":1532,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.xref":{}}}],["y",{"_index":1083,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.get_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.set_channel_axis":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.SpectrumAnalyser.get_trace":{}},"title":{"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.y":{}}}],["y_label",{"_index":2202,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult":{}},"title":{"api/instruments/#pytestlab.instruments.SpectrumAnalyser.PlaceholderMeasurementResult.y_label":{}}}],["yaml",{"_index":83,"text":{"api/backends/":{},"api/backends/#backend-selection-logic":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/backends/#simbackendv2":{},"api/config/":{},"api/config/#instrument-configuration-models":{},"api/config/#pytestlab.config.dc_active_load_config.DCActiveLoadConfig":{},"api/config/#pytestlab.config.multimeter_config.MultimeterConfig":{},"api/instruments/":{},"api/instruments/#extending-drivers":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{},"changelog/":{},"changelog/#added_1":{},"profiles/creating/":{},"profiles/creating/#creating-a-new-profile":{},"profiles/creating/#creating-profiles":{},"profiles/creating/#example-power-supply-profile":{},"profiles/creating/#profile-structure":{},"profiles/creating/#tips":{},"profiles/gallery/":{},"profiles/gallery/#keysight-34460a":{},"profiles/gallery/#keysight-34470a":{},"profiles/gallery/#keysight-dsox1202g":{},"profiles/gallery/#keysight-dsox1204g":{},"profiles/gallery/#keysight-dsox3054g":{},"profiles/gallery/#keysight-e36313a":{},"profiles/gallery/#keysight-e5071c":{},"profiles/gallery/#keysight-edu33212a":{},"profiles/gallery/#keysight-edu34450a":{},"profiles/gallery/#keysight-edu36311a":{},"profiles/gallery/#keysight-el33133a":{},"profiles/gallery/#keysight-msox2024a":{},"profiles/gallery/#keysight-mxr404a":{},"profiles/gallery/#keysight-n9000a":{},"profiles/gallery/#keysight-u2000a":{},"user_guide/bench_descriptors/":{},"user_guide/bench_descriptors/#command-line-interface":{},"user_guide/bench_descriptors/#safety-limits":{},"user_guide/bench_descriptors/#the-benchyaml-file":{},"user_guide/bench_descriptors/#working-with-benches":{},"user_guide/cli/":{},"user_guide/cli/#bench-management-pytestlab-bench":{},"user_guide/cli/#id":{},"user_guide/cli/#ls":{},"user_guide/cli/#show":{},"user_guide/cli/#sim":{},"user_guide/cli/#validate_1":{},"user_guide/connecting/":{},"user_guide/connecting/#using-a-bench":{},"user_guide/connecting/#using-autoinstrument":{},"user_guide/errors/":{},"user_guide/errors/#catch-specific-exceptions":{},"user_guide/errors/#common-exceptions":{},"user_guide/errors/#use-async-with-for-cleanup":{},"user_guide/simulation/":{},"user_guide/simulation/#enabling-simulation":{},"user_guide/simulation/#example-profile-with-simulation-logic":{},"user_guide/simulation/#how-simulation-works":{},"user_guide/simulation/#simulation-mode":{},"user_guide/simulation/#step-by-step-guide":{},"user_guide/uncertainty/":{},"user_guide/uncertainty/#instrument-profiles-and-accuracy":{}},"title":{"user_guide/bench_descriptors/#the-benchyaml-file":{}}}],["yamlerror",{"_index":1257,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["ye",{"_index":1183,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.from_config":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_cdn":{},"api/instruments/#pytestlab.instruments.AutoInstrument.AutoInstrument.get_config_from_local":{}},"title":{}}],["yield",{"_index":1041,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.experiments.Experiment.__iter__":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}],["yinc",{"_index":1528,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.yinc":{}}}],["yorg",{"_index":1529,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.yorg":{}}}],["your_usernam",{"_index":154,"text":{"contributing/":{},"contributing/#getting-started":{}},"title":{}}],["yref",{"_index":1527,"text":{"api/instruments/":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Oscilloscope.read_channels":{},"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble":{}},"title":{"api/instruments/#pytestlab.instruments.Oscilloscope.Preamble.yref":{}}}],["z0",{"_index":571,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["za",{"_index":570,"text":{"api/backends/":{},"api/backends/#pytestlab.instruments.backends.recording_backend.RecordingBackend.generate_profile":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_binary":{},"api/instruments/#pytestlab.instruments.WaveformGenerator.WaveformGenerator.download_arbitrary_waveform_data_csv":{}},"title":{}}],["zero",{"_index":876,"text":{"api/config/":{},"api/config/#pytestlab.config.accuracy.AccuracySpec.calculate_std_dev":{},"api/instruments/":{},"api/instruments/#pytestlab.instruments.Instrument.run_self_test":{},"api/instruments/#pytestlab.instruments.Multimeter.Multimeter.measure":{}},"title":{}}],["zip",{"_index":1101,"text":{"api/experiments/":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.is_valid":{},"api/experiments/#pytestlab.experiments.sweep.ParameterSpace.wrap_function":{},"api/measurements/":{},"api/measurements/#pytestlab.measurements.MeasurementSession.run":{}},"title":{}}]],"pipeline":["stemmer"],"version":"2.3.9"}}